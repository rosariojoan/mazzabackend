// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package mazza

import (
	"bytes"
	"context"
	"embed"
	"errors"
	"fmt"
	"mazza/ent"
	"mazza/ent/accountingentry"
	"mazza/ent/employee"
	"mazza/ent/file"
	"mazza/ent/payable"
	"mazza/ent/product"
	"mazza/ent/receivable"
	"mazza/ent/token"
	"mazza/ent/treasury"
	"mazza/ent/userrole"
	"mazza/ent/workshift"
	"mazza/ent/worktask"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	AccountingEntry struct {
		Account     func(childComplexity int) int
		AccountType func(childComplexity int) int
		Amount      func(childComplexity int) int
		Company     func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		Date        func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		Group       func(childComplexity int) int
		ID          func(childComplexity int) int
		IsDebit     func(childComplexity int) int
		IsReversal  func(childComplexity int) int
		Label       func(childComplexity int) int
		Number      func(childComplexity int) int
		Reversed    func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		User        func(childComplexity int) int
	}

	AccountingEntryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	AccountingEntryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CashMovement struct {
		Amount     func(childComplexity int) int
		CreatedAt  func(childComplexity int) int
		Date       func(childComplexity int) int
		DeletedAt  func(childComplexity int) int
		EntryGroup func(childComplexity int) int
		ID         func(childComplexity int) int
		Treasury   func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
	}

	CashMovementConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CashMovementEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Company struct {
		AccountingEntries func(childComplexity int) int
		Address           func(childComplexity int) int
		AvailableRoles    func(childComplexity int) int
		BaseCurrency      func(childComplexity int) int
		CeoName           func(childComplexity int) int
		City              func(childComplexity int) int
		Country           func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		Customers         func(childComplexity int) int
		DaughterCompanies func(childComplexity int) int
		DeletedAt         func(childComplexity int) int
		Description       func(childComplexity int) int
		Email             func(childComplexity int) int
		Employees         func(childComplexity int) int
		EstablishedAt     func(childComplexity int) int
		Files             func(childComplexity int) int
		ID                func(childComplexity int) int
		LastEntryDate     func(childComplexity int) int
		LastInvoiceNumber func(childComplexity int) int
		Logo              func(childComplexity int) int
		Name              func(childComplexity int) int
		NumberOfEmployees func(childComplexity int) int
		ParentCompany     func(childComplexity int) int
		Phone             func(childComplexity int) int
		Products          func(childComplexity int) int
		Sector            func(childComplexity int) int
		Suppliers         func(childComplexity int) int
		TaxId             func(childComplexity int) int
		Tokens            func(childComplexity int) int
		Treasuries        func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		Users             func(childComplexity int) int
		VatRate           func(childComplexity int) int
		Website           func(childComplexity int) int
		WorkShifts        func(childComplexity int) int
		WorkTags          func(childComplexity int) int
		WorkTasks         func(childComplexity int) int
	}

	Customer struct {
		Address     func(childComplexity int) int
		City        func(childComplexity int) int
		Company     func(childComplexity int) int
		Country     func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		Email       func(childComplexity int) int
		ID          func(childComplexity int) int
		IsDefault   func(childComplexity int) int
		Name        func(childComplexity int) int
		Phone       func(childComplexity int) int
		Receivables func(childComplexity int) int
		TaxId       func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	Employee struct {
		ApprovedWorkShifts func(childComplexity int) int
		AssignedTasks      func(childComplexity int) int
		Company            func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		DeletedAt          func(childComplexity int) int
		Email              func(childComplexity int) int
		Gender             func(childComplexity int) int
		ID                 func(childComplexity int) int
		Leader             func(childComplexity int) int
		Name               func(childComplexity int) int
		Phone              func(childComplexity int) int
		Position           func(childComplexity int) int
		Subordinates       func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		User               func(childComplexity int) int
		WorkShifts         func(childComplexity int) int
	}

	File struct {
		Category    func(childComplexity int) int
		Company     func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		Extension   func(childComplexity int) int
		ID          func(childComplexity int) int
		Product     func(childComplexity int) int
		Size        func(childComplexity int) int
		URL         func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	FileConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	FileEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	LoginOutput struct {
		AccessToken  func(childComplexity int) int
		Companies    func(childComplexity int) int
		CompanyID    func(childComplexity int) int
		RefreshToken func(childComplexity int) int
		TTL          func(childComplexity int) int
		User         func(childComplexity int) int
	}

	Mutation struct {
		CreateCompany     func(childComplexity int, input *ent.CreateCompanyInput) int
		CreateCustomer    func(childComplexity int, input ent.CreateCustomerInput) int
		CreateEmployee    func(childComplexity int, input ent.CreateEmployeeInput) int
		CreateProduct     func(childComplexity int, input ent.CreateProductInput) int
		CreateSupplier    func(childComplexity int, input ent.CreateSupplierInput) int
		CreateTreasury    func(childComplexity int, input ent.CreateTreasuryInput) int
		CreateUser        func(childComplexity int, input ent.CreateUserInput) int
		CreateUserRole    func(childComplexity int, input ent.CreateUserRoleInput) int
		CreateWorkShift   func(childComplexity int, input ent.CreateWorkshiftInput) int
		CreateWorkTag     func(childComplexity int, input ent.CreateWorktagInput) int
		CreateWorkTask    func(childComplexity int, input ent.CreateWorktaskInput) int
		DeleteCustomer    func(childComplexity int, id int) int
		DeleteEmployee    func(childComplexity int, id int) int
		DeleteProduct     func(childComplexity int, id int) int
		DeleteSupplier    func(childComplexity int, id int) int
		DeleteTreasury    func(childComplexity int, id int) int
		DeleteWorkShift   func(childComplexity int, id int) int
		DeleteWorkTag     func(childComplexity int, id int) int
		DeleteWorkTask    func(childComplexity int, id int) int
		ForgotPassword    func(childComplexity int, username string) int
		InvitedUserSignup func(childComplexity int, input InvitedUserSignupInput) int
		ResetPassword     func(childComplexity int, input ResetPasswordInput) int
		Signup            func(childComplexity int, input SignupInput) int
		Unsubscribe       func(childComplexity int, id int) int
		UpdateCompany     func(childComplexity int, id int, input ent.UpdateCompanyInput) int
		UpdateCustomer    func(childComplexity int, id int, input ent.UpdateCustomerInput) int
		UpdateEmployee    func(childComplexity int, id int, input ent.UpdateEmployeeInput) int
		UpdateProduct     func(childComplexity int, id int, input ent.UpdateProductInput) int
		UpdateSupplier    func(childComplexity int, id int, input ent.UpdateSupplierInput) int
		UpdateTreasury    func(childComplexity int, id int, input ent.UpdateTreasuryInput) int
		UpdateUser        func(childComplexity int, id int, input ent.UpdateUserInput) int
		UpdateWorkShift   func(childComplexity int, id int, input ent.UpdateWorkshiftInput) int
		UpdateWorkTag     func(childComplexity int, id int, input ent.UpdateWorktagInput) int
		UpdateWorkTask    func(childComplexity int, id int, input ent.UpdateWorktaskInput) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	Payable struct {
		CreatedAt          func(childComplexity int) int
		Date               func(childComplexity int) int
		DaysDue            func(childComplexity int) int
		DeletedAt          func(childComplexity int) int
		EntryGroup         func(childComplexity int) int
		ID                 func(childComplexity int) int
		OutstandingBalance func(childComplexity int) int
		Status             func(childComplexity int) int
		Supplier           func(childComplexity int) int
		TotalTransaction   func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
	}

	Product struct {
		Category         func(childComplexity int) int
		Company          func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		DeletedAt        func(childComplexity int) int
		Description      func(childComplexity int) int
		ID               func(childComplexity int) int
		IsDefault        func(childComplexity int) int
		MinimumStock     func(childComplexity int) int
		Name             func(childComplexity int) int
		Pictures         func(childComplexity int) int
		Price            func(childComplexity int) int
		ProductMovements func(childComplexity int) int
		Sku              func(childComplexity int) int
		Stock            func(childComplexity int) int
		UnitCost         func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
	}

	ProductMovement struct {
		AverageCost func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		EntryGroup  func(childComplexity int) int
		ID          func(childComplexity int) int
		Price       func(childComplexity int) int
		Product     func(childComplexity int) int
		Quantity    func(childComplexity int) int
		UnitCost    func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	ProductMovementConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ProductMovementEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Query struct {
		AccountingEntries        func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.AccountingEntryOrder, where *ent.AccountingEntryWhereInput) int
		AggregateWorkShift       func(childComplexity int, where *ent.WorkshiftWhereInput, groupBy []ShiftGroupBy) int
		CashMovements            func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, where *ent.CashMovementWhereInput) int
		Companies                func(childComplexity int, where *ent.CompanyWhereInput) int
		Customers                func(childComplexity int, where *ent.CustomerWhereInput) int
		Employees                func(childComplexity int, where *ent.EmployeeWhereInput) int
		Files                    func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.FileOrder, where *ent.FileWhereInput) int
		LowStock                 func(childComplexity int, where *ent.ProductWhereInput) int
		Node                     func(childComplexity int, id int) int
		Nodes                    func(childComplexity int, ids []int) int
		NumberOfLowStock         func(childComplexity int, where *ent.ProductWhereInput) int
		NumberOfOutOfStock       func(childComplexity int, where *ent.ProductWhereInput) int
		NumberOfProducts         func(childComplexity int, where *ent.ProductWhereInput) int
		Payables                 func(childComplexity int, where *ent.PayableWhereInput) int
		ProductMovements         func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, where *ent.ProductMovementWhereInput) int
		Products                 func(childComplexity int, where *ent.ProductWhereInput) int
		Receivables              func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, where *ent.ReceivableWhereInput) int
		Suppliers                func(childComplexity int, where *ent.SupplierWhereInput) int
		Tokens                   func(childComplexity int) int
		Treasuries               func(childComplexity int, where *ent.TreasuryWhereInput) int
		UserRoles                func(childComplexity int, where *ent.UserRoleWhereInput) int
		Users                    func(childComplexity int, where *ent.UserWhereInput) int
		VerifyPasswordResetToken func(childComplexity int, token string) int
		WorkShifts               func(childComplexity int, where *ent.WorkshiftWhereInput) int
		WorkTags                 func(childComplexity int, where *ent.WorktagWhereInput) int
		WorkTasks                func(childComplexity int, where *ent.WorktaskWhereInput) int
		Workshifts               func(childComplexity int) int
	}

	Receivable struct {
		CreatedAt          func(childComplexity int) int
		Customer           func(childComplexity int) int
		Date               func(childComplexity int) int
		DaysDue            func(childComplexity int) int
		DeletedAt          func(childComplexity int) int
		EntryGroup         func(childComplexity int) int
		ID                 func(childComplexity int) int
		OutstandingBalance func(childComplexity int) int
		Status             func(childComplexity int) int
		TotalTransaction   func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
	}

	ReceivableConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ReceivableEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Supplier struct {
		Address     func(childComplexity int) int
		City        func(childComplexity int) int
		Company     func(childComplexity int) int
		Country     func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		Email       func(childComplexity int) int
		ID          func(childComplexity int) int
		IsDefault   func(childComplexity int) int
		Name        func(childComplexity int) int
		Payables    func(childComplexity int) int
		Phone       func(childComplexity int) int
		TaxId       func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	Token struct {
		Category func(childComplexity int) int
		Company  func(childComplexity int) int
		Expiry   func(childComplexity int) int
		ID       func(childComplexity int) int
		Token    func(childComplexity int) int
		User     func(childComplexity int) int
	}

	Treasury struct {
		AccountNumber func(childComplexity int) int
		Balance       func(childComplexity int) int
		BankName      func(childComplexity int) int
		CashMovements func(childComplexity int) int
		Category      func(childComplexity int) int
		Company       func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		Currency      func(childComplexity int) int
		DeletedAt     func(childComplexity int) int
		Description   func(childComplexity int) int
		ID            func(childComplexity int) int
		Iban          func(childComplexity int) int
		IsDefault     func(childComplexity int) int
		IsMainAccount func(childComplexity int) int
		Name          func(childComplexity int) int
		SwiftCode     func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
	}

	User struct {
		AccountingEntries func(childComplexity int) int
		AssignedRoles     func(childComplexity int) int
		Company           func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		CreatedTasks      func(childComplexity int) int
		DeletedAt         func(childComplexity int) int
		Disabled          func(childComplexity int) int
		Email             func(childComplexity int) int
		Employee          func(childComplexity int) int
		FcmToken          func(childComplexity int) int
		ID                func(childComplexity int) int
		Name              func(childComplexity int) int
		NotVerified       func(childComplexity int) int
		Tokens            func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		Username          func(childComplexity int) int
	}

	UserRole struct {
		Company func(childComplexity int) int
		ID      func(childComplexity int) int
		Role    func(childComplexity int) int
		User    func(childComplexity int) int
	}

	WorkShiftAggregationPayload struct {
		Count             func(childComplexity int) int
		Date              func(childComplexity int) int
		DurationInMinutes func(childComplexity int) int
		PendingCount      func(childComplexity int) int
	}

	Workshift struct {
		ApprovedAt       func(childComplexity int) int
		ApprovedBy       func(childComplexity int) int
		ClockIn          func(childComplexity int) int
		ClockInLocation  func(childComplexity int) int
		ClockOut         func(childComplexity int) int
		ClockOutLocation func(childComplexity int) int
		Company          func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		DeletedAt        func(childComplexity int) int
		Description      func(childComplexity int) int
		EditRequest      func(childComplexity int) int
		Employee         func(childComplexity int) int
		ID               func(childComplexity int) int
		Note             func(childComplexity int) int
		Status           func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
		WorkShift        func(childComplexity int) int
		WorkTask         func(childComplexity int) int
	}

	Worktag struct {
		Color     func(childComplexity int) int
		Company   func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		WorkTasks func(childComplexity int) int
	}

	Worktask struct {
		AssignedTo  func(childComplexity int) int
		Company     func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		EndTime     func(childComplexity int) int
		ID          func(childComplexity int) int
		StartTime   func(childComplexity int) int
		Status      func(childComplexity int) int
		Subtasks    func(childComplexity int) int
		Title       func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		WorkShifts  func(childComplexity int) int
		WorkTags    func(childComplexity int) int
	}
}

type MutationResolver interface {
	Signup(ctx context.Context, input SignupInput) (*LoginOutput, error)
	CreateCompany(ctx context.Context, input *ent.CreateCompanyInput) (*ent.Company, error)
	UpdateCompany(ctx context.Context, id int, input ent.UpdateCompanyInput) (*ent.Company, error)
	InvitedUserSignup(ctx context.Context, input InvitedUserSignupInput) (*ent.User, error)
	CreateUser(ctx context.Context, input ent.CreateUserInput) (*ent.User, error)
	UpdateUser(ctx context.Context, id int, input ent.UpdateUserInput) (*ent.User, error)
	ForgotPassword(ctx context.Context, username string) (string, error)
	ResetPassword(ctx context.Context, input ResetPasswordInput) (bool, error)
	Unsubscribe(ctx context.Context, id int) (bool, error)
	CreateUserRole(ctx context.Context, input ent.CreateUserRoleInput) (bool, error)
	CreateCustomer(ctx context.Context, input ent.CreateCustomerInput) (*ent.Customer, error)
	UpdateCustomer(ctx context.Context, id int, input ent.UpdateCustomerInput) (*ent.Customer, error)
	DeleteCustomer(ctx context.Context, id int) (bool, error)
	CreateEmployee(ctx context.Context, input ent.CreateEmployeeInput) (*ent.Employee, error)
	UpdateEmployee(ctx context.Context, id int, input ent.UpdateEmployeeInput) (*ent.Employee, error)
	DeleteEmployee(ctx context.Context, id int) (bool, error)
	CreateProduct(ctx context.Context, input ent.CreateProductInput) (*ent.Product, error)
	UpdateProduct(ctx context.Context, id int, input ent.UpdateProductInput) (*ent.Product, error)
	DeleteProduct(ctx context.Context, id int) (bool, error)
	CreateSupplier(ctx context.Context, input ent.CreateSupplierInput) (*ent.Supplier, error)
	UpdateSupplier(ctx context.Context, id int, input ent.UpdateSupplierInput) (*ent.Supplier, error)
	DeleteSupplier(ctx context.Context, id int) (bool, error)
	CreateTreasury(ctx context.Context, input ent.CreateTreasuryInput) (*ent.Treasury, error)
	UpdateTreasury(ctx context.Context, id int, input ent.UpdateTreasuryInput) (*ent.Treasury, error)
	DeleteTreasury(ctx context.Context, id int) (bool, error)
	CreateWorkShift(ctx context.Context, input ent.CreateWorkshiftInput) (*ent.Workshift, error)
	UpdateWorkShift(ctx context.Context, id int, input ent.UpdateWorkshiftInput) (*ent.Workshift, error)
	DeleteWorkShift(ctx context.Context, id int) (bool, error)
	CreateWorkTask(ctx context.Context, input ent.CreateWorktaskInput) (*ent.Worktask, error)
	UpdateWorkTask(ctx context.Context, id int, input ent.UpdateWorktaskInput) (*ent.Worktask, error)
	DeleteWorkTask(ctx context.Context, id int) (bool, error)
	CreateWorkTag(ctx context.Context, input ent.CreateWorktagInput) (*ent.Worktag, error)
	UpdateWorkTag(ctx context.Context, id int, input ent.UpdateWorktagInput) (*ent.Worktag, error)
	DeleteWorkTag(ctx context.Context, id int) (bool, error)
}
type QueryResolver interface {
	Node(ctx context.Context, id int) (ent.Noder, error)
	Nodes(ctx context.Context, ids []int) ([]ent.Noder, error)
	AccountingEntries(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.AccountingEntryOrder, where *ent.AccountingEntryWhereInput) (*ent.AccountingEntryConnection, error)
	CashMovements(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, where *ent.CashMovementWhereInput) (*ent.CashMovementConnection, error)
	Files(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.FileOrder, where *ent.FileWhereInput) (*ent.FileConnection, error)
	ProductMovements(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, where *ent.ProductMovementWhereInput) (*ent.ProductMovementConnection, error)
	Receivables(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, where *ent.ReceivableWhereInput) (*ent.ReceivableConnection, error)
	Tokens(ctx context.Context) ([]*ent.Token, error)
	Workshifts(ctx context.Context) ([]*ent.Workshift, error)
	VerifyPasswordResetToken(ctx context.Context, token string) (bool, error)
	Companies(ctx context.Context, where *ent.CompanyWhereInput) ([]*ent.Company, error)
	Customers(ctx context.Context, where *ent.CustomerWhereInput) ([]*ent.Customer, error)
	Employees(ctx context.Context, where *ent.EmployeeWhereInput) ([]*ent.Employee, error)
	Payables(ctx context.Context, where *ent.PayableWhereInput) ([]*ent.Payable, error)
	Products(ctx context.Context, where *ent.ProductWhereInput) ([]*ent.Product, error)
	LowStock(ctx context.Context, where *ent.ProductWhereInput) ([]*ent.Product, error)
	NumberOfProducts(ctx context.Context, where *ent.ProductWhereInput) (int, error)
	NumberOfLowStock(ctx context.Context, where *ent.ProductWhereInput) (int, error)
	NumberOfOutOfStock(ctx context.Context, where *ent.ProductWhereInput) (int, error)
	Suppliers(ctx context.Context, where *ent.SupplierWhereInput) ([]*ent.Supplier, error)
	Treasuries(ctx context.Context, where *ent.TreasuryWhereInput) ([]*ent.Treasury, error)
	Users(ctx context.Context, where *ent.UserWhereInput) ([]*ent.User, error)
	UserRoles(ctx context.Context, where *ent.UserRoleWhereInput) ([]*ent.UserRole, error)
	WorkShifts(ctx context.Context, where *ent.WorkshiftWhereInput) ([]*ent.Workshift, error)
	AggregateWorkShift(ctx context.Context, where *ent.WorkshiftWhereInput, groupBy []ShiftGroupBy) ([]*WorkShiftAggregationPayload, error)
	WorkTags(ctx context.Context, where *ent.WorktagWhereInput) ([]*ent.Worktag, error)
	WorkTasks(ctx context.Context, where *ent.WorktaskWhereInput) ([]*ent.Worktask, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "AccountingEntry.account":
		if e.complexity.AccountingEntry.Account == nil {
			break
		}

		return e.complexity.AccountingEntry.Account(childComplexity), true

	case "AccountingEntry.accounttype":
		if e.complexity.AccountingEntry.AccountType == nil {
			break
		}

		return e.complexity.AccountingEntry.AccountType(childComplexity), true

	case "AccountingEntry.amount":
		if e.complexity.AccountingEntry.Amount == nil {
			break
		}

		return e.complexity.AccountingEntry.Amount(childComplexity), true

	case "AccountingEntry.company":
		if e.complexity.AccountingEntry.Company == nil {
			break
		}

		return e.complexity.AccountingEntry.Company(childComplexity), true

	case "AccountingEntry.createdat":
		if e.complexity.AccountingEntry.CreatedAt == nil {
			break
		}

		return e.complexity.AccountingEntry.CreatedAt(childComplexity), true

	case "AccountingEntry.date":
		if e.complexity.AccountingEntry.Date == nil {
			break
		}

		return e.complexity.AccountingEntry.Date(childComplexity), true

	case "AccountingEntry.deletedat":
		if e.complexity.AccountingEntry.DeletedAt == nil {
			break
		}

		return e.complexity.AccountingEntry.DeletedAt(childComplexity), true

	case "AccountingEntry.description":
		if e.complexity.AccountingEntry.Description == nil {
			break
		}

		return e.complexity.AccountingEntry.Description(childComplexity), true

	case "AccountingEntry.group":
		if e.complexity.AccountingEntry.Group == nil {
			break
		}

		return e.complexity.AccountingEntry.Group(childComplexity), true

	case "AccountingEntry.id":
		if e.complexity.AccountingEntry.ID == nil {
			break
		}

		return e.complexity.AccountingEntry.ID(childComplexity), true

	case "AccountingEntry.isdebit":
		if e.complexity.AccountingEntry.IsDebit == nil {
			break
		}

		return e.complexity.AccountingEntry.IsDebit(childComplexity), true

	case "AccountingEntry.isreversal":
		if e.complexity.AccountingEntry.IsReversal == nil {
			break
		}

		return e.complexity.AccountingEntry.IsReversal(childComplexity), true

	case "AccountingEntry.label":
		if e.complexity.AccountingEntry.Label == nil {
			break
		}

		return e.complexity.AccountingEntry.Label(childComplexity), true

	case "AccountingEntry.number":
		if e.complexity.AccountingEntry.Number == nil {
			break
		}

		return e.complexity.AccountingEntry.Number(childComplexity), true

	case "AccountingEntry.reversed":
		if e.complexity.AccountingEntry.Reversed == nil {
			break
		}

		return e.complexity.AccountingEntry.Reversed(childComplexity), true

	case "AccountingEntry.updatedat":
		if e.complexity.AccountingEntry.UpdatedAt == nil {
			break
		}

		return e.complexity.AccountingEntry.UpdatedAt(childComplexity), true

	case "AccountingEntry.user":
		if e.complexity.AccountingEntry.User == nil {
			break
		}

		return e.complexity.AccountingEntry.User(childComplexity), true

	case "AccountingEntryConnection.edges":
		if e.complexity.AccountingEntryConnection.Edges == nil {
			break
		}

		return e.complexity.AccountingEntryConnection.Edges(childComplexity), true

	case "AccountingEntryConnection.pageInfo":
		if e.complexity.AccountingEntryConnection.PageInfo == nil {
			break
		}

		return e.complexity.AccountingEntryConnection.PageInfo(childComplexity), true

	case "AccountingEntryConnection.totalCount":
		if e.complexity.AccountingEntryConnection.TotalCount == nil {
			break
		}

		return e.complexity.AccountingEntryConnection.TotalCount(childComplexity), true

	case "AccountingEntryEdge.cursor":
		if e.complexity.AccountingEntryEdge.Cursor == nil {
			break
		}

		return e.complexity.AccountingEntryEdge.Cursor(childComplexity), true

	case "AccountingEntryEdge.node":
		if e.complexity.AccountingEntryEdge.Node == nil {
			break
		}

		return e.complexity.AccountingEntryEdge.Node(childComplexity), true

	case "CashMovement.amount":
		if e.complexity.CashMovement.Amount == nil {
			break
		}

		return e.complexity.CashMovement.Amount(childComplexity), true

	case "CashMovement.createdat":
		if e.complexity.CashMovement.CreatedAt == nil {
			break
		}

		return e.complexity.CashMovement.CreatedAt(childComplexity), true

	case "CashMovement.date":
		if e.complexity.CashMovement.Date == nil {
			break
		}

		return e.complexity.CashMovement.Date(childComplexity), true

	case "CashMovement.deletedat":
		if e.complexity.CashMovement.DeletedAt == nil {
			break
		}

		return e.complexity.CashMovement.DeletedAt(childComplexity), true

	case "CashMovement.entrygroup":
		if e.complexity.CashMovement.EntryGroup == nil {
			break
		}

		return e.complexity.CashMovement.EntryGroup(childComplexity), true

	case "CashMovement.id":
		if e.complexity.CashMovement.ID == nil {
			break
		}

		return e.complexity.CashMovement.ID(childComplexity), true

	case "CashMovement.treasury":
		if e.complexity.CashMovement.Treasury == nil {
			break
		}

		return e.complexity.CashMovement.Treasury(childComplexity), true

	case "CashMovement.updatedat":
		if e.complexity.CashMovement.UpdatedAt == nil {
			break
		}

		return e.complexity.CashMovement.UpdatedAt(childComplexity), true

	case "CashMovementConnection.edges":
		if e.complexity.CashMovementConnection.Edges == nil {
			break
		}

		return e.complexity.CashMovementConnection.Edges(childComplexity), true

	case "CashMovementConnection.pageInfo":
		if e.complexity.CashMovementConnection.PageInfo == nil {
			break
		}

		return e.complexity.CashMovementConnection.PageInfo(childComplexity), true

	case "CashMovementConnection.totalCount":
		if e.complexity.CashMovementConnection.TotalCount == nil {
			break
		}

		return e.complexity.CashMovementConnection.TotalCount(childComplexity), true

	case "CashMovementEdge.cursor":
		if e.complexity.CashMovementEdge.Cursor == nil {
			break
		}

		return e.complexity.CashMovementEdge.Cursor(childComplexity), true

	case "CashMovementEdge.node":
		if e.complexity.CashMovementEdge.Node == nil {
			break
		}

		return e.complexity.CashMovementEdge.Node(childComplexity), true

	case "Company.accountingentries":
		if e.complexity.Company.AccountingEntries == nil {
			break
		}

		return e.complexity.Company.AccountingEntries(childComplexity), true

	case "Company.address":
		if e.complexity.Company.Address == nil {
			break
		}

		return e.complexity.Company.Address(childComplexity), true

	case "Company.availableroles":
		if e.complexity.Company.AvailableRoles == nil {
			break
		}

		return e.complexity.Company.AvailableRoles(childComplexity), true

	case "Company.basecurrency":
		if e.complexity.Company.BaseCurrency == nil {
			break
		}

		return e.complexity.Company.BaseCurrency(childComplexity), true

	case "Company.ceoname":
		if e.complexity.Company.CeoName == nil {
			break
		}

		return e.complexity.Company.CeoName(childComplexity), true

	case "Company.city":
		if e.complexity.Company.City == nil {
			break
		}

		return e.complexity.Company.City(childComplexity), true

	case "Company.country":
		if e.complexity.Company.Country == nil {
			break
		}

		return e.complexity.Company.Country(childComplexity), true

	case "Company.createdat":
		if e.complexity.Company.CreatedAt == nil {
			break
		}

		return e.complexity.Company.CreatedAt(childComplexity), true

	case "Company.customers":
		if e.complexity.Company.Customers == nil {
			break
		}

		return e.complexity.Company.Customers(childComplexity), true

	case "Company.daughtercompanies":
		if e.complexity.Company.DaughterCompanies == nil {
			break
		}

		return e.complexity.Company.DaughterCompanies(childComplexity), true

	case "Company.deletedat":
		if e.complexity.Company.DeletedAt == nil {
			break
		}

		return e.complexity.Company.DeletedAt(childComplexity), true

	case "Company.description":
		if e.complexity.Company.Description == nil {
			break
		}

		return e.complexity.Company.Description(childComplexity), true

	case "Company.email":
		if e.complexity.Company.Email == nil {
			break
		}

		return e.complexity.Company.Email(childComplexity), true

	case "Company.employees":
		if e.complexity.Company.Employees == nil {
			break
		}

		return e.complexity.Company.Employees(childComplexity), true

	case "Company.establishedat":
		if e.complexity.Company.EstablishedAt == nil {
			break
		}

		return e.complexity.Company.EstablishedAt(childComplexity), true

	case "Company.files":
		if e.complexity.Company.Files == nil {
			break
		}

		return e.complexity.Company.Files(childComplexity), true

	case "Company.id":
		if e.complexity.Company.ID == nil {
			break
		}

		return e.complexity.Company.ID(childComplexity), true

	case "Company.lastentrydate":
		if e.complexity.Company.LastEntryDate == nil {
			break
		}

		return e.complexity.Company.LastEntryDate(childComplexity), true

	case "Company.lastinvoicenumber":
		if e.complexity.Company.LastInvoiceNumber == nil {
			break
		}

		return e.complexity.Company.LastInvoiceNumber(childComplexity), true

	case "Company.logo":
		if e.complexity.Company.Logo == nil {
			break
		}

		return e.complexity.Company.Logo(childComplexity), true

	case "Company.name":
		if e.complexity.Company.Name == nil {
			break
		}

		return e.complexity.Company.Name(childComplexity), true

	case "Company.numberofemployees":
		if e.complexity.Company.NumberOfEmployees == nil {
			break
		}

		return e.complexity.Company.NumberOfEmployees(childComplexity), true

	case "Company.parentcompany":
		if e.complexity.Company.ParentCompany == nil {
			break
		}

		return e.complexity.Company.ParentCompany(childComplexity), true

	case "Company.phone":
		if e.complexity.Company.Phone == nil {
			break
		}

		return e.complexity.Company.Phone(childComplexity), true

	case "Company.products":
		if e.complexity.Company.Products == nil {
			break
		}

		return e.complexity.Company.Products(childComplexity), true

	case "Company.sector":
		if e.complexity.Company.Sector == nil {
			break
		}

		return e.complexity.Company.Sector(childComplexity), true

	case "Company.suppliers":
		if e.complexity.Company.Suppliers == nil {
			break
		}

		return e.complexity.Company.Suppliers(childComplexity), true

	case "Company.taxid":
		if e.complexity.Company.TaxId == nil {
			break
		}

		return e.complexity.Company.TaxId(childComplexity), true

	case "Company.tokens":
		if e.complexity.Company.Tokens == nil {
			break
		}

		return e.complexity.Company.Tokens(childComplexity), true

	case "Company.treasuries":
		if e.complexity.Company.Treasuries == nil {
			break
		}

		return e.complexity.Company.Treasuries(childComplexity), true

	case "Company.updatedat":
		if e.complexity.Company.UpdatedAt == nil {
			break
		}

		return e.complexity.Company.UpdatedAt(childComplexity), true

	case "Company.users":
		if e.complexity.Company.Users == nil {
			break
		}

		return e.complexity.Company.Users(childComplexity), true

	case "Company.vatrate":
		if e.complexity.Company.VatRate == nil {
			break
		}

		return e.complexity.Company.VatRate(childComplexity), true

	case "Company.website":
		if e.complexity.Company.Website == nil {
			break
		}

		return e.complexity.Company.Website(childComplexity), true

	case "Company.workshifts":
		if e.complexity.Company.WorkShifts == nil {
			break
		}

		return e.complexity.Company.WorkShifts(childComplexity), true

	case "Company.worktags":
		if e.complexity.Company.WorkTags == nil {
			break
		}

		return e.complexity.Company.WorkTags(childComplexity), true

	case "Company.worktasks":
		if e.complexity.Company.WorkTasks == nil {
			break
		}

		return e.complexity.Company.WorkTasks(childComplexity), true

	case "Customer.address":
		if e.complexity.Customer.Address == nil {
			break
		}

		return e.complexity.Customer.Address(childComplexity), true

	case "Customer.city":
		if e.complexity.Customer.City == nil {
			break
		}

		return e.complexity.Customer.City(childComplexity), true

	case "Customer.company":
		if e.complexity.Customer.Company == nil {
			break
		}

		return e.complexity.Customer.Company(childComplexity), true

	case "Customer.country":
		if e.complexity.Customer.Country == nil {
			break
		}

		return e.complexity.Customer.Country(childComplexity), true

	case "Customer.createdat":
		if e.complexity.Customer.CreatedAt == nil {
			break
		}

		return e.complexity.Customer.CreatedAt(childComplexity), true

	case "Customer.deletedat":
		if e.complexity.Customer.DeletedAt == nil {
			break
		}

		return e.complexity.Customer.DeletedAt(childComplexity), true

	case "Customer.description":
		if e.complexity.Customer.Description == nil {
			break
		}

		return e.complexity.Customer.Description(childComplexity), true

	case "Customer.email":
		if e.complexity.Customer.Email == nil {
			break
		}

		return e.complexity.Customer.Email(childComplexity), true

	case "Customer.id":
		if e.complexity.Customer.ID == nil {
			break
		}

		return e.complexity.Customer.ID(childComplexity), true

	case "Customer.isdefault":
		if e.complexity.Customer.IsDefault == nil {
			break
		}

		return e.complexity.Customer.IsDefault(childComplexity), true

	case "Customer.name":
		if e.complexity.Customer.Name == nil {
			break
		}

		return e.complexity.Customer.Name(childComplexity), true

	case "Customer.phone":
		if e.complexity.Customer.Phone == nil {
			break
		}

		return e.complexity.Customer.Phone(childComplexity), true

	case "Customer.receivables":
		if e.complexity.Customer.Receivables == nil {
			break
		}

		return e.complexity.Customer.Receivables(childComplexity), true

	case "Customer.taxid":
		if e.complexity.Customer.TaxId == nil {
			break
		}

		return e.complexity.Customer.TaxId(childComplexity), true

	case "Customer.updatedat":
		if e.complexity.Customer.UpdatedAt == nil {
			break
		}

		return e.complexity.Customer.UpdatedAt(childComplexity), true

	case "Employee.approvedworkshifts":
		if e.complexity.Employee.ApprovedWorkShifts == nil {
			break
		}

		return e.complexity.Employee.ApprovedWorkShifts(childComplexity), true

	case "Employee.assignedtasks":
		if e.complexity.Employee.AssignedTasks == nil {
			break
		}

		return e.complexity.Employee.AssignedTasks(childComplexity), true

	case "Employee.company":
		if e.complexity.Employee.Company == nil {
			break
		}

		return e.complexity.Employee.Company(childComplexity), true

	case "Employee.createdat":
		if e.complexity.Employee.CreatedAt == nil {
			break
		}

		return e.complexity.Employee.CreatedAt(childComplexity), true

	case "Employee.deletedat":
		if e.complexity.Employee.DeletedAt == nil {
			break
		}

		return e.complexity.Employee.DeletedAt(childComplexity), true

	case "Employee.email":
		if e.complexity.Employee.Email == nil {
			break
		}

		return e.complexity.Employee.Email(childComplexity), true

	case "Employee.gender":
		if e.complexity.Employee.Gender == nil {
			break
		}

		return e.complexity.Employee.Gender(childComplexity), true

	case "Employee.id":
		if e.complexity.Employee.ID == nil {
			break
		}

		return e.complexity.Employee.ID(childComplexity), true

	case "Employee.leader":
		if e.complexity.Employee.Leader == nil {
			break
		}

		return e.complexity.Employee.Leader(childComplexity), true

	case "Employee.name":
		if e.complexity.Employee.Name == nil {
			break
		}

		return e.complexity.Employee.Name(childComplexity), true

	case "Employee.phone":
		if e.complexity.Employee.Phone == nil {
			break
		}

		return e.complexity.Employee.Phone(childComplexity), true

	case "Employee.position":
		if e.complexity.Employee.Position == nil {
			break
		}

		return e.complexity.Employee.Position(childComplexity), true

	case "Employee.subordinates":
		if e.complexity.Employee.Subordinates == nil {
			break
		}

		return e.complexity.Employee.Subordinates(childComplexity), true

	case "Employee.updatedat":
		if e.complexity.Employee.UpdatedAt == nil {
			break
		}

		return e.complexity.Employee.UpdatedAt(childComplexity), true

	case "Employee.user":
		if e.complexity.Employee.User == nil {
			break
		}

		return e.complexity.Employee.User(childComplexity), true

	case "Employee.workshifts":
		if e.complexity.Employee.WorkShifts == nil {
			break
		}

		return e.complexity.Employee.WorkShifts(childComplexity), true

	case "File.category":
		if e.complexity.File.Category == nil {
			break
		}

		return e.complexity.File.Category(childComplexity), true

	case "File.company":
		if e.complexity.File.Company == nil {
			break
		}

		return e.complexity.File.Company(childComplexity), true

	case "File.createdat":
		if e.complexity.File.CreatedAt == nil {
			break
		}

		return e.complexity.File.CreatedAt(childComplexity), true

	case "File.deletedat":
		if e.complexity.File.DeletedAt == nil {
			break
		}

		return e.complexity.File.DeletedAt(childComplexity), true

	case "File.description":
		if e.complexity.File.Description == nil {
			break
		}

		return e.complexity.File.Description(childComplexity), true

	case "File.extension":
		if e.complexity.File.Extension == nil {
			break
		}

		return e.complexity.File.Extension(childComplexity), true

	case "File.id":
		if e.complexity.File.ID == nil {
			break
		}

		return e.complexity.File.ID(childComplexity), true

	case "File.product":
		if e.complexity.File.Product == nil {
			break
		}

		return e.complexity.File.Product(childComplexity), true

	case "File.size":
		if e.complexity.File.Size == nil {
			break
		}

		return e.complexity.File.Size(childComplexity), true

	case "File.url":
		if e.complexity.File.URL == nil {
			break
		}

		return e.complexity.File.URL(childComplexity), true

	case "File.updatedat":
		if e.complexity.File.UpdatedAt == nil {
			break
		}

		return e.complexity.File.UpdatedAt(childComplexity), true

	case "FileConnection.edges":
		if e.complexity.FileConnection.Edges == nil {
			break
		}

		return e.complexity.FileConnection.Edges(childComplexity), true

	case "FileConnection.pageInfo":
		if e.complexity.FileConnection.PageInfo == nil {
			break
		}

		return e.complexity.FileConnection.PageInfo(childComplexity), true

	case "FileConnection.totalCount":
		if e.complexity.FileConnection.TotalCount == nil {
			break
		}

		return e.complexity.FileConnection.TotalCount(childComplexity), true

	case "FileEdge.cursor":
		if e.complexity.FileEdge.Cursor == nil {
			break
		}

		return e.complexity.FileEdge.Cursor(childComplexity), true

	case "FileEdge.node":
		if e.complexity.FileEdge.Node == nil {
			break
		}

		return e.complexity.FileEdge.Node(childComplexity), true

	case "LoginOutput.accessToken":
		if e.complexity.LoginOutput.AccessToken == nil {
			break
		}

		return e.complexity.LoginOutput.AccessToken(childComplexity), true

	case "LoginOutput.companies":
		if e.complexity.LoginOutput.Companies == nil {
			break
		}

		return e.complexity.LoginOutput.Companies(childComplexity), true

	case "LoginOutput.companyId":
		if e.complexity.LoginOutput.CompanyID == nil {
			break
		}

		return e.complexity.LoginOutput.CompanyID(childComplexity), true

	case "LoginOutput.refreshToken":
		if e.complexity.LoginOutput.RefreshToken == nil {
			break
		}

		return e.complexity.LoginOutput.RefreshToken(childComplexity), true

	case "LoginOutput.ttl":
		if e.complexity.LoginOutput.TTL == nil {
			break
		}

		return e.complexity.LoginOutput.TTL(childComplexity), true

	case "LoginOutput.user":
		if e.complexity.LoginOutput.User == nil {
			break
		}

		return e.complexity.LoginOutput.User(childComplexity), true

	case "Mutation.createCompany":
		if e.complexity.Mutation.CreateCompany == nil {
			break
		}

		args, err := ec.field_Mutation_createCompany_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCompany(childComplexity, args["input"].(*ent.CreateCompanyInput)), true

	case "Mutation.createCustomer":
		if e.complexity.Mutation.CreateCustomer == nil {
			break
		}

		args, err := ec.field_Mutation_createCustomer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCustomer(childComplexity, args["input"].(ent.CreateCustomerInput)), true

	case "Mutation.createEmployee":
		if e.complexity.Mutation.CreateEmployee == nil {
			break
		}

		args, err := ec.field_Mutation_createEmployee_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateEmployee(childComplexity, args["input"].(ent.CreateEmployeeInput)), true

	case "Mutation.createProduct":
		if e.complexity.Mutation.CreateProduct == nil {
			break
		}

		args, err := ec.field_Mutation_createProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProduct(childComplexity, args["input"].(ent.CreateProductInput)), true

	case "Mutation.createSupplier":
		if e.complexity.Mutation.CreateSupplier == nil {
			break
		}

		args, err := ec.field_Mutation_createSupplier_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSupplier(childComplexity, args["input"].(ent.CreateSupplierInput)), true

	case "Mutation.createTreasury":
		if e.complexity.Mutation.CreateTreasury == nil {
			break
		}

		args, err := ec.field_Mutation_createTreasury_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTreasury(childComplexity, args["input"].(ent.CreateTreasuryInput)), true

	case "Mutation.createUser":
		if e.complexity.Mutation.CreateUser == nil {
			break
		}

		args, err := ec.field_Mutation_createUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUser(childComplexity, args["input"].(ent.CreateUserInput)), true

	case "Mutation.createUserRole":
		if e.complexity.Mutation.CreateUserRole == nil {
			break
		}

		args, err := ec.field_Mutation_createUserRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUserRole(childComplexity, args["input"].(ent.CreateUserRoleInput)), true

	case "Mutation.createWorkShift":
		if e.complexity.Mutation.CreateWorkShift == nil {
			break
		}

		args, err := ec.field_Mutation_createWorkShift_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateWorkShift(childComplexity, args["input"].(ent.CreateWorkshiftInput)), true

	case "Mutation.createWorkTag":
		if e.complexity.Mutation.CreateWorkTag == nil {
			break
		}

		args, err := ec.field_Mutation_createWorkTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateWorkTag(childComplexity, args["input"].(ent.CreateWorktagInput)), true

	case "Mutation.createWorkTask":
		if e.complexity.Mutation.CreateWorkTask == nil {
			break
		}

		args, err := ec.field_Mutation_createWorkTask_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateWorkTask(childComplexity, args["input"].(ent.CreateWorktaskInput)), true

	case "Mutation.deleteCustomer":
		if e.complexity.Mutation.DeleteCustomer == nil {
			break
		}

		args, err := ec.field_Mutation_deleteCustomer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCustomer(childComplexity, args["id"].(int)), true

	case "Mutation.deleteEmployee":
		if e.complexity.Mutation.DeleteEmployee == nil {
			break
		}

		args, err := ec.field_Mutation_deleteEmployee_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEmployee(childComplexity, args["id"].(int)), true

	case "Mutation.deleteProduct":
		if e.complexity.Mutation.DeleteProduct == nil {
			break
		}

		args, err := ec.field_Mutation_deleteProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteProduct(childComplexity, args["id"].(int)), true

	case "Mutation.deleteSupplier":
		if e.complexity.Mutation.DeleteSupplier == nil {
			break
		}

		args, err := ec.field_Mutation_deleteSupplier_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSupplier(childComplexity, args["id"].(int)), true

	case "Mutation.deleteTreasury":
		if e.complexity.Mutation.DeleteTreasury == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTreasury_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTreasury(childComplexity, args["id"].(int)), true

	case "Mutation.deleteWorkShift":
		if e.complexity.Mutation.DeleteWorkShift == nil {
			break
		}

		args, err := ec.field_Mutation_deleteWorkShift_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteWorkShift(childComplexity, args["id"].(int)), true

	case "Mutation.deleteWorkTag":
		if e.complexity.Mutation.DeleteWorkTag == nil {
			break
		}

		args, err := ec.field_Mutation_deleteWorkTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteWorkTag(childComplexity, args["id"].(int)), true

	case "Mutation.deleteWorkTask":
		if e.complexity.Mutation.DeleteWorkTask == nil {
			break
		}

		args, err := ec.field_Mutation_deleteWorkTask_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteWorkTask(childComplexity, args["id"].(int)), true

	case "Mutation.forgotPassword":
		if e.complexity.Mutation.ForgotPassword == nil {
			break
		}

		args, err := ec.field_Mutation_forgotPassword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ForgotPassword(childComplexity, args["username"].(string)), true

	case "Mutation.invitedUserSignup":
		if e.complexity.Mutation.InvitedUserSignup == nil {
			break
		}

		args, err := ec.field_Mutation_invitedUserSignup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InvitedUserSignup(childComplexity, args["input"].(InvitedUserSignupInput)), true

	case "Mutation.resetPassword":
		if e.complexity.Mutation.ResetPassword == nil {
			break
		}

		args, err := ec.field_Mutation_resetPassword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ResetPassword(childComplexity, args["input"].(ResetPasswordInput)), true

	case "Mutation.signup":
		if e.complexity.Mutation.Signup == nil {
			break
		}

		args, err := ec.field_Mutation_signup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Signup(childComplexity, args["input"].(SignupInput)), true

	case "Mutation.unsubscribe":
		if e.complexity.Mutation.Unsubscribe == nil {
			break
		}

		args, err := ec.field_Mutation_unsubscribe_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Unsubscribe(childComplexity, args["id"].(int)), true

	case "Mutation.updateCompany":
		if e.complexity.Mutation.UpdateCompany == nil {
			break
		}

		args, err := ec.field_Mutation_updateCompany_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCompany(childComplexity, args["id"].(int), args["input"].(ent.UpdateCompanyInput)), true

	case "Mutation.updateCustomer":
		if e.complexity.Mutation.UpdateCustomer == nil {
			break
		}

		args, err := ec.field_Mutation_updateCustomer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCustomer(childComplexity, args["id"].(int), args["input"].(ent.UpdateCustomerInput)), true

	case "Mutation.updateEmployee":
		if e.complexity.Mutation.UpdateEmployee == nil {
			break
		}

		args, err := ec.field_Mutation_updateEmployee_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEmployee(childComplexity, args["id"].(int), args["input"].(ent.UpdateEmployeeInput)), true

	case "Mutation.updateProduct":
		if e.complexity.Mutation.UpdateProduct == nil {
			break
		}

		args, err := ec.field_Mutation_updateProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProduct(childComplexity, args["id"].(int), args["input"].(ent.UpdateProductInput)), true

	case "Mutation.updateSupplier":
		if e.complexity.Mutation.UpdateSupplier == nil {
			break
		}

		args, err := ec.field_Mutation_updateSupplier_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSupplier(childComplexity, args["id"].(int), args["input"].(ent.UpdateSupplierInput)), true

	case "Mutation.updateTreasury":
		if e.complexity.Mutation.UpdateTreasury == nil {
			break
		}

		args, err := ec.field_Mutation_updateTreasury_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTreasury(childComplexity, args["id"].(int), args["input"].(ent.UpdateTreasuryInput)), true

	case "Mutation.updateUser":
		if e.complexity.Mutation.UpdateUser == nil {
			break
		}

		args, err := ec.field_Mutation_updateUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUser(childComplexity, args["id"].(int), args["input"].(ent.UpdateUserInput)), true

	case "Mutation.updateWorkShift":
		if e.complexity.Mutation.UpdateWorkShift == nil {
			break
		}

		args, err := ec.field_Mutation_updateWorkShift_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateWorkShift(childComplexity, args["id"].(int), args["input"].(ent.UpdateWorkshiftInput)), true

	case "Mutation.updateWorkTag":
		if e.complexity.Mutation.UpdateWorkTag == nil {
			break
		}

		args, err := ec.field_Mutation_updateWorkTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateWorkTag(childComplexity, args["id"].(int), args["input"].(ent.UpdateWorktagInput)), true

	case "Mutation.updateWorkTask":
		if e.complexity.Mutation.UpdateWorkTask == nil {
			break
		}

		args, err := ec.field_Mutation_updateWorkTask_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateWorkTask(childComplexity, args["id"].(int), args["input"].(ent.UpdateWorktaskInput)), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "Payable.createdat":
		if e.complexity.Payable.CreatedAt == nil {
			break
		}

		return e.complexity.Payable.CreatedAt(childComplexity), true

	case "Payable.date":
		if e.complexity.Payable.Date == nil {
			break
		}

		return e.complexity.Payable.Date(childComplexity), true

	case "Payable.daysdue":
		if e.complexity.Payable.DaysDue == nil {
			break
		}

		return e.complexity.Payable.DaysDue(childComplexity), true

	case "Payable.deletedat":
		if e.complexity.Payable.DeletedAt == nil {
			break
		}

		return e.complexity.Payable.DeletedAt(childComplexity), true

	case "Payable.entrygroup":
		if e.complexity.Payable.EntryGroup == nil {
			break
		}

		return e.complexity.Payable.EntryGroup(childComplexity), true

	case "Payable.id":
		if e.complexity.Payable.ID == nil {
			break
		}

		return e.complexity.Payable.ID(childComplexity), true

	case "Payable.outstandingbalance":
		if e.complexity.Payable.OutstandingBalance == nil {
			break
		}

		return e.complexity.Payable.OutstandingBalance(childComplexity), true

	case "Payable.status":
		if e.complexity.Payable.Status == nil {
			break
		}

		return e.complexity.Payable.Status(childComplexity), true

	case "Payable.supplier":
		if e.complexity.Payable.Supplier == nil {
			break
		}

		return e.complexity.Payable.Supplier(childComplexity), true

	case "Payable.totaltransaction":
		if e.complexity.Payable.TotalTransaction == nil {
			break
		}

		return e.complexity.Payable.TotalTransaction(childComplexity), true

	case "Payable.updatedat":
		if e.complexity.Payable.UpdatedAt == nil {
			break
		}

		return e.complexity.Payable.UpdatedAt(childComplexity), true

	case "Product.category":
		if e.complexity.Product.Category == nil {
			break
		}

		return e.complexity.Product.Category(childComplexity), true

	case "Product.company":
		if e.complexity.Product.Company == nil {
			break
		}

		return e.complexity.Product.Company(childComplexity), true

	case "Product.createdat":
		if e.complexity.Product.CreatedAt == nil {
			break
		}

		return e.complexity.Product.CreatedAt(childComplexity), true

	case "Product.deletedat":
		if e.complexity.Product.DeletedAt == nil {
			break
		}

		return e.complexity.Product.DeletedAt(childComplexity), true

	case "Product.description":
		if e.complexity.Product.Description == nil {
			break
		}

		return e.complexity.Product.Description(childComplexity), true

	case "Product.id":
		if e.complexity.Product.ID == nil {
			break
		}

		return e.complexity.Product.ID(childComplexity), true

	case "Product.isdefault":
		if e.complexity.Product.IsDefault == nil {
			break
		}

		return e.complexity.Product.IsDefault(childComplexity), true

	case "Product.minimumstock":
		if e.complexity.Product.MinimumStock == nil {
			break
		}

		return e.complexity.Product.MinimumStock(childComplexity), true

	case "Product.name":
		if e.complexity.Product.Name == nil {
			break
		}

		return e.complexity.Product.Name(childComplexity), true

	case "Product.pictures":
		if e.complexity.Product.Pictures == nil {
			break
		}

		return e.complexity.Product.Pictures(childComplexity), true

	case "Product.price":
		if e.complexity.Product.Price == nil {
			break
		}

		return e.complexity.Product.Price(childComplexity), true

	case "Product.productmovements":
		if e.complexity.Product.ProductMovements == nil {
			break
		}

		return e.complexity.Product.ProductMovements(childComplexity), true

	case "Product.sku":
		if e.complexity.Product.Sku == nil {
			break
		}

		return e.complexity.Product.Sku(childComplexity), true

	case "Product.stock":
		if e.complexity.Product.Stock == nil {
			break
		}

		return e.complexity.Product.Stock(childComplexity), true

	case "Product.unitcost":
		if e.complexity.Product.UnitCost == nil {
			break
		}

		return e.complexity.Product.UnitCost(childComplexity), true

	case "Product.updatedat":
		if e.complexity.Product.UpdatedAt == nil {
			break
		}

		return e.complexity.Product.UpdatedAt(childComplexity), true

	case "ProductMovement.averagecost":
		if e.complexity.ProductMovement.AverageCost == nil {
			break
		}

		return e.complexity.ProductMovement.AverageCost(childComplexity), true

	case "ProductMovement.createdat":
		if e.complexity.ProductMovement.CreatedAt == nil {
			break
		}

		return e.complexity.ProductMovement.CreatedAt(childComplexity), true

	case "ProductMovement.deletedat":
		if e.complexity.ProductMovement.DeletedAt == nil {
			break
		}

		return e.complexity.ProductMovement.DeletedAt(childComplexity), true

	case "ProductMovement.entrygroup":
		if e.complexity.ProductMovement.EntryGroup == nil {
			break
		}

		return e.complexity.ProductMovement.EntryGroup(childComplexity), true

	case "ProductMovement.id":
		if e.complexity.ProductMovement.ID == nil {
			break
		}

		return e.complexity.ProductMovement.ID(childComplexity), true

	case "ProductMovement.price":
		if e.complexity.ProductMovement.Price == nil {
			break
		}

		return e.complexity.ProductMovement.Price(childComplexity), true

	case "ProductMovement.product":
		if e.complexity.ProductMovement.Product == nil {
			break
		}

		return e.complexity.ProductMovement.Product(childComplexity), true

	case "ProductMovement.quantity":
		if e.complexity.ProductMovement.Quantity == nil {
			break
		}

		return e.complexity.ProductMovement.Quantity(childComplexity), true

	case "ProductMovement.unitcost":
		if e.complexity.ProductMovement.UnitCost == nil {
			break
		}

		return e.complexity.ProductMovement.UnitCost(childComplexity), true

	case "ProductMovement.updatedat":
		if e.complexity.ProductMovement.UpdatedAt == nil {
			break
		}

		return e.complexity.ProductMovement.UpdatedAt(childComplexity), true

	case "ProductMovementConnection.edges":
		if e.complexity.ProductMovementConnection.Edges == nil {
			break
		}

		return e.complexity.ProductMovementConnection.Edges(childComplexity), true

	case "ProductMovementConnection.pageInfo":
		if e.complexity.ProductMovementConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProductMovementConnection.PageInfo(childComplexity), true

	case "ProductMovementConnection.totalCount":
		if e.complexity.ProductMovementConnection.TotalCount == nil {
			break
		}

		return e.complexity.ProductMovementConnection.TotalCount(childComplexity), true

	case "ProductMovementEdge.cursor":
		if e.complexity.ProductMovementEdge.Cursor == nil {
			break
		}

		return e.complexity.ProductMovementEdge.Cursor(childComplexity), true

	case "ProductMovementEdge.node":
		if e.complexity.ProductMovementEdge.Node == nil {
			break
		}

		return e.complexity.ProductMovementEdge.Node(childComplexity), true

	case "Query.accountingEntries":
		if e.complexity.Query.AccountingEntries == nil {
			break
		}

		args, err := ec.field_Query_accountingEntries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AccountingEntries(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].(*ent.AccountingEntryOrder), args["where"].(*ent.AccountingEntryWhereInput)), true

	case "Query.aggregateWorkShift":
		if e.complexity.Query.AggregateWorkShift == nil {
			break
		}

		args, err := ec.field_Query_aggregateWorkShift_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AggregateWorkShift(childComplexity, args["where"].(*ent.WorkshiftWhereInput), args["groupBy"].([]ShiftGroupBy)), true

	case "Query.cashMovements":
		if e.complexity.Query.CashMovements == nil {
			break
		}

		args, err := ec.field_Query_cashMovements_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CashMovements(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["where"].(*ent.CashMovementWhereInput)), true

	case "Query.companies":
		if e.complexity.Query.Companies == nil {
			break
		}

		args, err := ec.field_Query_companies_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Companies(childComplexity, args["where"].(*ent.CompanyWhereInput)), true

	case "Query.customers":
		if e.complexity.Query.Customers == nil {
			break
		}

		args, err := ec.field_Query_customers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Customers(childComplexity, args["where"].(*ent.CustomerWhereInput)), true

	case "Query.employees":
		if e.complexity.Query.Employees == nil {
			break
		}

		args, err := ec.field_Query_employees_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Employees(childComplexity, args["where"].(*ent.EmployeeWhereInput)), true

	case "Query.files":
		if e.complexity.Query.Files == nil {
			break
		}

		args, err := ec.field_Query_files_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Files(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].(*ent.FileOrder), args["where"].(*ent.FileWhereInput)), true

	case "Query.lowStock":
		if e.complexity.Query.LowStock == nil {
			break
		}

		args, err := ec.field_Query_lowStock_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LowStock(childComplexity, args["where"].(*ent.ProductWhereInput)), true

	case "Query.node":
		if e.complexity.Query.Node == nil {
			break
		}

		args, err := ec.field_Query_node_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Node(childComplexity, args["id"].(int)), true

	case "Query.nodes":
		if e.complexity.Query.Nodes == nil {
			break
		}

		args, err := ec.field_Query_nodes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Nodes(childComplexity, args["ids"].([]int)), true

	case "Query.numberOfLowStock":
		if e.complexity.Query.NumberOfLowStock == nil {
			break
		}

		args, err := ec.field_Query_numberOfLowStock_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NumberOfLowStock(childComplexity, args["where"].(*ent.ProductWhereInput)), true

	case "Query.numberOfOutOfStock":
		if e.complexity.Query.NumberOfOutOfStock == nil {
			break
		}

		args, err := ec.field_Query_numberOfOutOfStock_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NumberOfOutOfStock(childComplexity, args["where"].(*ent.ProductWhereInput)), true

	case "Query.numberOfProducts":
		if e.complexity.Query.NumberOfProducts == nil {
			break
		}

		args, err := ec.field_Query_numberOfProducts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NumberOfProducts(childComplexity, args["where"].(*ent.ProductWhereInput)), true

	case "Query.payables":
		if e.complexity.Query.Payables == nil {
			break
		}

		args, err := ec.field_Query_payables_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Payables(childComplexity, args["where"].(*ent.PayableWhereInput)), true

	case "Query.productMovements":
		if e.complexity.Query.ProductMovements == nil {
			break
		}

		args, err := ec.field_Query_productMovements_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProductMovements(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["where"].(*ent.ProductMovementWhereInput)), true

	case "Query.products":
		if e.complexity.Query.Products == nil {
			break
		}

		args, err := ec.field_Query_products_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Products(childComplexity, args["where"].(*ent.ProductWhereInput)), true

	case "Query.receivables":
		if e.complexity.Query.Receivables == nil {
			break
		}

		args, err := ec.field_Query_receivables_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Receivables(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["where"].(*ent.ReceivableWhereInput)), true

	case "Query.suppliers":
		if e.complexity.Query.Suppliers == nil {
			break
		}

		args, err := ec.field_Query_suppliers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Suppliers(childComplexity, args["where"].(*ent.SupplierWhereInput)), true

	case "Query.tokens":
		if e.complexity.Query.Tokens == nil {
			break
		}

		return e.complexity.Query.Tokens(childComplexity), true

	case "Query.treasuries":
		if e.complexity.Query.Treasuries == nil {
			break
		}

		args, err := ec.field_Query_treasuries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Treasuries(childComplexity, args["where"].(*ent.TreasuryWhereInput)), true

	case "Query.userRoles":
		if e.complexity.Query.UserRoles == nil {
			break
		}

		args, err := ec.field_Query_userRoles_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserRoles(childComplexity, args["where"].(*ent.UserRoleWhereInput)), true

	case "Query.users":
		if e.complexity.Query.Users == nil {
			break
		}

		args, err := ec.field_Query_users_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Users(childComplexity, args["where"].(*ent.UserWhereInput)), true

	case "Query.verifyPasswordResetToken":
		if e.complexity.Query.VerifyPasswordResetToken == nil {
			break
		}

		args, err := ec.field_Query_verifyPasswordResetToken_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VerifyPasswordResetToken(childComplexity, args["token"].(string)), true

	case "Query.workShifts":
		if e.complexity.Query.WorkShifts == nil {
			break
		}

		args, err := ec.field_Query_workShifts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.WorkShifts(childComplexity, args["where"].(*ent.WorkshiftWhereInput)), true

	case "Query.workTags":
		if e.complexity.Query.WorkTags == nil {
			break
		}

		args, err := ec.field_Query_workTags_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.WorkTags(childComplexity, args["where"].(*ent.WorktagWhereInput)), true

	case "Query.workTasks":
		if e.complexity.Query.WorkTasks == nil {
			break
		}

		args, err := ec.field_Query_workTasks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.WorkTasks(childComplexity, args["where"].(*ent.WorktaskWhereInput)), true

	case "Query.workshifts":
		if e.complexity.Query.Workshifts == nil {
			break
		}

		return e.complexity.Query.Workshifts(childComplexity), true

	case "Receivable.createdat":
		if e.complexity.Receivable.CreatedAt == nil {
			break
		}

		return e.complexity.Receivable.CreatedAt(childComplexity), true

	case "Receivable.customer":
		if e.complexity.Receivable.Customer == nil {
			break
		}

		return e.complexity.Receivable.Customer(childComplexity), true

	case "Receivable.date":
		if e.complexity.Receivable.Date == nil {
			break
		}

		return e.complexity.Receivable.Date(childComplexity), true

	case "Receivable.daysdue":
		if e.complexity.Receivable.DaysDue == nil {
			break
		}

		return e.complexity.Receivable.DaysDue(childComplexity), true

	case "Receivable.deletedat":
		if e.complexity.Receivable.DeletedAt == nil {
			break
		}

		return e.complexity.Receivable.DeletedAt(childComplexity), true

	case "Receivable.entrygroup":
		if e.complexity.Receivable.EntryGroup == nil {
			break
		}

		return e.complexity.Receivable.EntryGroup(childComplexity), true

	case "Receivable.id":
		if e.complexity.Receivable.ID == nil {
			break
		}

		return e.complexity.Receivable.ID(childComplexity), true

	case "Receivable.outstandingbalance":
		if e.complexity.Receivable.OutstandingBalance == nil {
			break
		}

		return e.complexity.Receivable.OutstandingBalance(childComplexity), true

	case "Receivable.status":
		if e.complexity.Receivable.Status == nil {
			break
		}

		return e.complexity.Receivable.Status(childComplexity), true

	case "Receivable.totaltransaction":
		if e.complexity.Receivable.TotalTransaction == nil {
			break
		}

		return e.complexity.Receivable.TotalTransaction(childComplexity), true

	case "Receivable.updatedat":
		if e.complexity.Receivable.UpdatedAt == nil {
			break
		}

		return e.complexity.Receivable.UpdatedAt(childComplexity), true

	case "ReceivableConnection.edges":
		if e.complexity.ReceivableConnection.Edges == nil {
			break
		}

		return e.complexity.ReceivableConnection.Edges(childComplexity), true

	case "ReceivableConnection.pageInfo":
		if e.complexity.ReceivableConnection.PageInfo == nil {
			break
		}

		return e.complexity.ReceivableConnection.PageInfo(childComplexity), true

	case "ReceivableConnection.totalCount":
		if e.complexity.ReceivableConnection.TotalCount == nil {
			break
		}

		return e.complexity.ReceivableConnection.TotalCount(childComplexity), true

	case "ReceivableEdge.cursor":
		if e.complexity.ReceivableEdge.Cursor == nil {
			break
		}

		return e.complexity.ReceivableEdge.Cursor(childComplexity), true

	case "ReceivableEdge.node":
		if e.complexity.ReceivableEdge.Node == nil {
			break
		}

		return e.complexity.ReceivableEdge.Node(childComplexity), true

	case "Supplier.address":
		if e.complexity.Supplier.Address == nil {
			break
		}

		return e.complexity.Supplier.Address(childComplexity), true

	case "Supplier.city":
		if e.complexity.Supplier.City == nil {
			break
		}

		return e.complexity.Supplier.City(childComplexity), true

	case "Supplier.company":
		if e.complexity.Supplier.Company == nil {
			break
		}

		return e.complexity.Supplier.Company(childComplexity), true

	case "Supplier.country":
		if e.complexity.Supplier.Country == nil {
			break
		}

		return e.complexity.Supplier.Country(childComplexity), true

	case "Supplier.createdat":
		if e.complexity.Supplier.CreatedAt == nil {
			break
		}

		return e.complexity.Supplier.CreatedAt(childComplexity), true

	case "Supplier.deletedat":
		if e.complexity.Supplier.DeletedAt == nil {
			break
		}

		return e.complexity.Supplier.DeletedAt(childComplexity), true

	case "Supplier.description":
		if e.complexity.Supplier.Description == nil {
			break
		}

		return e.complexity.Supplier.Description(childComplexity), true

	case "Supplier.email":
		if e.complexity.Supplier.Email == nil {
			break
		}

		return e.complexity.Supplier.Email(childComplexity), true

	case "Supplier.id":
		if e.complexity.Supplier.ID == nil {
			break
		}

		return e.complexity.Supplier.ID(childComplexity), true

	case "Supplier.isdefault":
		if e.complexity.Supplier.IsDefault == nil {
			break
		}

		return e.complexity.Supplier.IsDefault(childComplexity), true

	case "Supplier.name":
		if e.complexity.Supplier.Name == nil {
			break
		}

		return e.complexity.Supplier.Name(childComplexity), true

	case "Supplier.payables":
		if e.complexity.Supplier.Payables == nil {
			break
		}

		return e.complexity.Supplier.Payables(childComplexity), true

	case "Supplier.phone":
		if e.complexity.Supplier.Phone == nil {
			break
		}

		return e.complexity.Supplier.Phone(childComplexity), true

	case "Supplier.taxid":
		if e.complexity.Supplier.TaxId == nil {
			break
		}

		return e.complexity.Supplier.TaxId(childComplexity), true

	case "Supplier.updatedat":
		if e.complexity.Supplier.UpdatedAt == nil {
			break
		}

		return e.complexity.Supplier.UpdatedAt(childComplexity), true

	case "Token.category":
		if e.complexity.Token.Category == nil {
			break
		}

		return e.complexity.Token.Category(childComplexity), true

	case "Token.company":
		if e.complexity.Token.Company == nil {
			break
		}

		return e.complexity.Token.Company(childComplexity), true

	case "Token.expiry":
		if e.complexity.Token.Expiry == nil {
			break
		}

		return e.complexity.Token.Expiry(childComplexity), true

	case "Token.id":
		if e.complexity.Token.ID == nil {
			break
		}

		return e.complexity.Token.ID(childComplexity), true

	case "Token.token":
		if e.complexity.Token.Token == nil {
			break
		}

		return e.complexity.Token.Token(childComplexity), true

	case "Token.user":
		if e.complexity.Token.User == nil {
			break
		}

		return e.complexity.Token.User(childComplexity), true

	case "Treasury.accountnumber":
		if e.complexity.Treasury.AccountNumber == nil {
			break
		}

		return e.complexity.Treasury.AccountNumber(childComplexity), true

	case "Treasury.balance":
		if e.complexity.Treasury.Balance == nil {
			break
		}

		return e.complexity.Treasury.Balance(childComplexity), true

	case "Treasury.bankname":
		if e.complexity.Treasury.BankName == nil {
			break
		}

		return e.complexity.Treasury.BankName(childComplexity), true

	case "Treasury.cashmovements":
		if e.complexity.Treasury.CashMovements == nil {
			break
		}

		return e.complexity.Treasury.CashMovements(childComplexity), true

	case "Treasury.category":
		if e.complexity.Treasury.Category == nil {
			break
		}

		return e.complexity.Treasury.Category(childComplexity), true

	case "Treasury.company":
		if e.complexity.Treasury.Company == nil {
			break
		}

		return e.complexity.Treasury.Company(childComplexity), true

	case "Treasury.createdat":
		if e.complexity.Treasury.CreatedAt == nil {
			break
		}

		return e.complexity.Treasury.CreatedAt(childComplexity), true

	case "Treasury.currency":
		if e.complexity.Treasury.Currency == nil {
			break
		}

		return e.complexity.Treasury.Currency(childComplexity), true

	case "Treasury.deletedat":
		if e.complexity.Treasury.DeletedAt == nil {
			break
		}

		return e.complexity.Treasury.DeletedAt(childComplexity), true

	case "Treasury.description":
		if e.complexity.Treasury.Description == nil {
			break
		}

		return e.complexity.Treasury.Description(childComplexity), true

	case "Treasury.id":
		if e.complexity.Treasury.ID == nil {
			break
		}

		return e.complexity.Treasury.ID(childComplexity), true

	case "Treasury.iban":
		if e.complexity.Treasury.Iban == nil {
			break
		}

		return e.complexity.Treasury.Iban(childComplexity), true

	case "Treasury.isdefault":
		if e.complexity.Treasury.IsDefault == nil {
			break
		}

		return e.complexity.Treasury.IsDefault(childComplexity), true

	case "Treasury.ismainaccount":
		if e.complexity.Treasury.IsMainAccount == nil {
			break
		}

		return e.complexity.Treasury.IsMainAccount(childComplexity), true

	case "Treasury.name":
		if e.complexity.Treasury.Name == nil {
			break
		}

		return e.complexity.Treasury.Name(childComplexity), true

	case "Treasury.swiftcode":
		if e.complexity.Treasury.SwiftCode == nil {
			break
		}

		return e.complexity.Treasury.SwiftCode(childComplexity), true

	case "Treasury.updatedat":
		if e.complexity.Treasury.UpdatedAt == nil {
			break
		}

		return e.complexity.Treasury.UpdatedAt(childComplexity), true

	case "User.accountingentries":
		if e.complexity.User.AccountingEntries == nil {
			break
		}

		return e.complexity.User.AccountingEntries(childComplexity), true

	case "User.assignedroles":
		if e.complexity.User.AssignedRoles == nil {
			break
		}

		return e.complexity.User.AssignedRoles(childComplexity), true

	case "User.company":
		if e.complexity.User.Company == nil {
			break
		}

		return e.complexity.User.Company(childComplexity), true

	case "User.createdat":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true

	case "User.createdtasks":
		if e.complexity.User.CreatedTasks == nil {
			break
		}

		return e.complexity.User.CreatedTasks(childComplexity), true

	case "User.deletedat":
		if e.complexity.User.DeletedAt == nil {
			break
		}

		return e.complexity.User.DeletedAt(childComplexity), true

	case "User.disabled":
		if e.complexity.User.Disabled == nil {
			break
		}

		return e.complexity.User.Disabled(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.employee":
		if e.complexity.User.Employee == nil {
			break
		}

		return e.complexity.User.Employee(childComplexity), true

	case "User.fcmtoken":
		if e.complexity.User.FcmToken == nil {
			break
		}

		return e.complexity.User.FcmToken(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.name":
		if e.complexity.User.Name == nil {
			break
		}

		return e.complexity.User.Name(childComplexity), true

	case "User.notverified":
		if e.complexity.User.NotVerified == nil {
			break
		}

		return e.complexity.User.NotVerified(childComplexity), true

	case "User.tokens":
		if e.complexity.User.Tokens == nil {
			break
		}

		return e.complexity.User.Tokens(childComplexity), true

	case "User.updatedat":
		if e.complexity.User.UpdatedAt == nil {
			break
		}

		return e.complexity.User.UpdatedAt(childComplexity), true

	case "User.username":
		if e.complexity.User.Username == nil {
			break
		}

		return e.complexity.User.Username(childComplexity), true

	case "UserRole.company":
		if e.complexity.UserRole.Company == nil {
			break
		}

		return e.complexity.UserRole.Company(childComplexity), true

	case "UserRole.id":
		if e.complexity.UserRole.ID == nil {
			break
		}

		return e.complexity.UserRole.ID(childComplexity), true

	case "UserRole.role":
		if e.complexity.UserRole.Role == nil {
			break
		}

		return e.complexity.UserRole.Role(childComplexity), true

	case "UserRole.user":
		if e.complexity.UserRole.User == nil {
			break
		}

		return e.complexity.UserRole.User(childComplexity), true

	case "WorkShiftAggregationPayload.count":
		if e.complexity.WorkShiftAggregationPayload.Count == nil {
			break
		}

		return e.complexity.WorkShiftAggregationPayload.Count(childComplexity), true

	case "WorkShiftAggregationPayload.date":
		if e.complexity.WorkShiftAggregationPayload.Date == nil {
			break
		}

		return e.complexity.WorkShiftAggregationPayload.Date(childComplexity), true

	case "WorkShiftAggregationPayload.durationInMinutes":
		if e.complexity.WorkShiftAggregationPayload.DurationInMinutes == nil {
			break
		}

		return e.complexity.WorkShiftAggregationPayload.DurationInMinutes(childComplexity), true

	case "WorkShiftAggregationPayload.pendingCount":
		if e.complexity.WorkShiftAggregationPayload.PendingCount == nil {
			break
		}

		return e.complexity.WorkShiftAggregationPayload.PendingCount(childComplexity), true

	case "Workshift.approvedat":
		if e.complexity.Workshift.ApprovedAt == nil {
			break
		}

		return e.complexity.Workshift.ApprovedAt(childComplexity), true

	case "Workshift.approvedby":
		if e.complexity.Workshift.ApprovedBy == nil {
			break
		}

		return e.complexity.Workshift.ApprovedBy(childComplexity), true

	case "Workshift.clockin":
		if e.complexity.Workshift.ClockIn == nil {
			break
		}

		return e.complexity.Workshift.ClockIn(childComplexity), true

	case "Workshift.clockinlocation":
		if e.complexity.Workshift.ClockInLocation == nil {
			break
		}

		return e.complexity.Workshift.ClockInLocation(childComplexity), true

	case "Workshift.clockout":
		if e.complexity.Workshift.ClockOut == nil {
			break
		}

		return e.complexity.Workshift.ClockOut(childComplexity), true

	case "Workshift.clockoutlocation":
		if e.complexity.Workshift.ClockOutLocation == nil {
			break
		}

		return e.complexity.Workshift.ClockOutLocation(childComplexity), true

	case "Workshift.company":
		if e.complexity.Workshift.Company == nil {
			break
		}

		return e.complexity.Workshift.Company(childComplexity), true

	case "Workshift.createdat":
		if e.complexity.Workshift.CreatedAt == nil {
			break
		}

		return e.complexity.Workshift.CreatedAt(childComplexity), true

	case "Workshift.deletedat":
		if e.complexity.Workshift.DeletedAt == nil {
			break
		}

		return e.complexity.Workshift.DeletedAt(childComplexity), true

	case "Workshift.description":
		if e.complexity.Workshift.Description == nil {
			break
		}

		return e.complexity.Workshift.Description(childComplexity), true

	case "Workshift.editrequest":
		if e.complexity.Workshift.EditRequest == nil {
			break
		}

		return e.complexity.Workshift.EditRequest(childComplexity), true

	case "Workshift.employee":
		if e.complexity.Workshift.Employee == nil {
			break
		}

		return e.complexity.Workshift.Employee(childComplexity), true

	case "Workshift.id":
		if e.complexity.Workshift.ID == nil {
			break
		}

		return e.complexity.Workshift.ID(childComplexity), true

	case "Workshift.note":
		if e.complexity.Workshift.Note == nil {
			break
		}

		return e.complexity.Workshift.Note(childComplexity), true

	case "Workshift.status":
		if e.complexity.Workshift.Status == nil {
			break
		}

		return e.complexity.Workshift.Status(childComplexity), true

	case "Workshift.updatedat":
		if e.complexity.Workshift.UpdatedAt == nil {
			break
		}

		return e.complexity.Workshift.UpdatedAt(childComplexity), true

	case "Workshift.workshift":
		if e.complexity.Workshift.WorkShift == nil {
			break
		}

		return e.complexity.Workshift.WorkShift(childComplexity), true

	case "Workshift.worktask":
		if e.complexity.Workshift.WorkTask == nil {
			break
		}

		return e.complexity.Workshift.WorkTask(childComplexity), true

	case "Worktag.color":
		if e.complexity.Worktag.Color == nil {
			break
		}

		return e.complexity.Worktag.Color(childComplexity), true

	case "Worktag.company":
		if e.complexity.Worktag.Company == nil {
			break
		}

		return e.complexity.Worktag.Company(childComplexity), true

	case "Worktag.createdat":
		if e.complexity.Worktag.CreatedAt == nil {
			break
		}

		return e.complexity.Worktag.CreatedAt(childComplexity), true

	case "Worktag.deletedat":
		if e.complexity.Worktag.DeletedAt == nil {
			break
		}

		return e.complexity.Worktag.DeletedAt(childComplexity), true

	case "Worktag.id":
		if e.complexity.Worktag.ID == nil {
			break
		}

		return e.complexity.Worktag.ID(childComplexity), true

	case "Worktag.name":
		if e.complexity.Worktag.Name == nil {
			break
		}

		return e.complexity.Worktag.Name(childComplexity), true

	case "Worktag.updatedat":
		if e.complexity.Worktag.UpdatedAt == nil {
			break
		}

		return e.complexity.Worktag.UpdatedAt(childComplexity), true

	case "Worktag.worktasks":
		if e.complexity.Worktag.WorkTasks == nil {
			break
		}

		return e.complexity.Worktag.WorkTasks(childComplexity), true

	case "Worktask.assignedto":
		if e.complexity.Worktask.AssignedTo == nil {
			break
		}

		return e.complexity.Worktask.AssignedTo(childComplexity), true

	case "Worktask.company":
		if e.complexity.Worktask.Company == nil {
			break
		}

		return e.complexity.Worktask.Company(childComplexity), true

	case "Worktask.createdat":
		if e.complexity.Worktask.CreatedAt == nil {
			break
		}

		return e.complexity.Worktask.CreatedAt(childComplexity), true

	case "Worktask.createdby":
		if e.complexity.Worktask.CreatedBy == nil {
			break
		}

		return e.complexity.Worktask.CreatedBy(childComplexity), true

	case "Worktask.deletedat":
		if e.complexity.Worktask.DeletedAt == nil {
			break
		}

		return e.complexity.Worktask.DeletedAt(childComplexity), true

	case "Worktask.description":
		if e.complexity.Worktask.Description == nil {
			break
		}

		return e.complexity.Worktask.Description(childComplexity), true

	case "Worktask.endtime":
		if e.complexity.Worktask.EndTime == nil {
			break
		}

		return e.complexity.Worktask.EndTime(childComplexity), true

	case "Worktask.id":
		if e.complexity.Worktask.ID == nil {
			break
		}

		return e.complexity.Worktask.ID(childComplexity), true

	case "Worktask.starttime":
		if e.complexity.Worktask.StartTime == nil {
			break
		}

		return e.complexity.Worktask.StartTime(childComplexity), true

	case "Worktask.status":
		if e.complexity.Worktask.Status == nil {
			break
		}

		return e.complexity.Worktask.Status(childComplexity), true

	case "Worktask.subtasks":
		if e.complexity.Worktask.Subtasks == nil {
			break
		}

		return e.complexity.Worktask.Subtasks(childComplexity), true

	case "Worktask.title":
		if e.complexity.Worktask.Title == nil {
			break
		}

		return e.complexity.Worktask.Title(childComplexity), true

	case "Worktask.updatedat":
		if e.complexity.Worktask.UpdatedAt == nil {
			break
		}

		return e.complexity.Worktask.UpdatedAt(childComplexity), true

	case "Worktask.workshifts":
		if e.complexity.Worktask.WorkShifts == nil {
			break
		}

		return e.complexity.Worktask.WorkShifts(childComplexity), true

	case "Worktask.worktags":
		if e.complexity.Worktask.WorkTags == nil {
			break
		}

		return e.complexity.Worktask.WorkTags(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAccountingEntryOrder,
		ec.unmarshalInputAccountingEntryWhereInput,
		ec.unmarshalInputCashMovementWhereInput,
		ec.unmarshalInputCompanyOrder,
		ec.unmarshalInputCompanyWhereInput,
		ec.unmarshalInputCreateAccountingEntryInput,
		ec.unmarshalInputCreateCashMovementInput,
		ec.unmarshalInputCreateCompanyInput,
		ec.unmarshalInputCreateCustomerInput,
		ec.unmarshalInputCreateEmployeeInput,
		ec.unmarshalInputCreateFileInput,
		ec.unmarshalInputCreatePayableInput,
		ec.unmarshalInputCreateProductInput,
		ec.unmarshalInputCreateProductMovementInput,
		ec.unmarshalInputCreateReceivableInput,
		ec.unmarshalInputCreateSupplierInput,
		ec.unmarshalInputCreateTreasuryInput,
		ec.unmarshalInputCreateUserInput,
		ec.unmarshalInputCreateUserRoleInput,
		ec.unmarshalInputCreateWorkshiftInput,
		ec.unmarshalInputCreateWorktagInput,
		ec.unmarshalInputCreateWorktaskInput,
		ec.unmarshalInputCustomerWhereInput,
		ec.unmarshalInputEmployeeWhereInput,
		ec.unmarshalInputFileOrder,
		ec.unmarshalInputFileWhereInput,
		ec.unmarshalInputLoginInput,
		ec.unmarshalInputPayableWhereInput,
		ec.unmarshalInputProductMovementWhereInput,
		ec.unmarshalInputProductOrder,
		ec.unmarshalInputProductWhereInput,
		ec.unmarshalInputReceivableWhereInput,
		ec.unmarshalInputResetPasswordInput,
		ec.unmarshalInputSignupInput,
		ec.unmarshalInputSupplierWhereInput,
		ec.unmarshalInputTokenWhereInput,
		ec.unmarshalInputTreasuryWhereInput,
		ec.unmarshalInputUpdateAccountingEntryInput,
		ec.unmarshalInputUpdateCashMovementInput,
		ec.unmarshalInputUpdateCompanyInput,
		ec.unmarshalInputUpdateCustomerInput,
		ec.unmarshalInputUpdateEmployeeInput,
		ec.unmarshalInputUpdateFileInput,
		ec.unmarshalInputUpdatePayableInput,
		ec.unmarshalInputUpdateProductInput,
		ec.unmarshalInputUpdateProductMovementInput,
		ec.unmarshalInputUpdateReceivableInput,
		ec.unmarshalInputUpdateSupplierInput,
		ec.unmarshalInputUpdateTreasuryInput,
		ec.unmarshalInputUpdateUserInput,
		ec.unmarshalInputUpdateUserRoleInput,
		ec.unmarshalInputUpdateWorkshiftInput,
		ec.unmarshalInputUpdateWorktagInput,
		ec.unmarshalInputUpdateWorktaskInput,
		ec.unmarshalInputUserOrder,
		ec.unmarshalInputUserRoleOrder,
		ec.unmarshalInputUserRoleWhereInput,
		ec.unmarshalInputUserWhereInput,
		ec.unmarshalInputWorkshiftOrder,
		ec.unmarshalInputWorkshiftWhereInput,
		ec.unmarshalInputWorktagWhereInput,
		ec.unmarshalInputWorktaskWhereInput,
		ec.unmarshalInputinvitedUserSignupInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

//go:embed "app.graphql" "ent.graphql"
var sourcesFS embed.FS

func sourceData(filename string) string {
	data, err := sourcesFS.ReadFile(filename)
	if err != nil {
		panic(fmt.Sprintf("codegen problem: %s not available", filename))
	}
	return string(data)
}

var sources = []*ast.Source{
	{Name: "app.graphql", Input: sourceData("app.graphql"), BuiltIn: false},
	{Name: "ent.graphql", Input: sourceData("ent.graphql"), BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_createCompany_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_createCompany_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createCompany_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.CreateCompanyInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal *ent.CreateCompanyInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalOCreateCompanyInput2ᚖmazzaᚋentᚐCreateCompanyInput(ctx, tmp)
	}

	var zeroVal *ent.CreateCompanyInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createCustomer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_createCustomer_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createCustomer_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.CreateCustomerInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.CreateCustomerInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateCustomerInput2mazzaᚋentᚐCreateCustomerInput(ctx, tmp)
	}

	var zeroVal ent.CreateCustomerInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createEmployee_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_createEmployee_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createEmployee_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.CreateEmployeeInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.CreateEmployeeInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateEmployeeInput2mazzaᚋentᚐCreateEmployeeInput(ctx, tmp)
	}

	var zeroVal ent.CreateEmployeeInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_createProduct_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createProduct_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.CreateProductInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.CreateProductInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateProductInput2mazzaᚋentᚐCreateProductInput(ctx, tmp)
	}

	var zeroVal ent.CreateProductInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createSupplier_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_createSupplier_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createSupplier_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.CreateSupplierInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.CreateSupplierInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateSupplierInput2mazzaᚋentᚐCreateSupplierInput(ctx, tmp)
	}

	var zeroVal ent.CreateSupplierInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createTreasury_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_createTreasury_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createTreasury_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.CreateTreasuryInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.CreateTreasuryInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateTreasuryInput2mazzaᚋentᚐCreateTreasuryInput(ctx, tmp)
	}

	var zeroVal ent.CreateTreasuryInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createUserRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_createUserRole_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createUserRole_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.CreateUserRoleInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.CreateUserRoleInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateUserRoleInput2mazzaᚋentᚐCreateUserRoleInput(ctx, tmp)
	}

	var zeroVal ent.CreateUserRoleInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_createUser_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createUser_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.CreateUserInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.CreateUserInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateUserInput2mazzaᚋentᚐCreateUserInput(ctx, tmp)
	}

	var zeroVal ent.CreateUserInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createWorkShift_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_createWorkShift_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createWorkShift_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.CreateWorkshiftInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.CreateWorkshiftInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateWorkshiftInput2mazzaᚋentᚐCreateWorkshiftInput(ctx, tmp)
	}

	var zeroVal ent.CreateWorkshiftInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createWorkTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_createWorkTag_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createWorkTag_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.CreateWorktagInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.CreateWorktagInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateWorktagInput2mazzaᚋentᚐCreateWorktagInput(ctx, tmp)
	}

	var zeroVal ent.CreateWorktagInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createWorkTask_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_createWorkTask_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createWorkTask_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.CreateWorktaskInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.CreateWorktaskInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateWorktaskInput2mazzaᚋentᚐCreateWorktaskInput(ctx, tmp)
	}

	var zeroVal ent.CreateWorktaskInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteCustomer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_deleteCustomer_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteCustomer_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteEmployee_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_deleteEmployee_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteEmployee_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_deleteProduct_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteProduct_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteSupplier_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_deleteSupplier_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteSupplier_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteTreasury_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_deleteTreasury_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteTreasury_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteWorkShift_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_deleteWorkShift_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteWorkShift_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteWorkTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_deleteWorkTag_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteWorkTag_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteWorkTask_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_deleteWorkTask_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteWorkTask_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_forgotPassword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_forgotPassword_argsUsername(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["username"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_forgotPassword_argsUsername(
	ctx context.Context,
	rawArgs map[string]interface{},
) (string, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["username"]
	if !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
	if tmp, ok := rawArgs["username"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_invitedUserSignup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_invitedUserSignup_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_invitedUserSignup_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (InvitedUserSignupInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal InvitedUserSignupInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNinvitedUserSignupInput2mazzaᚐInvitedUserSignupInput(ctx, tmp)
	}

	var zeroVal InvitedUserSignupInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_resetPassword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_resetPassword_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_resetPassword_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ResetPasswordInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ResetPasswordInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNResetPasswordInput2mazzaᚐResetPasswordInput(ctx, tmp)
	}

	var zeroVal ResetPasswordInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_signup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_signup_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_signup_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (SignupInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal SignupInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNSignupInput2mazzaᚐSignupInput(ctx, tmp)
	}

	var zeroVal SignupInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_unsubscribe_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_unsubscribe_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_unsubscribe_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateCompany_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_updateCompany_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateCompany_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateCompany_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateCompany_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.UpdateCompanyInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.UpdateCompanyInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateCompanyInput2mazzaᚋentᚐUpdateCompanyInput(ctx, tmp)
	}

	var zeroVal ent.UpdateCompanyInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateCustomer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_updateCustomer_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateCustomer_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateCustomer_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateCustomer_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.UpdateCustomerInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.UpdateCustomerInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateCustomerInput2mazzaᚋentᚐUpdateCustomerInput(ctx, tmp)
	}

	var zeroVal ent.UpdateCustomerInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateEmployee_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_updateEmployee_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateEmployee_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateEmployee_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateEmployee_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.UpdateEmployeeInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.UpdateEmployeeInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateEmployeeInput2mazzaᚋentᚐUpdateEmployeeInput(ctx, tmp)
	}

	var zeroVal ent.UpdateEmployeeInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_updateProduct_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateProduct_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateProduct_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateProduct_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.UpdateProductInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.UpdateProductInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateProductInput2mazzaᚋentᚐUpdateProductInput(ctx, tmp)
	}

	var zeroVal ent.UpdateProductInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateSupplier_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_updateSupplier_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateSupplier_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateSupplier_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateSupplier_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.UpdateSupplierInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.UpdateSupplierInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateSupplierInput2mazzaᚋentᚐUpdateSupplierInput(ctx, tmp)
	}

	var zeroVal ent.UpdateSupplierInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateTreasury_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_updateTreasury_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateTreasury_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateTreasury_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateTreasury_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.UpdateTreasuryInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.UpdateTreasuryInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateTreasuryInput2mazzaᚋentᚐUpdateTreasuryInput(ctx, tmp)
	}

	var zeroVal ent.UpdateTreasuryInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_updateUser_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateUser_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateUser_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateUser_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.UpdateUserInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.UpdateUserInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateUserInput2mazzaᚋentᚐUpdateUserInput(ctx, tmp)
	}

	var zeroVal ent.UpdateUserInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateWorkShift_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_updateWorkShift_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateWorkShift_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateWorkShift_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateWorkShift_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.UpdateWorkshiftInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.UpdateWorkshiftInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateWorkshiftInput2mazzaᚋentᚐUpdateWorkshiftInput(ctx, tmp)
	}

	var zeroVal ent.UpdateWorkshiftInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateWorkTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_updateWorkTag_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateWorkTag_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateWorkTag_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateWorkTag_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.UpdateWorktagInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.UpdateWorktagInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateWorktagInput2mazzaᚋentᚐUpdateWorktagInput(ctx, tmp)
	}

	var zeroVal ent.UpdateWorktagInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateWorkTask_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_updateWorkTask_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateWorkTask_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateWorkTask_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateWorkTask_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.UpdateWorktaskInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.UpdateWorktaskInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateWorktaskInput2mazzaᚋentᚐUpdateWorktaskInput(ctx, tmp)
	}

	var zeroVal ent.UpdateWorktaskInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query___type_argsName(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["name"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query___type_argsName(
	ctx context.Context,
	rawArgs map[string]interface{},
) (string, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["name"]
	if !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
	if tmp, ok := rawArgs["name"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_accountingEntries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_accountingEntries_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_accountingEntries_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_accountingEntries_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_accountingEntries_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_accountingEntries_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Query_accountingEntries_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Query_accountingEntries_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[int], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_accountingEntries_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_accountingEntries_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[int], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_accountingEntries_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_accountingEntries_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.AccountingEntryOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal *ent.AccountingEntryOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOAccountingEntryOrder2ᚖmazzaᚋentᚐAccountingEntryOrder(ctx, tmp)
	}

	var zeroVal *ent.AccountingEntryOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_accountingEntries_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.AccountingEntryWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.AccountingEntryWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOAccountingEntryWhereInput2ᚖmazzaᚋentᚐAccountingEntryWhereInput(ctx, tmp)
	}

	var zeroVal *ent.AccountingEntryWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_aggregateWorkShift_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_aggregateWorkShift_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	arg1, err := ec.field_Query_aggregateWorkShift_argsGroupBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["groupBy"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_aggregateWorkShift_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.WorkshiftWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.WorkshiftWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOWorkshiftWhereInput2ᚖmazzaᚋentᚐWorkshiftWhereInput(ctx, tmp)
	}

	var zeroVal *ent.WorkshiftWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_aggregateWorkShift_argsGroupBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]ShiftGroupBy, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["groupBy"]
	if !ok {
		var zeroVal []ShiftGroupBy
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("groupBy"))
	if tmp, ok := rawArgs["groupBy"]; ok {
		return ec.unmarshalNShiftGroupBy2ᚕmazzaᚐShiftGroupByᚄ(ctx, tmp)
	}

	var zeroVal []ShiftGroupBy
	return zeroVal, nil
}

func (ec *executionContext) field_Query_cashMovements_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_cashMovements_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_cashMovements_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_cashMovements_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_cashMovements_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_cashMovements_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg4
	return args, nil
}
func (ec *executionContext) field_Query_cashMovements_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[int], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_cashMovements_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_cashMovements_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[int], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_cashMovements_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_cashMovements_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.CashMovementWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.CashMovementWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOCashMovementWhereInput2ᚖmazzaᚋentᚐCashMovementWhereInput(ctx, tmp)
	}

	var zeroVal *ent.CashMovementWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_companies_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_companies_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_companies_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.CompanyWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.CompanyWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOCompanyWhereInput2ᚖmazzaᚋentᚐCompanyWhereInput(ctx, tmp)
	}

	var zeroVal *ent.CompanyWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_customers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_customers_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_customers_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.CustomerWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.CustomerWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOCustomerWhereInput2ᚖmazzaᚋentᚐCustomerWhereInput(ctx, tmp)
	}

	var zeroVal *ent.CustomerWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_employees_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_employees_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_employees_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.EmployeeWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.EmployeeWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOEmployeeWhereInput2ᚖmazzaᚋentᚐEmployeeWhereInput(ctx, tmp)
	}

	var zeroVal *ent.EmployeeWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_files_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_files_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_files_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_files_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_files_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_files_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Query_files_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Query_files_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[int], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_files_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_files_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[int], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_files_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_files_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.FileOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal *ent.FileOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOFileOrder2ᚖmazzaᚋentᚐFileOrder(ctx, tmp)
	}

	var zeroVal *ent.FileOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_files_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.FileWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.FileWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOFileWhereInput2ᚖmazzaᚋentᚐFileWhereInput(ctx, tmp)
	}

	var zeroVal *ent.FileWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_lowStock_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_lowStock_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_lowStock_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.ProductWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.ProductWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOProductWhereInput2ᚖmazzaᚋentᚐProductWhereInput(ctx, tmp)
	}

	var zeroVal *ent.ProductWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_node_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_node_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_node_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_nodes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_nodes_argsIds(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ids"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_nodes_argsIds(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["ids"]
	if !ok {
		var zeroVal []int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
	if tmp, ok := rawArgs["ids"]; ok {
		return ec.unmarshalNID2ᚕintᚄ(ctx, tmp)
	}

	var zeroVal []int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_numberOfLowStock_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_numberOfLowStock_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_numberOfLowStock_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.ProductWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.ProductWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOProductWhereInput2ᚖmazzaᚋentᚐProductWhereInput(ctx, tmp)
	}

	var zeroVal *ent.ProductWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_numberOfOutOfStock_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_numberOfOutOfStock_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_numberOfOutOfStock_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.ProductWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.ProductWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOProductWhereInput2ᚖmazzaᚋentᚐProductWhereInput(ctx, tmp)
	}

	var zeroVal *ent.ProductWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_numberOfProducts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_numberOfProducts_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_numberOfProducts_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.ProductWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.ProductWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOProductWhereInput2ᚖmazzaᚋentᚐProductWhereInput(ctx, tmp)
	}

	var zeroVal *ent.ProductWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_payables_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_payables_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_payables_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.PayableWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.PayableWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOPayableWhereInput2ᚖmazzaᚋentᚐPayableWhereInput(ctx, tmp)
	}

	var zeroVal *ent.PayableWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_productMovements_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_productMovements_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_productMovements_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_productMovements_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_productMovements_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_productMovements_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg4
	return args, nil
}
func (ec *executionContext) field_Query_productMovements_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[int], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_productMovements_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_productMovements_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[int], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_productMovements_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_productMovements_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.ProductMovementWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.ProductMovementWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOProductMovementWhereInput2ᚖmazzaᚋentᚐProductMovementWhereInput(ctx, tmp)
	}

	var zeroVal *ent.ProductMovementWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_products_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_products_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_products_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.ProductWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.ProductWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOProductWhereInput2ᚖmazzaᚋentᚐProductWhereInput(ctx, tmp)
	}

	var zeroVal *ent.ProductWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_receivables_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_receivables_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_receivables_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_receivables_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_receivables_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_receivables_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg4
	return args, nil
}
func (ec *executionContext) field_Query_receivables_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[int], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_receivables_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_receivables_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[int], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_receivables_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_receivables_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.ReceivableWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.ReceivableWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOReceivableWhereInput2ᚖmazzaᚋentᚐReceivableWhereInput(ctx, tmp)
	}

	var zeroVal *ent.ReceivableWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_suppliers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_suppliers_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_suppliers_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.SupplierWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.SupplierWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOSupplierWhereInput2ᚖmazzaᚋentᚐSupplierWhereInput(ctx, tmp)
	}

	var zeroVal *ent.SupplierWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_treasuries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_treasuries_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_treasuries_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.TreasuryWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.TreasuryWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOTreasuryWhereInput2ᚖmazzaᚋentᚐTreasuryWhereInput(ctx, tmp)
	}

	var zeroVal *ent.TreasuryWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_userRoles_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_userRoles_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_userRoles_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.UserRoleWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.UserRoleWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOUserRoleWhereInput2ᚖmazzaᚋentᚐUserRoleWhereInput(ctx, tmp)
	}

	var zeroVal *ent.UserRoleWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_users_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_users_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_users_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.UserWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.UserWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOUserWhereInput2ᚖmazzaᚋentᚐUserWhereInput(ctx, tmp)
	}

	var zeroVal *ent.UserWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_verifyPasswordResetToken_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_verifyPasswordResetToken_argsToken(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["token"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_verifyPasswordResetToken_argsToken(
	ctx context.Context,
	rawArgs map[string]interface{},
) (string, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["token"]
	if !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
	if tmp, ok := rawArgs["token"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_workShifts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_workShifts_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_workShifts_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.WorkshiftWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.WorkshiftWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOWorkshiftWhereInput2ᚖmazzaᚋentᚐWorkshiftWhereInput(ctx, tmp)
	}

	var zeroVal *ent.WorkshiftWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_workTags_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_workTags_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_workTags_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.WorktagWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.WorktagWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOWorktagWhereInput2ᚖmazzaᚋentᚐWorktagWhereInput(ctx, tmp)
	}

	var zeroVal *ent.WorktagWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_workTasks_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_workTasks_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_workTasks_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.WorktaskWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.WorktaskWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOWorktaskWhereInput2ᚖmazzaᚋentᚐWorktaskWhereInput(ctx, tmp)
	}

	var zeroVal *ent.WorktaskWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field___Type_enumValues_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Type_enumValues_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]interface{},
) (bool, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["includeDeprecated"]
	if !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field___Type_fields_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Type_fields_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]interface{},
) (bool, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["includeDeprecated"]
	if !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _AccountingEntry_id(ctx context.Context, field graphql.CollectedField, obj *ent.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntry_createdat(ctx context.Context, field graphql.CollectedField, obj *ent.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_createdat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_createdat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntry_updatedat(ctx context.Context, field graphql.CollectedField, obj *ent.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_updatedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_updatedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntry_deletedat(ctx context.Context, field graphql.CollectedField, obj *ent.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_deletedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_deletedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntry_number(ctx context.Context, field graphql.CollectedField, obj *ent.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Number, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_number(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntry_group(ctx context.Context, field graphql.CollectedField, obj *ent.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_group(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Group, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_group(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntry_date(ctx context.Context, field graphql.CollectedField, obj *ent.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_date(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntry_account(ctx context.Context, field graphql.CollectedField, obj *ent.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_account(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Account, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_account(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntry_label(ctx context.Context, field graphql.CollectedField, obj *ent.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_label(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntry_amount(ctx context.Context, field graphql.CollectedField, obj *ent.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntry_description(ctx context.Context, field graphql.CollectedField, obj *ent.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntry_accounttype(ctx context.Context, field graphql.CollectedField, obj *ent.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_accounttype(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(accountingentry.AccountType)
	fc.Result = res
	return ec.marshalNAccountingEntryAccountType2mazzaᚋentᚋaccountingentryᚐAccountType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_accounttype(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AccountingEntryAccountType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntry_isdebit(ctx context.Context, field graphql.CollectedField, obj *ent.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_isdebit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDebit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_isdebit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntry_isreversal(ctx context.Context, field graphql.CollectedField, obj *ent.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_isreversal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReversal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_isreversal(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntry_reversed(ctx context.Context, field graphql.CollectedField, obj *ent.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_reversed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reversed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_reversed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntry_company(ctx context.Context, field graphql.CollectedField, obj *ent.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Company)
	fc.Result = res
	return ec.marshalOCompany2ᚖmazzaᚋentᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "worktasks":
				return ec.fieldContext_Company_worktasks(ctx, field)
			case "worktags":
				return ec.fieldContext_Company_worktags(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntry_user(ctx context.Context, field graphql.CollectedField, obj *ent.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚖmazzaᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_user(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdat":
				return ec.fieldContext_User_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_User_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_User_deletedat(ctx, field)
			case "fcmtoken":
				return ec.fieldContext_User_fcmtoken(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "notverified":
				return ec.fieldContext_User_notverified(ctx, field)
			case "accountingentries":
				return ec.fieldContext_User_accountingentries(ctx, field)
			case "company":
				return ec.fieldContext_User_company(ctx, field)
			case "assignedroles":
				return ec.fieldContext_User_assignedroles(ctx, field)
			case "createdtasks":
				return ec.fieldContext_User_createdtasks(ctx, field)
			case "employee":
				return ec.fieldContext_User_employee(ctx, field)
			case "tokens":
				return ec.fieldContext_User_tokens(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntryConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.AccountingEntryConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntryConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.AccountingEntryEdge)
	fc.Result = res
	return ec.marshalOAccountingEntryEdge2ᚕᚖmazzaᚋentᚐAccountingEntryEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntryConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntryConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_AccountingEntryEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_AccountingEntryEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountingEntryEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntryConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.AccountingEntryConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntryConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[int])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntryConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntryConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntryConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.AccountingEntryConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntryConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntryConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntryConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntryEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.AccountingEntryEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntryEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.AccountingEntry)
	fc.Result = res
	return ec.marshalOAccountingEntry2ᚖmazzaᚋentᚐAccountingEntry(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntryEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntryEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AccountingEntry_id(ctx, field)
			case "createdat":
				return ec.fieldContext_AccountingEntry_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_AccountingEntry_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_AccountingEntry_deletedat(ctx, field)
			case "number":
				return ec.fieldContext_AccountingEntry_number(ctx, field)
			case "group":
				return ec.fieldContext_AccountingEntry_group(ctx, field)
			case "date":
				return ec.fieldContext_AccountingEntry_date(ctx, field)
			case "account":
				return ec.fieldContext_AccountingEntry_account(ctx, field)
			case "label":
				return ec.fieldContext_AccountingEntry_label(ctx, field)
			case "amount":
				return ec.fieldContext_AccountingEntry_amount(ctx, field)
			case "description":
				return ec.fieldContext_AccountingEntry_description(ctx, field)
			case "accounttype":
				return ec.fieldContext_AccountingEntry_accounttype(ctx, field)
			case "isdebit":
				return ec.fieldContext_AccountingEntry_isdebit(ctx, field)
			case "isreversal":
				return ec.fieldContext_AccountingEntry_isreversal(ctx, field)
			case "reversed":
				return ec.fieldContext_AccountingEntry_reversed(ctx, field)
			case "company":
				return ec.fieldContext_AccountingEntry_company(ctx, field)
			case "user":
				return ec.fieldContext_AccountingEntry_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountingEntry", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntryEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.AccountingEntryEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntryEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[int])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntryEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntryEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashMovement_id(ctx context.Context, field graphql.CollectedField, obj *ent.CashMovement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashMovement_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashMovement_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashMovement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashMovement_createdat(ctx context.Context, field graphql.CollectedField, obj *ent.CashMovement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashMovement_createdat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashMovement_createdat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashMovement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashMovement_updatedat(ctx context.Context, field graphql.CollectedField, obj *ent.CashMovement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashMovement_updatedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashMovement_updatedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashMovement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashMovement_deletedat(ctx context.Context, field graphql.CollectedField, obj *ent.CashMovement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashMovement_deletedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashMovement_deletedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashMovement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashMovement_amount(ctx context.Context, field graphql.CollectedField, obj *ent.CashMovement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashMovement_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashMovement_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashMovement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashMovement_date(ctx context.Context, field graphql.CollectedField, obj *ent.CashMovement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashMovement_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashMovement_date(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashMovement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashMovement_entrygroup(ctx context.Context, field graphql.CollectedField, obj *ent.CashMovement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashMovement_entrygroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntryGroup, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashMovement_entrygroup(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashMovement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashMovement_treasury(ctx context.Context, field graphql.CollectedField, obj *ent.CashMovement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashMovement_treasury(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Treasury(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Treasury)
	fc.Result = res
	return ec.marshalOTreasury2ᚖmazzaᚋentᚐTreasury(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashMovement_treasury(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashMovement",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Treasury_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Treasury_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Treasury_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Treasury_deletedat(ctx, field)
			case "accountnumber":
				return ec.fieldContext_Treasury_accountnumber(ctx, field)
			case "balance":
				return ec.fieldContext_Treasury_balance(ctx, field)
			case "bankname":
				return ec.fieldContext_Treasury_bankname(ctx, field)
			case "currency":
				return ec.fieldContext_Treasury_currency(ctx, field)
			case "description":
				return ec.fieldContext_Treasury_description(ctx, field)
			case "iban":
				return ec.fieldContext_Treasury_iban(ctx, field)
			case "isdefault":
				return ec.fieldContext_Treasury_isdefault(ctx, field)
			case "ismainaccount":
				return ec.fieldContext_Treasury_ismainaccount(ctx, field)
			case "name":
				return ec.fieldContext_Treasury_name(ctx, field)
			case "category":
				return ec.fieldContext_Treasury_category(ctx, field)
			case "swiftcode":
				return ec.fieldContext_Treasury_swiftcode(ctx, field)
			case "company":
				return ec.fieldContext_Treasury_company(ctx, field)
			case "cashmovements":
				return ec.fieldContext_Treasury_cashmovements(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Treasury", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashMovementConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.CashMovementConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashMovementConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CashMovementEdge)
	fc.Result = res
	return ec.marshalOCashMovementEdge2ᚕᚖmazzaᚋentᚐCashMovementEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashMovementConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashMovementConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_CashMovementEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_CashMovementEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CashMovementEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashMovementConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.CashMovementConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashMovementConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[int])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashMovementConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashMovementConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashMovementConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.CashMovementConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashMovementConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashMovementConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashMovementConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashMovementEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.CashMovementEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashMovementEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.CashMovement)
	fc.Result = res
	return ec.marshalOCashMovement2ᚖmazzaᚋentᚐCashMovement(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashMovementEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashMovementEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CashMovement_id(ctx, field)
			case "createdat":
				return ec.fieldContext_CashMovement_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_CashMovement_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_CashMovement_deletedat(ctx, field)
			case "amount":
				return ec.fieldContext_CashMovement_amount(ctx, field)
			case "date":
				return ec.fieldContext_CashMovement_date(ctx, field)
			case "entrygroup":
				return ec.fieldContext_CashMovement_entrygroup(ctx, field)
			case "treasury":
				return ec.fieldContext_CashMovement_treasury(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CashMovement", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CashMovementEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.CashMovementEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CashMovementEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[int])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CashMovementEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CashMovementEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_id(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_createdat(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_createdat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_createdat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_updatedat(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_updatedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_updatedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_deletedat(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_deletedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_deletedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_address(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_address(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_basecurrency(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_basecurrency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BaseCurrency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_basecurrency(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_ceoname(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_ceoname(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CeoName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_ceoname(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_city(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_city(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_city(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_country(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_country(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_establishedat(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_establishedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EstablishedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_establishedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_description(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_email(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_lastentrydate(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_lastentrydate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastEntryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_lastentrydate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_lastinvoicenumber(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_lastinvoicenumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastInvoiceNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_lastinvoicenumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_logo(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_logo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Logo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_logo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_name(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_numberofemployees(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_numberofemployees(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumberOfEmployees, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalNInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_numberofemployees(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_phone(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_phone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_phone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_sector(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_sector(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sector, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_sector(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_taxid(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_taxid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxId, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalNString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_taxid(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_vatrate(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_vatrate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VatRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_vatrate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_website(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_website(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Website, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_website(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_availableroles(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_availableroles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvailableRoles(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.UserRole)
	fc.Result = res
	return ec.marshalOUserRole2ᚕᚖmazzaᚋentᚐUserRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_availableroles(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserRole_id(ctx, field)
			case "role":
				return ec.fieldContext_UserRole_role(ctx, field)
			case "company":
				return ec.fieldContext_UserRole_company(ctx, field)
			case "user":
				return ec.fieldContext_UserRole_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserRole", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_accountingentries(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_accountingentries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountingEntries(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.AccountingEntry)
	fc.Result = res
	return ec.marshalOAccountingEntry2ᚕᚖmazzaᚋentᚐAccountingEntryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_accountingentries(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AccountingEntry_id(ctx, field)
			case "createdat":
				return ec.fieldContext_AccountingEntry_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_AccountingEntry_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_AccountingEntry_deletedat(ctx, field)
			case "number":
				return ec.fieldContext_AccountingEntry_number(ctx, field)
			case "group":
				return ec.fieldContext_AccountingEntry_group(ctx, field)
			case "date":
				return ec.fieldContext_AccountingEntry_date(ctx, field)
			case "account":
				return ec.fieldContext_AccountingEntry_account(ctx, field)
			case "label":
				return ec.fieldContext_AccountingEntry_label(ctx, field)
			case "amount":
				return ec.fieldContext_AccountingEntry_amount(ctx, field)
			case "description":
				return ec.fieldContext_AccountingEntry_description(ctx, field)
			case "accounttype":
				return ec.fieldContext_AccountingEntry_accounttype(ctx, field)
			case "isdebit":
				return ec.fieldContext_AccountingEntry_isdebit(ctx, field)
			case "isreversal":
				return ec.fieldContext_AccountingEntry_isreversal(ctx, field)
			case "reversed":
				return ec.fieldContext_AccountingEntry_reversed(ctx, field)
			case "company":
				return ec.fieldContext_AccountingEntry_company(ctx, field)
			case "user":
				return ec.fieldContext_AccountingEntry_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountingEntry", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_customers(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_customers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Customers(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Customer)
	fc.Result = res
	return ec.marshalOCustomer2ᚕᚖmazzaᚋentᚐCustomerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_customers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Customer_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Customer_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Customer_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Customer_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Customer_address(ctx, field)
			case "city":
				return ec.fieldContext_Customer_city(ctx, field)
			case "country":
				return ec.fieldContext_Customer_country(ctx, field)
			case "description":
				return ec.fieldContext_Customer_description(ctx, field)
			case "email":
				return ec.fieldContext_Customer_email(ctx, field)
			case "isdefault":
				return ec.fieldContext_Customer_isdefault(ctx, field)
			case "name":
				return ec.fieldContext_Customer_name(ctx, field)
			case "phone":
				return ec.fieldContext_Customer_phone(ctx, field)
			case "taxid":
				return ec.fieldContext_Customer_taxid(ctx, field)
			case "company":
				return ec.fieldContext_Customer_company(ctx, field)
			case "receivables":
				return ec.fieldContext_Customer_receivables(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Customer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_employees(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_employees(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Employees(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Employee)
	fc.Result = res
	return ec.marshalOEmployee2ᚕᚖmazzaᚋentᚐEmployeeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_employees(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Employee_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Employee_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Employee_deletedat(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "gender":
				return ec.fieldContext_Employee_gender(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "company":
				return ec.fieldContext_Employee_company(ctx, field)
			case "user":
				return ec.fieldContext_Employee_user(ctx, field)
			case "subordinates":
				return ec.fieldContext_Employee_subordinates(ctx, field)
			case "leader":
				return ec.fieldContext_Employee_leader(ctx, field)
			case "workshifts":
				return ec.fieldContext_Employee_workshifts(ctx, field)
			case "approvedworkshifts":
				return ec.fieldContext_Employee_approvedworkshifts(ctx, field)
			case "assignedtasks":
				return ec.fieldContext_Employee_assignedtasks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_files(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_files(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Files(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.File)
	fc.Result = res
	return ec.marshalOFile2ᚕᚖmazzaᚋentᚐFileᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_files(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_File_id(ctx, field)
			case "createdat":
				return ec.fieldContext_File_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_File_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_File_deletedat(ctx, field)
			case "category":
				return ec.fieldContext_File_category(ctx, field)
			case "extension":
				return ec.fieldContext_File_extension(ctx, field)
			case "size":
				return ec.fieldContext_File_size(ctx, field)
			case "url":
				return ec.fieldContext_File_url(ctx, field)
			case "description":
				return ec.fieldContext_File_description(ctx, field)
			case "company":
				return ec.fieldContext_File_company(ctx, field)
			case "product":
				return ec.fieldContext_File_product(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type File", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_products(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_products(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Products(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Product)
	fc.Result = res
	return ec.marshalOProduct2ᚕᚖmazzaᚋentᚐProductᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_products(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Product_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Product_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Product_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Product_deletedat(ctx, field)
			case "description":
				return ec.fieldContext_Product_description(ctx, field)
			case "isdefault":
				return ec.fieldContext_Product_isdefault(ctx, field)
			case "minimumstock":
				return ec.fieldContext_Product_minimumstock(ctx, field)
			case "name":
				return ec.fieldContext_Product_name(ctx, field)
			case "price":
				return ec.fieldContext_Product_price(ctx, field)
			case "sku":
				return ec.fieldContext_Product_sku(ctx, field)
			case "stock":
				return ec.fieldContext_Product_stock(ctx, field)
			case "category":
				return ec.fieldContext_Product_category(ctx, field)
			case "unitcost":
				return ec.fieldContext_Product_unitcost(ctx, field)
			case "company":
				return ec.fieldContext_Product_company(ctx, field)
			case "pictures":
				return ec.fieldContext_Product_pictures(ctx, field)
			case "productmovements":
				return ec.fieldContext_Product_productmovements(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Product", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_suppliers(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_suppliers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Suppliers(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Supplier)
	fc.Result = res
	return ec.marshalOSupplier2ᚕᚖmazzaᚋentᚐSupplierᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_suppliers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Supplier_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Supplier_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Supplier_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Supplier_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Supplier_address(ctx, field)
			case "city":
				return ec.fieldContext_Supplier_city(ctx, field)
			case "country":
				return ec.fieldContext_Supplier_country(ctx, field)
			case "description":
				return ec.fieldContext_Supplier_description(ctx, field)
			case "email":
				return ec.fieldContext_Supplier_email(ctx, field)
			case "isdefault":
				return ec.fieldContext_Supplier_isdefault(ctx, field)
			case "name":
				return ec.fieldContext_Supplier_name(ctx, field)
			case "phone":
				return ec.fieldContext_Supplier_phone(ctx, field)
			case "taxid":
				return ec.fieldContext_Supplier_taxid(ctx, field)
			case "company":
				return ec.fieldContext_Supplier_company(ctx, field)
			case "payables":
				return ec.fieldContext_Supplier_payables(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Supplier", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_tokens(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_tokens(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tokens(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Token)
	fc.Result = res
	return ec.marshalOToken2ᚕᚖmazzaᚋentᚐTokenᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_tokens(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Token_id(ctx, field)
			case "expiry":
				return ec.fieldContext_Token_expiry(ctx, field)
			case "category":
				return ec.fieldContext_Token_category(ctx, field)
			case "token":
				return ec.fieldContext_Token_token(ctx, field)
			case "company":
				return ec.fieldContext_Token_company(ctx, field)
			case "user":
				return ec.fieldContext_Token_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Token", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_treasuries(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_treasuries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Treasuries(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Treasury)
	fc.Result = res
	return ec.marshalOTreasury2ᚕᚖmazzaᚋentᚐTreasuryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_treasuries(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Treasury_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Treasury_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Treasury_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Treasury_deletedat(ctx, field)
			case "accountnumber":
				return ec.fieldContext_Treasury_accountnumber(ctx, field)
			case "balance":
				return ec.fieldContext_Treasury_balance(ctx, field)
			case "bankname":
				return ec.fieldContext_Treasury_bankname(ctx, field)
			case "currency":
				return ec.fieldContext_Treasury_currency(ctx, field)
			case "description":
				return ec.fieldContext_Treasury_description(ctx, field)
			case "iban":
				return ec.fieldContext_Treasury_iban(ctx, field)
			case "isdefault":
				return ec.fieldContext_Treasury_isdefault(ctx, field)
			case "ismainaccount":
				return ec.fieldContext_Treasury_ismainaccount(ctx, field)
			case "name":
				return ec.fieldContext_Treasury_name(ctx, field)
			case "category":
				return ec.fieldContext_Treasury_category(ctx, field)
			case "swiftcode":
				return ec.fieldContext_Treasury_swiftcode(ctx, field)
			case "company":
				return ec.fieldContext_Treasury_company(ctx, field)
			case "cashmovements":
				return ec.fieldContext_Treasury_cashmovements(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Treasury", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_workshifts(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_workshifts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkShifts(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Workshift)
	fc.Result = res
	return ec.marshalOWorkshift2ᚕᚖmazzaᚋentᚐWorkshiftᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_workshifts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Workshift_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Workshift_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Workshift_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Workshift_deletedat(ctx, field)
			case "approvedat":
				return ec.fieldContext_Workshift_approvedat(ctx, field)
			case "clockin":
				return ec.fieldContext_Workshift_clockin(ctx, field)
			case "clockout":
				return ec.fieldContext_Workshift_clockout(ctx, field)
			case "clockinlocation":
				return ec.fieldContext_Workshift_clockinlocation(ctx, field)
			case "clockoutlocation":
				return ec.fieldContext_Workshift_clockoutlocation(ctx, field)
			case "description":
				return ec.fieldContext_Workshift_description(ctx, field)
			case "note":
				return ec.fieldContext_Workshift_note(ctx, field)
			case "status":
				return ec.fieldContext_Workshift_status(ctx, field)
			case "company":
				return ec.fieldContext_Workshift_company(ctx, field)
			case "employee":
				return ec.fieldContext_Workshift_employee(ctx, field)
			case "approvedby":
				return ec.fieldContext_Workshift_approvedby(ctx, field)
			case "worktask":
				return ec.fieldContext_Workshift_worktask(ctx, field)
			case "editrequest":
				return ec.fieldContext_Workshift_editrequest(ctx, field)
			case "workshift":
				return ec.fieldContext_Workshift_workshift(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Workshift", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_worktasks(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_worktasks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkTasks(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Worktask)
	fc.Result = res
	return ec.marshalOWorktask2ᚕᚖmazzaᚋentᚐWorktaskᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_worktasks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Worktask_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Worktask_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Worktask_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Worktask_deletedat(ctx, field)
			case "description":
				return ec.fieldContext_Worktask_description(ctx, field)
			case "status":
				return ec.fieldContext_Worktask_status(ctx, field)
			case "subtasks":
				return ec.fieldContext_Worktask_subtasks(ctx, field)
			case "title":
				return ec.fieldContext_Worktask_title(ctx, field)
			case "starttime":
				return ec.fieldContext_Worktask_starttime(ctx, field)
			case "endtime":
				return ec.fieldContext_Worktask_endtime(ctx, field)
			case "company":
				return ec.fieldContext_Worktask_company(ctx, field)
			case "createdby":
				return ec.fieldContext_Worktask_createdby(ctx, field)
			case "assignedto":
				return ec.fieldContext_Worktask_assignedto(ctx, field)
			case "workshifts":
				return ec.fieldContext_Worktask_workshifts(ctx, field)
			case "worktags":
				return ec.fieldContext_Worktask_worktags(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Worktask", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_worktags(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_worktags(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkTags(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Worktag)
	fc.Result = res
	return ec.marshalOWorktag2ᚕᚖmazzaᚋentᚐWorktagᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_worktags(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Worktag_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Worktag_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Worktag_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Worktag_deletedat(ctx, field)
			case "name":
				return ec.fieldContext_Worktag_name(ctx, field)
			case "color":
				return ec.fieldContext_Worktag_color(ctx, field)
			case "company":
				return ec.fieldContext_Worktag_company(ctx, field)
			case "worktasks":
				return ec.fieldContext_Worktag_worktasks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Worktag", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_users(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_users(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Users(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖmazzaᚋentᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_users(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdat":
				return ec.fieldContext_User_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_User_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_User_deletedat(ctx, field)
			case "fcmtoken":
				return ec.fieldContext_User_fcmtoken(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "notverified":
				return ec.fieldContext_User_notverified(ctx, field)
			case "accountingentries":
				return ec.fieldContext_User_accountingentries(ctx, field)
			case "company":
				return ec.fieldContext_User_company(ctx, field)
			case "assignedroles":
				return ec.fieldContext_User_assignedroles(ctx, field)
			case "createdtasks":
				return ec.fieldContext_User_createdtasks(ctx, field)
			case "employee":
				return ec.fieldContext_User_employee(ctx, field)
			case "tokens":
				return ec.fieldContext_User_tokens(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_daughtercompanies(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_daughtercompanies(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DaughterCompanies(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Company)
	fc.Result = res
	return ec.marshalOCompany2ᚕᚖmazzaᚋentᚐCompanyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_daughtercompanies(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "worktasks":
				return ec.fieldContext_Company_worktasks(ctx, field)
			case "worktags":
				return ec.fieldContext_Company_worktags(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_parentcompany(ctx context.Context, field graphql.CollectedField, obj *ent.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_parentcompany(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentCompany(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Company)
	fc.Result = res
	return ec.marshalOCompany2ᚖmazzaᚋentᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_parentcompany(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "worktasks":
				return ec.fieldContext_Company_worktasks(ctx, field)
			case "worktags":
				return ec.fieldContext_Company_worktags(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_id(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_createdat(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_createdat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_createdat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_updatedat(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_updatedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_updatedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_deletedat(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_deletedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_deletedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_address(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_address(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_city(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_city(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_city(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_country(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_country(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_description(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_email(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_isdefault(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_isdefault(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDefault, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_isdefault(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_name(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_phone(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_phone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_phone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_taxid(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_taxid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxId, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_taxid(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_company(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Company)
	fc.Result = res
	return ec.marshalOCompany2ᚖmazzaᚋentᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "worktasks":
				return ec.fieldContext_Company_worktasks(ctx, field)
			case "worktags":
				return ec.fieldContext_Company_worktags(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_receivables(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_receivables(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Receivables(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Receivable)
	fc.Result = res
	return ec.marshalOReceivable2ᚕᚖmazzaᚋentᚐReceivableᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_receivables(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Receivable_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Receivable_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Receivable_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Receivable_deletedat(ctx, field)
			case "entrygroup":
				return ec.fieldContext_Receivable_entrygroup(ctx, field)
			case "date":
				return ec.fieldContext_Receivable_date(ctx, field)
			case "outstandingbalance":
				return ec.fieldContext_Receivable_outstandingbalance(ctx, field)
			case "totaltransaction":
				return ec.fieldContext_Receivable_totaltransaction(ctx, field)
			case "daysdue":
				return ec.fieldContext_Receivable_daysdue(ctx, field)
			case "status":
				return ec.fieldContext_Receivable_status(ctx, field)
			case "customer":
				return ec.fieldContext_Receivable_customer(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Receivable", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_id(ctx context.Context, field graphql.CollectedField, obj *ent.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_createdat(ctx context.Context, field graphql.CollectedField, obj *ent.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_createdat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_createdat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_updatedat(ctx context.Context, field graphql.CollectedField, obj *ent.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_updatedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_updatedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_deletedat(ctx context.Context, field graphql.CollectedField, obj *ent.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_deletedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_deletedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_name(ctx context.Context, field graphql.CollectedField, obj *ent.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_gender(ctx context.Context, field graphql.CollectedField, obj *ent.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_gender(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(employee.Gender)
	fc.Result = res
	return ec.marshalNEmployeeGender2mazzaᚋentᚋemployeeᚐGender(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_gender(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type EmployeeGender does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_position(ctx context.Context, field graphql.CollectedField, obj *ent.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_position(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Position, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_position(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_email(ctx context.Context, field graphql.CollectedField, obj *ent.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_phone(ctx context.Context, field graphql.CollectedField, obj *ent.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_phone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_phone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_company(ctx context.Context, field graphql.CollectedField, obj *ent.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Company)
	fc.Result = res
	return ec.marshalOCompany2ᚖmazzaᚋentᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "worktasks":
				return ec.fieldContext_Company_worktasks(ctx, field)
			case "worktags":
				return ec.fieldContext_Company_worktags(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_user(ctx context.Context, field graphql.CollectedField, obj *ent.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚖmazzaᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_user(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdat":
				return ec.fieldContext_User_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_User_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_User_deletedat(ctx, field)
			case "fcmtoken":
				return ec.fieldContext_User_fcmtoken(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "notverified":
				return ec.fieldContext_User_notverified(ctx, field)
			case "accountingentries":
				return ec.fieldContext_User_accountingentries(ctx, field)
			case "company":
				return ec.fieldContext_User_company(ctx, field)
			case "assignedroles":
				return ec.fieldContext_User_assignedroles(ctx, field)
			case "createdtasks":
				return ec.fieldContext_User_createdtasks(ctx, field)
			case "employee":
				return ec.fieldContext_User_employee(ctx, field)
			case "tokens":
				return ec.fieldContext_User_tokens(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_subordinates(ctx context.Context, field graphql.CollectedField, obj *ent.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_subordinates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subordinates(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Employee)
	fc.Result = res
	return ec.marshalOEmployee2ᚕᚖmazzaᚋentᚐEmployeeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_subordinates(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Employee_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Employee_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Employee_deletedat(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "gender":
				return ec.fieldContext_Employee_gender(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "company":
				return ec.fieldContext_Employee_company(ctx, field)
			case "user":
				return ec.fieldContext_Employee_user(ctx, field)
			case "subordinates":
				return ec.fieldContext_Employee_subordinates(ctx, field)
			case "leader":
				return ec.fieldContext_Employee_leader(ctx, field)
			case "workshifts":
				return ec.fieldContext_Employee_workshifts(ctx, field)
			case "approvedworkshifts":
				return ec.fieldContext_Employee_approvedworkshifts(ctx, field)
			case "assignedtasks":
				return ec.fieldContext_Employee_assignedtasks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_leader(ctx context.Context, field graphql.CollectedField, obj *ent.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_leader(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Leader(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Employee)
	fc.Result = res
	return ec.marshalOEmployee2ᚖmazzaᚋentᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_leader(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Employee_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Employee_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Employee_deletedat(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "gender":
				return ec.fieldContext_Employee_gender(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "company":
				return ec.fieldContext_Employee_company(ctx, field)
			case "user":
				return ec.fieldContext_Employee_user(ctx, field)
			case "subordinates":
				return ec.fieldContext_Employee_subordinates(ctx, field)
			case "leader":
				return ec.fieldContext_Employee_leader(ctx, field)
			case "workshifts":
				return ec.fieldContext_Employee_workshifts(ctx, field)
			case "approvedworkshifts":
				return ec.fieldContext_Employee_approvedworkshifts(ctx, field)
			case "assignedtasks":
				return ec.fieldContext_Employee_assignedtasks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_workshifts(ctx context.Context, field graphql.CollectedField, obj *ent.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_workshifts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkShifts(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Workshift)
	fc.Result = res
	return ec.marshalOWorkshift2ᚕᚖmazzaᚋentᚐWorkshiftᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_workshifts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Workshift_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Workshift_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Workshift_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Workshift_deletedat(ctx, field)
			case "approvedat":
				return ec.fieldContext_Workshift_approvedat(ctx, field)
			case "clockin":
				return ec.fieldContext_Workshift_clockin(ctx, field)
			case "clockout":
				return ec.fieldContext_Workshift_clockout(ctx, field)
			case "clockinlocation":
				return ec.fieldContext_Workshift_clockinlocation(ctx, field)
			case "clockoutlocation":
				return ec.fieldContext_Workshift_clockoutlocation(ctx, field)
			case "description":
				return ec.fieldContext_Workshift_description(ctx, field)
			case "note":
				return ec.fieldContext_Workshift_note(ctx, field)
			case "status":
				return ec.fieldContext_Workshift_status(ctx, field)
			case "company":
				return ec.fieldContext_Workshift_company(ctx, field)
			case "employee":
				return ec.fieldContext_Workshift_employee(ctx, field)
			case "approvedby":
				return ec.fieldContext_Workshift_approvedby(ctx, field)
			case "worktask":
				return ec.fieldContext_Workshift_worktask(ctx, field)
			case "editrequest":
				return ec.fieldContext_Workshift_editrequest(ctx, field)
			case "workshift":
				return ec.fieldContext_Workshift_workshift(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Workshift", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_approvedworkshifts(ctx context.Context, field graphql.CollectedField, obj *ent.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_approvedworkshifts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApprovedWorkShifts(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Workshift)
	fc.Result = res
	return ec.marshalOWorkshift2ᚕᚖmazzaᚋentᚐWorkshiftᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_approvedworkshifts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Workshift_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Workshift_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Workshift_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Workshift_deletedat(ctx, field)
			case "approvedat":
				return ec.fieldContext_Workshift_approvedat(ctx, field)
			case "clockin":
				return ec.fieldContext_Workshift_clockin(ctx, field)
			case "clockout":
				return ec.fieldContext_Workshift_clockout(ctx, field)
			case "clockinlocation":
				return ec.fieldContext_Workshift_clockinlocation(ctx, field)
			case "clockoutlocation":
				return ec.fieldContext_Workshift_clockoutlocation(ctx, field)
			case "description":
				return ec.fieldContext_Workshift_description(ctx, field)
			case "note":
				return ec.fieldContext_Workshift_note(ctx, field)
			case "status":
				return ec.fieldContext_Workshift_status(ctx, field)
			case "company":
				return ec.fieldContext_Workshift_company(ctx, field)
			case "employee":
				return ec.fieldContext_Workshift_employee(ctx, field)
			case "approvedby":
				return ec.fieldContext_Workshift_approvedby(ctx, field)
			case "worktask":
				return ec.fieldContext_Workshift_worktask(ctx, field)
			case "editrequest":
				return ec.fieldContext_Workshift_editrequest(ctx, field)
			case "workshift":
				return ec.fieldContext_Workshift_workshift(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Workshift", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_assignedtasks(ctx context.Context, field graphql.CollectedField, obj *ent.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_assignedtasks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssignedTasks(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Worktask)
	fc.Result = res
	return ec.marshalOWorktask2ᚕᚖmazzaᚋentᚐWorktaskᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_assignedtasks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Worktask_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Worktask_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Worktask_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Worktask_deletedat(ctx, field)
			case "description":
				return ec.fieldContext_Worktask_description(ctx, field)
			case "status":
				return ec.fieldContext_Worktask_status(ctx, field)
			case "subtasks":
				return ec.fieldContext_Worktask_subtasks(ctx, field)
			case "title":
				return ec.fieldContext_Worktask_title(ctx, field)
			case "starttime":
				return ec.fieldContext_Worktask_starttime(ctx, field)
			case "endtime":
				return ec.fieldContext_Worktask_endtime(ctx, field)
			case "company":
				return ec.fieldContext_Worktask_company(ctx, field)
			case "createdby":
				return ec.fieldContext_Worktask_createdby(ctx, field)
			case "assignedto":
				return ec.fieldContext_Worktask_assignedto(ctx, field)
			case "workshifts":
				return ec.fieldContext_Worktask_workshifts(ctx, field)
			case "worktags":
				return ec.fieldContext_Worktask_worktags(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Worktask", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_id(ctx context.Context, field graphql.CollectedField, obj *ent.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_createdat(ctx context.Context, field graphql.CollectedField, obj *ent.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_createdat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_createdat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_updatedat(ctx context.Context, field graphql.CollectedField, obj *ent.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_updatedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_updatedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_deletedat(ctx context.Context, field graphql.CollectedField, obj *ent.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_deletedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_deletedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_category(ctx context.Context, field graphql.CollectedField, obj *ent.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(file.Category)
	fc.Result = res
	return ec.marshalNFileCategory2mazzaᚋentᚋfileᚐCategory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_category(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type FileCategory does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_extension(ctx context.Context, field graphql.CollectedField, obj *ent.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_extension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Extension, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_extension(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_size(ctx context.Context, field graphql.CollectedField, obj *ent.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_size(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Size, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_size(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_url(ctx context.Context, field graphql.CollectedField, obj *ent.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_description(ctx context.Context, field graphql.CollectedField, obj *ent.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_company(ctx context.Context, field graphql.CollectedField, obj *ent.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Company)
	fc.Result = res
	return ec.marshalOCompany2ᚖmazzaᚋentᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "worktasks":
				return ec.fieldContext_Company_worktasks(ctx, field)
			case "worktags":
				return ec.fieldContext_Company_worktags(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_product(ctx context.Context, field graphql.CollectedField, obj *ent.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_product(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Product(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Product)
	fc.Result = res
	return ec.marshalOProduct2ᚖmazzaᚋentᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_product(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Product_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Product_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Product_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Product_deletedat(ctx, field)
			case "description":
				return ec.fieldContext_Product_description(ctx, field)
			case "isdefault":
				return ec.fieldContext_Product_isdefault(ctx, field)
			case "minimumstock":
				return ec.fieldContext_Product_minimumstock(ctx, field)
			case "name":
				return ec.fieldContext_Product_name(ctx, field)
			case "price":
				return ec.fieldContext_Product_price(ctx, field)
			case "sku":
				return ec.fieldContext_Product_sku(ctx, field)
			case "stock":
				return ec.fieldContext_Product_stock(ctx, field)
			case "category":
				return ec.fieldContext_Product_category(ctx, field)
			case "unitcost":
				return ec.fieldContext_Product_unitcost(ctx, field)
			case "company":
				return ec.fieldContext_Product_company(ctx, field)
			case "pictures":
				return ec.fieldContext_Product_pictures(ctx, field)
			case "productmovements":
				return ec.fieldContext_Product_productmovements(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Product", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FileConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.FileConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FileConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.FileEdge)
	fc.Result = res
	return ec.marshalOFileEdge2ᚕᚖmazzaᚋentᚐFileEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FileConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FileConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_FileEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_FileEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FileEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FileConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.FileConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FileConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[int])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FileConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FileConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FileConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.FileConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FileConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FileConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FileConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FileEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.FileEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FileEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.File)
	fc.Result = res
	return ec.marshalOFile2ᚖmazzaᚋentᚐFile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FileEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FileEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_File_id(ctx, field)
			case "createdat":
				return ec.fieldContext_File_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_File_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_File_deletedat(ctx, field)
			case "category":
				return ec.fieldContext_File_category(ctx, field)
			case "extension":
				return ec.fieldContext_File_extension(ctx, field)
			case "size":
				return ec.fieldContext_File_size(ctx, field)
			case "url":
				return ec.fieldContext_File_url(ctx, field)
			case "description":
				return ec.fieldContext_File_description(ctx, field)
			case "company":
				return ec.fieldContext_File_company(ctx, field)
			case "product":
				return ec.fieldContext_File_product(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type File", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FileEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.FileEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FileEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[int])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FileEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FileEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LoginOutput_user(ctx context.Context, field graphql.CollectedField, obj *LoginOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LoginOutput_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalNUser2ᚖmazzaᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LoginOutput_user(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LoginOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdat":
				return ec.fieldContext_User_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_User_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_User_deletedat(ctx, field)
			case "fcmtoken":
				return ec.fieldContext_User_fcmtoken(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "notverified":
				return ec.fieldContext_User_notverified(ctx, field)
			case "accountingentries":
				return ec.fieldContext_User_accountingentries(ctx, field)
			case "company":
				return ec.fieldContext_User_company(ctx, field)
			case "assignedroles":
				return ec.fieldContext_User_assignedroles(ctx, field)
			case "createdtasks":
				return ec.fieldContext_User_createdtasks(ctx, field)
			case "employee":
				return ec.fieldContext_User_employee(ctx, field)
			case "tokens":
				return ec.fieldContext_User_tokens(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LoginOutput_companyId(ctx context.Context, field graphql.CollectedField, obj *LoginOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LoginOutput_companyId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LoginOutput_companyId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LoginOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LoginOutput_companies(ctx context.Context, field graphql.CollectedField, obj *LoginOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LoginOutput_companies(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Companies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.Company)
	fc.Result = res
	return ec.marshalNCompany2ᚕᚖmazzaᚋentᚐCompanyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LoginOutput_companies(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LoginOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "worktasks":
				return ec.fieldContext_Company_worktasks(ctx, field)
			case "worktags":
				return ec.fieldContext_Company_worktags(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LoginOutput_accessToken(ctx context.Context, field graphql.CollectedField, obj *LoginOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LoginOutput_accessToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccessToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LoginOutput_accessToken(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LoginOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LoginOutput_refreshToken(ctx context.Context, field graphql.CollectedField, obj *LoginOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LoginOutput_refreshToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RefreshToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LoginOutput_refreshToken(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LoginOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LoginOutput_ttl(ctx context.Context, field graphql.CollectedField, obj *LoginOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LoginOutput_ttl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TTL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LoginOutput_ttl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LoginOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_signup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_signup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Signup(rctx, fc.Args["input"].(SignupInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LoginOutput)
	fc.Result = res
	return ec.marshalNLoginOutput2ᚖmazzaᚐLoginOutput(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_signup(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user":
				return ec.fieldContext_LoginOutput_user(ctx, field)
			case "companyId":
				return ec.fieldContext_LoginOutput_companyId(ctx, field)
			case "companies":
				return ec.fieldContext_LoginOutput_companies(ctx, field)
			case "accessToken":
				return ec.fieldContext_LoginOutput_accessToken(ctx, field)
			case "refreshToken":
				return ec.fieldContext_LoginOutput_refreshToken(ctx, field)
			case "ttl":
				return ec.fieldContext_LoginOutput_ttl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LoginOutput", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_signup_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createCompany(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createCompany(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCompany(rctx, fc.Args["input"].(*ent.CreateCompanyInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Company)
	fc.Result = res
	return ec.marshalOCompany2ᚖmazzaᚋentᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createCompany(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "worktasks":
				return ec.fieldContext_Company_worktasks(ctx, field)
			case "worktags":
				return ec.fieldContext_Company_worktags(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createCompany_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCompany(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCompany(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCompany(rctx, fc.Args["id"].(int), fc.Args["input"].(ent.UpdateCompanyInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Company)
	fc.Result = res
	return ec.marshalNCompany2ᚖmazzaᚋentᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCompany(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "worktasks":
				return ec.fieldContext_Company_worktasks(ctx, field)
			case "worktags":
				return ec.fieldContext_Company_worktags(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCompany_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_invitedUserSignup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_invitedUserSignup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InvitedUserSignup(rctx, fc.Args["input"].(InvitedUserSignupInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalNUser2ᚖmazzaᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_invitedUserSignup(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdat":
				return ec.fieldContext_User_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_User_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_User_deletedat(ctx, field)
			case "fcmtoken":
				return ec.fieldContext_User_fcmtoken(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "notverified":
				return ec.fieldContext_User_notverified(ctx, field)
			case "accountingentries":
				return ec.fieldContext_User_accountingentries(ctx, field)
			case "company":
				return ec.fieldContext_User_company(ctx, field)
			case "assignedroles":
				return ec.fieldContext_User_assignedroles(ctx, field)
			case "createdtasks":
				return ec.fieldContext_User_createdtasks(ctx, field)
			case "employee":
				return ec.fieldContext_User_employee(ctx, field)
			case "tokens":
				return ec.fieldContext_User_tokens(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_invitedUserSignup_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateUser(rctx, fc.Args["input"].(ent.CreateUserInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚖmazzaᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdat":
				return ec.fieldContext_User_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_User_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_User_deletedat(ctx, field)
			case "fcmtoken":
				return ec.fieldContext_User_fcmtoken(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "notverified":
				return ec.fieldContext_User_notverified(ctx, field)
			case "accountingentries":
				return ec.fieldContext_User_accountingentries(ctx, field)
			case "company":
				return ec.fieldContext_User_company(ctx, field)
			case "assignedroles":
				return ec.fieldContext_User_assignedroles(ctx, field)
			case "createdtasks":
				return ec.fieldContext_User_createdtasks(ctx, field)
			case "employee":
				return ec.fieldContext_User_employee(ctx, field)
			case "tokens":
				return ec.fieldContext_User_tokens(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUser(rctx, fc.Args["id"].(int), fc.Args["input"].(ent.UpdateUserInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalNUser2ᚖmazzaᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdat":
				return ec.fieldContext_User_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_User_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_User_deletedat(ctx, field)
			case "fcmtoken":
				return ec.fieldContext_User_fcmtoken(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "notverified":
				return ec.fieldContext_User_notverified(ctx, field)
			case "accountingentries":
				return ec.fieldContext_User_accountingentries(ctx, field)
			case "company":
				return ec.fieldContext_User_company(ctx, field)
			case "assignedroles":
				return ec.fieldContext_User_assignedroles(ctx, field)
			case "createdtasks":
				return ec.fieldContext_User_createdtasks(ctx, field)
			case "employee":
				return ec.fieldContext_User_employee(ctx, field)
			case "tokens":
				return ec.fieldContext_User_tokens(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_forgotPassword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_forgotPassword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ForgotPassword(rctx, fc.Args["username"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_forgotPassword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_forgotPassword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_resetPassword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_resetPassword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ResetPassword(rctx, fc.Args["input"].(ResetPasswordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_resetPassword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_resetPassword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_unsubscribe(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_unsubscribe(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Unsubscribe(rctx, fc.Args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_unsubscribe(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_unsubscribe_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createUserRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createUserRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateUserRole(rctx, fc.Args["input"].(ent.CreateUserRoleInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createUserRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createUserRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createCustomer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createCustomer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCustomer(rctx, fc.Args["input"].(ent.CreateCustomerInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Customer)
	fc.Result = res
	return ec.marshalOCustomer2ᚖmazzaᚋentᚐCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createCustomer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Customer_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Customer_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Customer_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Customer_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Customer_address(ctx, field)
			case "city":
				return ec.fieldContext_Customer_city(ctx, field)
			case "country":
				return ec.fieldContext_Customer_country(ctx, field)
			case "description":
				return ec.fieldContext_Customer_description(ctx, field)
			case "email":
				return ec.fieldContext_Customer_email(ctx, field)
			case "isdefault":
				return ec.fieldContext_Customer_isdefault(ctx, field)
			case "name":
				return ec.fieldContext_Customer_name(ctx, field)
			case "phone":
				return ec.fieldContext_Customer_phone(ctx, field)
			case "taxid":
				return ec.fieldContext_Customer_taxid(ctx, field)
			case "company":
				return ec.fieldContext_Customer_company(ctx, field)
			case "receivables":
				return ec.fieldContext_Customer_receivables(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Customer", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createCustomer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCustomer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCustomer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCustomer(rctx, fc.Args["id"].(int), fc.Args["input"].(ent.UpdateCustomerInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Customer)
	fc.Result = res
	return ec.marshalNCustomer2ᚖmazzaᚋentᚐCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCustomer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Customer_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Customer_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Customer_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Customer_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Customer_address(ctx, field)
			case "city":
				return ec.fieldContext_Customer_city(ctx, field)
			case "country":
				return ec.fieldContext_Customer_country(ctx, field)
			case "description":
				return ec.fieldContext_Customer_description(ctx, field)
			case "email":
				return ec.fieldContext_Customer_email(ctx, field)
			case "isdefault":
				return ec.fieldContext_Customer_isdefault(ctx, field)
			case "name":
				return ec.fieldContext_Customer_name(ctx, field)
			case "phone":
				return ec.fieldContext_Customer_phone(ctx, field)
			case "taxid":
				return ec.fieldContext_Customer_taxid(ctx, field)
			case "company":
				return ec.fieldContext_Customer_company(ctx, field)
			case "receivables":
				return ec.fieldContext_Customer_receivables(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Customer", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCustomer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteCustomer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteCustomer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCustomer(rctx, fc.Args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteCustomer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteCustomer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createEmployee(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createEmployee(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateEmployee(rctx, fc.Args["input"].(ent.CreateEmployeeInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Employee)
	fc.Result = res
	return ec.marshalOEmployee2ᚖmazzaᚋentᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createEmployee(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Employee_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Employee_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Employee_deletedat(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "gender":
				return ec.fieldContext_Employee_gender(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "company":
				return ec.fieldContext_Employee_company(ctx, field)
			case "user":
				return ec.fieldContext_Employee_user(ctx, field)
			case "subordinates":
				return ec.fieldContext_Employee_subordinates(ctx, field)
			case "leader":
				return ec.fieldContext_Employee_leader(ctx, field)
			case "workshifts":
				return ec.fieldContext_Employee_workshifts(ctx, field)
			case "approvedworkshifts":
				return ec.fieldContext_Employee_approvedworkshifts(ctx, field)
			case "assignedtasks":
				return ec.fieldContext_Employee_assignedtasks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createEmployee_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateEmployee(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateEmployee(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEmployee(rctx, fc.Args["id"].(int), fc.Args["input"].(ent.UpdateEmployeeInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Employee)
	fc.Result = res
	return ec.marshalNEmployee2ᚖmazzaᚋentᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateEmployee(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Employee_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Employee_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Employee_deletedat(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "gender":
				return ec.fieldContext_Employee_gender(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "company":
				return ec.fieldContext_Employee_company(ctx, field)
			case "user":
				return ec.fieldContext_Employee_user(ctx, field)
			case "subordinates":
				return ec.fieldContext_Employee_subordinates(ctx, field)
			case "leader":
				return ec.fieldContext_Employee_leader(ctx, field)
			case "workshifts":
				return ec.fieldContext_Employee_workshifts(ctx, field)
			case "approvedworkshifts":
				return ec.fieldContext_Employee_approvedworkshifts(ctx, field)
			case "assignedtasks":
				return ec.fieldContext_Employee_assignedtasks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateEmployee_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteEmployee(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteEmployee(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEmployee(rctx, fc.Args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteEmployee(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteEmployee_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateProduct(rctx, fc.Args["input"].(ent.CreateProductInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Product)
	fc.Result = res
	return ec.marshalOProduct2ᚖmazzaᚋentᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Product_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Product_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Product_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Product_deletedat(ctx, field)
			case "description":
				return ec.fieldContext_Product_description(ctx, field)
			case "isdefault":
				return ec.fieldContext_Product_isdefault(ctx, field)
			case "minimumstock":
				return ec.fieldContext_Product_minimumstock(ctx, field)
			case "name":
				return ec.fieldContext_Product_name(ctx, field)
			case "price":
				return ec.fieldContext_Product_price(ctx, field)
			case "sku":
				return ec.fieldContext_Product_sku(ctx, field)
			case "stock":
				return ec.fieldContext_Product_stock(ctx, field)
			case "category":
				return ec.fieldContext_Product_category(ctx, field)
			case "unitcost":
				return ec.fieldContext_Product_unitcost(ctx, field)
			case "company":
				return ec.fieldContext_Product_company(ctx, field)
			case "pictures":
				return ec.fieldContext_Product_pictures(ctx, field)
			case "productmovements":
				return ec.fieldContext_Product_productmovements(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Product", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createProduct_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProduct(rctx, fc.Args["id"].(int), fc.Args["input"].(ent.UpdateProductInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Product)
	fc.Result = res
	return ec.marshalNProduct2ᚖmazzaᚋentᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Product_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Product_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Product_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Product_deletedat(ctx, field)
			case "description":
				return ec.fieldContext_Product_description(ctx, field)
			case "isdefault":
				return ec.fieldContext_Product_isdefault(ctx, field)
			case "minimumstock":
				return ec.fieldContext_Product_minimumstock(ctx, field)
			case "name":
				return ec.fieldContext_Product_name(ctx, field)
			case "price":
				return ec.fieldContext_Product_price(ctx, field)
			case "sku":
				return ec.fieldContext_Product_sku(ctx, field)
			case "stock":
				return ec.fieldContext_Product_stock(ctx, field)
			case "category":
				return ec.fieldContext_Product_category(ctx, field)
			case "unitcost":
				return ec.fieldContext_Product_unitcost(ctx, field)
			case "company":
				return ec.fieldContext_Product_company(ctx, field)
			case "pictures":
				return ec.fieldContext_Product_pictures(ctx, field)
			case "productmovements":
				return ec.fieldContext_Product_productmovements(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Product", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateProduct_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteProduct(rctx, fc.Args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteProduct_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createSupplier(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createSupplier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateSupplier(rctx, fc.Args["input"].(ent.CreateSupplierInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Supplier)
	fc.Result = res
	return ec.marshalOSupplier2ᚖmazzaᚋentᚐSupplier(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createSupplier(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Supplier_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Supplier_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Supplier_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Supplier_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Supplier_address(ctx, field)
			case "city":
				return ec.fieldContext_Supplier_city(ctx, field)
			case "country":
				return ec.fieldContext_Supplier_country(ctx, field)
			case "description":
				return ec.fieldContext_Supplier_description(ctx, field)
			case "email":
				return ec.fieldContext_Supplier_email(ctx, field)
			case "isdefault":
				return ec.fieldContext_Supplier_isdefault(ctx, field)
			case "name":
				return ec.fieldContext_Supplier_name(ctx, field)
			case "phone":
				return ec.fieldContext_Supplier_phone(ctx, field)
			case "taxid":
				return ec.fieldContext_Supplier_taxid(ctx, field)
			case "company":
				return ec.fieldContext_Supplier_company(ctx, field)
			case "payables":
				return ec.fieldContext_Supplier_payables(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Supplier", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createSupplier_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateSupplier(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateSupplier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSupplier(rctx, fc.Args["id"].(int), fc.Args["input"].(ent.UpdateSupplierInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Supplier)
	fc.Result = res
	return ec.marshalNSupplier2ᚖmazzaᚋentᚐSupplier(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateSupplier(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Supplier_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Supplier_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Supplier_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Supplier_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Supplier_address(ctx, field)
			case "city":
				return ec.fieldContext_Supplier_city(ctx, field)
			case "country":
				return ec.fieldContext_Supplier_country(ctx, field)
			case "description":
				return ec.fieldContext_Supplier_description(ctx, field)
			case "email":
				return ec.fieldContext_Supplier_email(ctx, field)
			case "isdefault":
				return ec.fieldContext_Supplier_isdefault(ctx, field)
			case "name":
				return ec.fieldContext_Supplier_name(ctx, field)
			case "phone":
				return ec.fieldContext_Supplier_phone(ctx, field)
			case "taxid":
				return ec.fieldContext_Supplier_taxid(ctx, field)
			case "company":
				return ec.fieldContext_Supplier_company(ctx, field)
			case "payables":
				return ec.fieldContext_Supplier_payables(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Supplier", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateSupplier_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteSupplier(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteSupplier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSupplier(rctx, fc.Args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteSupplier(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteSupplier_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createTreasury(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createTreasury(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateTreasury(rctx, fc.Args["input"].(ent.CreateTreasuryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Treasury)
	fc.Result = res
	return ec.marshalOTreasury2ᚖmazzaᚋentᚐTreasury(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createTreasury(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Treasury_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Treasury_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Treasury_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Treasury_deletedat(ctx, field)
			case "accountnumber":
				return ec.fieldContext_Treasury_accountnumber(ctx, field)
			case "balance":
				return ec.fieldContext_Treasury_balance(ctx, field)
			case "bankname":
				return ec.fieldContext_Treasury_bankname(ctx, field)
			case "currency":
				return ec.fieldContext_Treasury_currency(ctx, field)
			case "description":
				return ec.fieldContext_Treasury_description(ctx, field)
			case "iban":
				return ec.fieldContext_Treasury_iban(ctx, field)
			case "isdefault":
				return ec.fieldContext_Treasury_isdefault(ctx, field)
			case "ismainaccount":
				return ec.fieldContext_Treasury_ismainaccount(ctx, field)
			case "name":
				return ec.fieldContext_Treasury_name(ctx, field)
			case "category":
				return ec.fieldContext_Treasury_category(ctx, field)
			case "swiftcode":
				return ec.fieldContext_Treasury_swiftcode(ctx, field)
			case "company":
				return ec.fieldContext_Treasury_company(ctx, field)
			case "cashmovements":
				return ec.fieldContext_Treasury_cashmovements(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Treasury", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createTreasury_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateTreasury(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateTreasury(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateTreasury(rctx, fc.Args["id"].(int), fc.Args["input"].(ent.UpdateTreasuryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Treasury)
	fc.Result = res
	return ec.marshalNTreasury2ᚖmazzaᚋentᚐTreasury(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateTreasury(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Treasury_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Treasury_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Treasury_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Treasury_deletedat(ctx, field)
			case "accountnumber":
				return ec.fieldContext_Treasury_accountnumber(ctx, field)
			case "balance":
				return ec.fieldContext_Treasury_balance(ctx, field)
			case "bankname":
				return ec.fieldContext_Treasury_bankname(ctx, field)
			case "currency":
				return ec.fieldContext_Treasury_currency(ctx, field)
			case "description":
				return ec.fieldContext_Treasury_description(ctx, field)
			case "iban":
				return ec.fieldContext_Treasury_iban(ctx, field)
			case "isdefault":
				return ec.fieldContext_Treasury_isdefault(ctx, field)
			case "ismainaccount":
				return ec.fieldContext_Treasury_ismainaccount(ctx, field)
			case "name":
				return ec.fieldContext_Treasury_name(ctx, field)
			case "category":
				return ec.fieldContext_Treasury_category(ctx, field)
			case "swiftcode":
				return ec.fieldContext_Treasury_swiftcode(ctx, field)
			case "company":
				return ec.fieldContext_Treasury_company(ctx, field)
			case "cashmovements":
				return ec.fieldContext_Treasury_cashmovements(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Treasury", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateTreasury_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteTreasury(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteTreasury(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteTreasury(rctx, fc.Args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteTreasury(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteTreasury_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createWorkShift(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createWorkShift(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateWorkShift(rctx, fc.Args["input"].(ent.CreateWorkshiftInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Workshift)
	fc.Result = res
	return ec.marshalOWorkshift2ᚖmazzaᚋentᚐWorkshift(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createWorkShift(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Workshift_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Workshift_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Workshift_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Workshift_deletedat(ctx, field)
			case "approvedat":
				return ec.fieldContext_Workshift_approvedat(ctx, field)
			case "clockin":
				return ec.fieldContext_Workshift_clockin(ctx, field)
			case "clockout":
				return ec.fieldContext_Workshift_clockout(ctx, field)
			case "clockinlocation":
				return ec.fieldContext_Workshift_clockinlocation(ctx, field)
			case "clockoutlocation":
				return ec.fieldContext_Workshift_clockoutlocation(ctx, field)
			case "description":
				return ec.fieldContext_Workshift_description(ctx, field)
			case "note":
				return ec.fieldContext_Workshift_note(ctx, field)
			case "status":
				return ec.fieldContext_Workshift_status(ctx, field)
			case "company":
				return ec.fieldContext_Workshift_company(ctx, field)
			case "employee":
				return ec.fieldContext_Workshift_employee(ctx, field)
			case "approvedby":
				return ec.fieldContext_Workshift_approvedby(ctx, field)
			case "worktask":
				return ec.fieldContext_Workshift_worktask(ctx, field)
			case "editrequest":
				return ec.fieldContext_Workshift_editrequest(ctx, field)
			case "workshift":
				return ec.fieldContext_Workshift_workshift(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Workshift", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createWorkShift_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateWorkShift(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateWorkShift(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateWorkShift(rctx, fc.Args["id"].(int), fc.Args["input"].(ent.UpdateWorkshiftInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Workshift)
	fc.Result = res
	return ec.marshalNWorkshift2ᚖmazzaᚋentᚐWorkshift(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateWorkShift(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Workshift_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Workshift_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Workshift_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Workshift_deletedat(ctx, field)
			case "approvedat":
				return ec.fieldContext_Workshift_approvedat(ctx, field)
			case "clockin":
				return ec.fieldContext_Workshift_clockin(ctx, field)
			case "clockout":
				return ec.fieldContext_Workshift_clockout(ctx, field)
			case "clockinlocation":
				return ec.fieldContext_Workshift_clockinlocation(ctx, field)
			case "clockoutlocation":
				return ec.fieldContext_Workshift_clockoutlocation(ctx, field)
			case "description":
				return ec.fieldContext_Workshift_description(ctx, field)
			case "note":
				return ec.fieldContext_Workshift_note(ctx, field)
			case "status":
				return ec.fieldContext_Workshift_status(ctx, field)
			case "company":
				return ec.fieldContext_Workshift_company(ctx, field)
			case "employee":
				return ec.fieldContext_Workshift_employee(ctx, field)
			case "approvedby":
				return ec.fieldContext_Workshift_approvedby(ctx, field)
			case "worktask":
				return ec.fieldContext_Workshift_worktask(ctx, field)
			case "editrequest":
				return ec.fieldContext_Workshift_editrequest(ctx, field)
			case "workshift":
				return ec.fieldContext_Workshift_workshift(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Workshift", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateWorkShift_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteWorkShift(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteWorkShift(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteWorkShift(rctx, fc.Args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteWorkShift(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteWorkShift_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createWorkTask(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createWorkTask(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateWorkTask(rctx, fc.Args["input"].(ent.CreateWorktaskInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Worktask)
	fc.Result = res
	return ec.marshalOWorktask2ᚖmazzaᚋentᚐWorktask(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createWorkTask(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Worktask_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Worktask_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Worktask_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Worktask_deletedat(ctx, field)
			case "description":
				return ec.fieldContext_Worktask_description(ctx, field)
			case "status":
				return ec.fieldContext_Worktask_status(ctx, field)
			case "subtasks":
				return ec.fieldContext_Worktask_subtasks(ctx, field)
			case "title":
				return ec.fieldContext_Worktask_title(ctx, field)
			case "starttime":
				return ec.fieldContext_Worktask_starttime(ctx, field)
			case "endtime":
				return ec.fieldContext_Worktask_endtime(ctx, field)
			case "company":
				return ec.fieldContext_Worktask_company(ctx, field)
			case "createdby":
				return ec.fieldContext_Worktask_createdby(ctx, field)
			case "assignedto":
				return ec.fieldContext_Worktask_assignedto(ctx, field)
			case "workshifts":
				return ec.fieldContext_Worktask_workshifts(ctx, field)
			case "worktags":
				return ec.fieldContext_Worktask_worktags(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Worktask", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createWorkTask_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateWorkTask(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateWorkTask(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateWorkTask(rctx, fc.Args["id"].(int), fc.Args["input"].(ent.UpdateWorktaskInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Worktask)
	fc.Result = res
	return ec.marshalNWorktask2ᚖmazzaᚋentᚐWorktask(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateWorkTask(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Worktask_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Worktask_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Worktask_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Worktask_deletedat(ctx, field)
			case "description":
				return ec.fieldContext_Worktask_description(ctx, field)
			case "status":
				return ec.fieldContext_Worktask_status(ctx, field)
			case "subtasks":
				return ec.fieldContext_Worktask_subtasks(ctx, field)
			case "title":
				return ec.fieldContext_Worktask_title(ctx, field)
			case "starttime":
				return ec.fieldContext_Worktask_starttime(ctx, field)
			case "endtime":
				return ec.fieldContext_Worktask_endtime(ctx, field)
			case "company":
				return ec.fieldContext_Worktask_company(ctx, field)
			case "createdby":
				return ec.fieldContext_Worktask_createdby(ctx, field)
			case "assignedto":
				return ec.fieldContext_Worktask_assignedto(ctx, field)
			case "workshifts":
				return ec.fieldContext_Worktask_workshifts(ctx, field)
			case "worktags":
				return ec.fieldContext_Worktask_worktags(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Worktask", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateWorkTask_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteWorkTask(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteWorkTask(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteWorkTask(rctx, fc.Args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteWorkTask(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteWorkTask_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createWorkTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createWorkTag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateWorkTag(rctx, fc.Args["input"].(ent.CreateWorktagInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Worktag)
	fc.Result = res
	return ec.marshalOWorktag2ᚖmazzaᚋentᚐWorktag(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createWorkTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Worktag_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Worktag_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Worktag_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Worktag_deletedat(ctx, field)
			case "name":
				return ec.fieldContext_Worktag_name(ctx, field)
			case "color":
				return ec.fieldContext_Worktag_color(ctx, field)
			case "company":
				return ec.fieldContext_Worktag_company(ctx, field)
			case "worktasks":
				return ec.fieldContext_Worktag_worktasks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Worktag", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createWorkTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateWorkTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateWorkTag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateWorkTag(rctx, fc.Args["id"].(int), fc.Args["input"].(ent.UpdateWorktagInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Worktag)
	fc.Result = res
	return ec.marshalNWorktag2ᚖmazzaᚋentᚐWorktag(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateWorkTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Worktag_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Worktag_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Worktag_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Worktag_deletedat(ctx, field)
			case "name":
				return ec.fieldContext_Worktag_name(ctx, field)
			case "color":
				return ec.fieldContext_Worktag_color(ctx, field)
			case "company":
				return ec.fieldContext_Worktag_company(ctx, field)
			case "worktasks":
				return ec.fieldContext_Worktag_worktasks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Worktag", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateWorkTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteWorkTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteWorkTag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteWorkTag(rctx, fc.Args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteWorkTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteWorkTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *entgql.PageInfo[int]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasNextPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasNextPage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *entgql.PageInfo[int]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasPreviousPage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *entgql.PageInfo[int]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_startCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entgql.Cursor[int])
	fc.Result = res
	return ec.marshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_startCursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *entgql.PageInfo[int]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_endCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entgql.Cursor[int])
	fc.Result = res
	return ec.marshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_endCursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payable_id(ctx context.Context, field graphql.CollectedField, obj *ent.Payable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payable_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payable_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payable_createdat(ctx context.Context, field graphql.CollectedField, obj *ent.Payable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payable_createdat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payable_createdat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payable_updatedat(ctx context.Context, field graphql.CollectedField, obj *ent.Payable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payable_updatedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payable_updatedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payable_deletedat(ctx context.Context, field graphql.CollectedField, obj *ent.Payable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payable_deletedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payable_deletedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payable_entrygroup(ctx context.Context, field graphql.CollectedField, obj *ent.Payable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payable_entrygroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntryGroup, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payable_entrygroup(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payable_date(ctx context.Context, field graphql.CollectedField, obj *ent.Payable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payable_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payable_date(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payable_outstandingbalance(ctx context.Context, field graphql.CollectedField, obj *ent.Payable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payable_outstandingbalance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutstandingBalance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payable_outstandingbalance(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payable_totaltransaction(ctx context.Context, field graphql.CollectedField, obj *ent.Payable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payable_totaltransaction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalTransaction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payable_totaltransaction(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payable_daysdue(ctx context.Context, field graphql.CollectedField, obj *ent.Payable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payable_daysdue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DaysDue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payable_daysdue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payable_status(ctx context.Context, field graphql.CollectedField, obj *ent.Payable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payable_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(payable.Status)
	fc.Result = res
	return ec.marshalNPayableStatus2mazzaᚋentᚋpayableᚐStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payable_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PayableStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payable_supplier(ctx context.Context, field graphql.CollectedField, obj *ent.Payable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payable_supplier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Supplier(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Supplier)
	fc.Result = res
	return ec.marshalOSupplier2ᚖmazzaᚋentᚐSupplier(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payable_supplier(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payable",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Supplier_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Supplier_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Supplier_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Supplier_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Supplier_address(ctx, field)
			case "city":
				return ec.fieldContext_Supplier_city(ctx, field)
			case "country":
				return ec.fieldContext_Supplier_country(ctx, field)
			case "description":
				return ec.fieldContext_Supplier_description(ctx, field)
			case "email":
				return ec.fieldContext_Supplier_email(ctx, field)
			case "isdefault":
				return ec.fieldContext_Supplier_isdefault(ctx, field)
			case "name":
				return ec.fieldContext_Supplier_name(ctx, field)
			case "phone":
				return ec.fieldContext_Supplier_phone(ctx, field)
			case "taxid":
				return ec.fieldContext_Supplier_taxid(ctx, field)
			case "company":
				return ec.fieldContext_Supplier_company(ctx, field)
			case "payables":
				return ec.fieldContext_Supplier_payables(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Supplier", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_id(ctx context.Context, field graphql.CollectedField, obj *ent.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_createdat(ctx context.Context, field graphql.CollectedField, obj *ent.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_createdat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_createdat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_updatedat(ctx context.Context, field graphql.CollectedField, obj *ent.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_updatedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_updatedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_deletedat(ctx context.Context, field graphql.CollectedField, obj *ent.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_deletedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_deletedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_description(ctx context.Context, field graphql.CollectedField, obj *ent.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_isdefault(ctx context.Context, field graphql.CollectedField, obj *ent.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_isdefault(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDefault, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_isdefault(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_minimumstock(ctx context.Context, field graphql.CollectedField, obj *ent.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_minimumstock(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinimumStock, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_minimumstock(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_name(ctx context.Context, field graphql.CollectedField, obj *ent.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_price(ctx context.Context, field graphql.CollectedField, obj *ent.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_price(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_sku(ctx context.Context, field graphql.CollectedField, obj *ent.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_sku(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sku, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_sku(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_stock(ctx context.Context, field graphql.CollectedField, obj *ent.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_stock(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stock, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_stock(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_category(ctx context.Context, field graphql.CollectedField, obj *ent.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(product.Category)
	fc.Result = res
	return ec.marshalNProductCategory2mazzaᚋentᚋproductᚐCategory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_category(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ProductCategory does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_unitcost(ctx context.Context, field graphql.CollectedField, obj *ent.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_unitcost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnitCost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_unitcost(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_company(ctx context.Context, field graphql.CollectedField, obj *ent.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Company)
	fc.Result = res
	return ec.marshalOCompany2ᚖmazzaᚋentᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "worktasks":
				return ec.fieldContext_Company_worktasks(ctx, field)
			case "worktags":
				return ec.fieldContext_Company_worktags(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_pictures(ctx context.Context, field graphql.CollectedField, obj *ent.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_pictures(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pictures(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.File)
	fc.Result = res
	return ec.marshalOFile2ᚕᚖmazzaᚋentᚐFileᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_pictures(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_File_id(ctx, field)
			case "createdat":
				return ec.fieldContext_File_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_File_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_File_deletedat(ctx, field)
			case "category":
				return ec.fieldContext_File_category(ctx, field)
			case "extension":
				return ec.fieldContext_File_extension(ctx, field)
			case "size":
				return ec.fieldContext_File_size(ctx, field)
			case "url":
				return ec.fieldContext_File_url(ctx, field)
			case "description":
				return ec.fieldContext_File_description(ctx, field)
			case "company":
				return ec.fieldContext_File_company(ctx, field)
			case "product":
				return ec.fieldContext_File_product(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type File", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_productmovements(ctx context.Context, field graphql.CollectedField, obj *ent.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_productmovements(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductMovements(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ProductMovement)
	fc.Result = res
	return ec.marshalOProductMovement2ᚕᚖmazzaᚋentᚐProductMovementᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_productmovements(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProductMovement_id(ctx, field)
			case "createdat":
				return ec.fieldContext_ProductMovement_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_ProductMovement_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_ProductMovement_deletedat(ctx, field)
			case "entrygroup":
				return ec.fieldContext_ProductMovement_entrygroup(ctx, field)
			case "averagecost":
				return ec.fieldContext_ProductMovement_averagecost(ctx, field)
			case "unitcost":
				return ec.fieldContext_ProductMovement_unitcost(ctx, field)
			case "price":
				return ec.fieldContext_ProductMovement_price(ctx, field)
			case "quantity":
				return ec.fieldContext_ProductMovement_quantity(ctx, field)
			case "product":
				return ec.fieldContext_ProductMovement_product(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductMovement", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductMovement_id(ctx context.Context, field graphql.CollectedField, obj *ent.ProductMovement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductMovement_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductMovement_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductMovement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductMovement_createdat(ctx context.Context, field graphql.CollectedField, obj *ent.ProductMovement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductMovement_createdat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductMovement_createdat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductMovement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductMovement_updatedat(ctx context.Context, field graphql.CollectedField, obj *ent.ProductMovement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductMovement_updatedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductMovement_updatedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductMovement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductMovement_deletedat(ctx context.Context, field graphql.CollectedField, obj *ent.ProductMovement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductMovement_deletedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductMovement_deletedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductMovement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductMovement_entrygroup(ctx context.Context, field graphql.CollectedField, obj *ent.ProductMovement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductMovement_entrygroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntryGroup, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductMovement_entrygroup(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductMovement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductMovement_averagecost(ctx context.Context, field graphql.CollectedField, obj *ent.ProductMovement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductMovement_averagecost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AverageCost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductMovement_averagecost(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductMovement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductMovement_unitcost(ctx context.Context, field graphql.CollectedField, obj *ent.ProductMovement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductMovement_unitcost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnitCost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductMovement_unitcost(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductMovement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductMovement_price(ctx context.Context, field graphql.CollectedField, obj *ent.ProductMovement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductMovement_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductMovement_price(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductMovement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductMovement_quantity(ctx context.Context, field graphql.CollectedField, obj *ent.ProductMovement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductMovement_quantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductMovement_quantity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductMovement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductMovement_product(ctx context.Context, field graphql.CollectedField, obj *ent.ProductMovement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductMovement_product(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Product(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Product)
	fc.Result = res
	return ec.marshalOProduct2ᚖmazzaᚋentᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductMovement_product(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductMovement",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Product_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Product_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Product_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Product_deletedat(ctx, field)
			case "description":
				return ec.fieldContext_Product_description(ctx, field)
			case "isdefault":
				return ec.fieldContext_Product_isdefault(ctx, field)
			case "minimumstock":
				return ec.fieldContext_Product_minimumstock(ctx, field)
			case "name":
				return ec.fieldContext_Product_name(ctx, field)
			case "price":
				return ec.fieldContext_Product_price(ctx, field)
			case "sku":
				return ec.fieldContext_Product_sku(ctx, field)
			case "stock":
				return ec.fieldContext_Product_stock(ctx, field)
			case "category":
				return ec.fieldContext_Product_category(ctx, field)
			case "unitcost":
				return ec.fieldContext_Product_unitcost(ctx, field)
			case "company":
				return ec.fieldContext_Product_company(ctx, field)
			case "pictures":
				return ec.fieldContext_Product_pictures(ctx, field)
			case "productmovements":
				return ec.fieldContext_Product_productmovements(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Product", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductMovementConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.ProductMovementConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductMovementConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ProductMovementEdge)
	fc.Result = res
	return ec.marshalOProductMovementEdge2ᚕᚖmazzaᚋentᚐProductMovementEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductMovementConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductMovementConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_ProductMovementEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_ProductMovementEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductMovementEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductMovementConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.ProductMovementConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductMovementConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[int])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductMovementConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductMovementConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductMovementConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.ProductMovementConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductMovementConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductMovementConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductMovementConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductMovementEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.ProductMovementEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductMovementEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ProductMovement)
	fc.Result = res
	return ec.marshalOProductMovement2ᚖmazzaᚋentᚐProductMovement(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductMovementEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductMovementEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProductMovement_id(ctx, field)
			case "createdat":
				return ec.fieldContext_ProductMovement_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_ProductMovement_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_ProductMovement_deletedat(ctx, field)
			case "entrygroup":
				return ec.fieldContext_ProductMovement_entrygroup(ctx, field)
			case "averagecost":
				return ec.fieldContext_ProductMovement_averagecost(ctx, field)
			case "unitcost":
				return ec.fieldContext_ProductMovement_unitcost(ctx, field)
			case "price":
				return ec.fieldContext_ProductMovement_price(ctx, field)
			case "quantity":
				return ec.fieldContext_ProductMovement_quantity(ctx, field)
			case "product":
				return ec.fieldContext_ProductMovement_product(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductMovement", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductMovementEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.ProductMovementEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductMovementEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[int])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductMovementEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductMovementEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_node(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Node(rctx, fc.Args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(ent.Noder)
	fc.Result = res
	return ec.marshalONode2mazzaᚋentᚐNoder(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_node_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_nodes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Nodes(rctx, fc.Args["ids"].([]int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]ent.Noder)
	fc.Result = res
	return ec.marshalNNode2ᚕmazzaᚋentᚐNoder(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_nodes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_nodes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_accountingEntries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_accountingEntries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AccountingEntries(rctx, fc.Args["after"].(*entgql.Cursor[int]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[int]), fc.Args["last"].(*int), fc.Args["orderBy"].(*ent.AccountingEntryOrder), fc.Args["where"].(*ent.AccountingEntryWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.AccountingEntryConnection)
	fc.Result = res
	return ec.marshalNAccountingEntryConnection2ᚖmazzaᚋentᚐAccountingEntryConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_accountingEntries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_AccountingEntryConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_AccountingEntryConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_AccountingEntryConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountingEntryConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_accountingEntries_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_cashMovements(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_cashMovements(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CashMovements(rctx, fc.Args["after"].(*entgql.Cursor[int]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[int]), fc.Args["last"].(*int), fc.Args["where"].(*ent.CashMovementWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CashMovementConnection)
	fc.Result = res
	return ec.marshalNCashMovementConnection2ᚖmazzaᚋentᚐCashMovementConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_cashMovements(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CashMovementConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_CashMovementConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_CashMovementConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CashMovementConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_cashMovements_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_files(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_files(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Files(rctx, fc.Args["after"].(*entgql.Cursor[int]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[int]), fc.Args["last"].(*int), fc.Args["orderBy"].(*ent.FileOrder), fc.Args["where"].(*ent.FileWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.FileConnection)
	fc.Result = res
	return ec.marshalNFileConnection2ᚖmazzaᚋentᚐFileConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_files(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_FileConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_FileConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_FileConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FileConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_files_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_productMovements(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_productMovements(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProductMovements(rctx, fc.Args["after"].(*entgql.Cursor[int]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[int]), fc.Args["last"].(*int), fc.Args["where"].(*ent.ProductMovementWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.ProductMovementConnection)
	fc.Result = res
	return ec.marshalNProductMovementConnection2ᚖmazzaᚋentᚐProductMovementConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_productMovements(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ProductMovementConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ProductMovementConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_ProductMovementConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductMovementConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_productMovements_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_receivables(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_receivables(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Receivables(rctx, fc.Args["after"].(*entgql.Cursor[int]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[int]), fc.Args["last"].(*int), fc.Args["where"].(*ent.ReceivableWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.ReceivableConnection)
	fc.Result = res
	return ec.marshalNReceivableConnection2ᚖmazzaᚋentᚐReceivableConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_receivables(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ReceivableConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ReceivableConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_ReceivableConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ReceivableConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_receivables_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_tokens(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_tokens(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Tokens(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.Token)
	fc.Result = res
	return ec.marshalNToken2ᚕᚖmazzaᚋentᚐTokenᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_tokens(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Token_id(ctx, field)
			case "expiry":
				return ec.fieldContext_Token_expiry(ctx, field)
			case "category":
				return ec.fieldContext_Token_category(ctx, field)
			case "token":
				return ec.fieldContext_Token_token(ctx, field)
			case "company":
				return ec.fieldContext_Token_company(ctx, field)
			case "user":
				return ec.fieldContext_Token_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Token", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_workshifts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_workshifts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Workshifts(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.Workshift)
	fc.Result = res
	return ec.marshalNWorkshift2ᚕᚖmazzaᚋentᚐWorkshiftᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_workshifts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Workshift_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Workshift_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Workshift_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Workshift_deletedat(ctx, field)
			case "approvedat":
				return ec.fieldContext_Workshift_approvedat(ctx, field)
			case "clockin":
				return ec.fieldContext_Workshift_clockin(ctx, field)
			case "clockout":
				return ec.fieldContext_Workshift_clockout(ctx, field)
			case "clockinlocation":
				return ec.fieldContext_Workshift_clockinlocation(ctx, field)
			case "clockoutlocation":
				return ec.fieldContext_Workshift_clockoutlocation(ctx, field)
			case "description":
				return ec.fieldContext_Workshift_description(ctx, field)
			case "note":
				return ec.fieldContext_Workshift_note(ctx, field)
			case "status":
				return ec.fieldContext_Workshift_status(ctx, field)
			case "company":
				return ec.fieldContext_Workshift_company(ctx, field)
			case "employee":
				return ec.fieldContext_Workshift_employee(ctx, field)
			case "approvedby":
				return ec.fieldContext_Workshift_approvedby(ctx, field)
			case "worktask":
				return ec.fieldContext_Workshift_worktask(ctx, field)
			case "editrequest":
				return ec.fieldContext_Workshift_editrequest(ctx, field)
			case "workshift":
				return ec.fieldContext_Workshift_workshift(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Workshift", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_verifyPasswordResetToken(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_verifyPasswordResetToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VerifyPasswordResetToken(rctx, fc.Args["token"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_verifyPasswordResetToken(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_verifyPasswordResetToken_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_companies(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_companies(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Companies(rctx, fc.Args["where"].(*ent.CompanyWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.Company)
	fc.Result = res
	return ec.marshalNCompany2ᚕᚖmazzaᚋentᚐCompanyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_companies(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "worktasks":
				return ec.fieldContext_Company_worktasks(ctx, field)
			case "worktags":
				return ec.fieldContext_Company_worktags(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_companies_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_customers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_customers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Customers(rctx, fc.Args["where"].(*ent.CustomerWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.Customer)
	fc.Result = res
	return ec.marshalNCustomer2ᚕᚖmazzaᚋentᚐCustomerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_customers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Customer_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Customer_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Customer_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Customer_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Customer_address(ctx, field)
			case "city":
				return ec.fieldContext_Customer_city(ctx, field)
			case "country":
				return ec.fieldContext_Customer_country(ctx, field)
			case "description":
				return ec.fieldContext_Customer_description(ctx, field)
			case "email":
				return ec.fieldContext_Customer_email(ctx, field)
			case "isdefault":
				return ec.fieldContext_Customer_isdefault(ctx, field)
			case "name":
				return ec.fieldContext_Customer_name(ctx, field)
			case "phone":
				return ec.fieldContext_Customer_phone(ctx, field)
			case "taxid":
				return ec.fieldContext_Customer_taxid(ctx, field)
			case "company":
				return ec.fieldContext_Customer_company(ctx, field)
			case "receivables":
				return ec.fieldContext_Customer_receivables(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Customer", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_customers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_employees(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_employees(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Employees(rctx, fc.Args["where"].(*ent.EmployeeWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.Employee)
	fc.Result = res
	return ec.marshalNEmployee2ᚕᚖmazzaᚋentᚐEmployeeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_employees(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Employee_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Employee_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Employee_deletedat(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "gender":
				return ec.fieldContext_Employee_gender(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "company":
				return ec.fieldContext_Employee_company(ctx, field)
			case "user":
				return ec.fieldContext_Employee_user(ctx, field)
			case "subordinates":
				return ec.fieldContext_Employee_subordinates(ctx, field)
			case "leader":
				return ec.fieldContext_Employee_leader(ctx, field)
			case "workshifts":
				return ec.fieldContext_Employee_workshifts(ctx, field)
			case "approvedworkshifts":
				return ec.fieldContext_Employee_approvedworkshifts(ctx, field)
			case "assignedtasks":
				return ec.fieldContext_Employee_assignedtasks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_employees_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_payables(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_payables(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Payables(rctx, fc.Args["where"].(*ent.PayableWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.Payable)
	fc.Result = res
	return ec.marshalNPayable2ᚕᚖmazzaᚋentᚐPayableᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_payables(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Payable_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Payable_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Payable_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Payable_deletedat(ctx, field)
			case "entrygroup":
				return ec.fieldContext_Payable_entrygroup(ctx, field)
			case "date":
				return ec.fieldContext_Payable_date(ctx, field)
			case "outstandingbalance":
				return ec.fieldContext_Payable_outstandingbalance(ctx, field)
			case "totaltransaction":
				return ec.fieldContext_Payable_totaltransaction(ctx, field)
			case "daysdue":
				return ec.fieldContext_Payable_daysdue(ctx, field)
			case "status":
				return ec.fieldContext_Payable_status(ctx, field)
			case "supplier":
				return ec.fieldContext_Payable_supplier(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Payable", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_payables_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_products(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_products(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Products(rctx, fc.Args["where"].(*ent.ProductWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.Product)
	fc.Result = res
	return ec.marshalNProduct2ᚕᚖmazzaᚋentᚐProductᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_products(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Product_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Product_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Product_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Product_deletedat(ctx, field)
			case "description":
				return ec.fieldContext_Product_description(ctx, field)
			case "isdefault":
				return ec.fieldContext_Product_isdefault(ctx, field)
			case "minimumstock":
				return ec.fieldContext_Product_minimumstock(ctx, field)
			case "name":
				return ec.fieldContext_Product_name(ctx, field)
			case "price":
				return ec.fieldContext_Product_price(ctx, field)
			case "sku":
				return ec.fieldContext_Product_sku(ctx, field)
			case "stock":
				return ec.fieldContext_Product_stock(ctx, field)
			case "category":
				return ec.fieldContext_Product_category(ctx, field)
			case "unitcost":
				return ec.fieldContext_Product_unitcost(ctx, field)
			case "company":
				return ec.fieldContext_Product_company(ctx, field)
			case "pictures":
				return ec.fieldContext_Product_pictures(ctx, field)
			case "productmovements":
				return ec.fieldContext_Product_productmovements(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Product", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_products_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_lowStock(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_lowStock(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().LowStock(rctx, fc.Args["where"].(*ent.ProductWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.Product)
	fc.Result = res
	return ec.marshalNProduct2ᚕᚖmazzaᚋentᚐProductᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_lowStock(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Product_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Product_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Product_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Product_deletedat(ctx, field)
			case "description":
				return ec.fieldContext_Product_description(ctx, field)
			case "isdefault":
				return ec.fieldContext_Product_isdefault(ctx, field)
			case "minimumstock":
				return ec.fieldContext_Product_minimumstock(ctx, field)
			case "name":
				return ec.fieldContext_Product_name(ctx, field)
			case "price":
				return ec.fieldContext_Product_price(ctx, field)
			case "sku":
				return ec.fieldContext_Product_sku(ctx, field)
			case "stock":
				return ec.fieldContext_Product_stock(ctx, field)
			case "category":
				return ec.fieldContext_Product_category(ctx, field)
			case "unitcost":
				return ec.fieldContext_Product_unitcost(ctx, field)
			case "company":
				return ec.fieldContext_Product_company(ctx, field)
			case "pictures":
				return ec.fieldContext_Product_pictures(ctx, field)
			case "productmovements":
				return ec.fieldContext_Product_productmovements(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Product", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_lowStock_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_numberOfProducts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_numberOfProducts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NumberOfProducts(rctx, fc.Args["where"].(*ent.ProductWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_numberOfProducts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_numberOfProducts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_numberOfLowStock(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_numberOfLowStock(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NumberOfLowStock(rctx, fc.Args["where"].(*ent.ProductWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_numberOfLowStock(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_numberOfLowStock_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_numberOfOutOfStock(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_numberOfOutOfStock(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NumberOfOutOfStock(rctx, fc.Args["where"].(*ent.ProductWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_numberOfOutOfStock(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_numberOfOutOfStock_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_suppliers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_suppliers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Suppliers(rctx, fc.Args["where"].(*ent.SupplierWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.Supplier)
	fc.Result = res
	return ec.marshalNSupplier2ᚕᚖmazzaᚋentᚐSupplierᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_suppliers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Supplier_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Supplier_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Supplier_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Supplier_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Supplier_address(ctx, field)
			case "city":
				return ec.fieldContext_Supplier_city(ctx, field)
			case "country":
				return ec.fieldContext_Supplier_country(ctx, field)
			case "description":
				return ec.fieldContext_Supplier_description(ctx, field)
			case "email":
				return ec.fieldContext_Supplier_email(ctx, field)
			case "isdefault":
				return ec.fieldContext_Supplier_isdefault(ctx, field)
			case "name":
				return ec.fieldContext_Supplier_name(ctx, field)
			case "phone":
				return ec.fieldContext_Supplier_phone(ctx, field)
			case "taxid":
				return ec.fieldContext_Supplier_taxid(ctx, field)
			case "company":
				return ec.fieldContext_Supplier_company(ctx, field)
			case "payables":
				return ec.fieldContext_Supplier_payables(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Supplier", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_suppliers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_treasuries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_treasuries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Treasuries(rctx, fc.Args["where"].(*ent.TreasuryWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.Treasury)
	fc.Result = res
	return ec.marshalNTreasury2ᚕᚖmazzaᚋentᚐTreasuryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_treasuries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Treasury_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Treasury_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Treasury_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Treasury_deletedat(ctx, field)
			case "accountnumber":
				return ec.fieldContext_Treasury_accountnumber(ctx, field)
			case "balance":
				return ec.fieldContext_Treasury_balance(ctx, field)
			case "bankname":
				return ec.fieldContext_Treasury_bankname(ctx, field)
			case "currency":
				return ec.fieldContext_Treasury_currency(ctx, field)
			case "description":
				return ec.fieldContext_Treasury_description(ctx, field)
			case "iban":
				return ec.fieldContext_Treasury_iban(ctx, field)
			case "isdefault":
				return ec.fieldContext_Treasury_isdefault(ctx, field)
			case "ismainaccount":
				return ec.fieldContext_Treasury_ismainaccount(ctx, field)
			case "name":
				return ec.fieldContext_Treasury_name(ctx, field)
			case "category":
				return ec.fieldContext_Treasury_category(ctx, field)
			case "swiftcode":
				return ec.fieldContext_Treasury_swiftcode(ctx, field)
			case "company":
				return ec.fieldContext_Treasury_company(ctx, field)
			case "cashmovements":
				return ec.fieldContext_Treasury_cashmovements(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Treasury", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_treasuries_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_users(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_users(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Users(rctx, fc.Args["where"].(*ent.UserWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.User)
	fc.Result = res
	return ec.marshalNUser2ᚕᚖmazzaᚋentᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_users(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdat":
				return ec.fieldContext_User_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_User_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_User_deletedat(ctx, field)
			case "fcmtoken":
				return ec.fieldContext_User_fcmtoken(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "notverified":
				return ec.fieldContext_User_notverified(ctx, field)
			case "accountingentries":
				return ec.fieldContext_User_accountingentries(ctx, field)
			case "company":
				return ec.fieldContext_User_company(ctx, field)
			case "assignedroles":
				return ec.fieldContext_User_assignedroles(ctx, field)
			case "createdtasks":
				return ec.fieldContext_User_createdtasks(ctx, field)
			case "employee":
				return ec.fieldContext_User_employee(ctx, field)
			case "tokens":
				return ec.fieldContext_User_tokens(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_users_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_userRoles(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_userRoles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UserRoles(rctx, fc.Args["where"].(*ent.UserRoleWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.UserRole)
	fc.Result = res
	return ec.marshalNUserRole2ᚕᚖmazzaᚋentᚐUserRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_userRoles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserRole_id(ctx, field)
			case "role":
				return ec.fieldContext_UserRole_role(ctx, field)
			case "company":
				return ec.fieldContext_UserRole_company(ctx, field)
			case "user":
				return ec.fieldContext_UserRole_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserRole", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_userRoles_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_workShifts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_workShifts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().WorkShifts(rctx, fc.Args["where"].(*ent.WorkshiftWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.Workshift)
	fc.Result = res
	return ec.marshalNWorkshift2ᚕᚖmazzaᚋentᚐWorkshiftᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_workShifts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Workshift_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Workshift_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Workshift_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Workshift_deletedat(ctx, field)
			case "approvedat":
				return ec.fieldContext_Workshift_approvedat(ctx, field)
			case "clockin":
				return ec.fieldContext_Workshift_clockin(ctx, field)
			case "clockout":
				return ec.fieldContext_Workshift_clockout(ctx, field)
			case "clockinlocation":
				return ec.fieldContext_Workshift_clockinlocation(ctx, field)
			case "clockoutlocation":
				return ec.fieldContext_Workshift_clockoutlocation(ctx, field)
			case "description":
				return ec.fieldContext_Workshift_description(ctx, field)
			case "note":
				return ec.fieldContext_Workshift_note(ctx, field)
			case "status":
				return ec.fieldContext_Workshift_status(ctx, field)
			case "company":
				return ec.fieldContext_Workshift_company(ctx, field)
			case "employee":
				return ec.fieldContext_Workshift_employee(ctx, field)
			case "approvedby":
				return ec.fieldContext_Workshift_approvedby(ctx, field)
			case "worktask":
				return ec.fieldContext_Workshift_worktask(ctx, field)
			case "editrequest":
				return ec.fieldContext_Workshift_editrequest(ctx, field)
			case "workshift":
				return ec.fieldContext_Workshift_workshift(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Workshift", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_workShifts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_aggregateWorkShift(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_aggregateWorkShift(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AggregateWorkShift(rctx, fc.Args["where"].(*ent.WorkshiftWhereInput), fc.Args["groupBy"].([]ShiftGroupBy))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*WorkShiftAggregationPayload)
	fc.Result = res
	return ec.marshalNWorkShiftAggregationPayload2ᚕᚖmazzaᚐWorkShiftAggregationPayloadᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_aggregateWorkShift(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "date":
				return ec.fieldContext_WorkShiftAggregationPayload_date(ctx, field)
			case "count":
				return ec.fieldContext_WorkShiftAggregationPayload_count(ctx, field)
			case "durationInMinutes":
				return ec.fieldContext_WorkShiftAggregationPayload_durationInMinutes(ctx, field)
			case "pendingCount":
				return ec.fieldContext_WorkShiftAggregationPayload_pendingCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type WorkShiftAggregationPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_aggregateWorkShift_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_workTags(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_workTags(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().WorkTags(rctx, fc.Args["where"].(*ent.WorktagWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.Worktag)
	fc.Result = res
	return ec.marshalNWorktag2ᚕᚖmazzaᚋentᚐWorktagᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_workTags(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Worktag_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Worktag_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Worktag_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Worktag_deletedat(ctx, field)
			case "name":
				return ec.fieldContext_Worktag_name(ctx, field)
			case "color":
				return ec.fieldContext_Worktag_color(ctx, field)
			case "company":
				return ec.fieldContext_Worktag_company(ctx, field)
			case "worktasks":
				return ec.fieldContext_Worktag_worktasks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Worktag", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_workTags_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_workTasks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_workTasks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().WorkTasks(rctx, fc.Args["where"].(*ent.WorktaskWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.Worktask)
	fc.Result = res
	return ec.marshalNWorktask2ᚕᚖmazzaᚋentᚐWorktaskᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_workTasks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Worktask_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Worktask_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Worktask_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Worktask_deletedat(ctx, field)
			case "description":
				return ec.fieldContext_Worktask_description(ctx, field)
			case "status":
				return ec.fieldContext_Worktask_status(ctx, field)
			case "subtasks":
				return ec.fieldContext_Worktask_subtasks(ctx, field)
			case "title":
				return ec.fieldContext_Worktask_title(ctx, field)
			case "starttime":
				return ec.fieldContext_Worktask_starttime(ctx, field)
			case "endtime":
				return ec.fieldContext_Worktask_endtime(ctx, field)
			case "company":
				return ec.fieldContext_Worktask_company(ctx, field)
			case "createdby":
				return ec.fieldContext_Worktask_createdby(ctx, field)
			case "assignedto":
				return ec.fieldContext_Worktask_assignedto(ctx, field)
			case "workshifts":
				return ec.fieldContext_Worktask_workshifts(ctx, field)
			case "worktags":
				return ec.fieldContext_Worktask_worktags(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Worktask", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_workTasks_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Receivable_id(ctx context.Context, field graphql.CollectedField, obj *ent.Receivable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Receivable_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Receivable_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Receivable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Receivable_createdat(ctx context.Context, field graphql.CollectedField, obj *ent.Receivable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Receivable_createdat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Receivable_createdat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Receivable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Receivable_updatedat(ctx context.Context, field graphql.CollectedField, obj *ent.Receivable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Receivable_updatedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Receivable_updatedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Receivable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Receivable_deletedat(ctx context.Context, field graphql.CollectedField, obj *ent.Receivable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Receivable_deletedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Receivable_deletedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Receivable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Receivable_entrygroup(ctx context.Context, field graphql.CollectedField, obj *ent.Receivable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Receivable_entrygroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntryGroup, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Receivable_entrygroup(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Receivable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Receivable_date(ctx context.Context, field graphql.CollectedField, obj *ent.Receivable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Receivable_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Receivable_date(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Receivable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Receivable_outstandingbalance(ctx context.Context, field graphql.CollectedField, obj *ent.Receivable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Receivable_outstandingbalance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutstandingBalance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Receivable_outstandingbalance(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Receivable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Receivable_totaltransaction(ctx context.Context, field graphql.CollectedField, obj *ent.Receivable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Receivable_totaltransaction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalTransaction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Receivable_totaltransaction(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Receivable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Receivable_daysdue(ctx context.Context, field graphql.CollectedField, obj *ent.Receivable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Receivable_daysdue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DaysDue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Receivable_daysdue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Receivable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Receivable_status(ctx context.Context, field graphql.CollectedField, obj *ent.Receivable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Receivable_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(receivable.Status)
	fc.Result = res
	return ec.marshalNReceivableStatus2mazzaᚋentᚋreceivableᚐStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Receivable_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Receivable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ReceivableStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Receivable_customer(ctx context.Context, field graphql.CollectedField, obj *ent.Receivable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Receivable_customer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Customer(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Customer)
	fc.Result = res
	return ec.marshalOCustomer2ᚖmazzaᚋentᚐCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Receivable_customer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Receivable",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Customer_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Customer_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Customer_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Customer_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Customer_address(ctx, field)
			case "city":
				return ec.fieldContext_Customer_city(ctx, field)
			case "country":
				return ec.fieldContext_Customer_country(ctx, field)
			case "description":
				return ec.fieldContext_Customer_description(ctx, field)
			case "email":
				return ec.fieldContext_Customer_email(ctx, field)
			case "isdefault":
				return ec.fieldContext_Customer_isdefault(ctx, field)
			case "name":
				return ec.fieldContext_Customer_name(ctx, field)
			case "phone":
				return ec.fieldContext_Customer_phone(ctx, field)
			case "taxid":
				return ec.fieldContext_Customer_taxid(ctx, field)
			case "company":
				return ec.fieldContext_Customer_company(ctx, field)
			case "receivables":
				return ec.fieldContext_Customer_receivables(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Customer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReceivableConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.ReceivableConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReceivableConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ReceivableEdge)
	fc.Result = res
	return ec.marshalOReceivableEdge2ᚕᚖmazzaᚋentᚐReceivableEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReceivableConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReceivableConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_ReceivableEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_ReceivableEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ReceivableEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReceivableConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.ReceivableConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReceivableConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[int])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReceivableConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReceivableConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReceivableConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.ReceivableConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReceivableConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReceivableConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReceivableConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReceivableEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.ReceivableEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReceivableEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Receivable)
	fc.Result = res
	return ec.marshalOReceivable2ᚖmazzaᚋentᚐReceivable(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReceivableEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReceivableEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Receivable_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Receivable_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Receivable_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Receivable_deletedat(ctx, field)
			case "entrygroup":
				return ec.fieldContext_Receivable_entrygroup(ctx, field)
			case "date":
				return ec.fieldContext_Receivable_date(ctx, field)
			case "outstandingbalance":
				return ec.fieldContext_Receivable_outstandingbalance(ctx, field)
			case "totaltransaction":
				return ec.fieldContext_Receivable_totaltransaction(ctx, field)
			case "daysdue":
				return ec.fieldContext_Receivable_daysdue(ctx, field)
			case "status":
				return ec.fieldContext_Receivable_status(ctx, field)
			case "customer":
				return ec.fieldContext_Receivable_customer(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Receivable", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReceivableEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.ReceivableEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReceivableEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[int])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReceivableEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReceivableEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Supplier_id(ctx context.Context, field graphql.CollectedField, obj *ent.Supplier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Supplier_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Supplier_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Supplier_createdat(ctx context.Context, field graphql.CollectedField, obj *ent.Supplier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Supplier_createdat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Supplier_createdat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Supplier_updatedat(ctx context.Context, field graphql.CollectedField, obj *ent.Supplier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Supplier_updatedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Supplier_updatedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Supplier_deletedat(ctx context.Context, field graphql.CollectedField, obj *ent.Supplier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Supplier_deletedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Supplier_deletedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Supplier_address(ctx context.Context, field graphql.CollectedField, obj *ent.Supplier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Supplier_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Supplier_address(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Supplier_city(ctx context.Context, field graphql.CollectedField, obj *ent.Supplier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Supplier_city(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Supplier_city(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Supplier_country(ctx context.Context, field graphql.CollectedField, obj *ent.Supplier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Supplier_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Supplier_country(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Supplier_description(ctx context.Context, field graphql.CollectedField, obj *ent.Supplier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Supplier_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Supplier_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Supplier_email(ctx context.Context, field graphql.CollectedField, obj *ent.Supplier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Supplier_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Supplier_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Supplier_isdefault(ctx context.Context, field graphql.CollectedField, obj *ent.Supplier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Supplier_isdefault(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDefault, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Supplier_isdefault(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Supplier_name(ctx context.Context, field graphql.CollectedField, obj *ent.Supplier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Supplier_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Supplier_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Supplier_phone(ctx context.Context, field graphql.CollectedField, obj *ent.Supplier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Supplier_phone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Supplier_phone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Supplier_taxid(ctx context.Context, field graphql.CollectedField, obj *ent.Supplier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Supplier_taxid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxId, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Supplier_taxid(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Supplier_company(ctx context.Context, field graphql.CollectedField, obj *ent.Supplier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Supplier_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Company)
	fc.Result = res
	return ec.marshalOCompany2ᚖmazzaᚋentᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Supplier_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "worktasks":
				return ec.fieldContext_Company_worktasks(ctx, field)
			case "worktags":
				return ec.fieldContext_Company_worktags(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Supplier_payables(ctx context.Context, field graphql.CollectedField, obj *ent.Supplier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Supplier_payables(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Payables(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Payable)
	fc.Result = res
	return ec.marshalOPayable2ᚕᚖmazzaᚋentᚐPayableᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Supplier_payables(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Payable_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Payable_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Payable_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Payable_deletedat(ctx, field)
			case "entrygroup":
				return ec.fieldContext_Payable_entrygroup(ctx, field)
			case "date":
				return ec.fieldContext_Payable_date(ctx, field)
			case "outstandingbalance":
				return ec.fieldContext_Payable_outstandingbalance(ctx, field)
			case "totaltransaction":
				return ec.fieldContext_Payable_totaltransaction(ctx, field)
			case "daysdue":
				return ec.fieldContext_Payable_daysdue(ctx, field)
			case "status":
				return ec.fieldContext_Payable_status(ctx, field)
			case "supplier":
				return ec.fieldContext_Payable_supplier(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Payable", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Token_id(ctx context.Context, field graphql.CollectedField, obj *ent.Token) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Token_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Token_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Token",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Token_expiry(ctx context.Context, field graphql.CollectedField, obj *ent.Token) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Token_expiry(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Expiry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Token_expiry(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Token",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Token_category(ctx context.Context, field graphql.CollectedField, obj *ent.Token) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Token_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(token.Category)
	fc.Result = res
	return ec.marshalNTokenCategory2mazzaᚋentᚋtokenᚐCategory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Token_category(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Token",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TokenCategory does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Token_token(ctx context.Context, field graphql.CollectedField, obj *ent.Token) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Token_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Token_token(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Token",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Token_company(ctx context.Context, field graphql.CollectedField, obj *ent.Token) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Token_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Company)
	fc.Result = res
	return ec.marshalOCompany2ᚖmazzaᚋentᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Token_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Token",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "worktasks":
				return ec.fieldContext_Company_worktasks(ctx, field)
			case "worktags":
				return ec.fieldContext_Company_worktags(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Token_user(ctx context.Context, field graphql.CollectedField, obj *ent.Token) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Token_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚖmazzaᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Token_user(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Token",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdat":
				return ec.fieldContext_User_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_User_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_User_deletedat(ctx, field)
			case "fcmtoken":
				return ec.fieldContext_User_fcmtoken(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "notverified":
				return ec.fieldContext_User_notverified(ctx, field)
			case "accountingentries":
				return ec.fieldContext_User_accountingentries(ctx, field)
			case "company":
				return ec.fieldContext_User_company(ctx, field)
			case "assignedroles":
				return ec.fieldContext_User_assignedroles(ctx, field)
			case "createdtasks":
				return ec.fieldContext_User_createdtasks(ctx, field)
			case "employee":
				return ec.fieldContext_User_employee(ctx, field)
			case "tokens":
				return ec.fieldContext_User_tokens(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Treasury_id(ctx context.Context, field graphql.CollectedField, obj *ent.Treasury) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Treasury_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Treasury_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Treasury",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Treasury_createdat(ctx context.Context, field graphql.CollectedField, obj *ent.Treasury) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Treasury_createdat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Treasury_createdat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Treasury",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Treasury_updatedat(ctx context.Context, field graphql.CollectedField, obj *ent.Treasury) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Treasury_updatedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Treasury_updatedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Treasury",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Treasury_deletedat(ctx context.Context, field graphql.CollectedField, obj *ent.Treasury) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Treasury_deletedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Treasury_deletedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Treasury",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Treasury_accountnumber(ctx context.Context, field graphql.CollectedField, obj *ent.Treasury) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Treasury_accountnumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Treasury_accountnumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Treasury",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Treasury_balance(ctx context.Context, field graphql.CollectedField, obj *ent.Treasury) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Treasury_balance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Balance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Treasury_balance(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Treasury",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Treasury_bankname(ctx context.Context, field graphql.CollectedField, obj *ent.Treasury) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Treasury_bankname(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Treasury_bankname(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Treasury",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Treasury_currency(ctx context.Context, field graphql.CollectedField, obj *ent.Treasury) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Treasury_currency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(treasury.Currency)
	fc.Result = res
	return ec.marshalNTreasuryCurrency2mazzaᚋentᚋtreasuryᚐCurrency(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Treasury_currency(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Treasury",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TreasuryCurrency does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Treasury_description(ctx context.Context, field graphql.CollectedField, obj *ent.Treasury) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Treasury_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Treasury_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Treasury",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Treasury_iban(ctx context.Context, field graphql.CollectedField, obj *ent.Treasury) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Treasury_iban(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Iban, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Treasury_iban(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Treasury",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Treasury_isdefault(ctx context.Context, field graphql.CollectedField, obj *ent.Treasury) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Treasury_isdefault(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDefault, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Treasury_isdefault(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Treasury",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Treasury_ismainaccount(ctx context.Context, field graphql.CollectedField, obj *ent.Treasury) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Treasury_ismainaccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsMainAccount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Treasury_ismainaccount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Treasury",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Treasury_name(ctx context.Context, field graphql.CollectedField, obj *ent.Treasury) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Treasury_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Treasury_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Treasury",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Treasury_category(ctx context.Context, field graphql.CollectedField, obj *ent.Treasury) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Treasury_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(treasury.Category)
	fc.Result = res
	return ec.marshalNTreasuryCategory2mazzaᚋentᚋtreasuryᚐCategory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Treasury_category(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Treasury",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TreasuryCategory does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Treasury_swiftcode(ctx context.Context, field graphql.CollectedField, obj *ent.Treasury) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Treasury_swiftcode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SwiftCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Treasury_swiftcode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Treasury",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Treasury_company(ctx context.Context, field graphql.CollectedField, obj *ent.Treasury) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Treasury_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Company)
	fc.Result = res
	return ec.marshalOCompany2ᚖmazzaᚋentᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Treasury_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Treasury",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "worktasks":
				return ec.fieldContext_Company_worktasks(ctx, field)
			case "worktags":
				return ec.fieldContext_Company_worktags(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Treasury_cashmovements(ctx context.Context, field graphql.CollectedField, obj *ent.Treasury) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Treasury_cashmovements(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CashMovements(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CashMovement)
	fc.Result = res
	return ec.marshalOCashMovement2ᚕᚖmazzaᚋentᚐCashMovementᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Treasury_cashmovements(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Treasury",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CashMovement_id(ctx, field)
			case "createdat":
				return ec.fieldContext_CashMovement_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_CashMovement_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_CashMovement_deletedat(ctx, field)
			case "amount":
				return ec.fieldContext_CashMovement_amount(ctx, field)
			case "date":
				return ec.fieldContext_CashMovement_date(ctx, field)
			case "entrygroup":
				return ec.fieldContext_CashMovement_entrygroup(ctx, field)
			case "treasury":
				return ec.fieldContext_CashMovement_treasury(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CashMovement", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_createdat(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_createdat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_createdat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_updatedat(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_updatedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_updatedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_deletedat(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_deletedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_deletedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_fcmtoken(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_fcmtoken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FcmToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_fcmtoken(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_email(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_name(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_username(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_username(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_username(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_disabled(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_disabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Disabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_disabled(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_notverified(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_notverified(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotVerified, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_notverified(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_accountingentries(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_accountingentries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountingEntries(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.AccountingEntry)
	fc.Result = res
	return ec.marshalOAccountingEntry2ᚕᚖmazzaᚋentᚐAccountingEntryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_accountingentries(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AccountingEntry_id(ctx, field)
			case "createdat":
				return ec.fieldContext_AccountingEntry_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_AccountingEntry_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_AccountingEntry_deletedat(ctx, field)
			case "number":
				return ec.fieldContext_AccountingEntry_number(ctx, field)
			case "group":
				return ec.fieldContext_AccountingEntry_group(ctx, field)
			case "date":
				return ec.fieldContext_AccountingEntry_date(ctx, field)
			case "account":
				return ec.fieldContext_AccountingEntry_account(ctx, field)
			case "label":
				return ec.fieldContext_AccountingEntry_label(ctx, field)
			case "amount":
				return ec.fieldContext_AccountingEntry_amount(ctx, field)
			case "description":
				return ec.fieldContext_AccountingEntry_description(ctx, field)
			case "accounttype":
				return ec.fieldContext_AccountingEntry_accounttype(ctx, field)
			case "isdebit":
				return ec.fieldContext_AccountingEntry_isdebit(ctx, field)
			case "isreversal":
				return ec.fieldContext_AccountingEntry_isreversal(ctx, field)
			case "reversed":
				return ec.fieldContext_AccountingEntry_reversed(ctx, field)
			case "company":
				return ec.fieldContext_AccountingEntry_company(ctx, field)
			case "user":
				return ec.fieldContext_AccountingEntry_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountingEntry", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_company(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.Company)
	fc.Result = res
	return ec.marshalNCompany2ᚕᚖmazzaᚋentᚐCompanyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "worktasks":
				return ec.fieldContext_Company_worktasks(ctx, field)
			case "worktags":
				return ec.fieldContext_Company_worktags(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_assignedroles(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_assignedroles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssignedRoles(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.UserRole)
	fc.Result = res
	return ec.marshalOUserRole2ᚕᚖmazzaᚋentᚐUserRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_assignedroles(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserRole_id(ctx, field)
			case "role":
				return ec.fieldContext_UserRole_role(ctx, field)
			case "company":
				return ec.fieldContext_UserRole_company(ctx, field)
			case "user":
				return ec.fieldContext_UserRole_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserRole", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_createdtasks(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_createdtasks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedTasks(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Worktask)
	fc.Result = res
	return ec.marshalOWorktask2ᚕᚖmazzaᚋentᚐWorktaskᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_createdtasks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Worktask_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Worktask_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Worktask_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Worktask_deletedat(ctx, field)
			case "description":
				return ec.fieldContext_Worktask_description(ctx, field)
			case "status":
				return ec.fieldContext_Worktask_status(ctx, field)
			case "subtasks":
				return ec.fieldContext_Worktask_subtasks(ctx, field)
			case "title":
				return ec.fieldContext_Worktask_title(ctx, field)
			case "starttime":
				return ec.fieldContext_Worktask_starttime(ctx, field)
			case "endtime":
				return ec.fieldContext_Worktask_endtime(ctx, field)
			case "company":
				return ec.fieldContext_Worktask_company(ctx, field)
			case "createdby":
				return ec.fieldContext_Worktask_createdby(ctx, field)
			case "assignedto":
				return ec.fieldContext_Worktask_assignedto(ctx, field)
			case "workshifts":
				return ec.fieldContext_Worktask_workshifts(ctx, field)
			case "worktags":
				return ec.fieldContext_Worktask_worktags(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Worktask", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_employee(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_employee(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Employee(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Employee)
	fc.Result = res
	return ec.marshalOEmployee2ᚖmazzaᚋentᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_employee(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Employee_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Employee_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Employee_deletedat(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "gender":
				return ec.fieldContext_Employee_gender(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "company":
				return ec.fieldContext_Employee_company(ctx, field)
			case "user":
				return ec.fieldContext_Employee_user(ctx, field)
			case "subordinates":
				return ec.fieldContext_Employee_subordinates(ctx, field)
			case "leader":
				return ec.fieldContext_Employee_leader(ctx, field)
			case "workshifts":
				return ec.fieldContext_Employee_workshifts(ctx, field)
			case "approvedworkshifts":
				return ec.fieldContext_Employee_approvedworkshifts(ctx, field)
			case "assignedtasks":
				return ec.fieldContext_Employee_assignedtasks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_tokens(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_tokens(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tokens(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Token)
	fc.Result = res
	return ec.marshalOToken2ᚕᚖmazzaᚋentᚐTokenᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_tokens(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Token_id(ctx, field)
			case "expiry":
				return ec.fieldContext_Token_expiry(ctx, field)
			case "category":
				return ec.fieldContext_Token_category(ctx, field)
			case "token":
				return ec.fieldContext_Token_token(ctx, field)
			case "company":
				return ec.fieldContext_Token_company(ctx, field)
			case "user":
				return ec.fieldContext_Token_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Token", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_id(ctx context.Context, field graphql.CollectedField, obj *ent.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_role(ctx context.Context, field graphql.CollectedField, obj *ent.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_role(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(userrole.Role)
	fc.Result = res
	return ec.marshalNUserRoleRole2mazzaᚋentᚋuserroleᚐRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_role(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UserRoleRole does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_company(ctx context.Context, field graphql.CollectedField, obj *ent.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Company)
	fc.Result = res
	return ec.marshalOCompany2ᚖmazzaᚋentᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "worktasks":
				return ec.fieldContext_Company_worktasks(ctx, field)
			case "worktags":
				return ec.fieldContext_Company_worktags(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_user(ctx context.Context, field graphql.CollectedField, obj *ent.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖmazzaᚋentᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_user(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdat":
				return ec.fieldContext_User_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_User_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_User_deletedat(ctx, field)
			case "fcmtoken":
				return ec.fieldContext_User_fcmtoken(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "notverified":
				return ec.fieldContext_User_notverified(ctx, field)
			case "accountingentries":
				return ec.fieldContext_User_accountingentries(ctx, field)
			case "company":
				return ec.fieldContext_User_company(ctx, field)
			case "assignedroles":
				return ec.fieldContext_User_assignedroles(ctx, field)
			case "createdtasks":
				return ec.fieldContext_User_createdtasks(ctx, field)
			case "employee":
				return ec.fieldContext_User_employee(ctx, field)
			case "tokens":
				return ec.fieldContext_User_tokens(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _WorkShiftAggregationPayload_date(ctx context.Context, field graphql.CollectedField, obj *WorkShiftAggregationPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WorkShiftAggregationPayload_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WorkShiftAggregationPayload_date(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WorkShiftAggregationPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WorkShiftAggregationPayload_count(ctx context.Context, field graphql.CollectedField, obj *WorkShiftAggregationPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WorkShiftAggregationPayload_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WorkShiftAggregationPayload_count(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WorkShiftAggregationPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WorkShiftAggregationPayload_durationInMinutes(ctx context.Context, field graphql.CollectedField, obj *WorkShiftAggregationPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WorkShiftAggregationPayload_durationInMinutes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DurationInMinutes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WorkShiftAggregationPayload_durationInMinutes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WorkShiftAggregationPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WorkShiftAggregationPayload_pendingCount(ctx context.Context, field graphql.CollectedField, obj *WorkShiftAggregationPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WorkShiftAggregationPayload_pendingCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PendingCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WorkShiftAggregationPayload_pendingCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WorkShiftAggregationPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_id(ctx context.Context, field graphql.CollectedField, obj *ent.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_createdat(ctx context.Context, field graphql.CollectedField, obj *ent.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_createdat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_createdat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_updatedat(ctx context.Context, field graphql.CollectedField, obj *ent.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_updatedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_updatedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_deletedat(ctx context.Context, field graphql.CollectedField, obj *ent.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_deletedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_deletedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_approvedat(ctx context.Context, field graphql.CollectedField, obj *ent.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_approvedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApprovedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_approvedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_clockin(ctx context.Context, field graphql.CollectedField, obj *ent.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_clockin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClockIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_clockin(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_clockout(ctx context.Context, field graphql.CollectedField, obj *ent.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_clockout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClockOut, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_clockout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_clockinlocation(ctx context.Context, field graphql.CollectedField, obj *ent.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_clockinlocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClockInLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_clockinlocation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_clockoutlocation(ctx context.Context, field graphql.CollectedField, obj *ent.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_clockoutlocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClockOutLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_clockoutlocation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_description(ctx context.Context, field graphql.CollectedField, obj *ent.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_note(ctx context.Context, field graphql.CollectedField, obj *ent.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_note(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_note(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_status(ctx context.Context, field graphql.CollectedField, obj *ent.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(workshift.Status)
	fc.Result = res
	return ec.marshalNWorkshiftStatus2mazzaᚋentᚋworkshiftᚐStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type WorkshiftStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_company(ctx context.Context, field graphql.CollectedField, obj *ent.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Company)
	fc.Result = res
	return ec.marshalOCompany2ᚖmazzaᚋentᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "worktasks":
				return ec.fieldContext_Company_worktasks(ctx, field)
			case "worktags":
				return ec.fieldContext_Company_worktags(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_employee(ctx context.Context, field graphql.CollectedField, obj *ent.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_employee(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Employee(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Employee)
	fc.Result = res
	return ec.marshalOEmployee2ᚖmazzaᚋentᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_employee(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Employee_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Employee_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Employee_deletedat(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "gender":
				return ec.fieldContext_Employee_gender(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "company":
				return ec.fieldContext_Employee_company(ctx, field)
			case "user":
				return ec.fieldContext_Employee_user(ctx, field)
			case "subordinates":
				return ec.fieldContext_Employee_subordinates(ctx, field)
			case "leader":
				return ec.fieldContext_Employee_leader(ctx, field)
			case "workshifts":
				return ec.fieldContext_Employee_workshifts(ctx, field)
			case "approvedworkshifts":
				return ec.fieldContext_Employee_approvedworkshifts(ctx, field)
			case "assignedtasks":
				return ec.fieldContext_Employee_assignedtasks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_approvedby(ctx context.Context, field graphql.CollectedField, obj *ent.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_approvedby(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApprovedBy(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Employee)
	fc.Result = res
	return ec.marshalOEmployee2ᚖmazzaᚋentᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_approvedby(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Employee_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Employee_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Employee_deletedat(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "gender":
				return ec.fieldContext_Employee_gender(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "company":
				return ec.fieldContext_Employee_company(ctx, field)
			case "user":
				return ec.fieldContext_Employee_user(ctx, field)
			case "subordinates":
				return ec.fieldContext_Employee_subordinates(ctx, field)
			case "leader":
				return ec.fieldContext_Employee_leader(ctx, field)
			case "workshifts":
				return ec.fieldContext_Employee_workshifts(ctx, field)
			case "approvedworkshifts":
				return ec.fieldContext_Employee_approvedworkshifts(ctx, field)
			case "assignedtasks":
				return ec.fieldContext_Employee_assignedtasks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_worktask(ctx context.Context, field graphql.CollectedField, obj *ent.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_worktask(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkTask(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Worktask)
	fc.Result = res
	return ec.marshalOWorktask2ᚖmazzaᚋentᚐWorktask(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_worktask(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Worktask_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Worktask_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Worktask_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Worktask_deletedat(ctx, field)
			case "description":
				return ec.fieldContext_Worktask_description(ctx, field)
			case "status":
				return ec.fieldContext_Worktask_status(ctx, field)
			case "subtasks":
				return ec.fieldContext_Worktask_subtasks(ctx, field)
			case "title":
				return ec.fieldContext_Worktask_title(ctx, field)
			case "starttime":
				return ec.fieldContext_Worktask_starttime(ctx, field)
			case "endtime":
				return ec.fieldContext_Worktask_endtime(ctx, field)
			case "company":
				return ec.fieldContext_Worktask_company(ctx, field)
			case "createdby":
				return ec.fieldContext_Worktask_createdby(ctx, field)
			case "assignedto":
				return ec.fieldContext_Worktask_assignedto(ctx, field)
			case "workshifts":
				return ec.fieldContext_Worktask_workshifts(ctx, field)
			case "worktags":
				return ec.fieldContext_Worktask_worktags(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Worktask", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_editrequest(ctx context.Context, field graphql.CollectedField, obj *ent.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_editrequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EditRequest(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Workshift)
	fc.Result = res
	return ec.marshalOWorkshift2ᚖmazzaᚋentᚐWorkshift(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_editrequest(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Workshift_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Workshift_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Workshift_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Workshift_deletedat(ctx, field)
			case "approvedat":
				return ec.fieldContext_Workshift_approvedat(ctx, field)
			case "clockin":
				return ec.fieldContext_Workshift_clockin(ctx, field)
			case "clockout":
				return ec.fieldContext_Workshift_clockout(ctx, field)
			case "clockinlocation":
				return ec.fieldContext_Workshift_clockinlocation(ctx, field)
			case "clockoutlocation":
				return ec.fieldContext_Workshift_clockoutlocation(ctx, field)
			case "description":
				return ec.fieldContext_Workshift_description(ctx, field)
			case "note":
				return ec.fieldContext_Workshift_note(ctx, field)
			case "status":
				return ec.fieldContext_Workshift_status(ctx, field)
			case "company":
				return ec.fieldContext_Workshift_company(ctx, field)
			case "employee":
				return ec.fieldContext_Workshift_employee(ctx, field)
			case "approvedby":
				return ec.fieldContext_Workshift_approvedby(ctx, field)
			case "worktask":
				return ec.fieldContext_Workshift_worktask(ctx, field)
			case "editrequest":
				return ec.fieldContext_Workshift_editrequest(ctx, field)
			case "workshift":
				return ec.fieldContext_Workshift_workshift(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Workshift", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_workshift(ctx context.Context, field graphql.CollectedField, obj *ent.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_workshift(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkShift(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Workshift)
	fc.Result = res
	return ec.marshalOWorkshift2ᚖmazzaᚋentᚐWorkshift(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_workshift(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Workshift_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Workshift_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Workshift_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Workshift_deletedat(ctx, field)
			case "approvedat":
				return ec.fieldContext_Workshift_approvedat(ctx, field)
			case "clockin":
				return ec.fieldContext_Workshift_clockin(ctx, field)
			case "clockout":
				return ec.fieldContext_Workshift_clockout(ctx, field)
			case "clockinlocation":
				return ec.fieldContext_Workshift_clockinlocation(ctx, field)
			case "clockoutlocation":
				return ec.fieldContext_Workshift_clockoutlocation(ctx, field)
			case "description":
				return ec.fieldContext_Workshift_description(ctx, field)
			case "note":
				return ec.fieldContext_Workshift_note(ctx, field)
			case "status":
				return ec.fieldContext_Workshift_status(ctx, field)
			case "company":
				return ec.fieldContext_Workshift_company(ctx, field)
			case "employee":
				return ec.fieldContext_Workshift_employee(ctx, field)
			case "approvedby":
				return ec.fieldContext_Workshift_approvedby(ctx, field)
			case "worktask":
				return ec.fieldContext_Workshift_worktask(ctx, field)
			case "editrequest":
				return ec.fieldContext_Workshift_editrequest(ctx, field)
			case "workshift":
				return ec.fieldContext_Workshift_workshift(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Workshift", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Worktag_id(ctx context.Context, field graphql.CollectedField, obj *ent.Worktag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Worktag_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Worktag_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Worktag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Worktag_createdat(ctx context.Context, field graphql.CollectedField, obj *ent.Worktag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Worktag_createdat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Worktag_createdat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Worktag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Worktag_updatedat(ctx context.Context, field graphql.CollectedField, obj *ent.Worktag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Worktag_updatedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Worktag_updatedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Worktag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Worktag_deletedat(ctx context.Context, field graphql.CollectedField, obj *ent.Worktag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Worktag_deletedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Worktag_deletedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Worktag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Worktag_name(ctx context.Context, field graphql.CollectedField, obj *ent.Worktag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Worktag_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Worktag_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Worktag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Worktag_color(ctx context.Context, field graphql.CollectedField, obj *ent.Worktag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Worktag_color(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Color, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Worktag_color(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Worktag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Worktag_company(ctx context.Context, field graphql.CollectedField, obj *ent.Worktag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Worktag_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Company)
	fc.Result = res
	return ec.marshalOCompany2ᚖmazzaᚋentᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Worktag_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Worktag",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "worktasks":
				return ec.fieldContext_Company_worktasks(ctx, field)
			case "worktags":
				return ec.fieldContext_Company_worktags(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Worktag_worktasks(ctx context.Context, field graphql.CollectedField, obj *ent.Worktag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Worktag_worktasks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkTasks(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Worktask)
	fc.Result = res
	return ec.marshalOWorktask2ᚕᚖmazzaᚋentᚐWorktaskᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Worktag_worktasks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Worktag",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Worktask_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Worktask_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Worktask_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Worktask_deletedat(ctx, field)
			case "description":
				return ec.fieldContext_Worktask_description(ctx, field)
			case "status":
				return ec.fieldContext_Worktask_status(ctx, field)
			case "subtasks":
				return ec.fieldContext_Worktask_subtasks(ctx, field)
			case "title":
				return ec.fieldContext_Worktask_title(ctx, field)
			case "starttime":
				return ec.fieldContext_Worktask_starttime(ctx, field)
			case "endtime":
				return ec.fieldContext_Worktask_endtime(ctx, field)
			case "company":
				return ec.fieldContext_Worktask_company(ctx, field)
			case "createdby":
				return ec.fieldContext_Worktask_createdby(ctx, field)
			case "assignedto":
				return ec.fieldContext_Worktask_assignedto(ctx, field)
			case "workshifts":
				return ec.fieldContext_Worktask_workshifts(ctx, field)
			case "worktags":
				return ec.fieldContext_Worktask_worktags(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Worktask", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Worktask_id(ctx context.Context, field graphql.CollectedField, obj *ent.Worktask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Worktask_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Worktask_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Worktask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Worktask_createdat(ctx context.Context, field graphql.CollectedField, obj *ent.Worktask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Worktask_createdat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Worktask_createdat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Worktask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Worktask_updatedat(ctx context.Context, field graphql.CollectedField, obj *ent.Worktask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Worktask_updatedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Worktask_updatedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Worktask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Worktask_deletedat(ctx context.Context, field graphql.CollectedField, obj *ent.Worktask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Worktask_deletedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Worktask_deletedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Worktask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Worktask_description(ctx context.Context, field graphql.CollectedField, obj *ent.Worktask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Worktask_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Worktask_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Worktask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Worktask_status(ctx context.Context, field graphql.CollectedField, obj *ent.Worktask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Worktask_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(worktask.Status)
	fc.Result = res
	return ec.marshalNWorktaskStatus2mazzaᚋentᚋworktaskᚐStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Worktask_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Worktask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type WorktaskStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Worktask_subtasks(ctx context.Context, field graphql.CollectedField, obj *ent.Worktask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Worktask_subtasks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subtasks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Worktask_subtasks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Worktask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Worktask_title(ctx context.Context, field graphql.CollectedField, obj *ent.Worktask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Worktask_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Worktask_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Worktask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Worktask_starttime(ctx context.Context, field graphql.CollectedField, obj *ent.Worktask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Worktask_starttime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Worktask_starttime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Worktask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Worktask_endtime(ctx context.Context, field graphql.CollectedField, obj *ent.Worktask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Worktask_endtime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Worktask_endtime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Worktask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Worktask_company(ctx context.Context, field graphql.CollectedField, obj *ent.Worktask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Worktask_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Company)
	fc.Result = res
	return ec.marshalOCompany2ᚖmazzaᚋentᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Worktask_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Worktask",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "worktasks":
				return ec.fieldContext_Company_worktasks(ctx, field)
			case "worktags":
				return ec.fieldContext_Company_worktags(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Worktask_createdby(ctx context.Context, field graphql.CollectedField, obj *ent.Worktask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Worktask_createdby(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚖmazzaᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Worktask_createdby(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Worktask",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdat":
				return ec.fieldContext_User_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_User_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_User_deletedat(ctx, field)
			case "fcmtoken":
				return ec.fieldContext_User_fcmtoken(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "notverified":
				return ec.fieldContext_User_notverified(ctx, field)
			case "accountingentries":
				return ec.fieldContext_User_accountingentries(ctx, field)
			case "company":
				return ec.fieldContext_User_company(ctx, field)
			case "assignedroles":
				return ec.fieldContext_User_assignedroles(ctx, field)
			case "createdtasks":
				return ec.fieldContext_User_createdtasks(ctx, field)
			case "employee":
				return ec.fieldContext_User_employee(ctx, field)
			case "tokens":
				return ec.fieldContext_User_tokens(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Worktask_assignedto(ctx context.Context, field graphql.CollectedField, obj *ent.Worktask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Worktask_assignedto(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssignedTo(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Employee)
	fc.Result = res
	return ec.marshalOEmployee2ᚕᚖmazzaᚋentᚐEmployeeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Worktask_assignedto(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Worktask",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Employee_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Employee_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Employee_deletedat(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "gender":
				return ec.fieldContext_Employee_gender(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "company":
				return ec.fieldContext_Employee_company(ctx, field)
			case "user":
				return ec.fieldContext_Employee_user(ctx, field)
			case "subordinates":
				return ec.fieldContext_Employee_subordinates(ctx, field)
			case "leader":
				return ec.fieldContext_Employee_leader(ctx, field)
			case "workshifts":
				return ec.fieldContext_Employee_workshifts(ctx, field)
			case "approvedworkshifts":
				return ec.fieldContext_Employee_approvedworkshifts(ctx, field)
			case "assignedtasks":
				return ec.fieldContext_Employee_assignedtasks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Worktask_workshifts(ctx context.Context, field graphql.CollectedField, obj *ent.Worktask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Worktask_workshifts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkShifts(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Workshift)
	fc.Result = res
	return ec.marshalOWorkshift2ᚕᚖmazzaᚋentᚐWorkshiftᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Worktask_workshifts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Worktask",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Workshift_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Workshift_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Workshift_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Workshift_deletedat(ctx, field)
			case "approvedat":
				return ec.fieldContext_Workshift_approvedat(ctx, field)
			case "clockin":
				return ec.fieldContext_Workshift_clockin(ctx, field)
			case "clockout":
				return ec.fieldContext_Workshift_clockout(ctx, field)
			case "clockinlocation":
				return ec.fieldContext_Workshift_clockinlocation(ctx, field)
			case "clockoutlocation":
				return ec.fieldContext_Workshift_clockoutlocation(ctx, field)
			case "description":
				return ec.fieldContext_Workshift_description(ctx, field)
			case "note":
				return ec.fieldContext_Workshift_note(ctx, field)
			case "status":
				return ec.fieldContext_Workshift_status(ctx, field)
			case "company":
				return ec.fieldContext_Workshift_company(ctx, field)
			case "employee":
				return ec.fieldContext_Workshift_employee(ctx, field)
			case "approvedby":
				return ec.fieldContext_Workshift_approvedby(ctx, field)
			case "worktask":
				return ec.fieldContext_Workshift_worktask(ctx, field)
			case "editrequest":
				return ec.fieldContext_Workshift_editrequest(ctx, field)
			case "workshift":
				return ec.fieldContext_Workshift_workshift(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Workshift", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Worktask_worktags(ctx context.Context, field graphql.CollectedField, obj *ent.Worktask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Worktask_worktags(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkTags(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Worktag)
	fc.Result = res
	return ec.marshalOWorktag2ᚕᚖmazzaᚋentᚐWorktagᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Worktask_worktags(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Worktask",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Worktag_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Worktag_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Worktag_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Worktag_deletedat(ctx, field)
			case "name":
				return ec.fieldContext_Worktag_name(ctx, field)
			case "color":
				return ec.fieldContext_Worktag_color(ctx, field)
			case "company":
				return ec.fieldContext_Worktag_company(ctx, field)
			case "worktasks":
				return ec.fieldContext_Worktag_worktasks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Worktag", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAccountingEntryOrder(ctx context.Context, obj interface{}) (ent.AccountingEntryOrder, error) {
	var it ent.AccountingEntryOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNAccountingEntryOrderField2ᚖmazzaᚋentᚐAccountingEntryOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAccountingEntryWhereInput(ctx context.Context, obj interface{}) (ent.AccountingEntryWhereInput, error) {
	var it ent.AccountingEntryWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdat", "createdatNEQ", "createdatIn", "createdatNotIn", "createdatGT", "createdatGTE", "createdatLT", "createdatLTE", "updatedat", "updatedatNEQ", "updatedatIn", "updatedatNotIn", "updatedatGT", "updatedatGTE", "updatedatLT", "updatedatLTE", "deletedat", "deletedatNEQ", "deletedatIn", "deletedatNotIn", "deletedatGT", "deletedatGTE", "deletedatLT", "deletedatLTE", "deletedatIsNil", "deletedatNotNil", "number", "numberNEQ", "numberIn", "numberNotIn", "numberGT", "numberGTE", "numberLT", "numberLTE", "group", "groupNEQ", "groupIn", "groupNotIn", "groupGT", "groupGTE", "groupLT", "groupLTE", "date", "dateNEQ", "dateIn", "dateNotIn", "dateGT", "dateGTE", "dateLT", "dateLTE", "account", "accountNEQ", "accountIn", "accountNotIn", "accountGT", "accountGTE", "accountLT", "accountLTE", "accountContains", "accountHasPrefix", "accountHasSuffix", "accountEqualFold", "accountContainsFold", "label", "labelNEQ", "labelIn", "labelNotIn", "labelGT", "labelGTE", "labelLT", "labelLTE", "labelContains", "labelHasPrefix", "labelHasSuffix", "labelEqualFold", "labelContainsFold", "amount", "amountNEQ", "amountIn", "amountNotIn", "amountGT", "amountGTE", "amountLT", "amountLTE", "description", "descriptionNEQ", "descriptionIn", "descriptionNotIn", "descriptionGT", "descriptionGTE", "descriptionLT", "descriptionLTE", "descriptionContains", "descriptionHasPrefix", "descriptionHasSuffix", "descriptionEqualFold", "descriptionContainsFold", "accounttype", "accounttypeNEQ", "accounttypeIn", "accounttypeNotIn", "isdebit", "isdebitNEQ", "isreversal", "isreversalNEQ", "reversed", "reversedNEQ", "hasCompany", "hasCompanyWith", "hasUser", "hasUserWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOAccountingEntryWhereInput2ᚖmazzaᚋentᚐAccountingEntryWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOAccountingEntryWhereInput2ᚕᚖmazzaᚋentᚐAccountingEntryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOAccountingEntryWhereInput2ᚕᚖmazzaᚋentᚐAccountingEntryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "deletedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNEQ = data
		case "deletedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIn = data
		case "deletedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotIn = data
		case "deletedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGT = data
		case "deletedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGTE = data
		case "deletedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLT = data
		case "deletedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLTE = data
		case "deletedatIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIsNil = data
		case "deletedatNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotNil = data
		case "number":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("number"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Number = data
		case "numberNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numberNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumberNEQ = data
		case "numberIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numberIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumberIn = data
		case "numberNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numberNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumberNotIn = data
		case "numberGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numberGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumberGT = data
		case "numberGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numberGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumberGTE = data
		case "numberLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numberLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumberLT = data
		case "numberLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numberLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumberLTE = data
		case "group":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("group"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Group = data
		case "groupNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.GroupNEQ = data
		case "groupIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.GroupIn = data
		case "groupNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.GroupNotIn = data
		case "groupGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.GroupGT = data
		case "groupGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.GroupGTE = data
		case "groupLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.GroupLT = data
		case "groupLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.GroupLTE = data
		case "date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		case "dateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateNEQ = data
		case "dateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateIn = data
		case "dateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateNotIn = data
		case "dateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateGT = data
		case "dateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateGTE = data
		case "dateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateLT = data
		case "dateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateLTE = data
		case "account":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("account"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Account = data
		case "accountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountNEQ = data
		case "accountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountIn = data
		case "accountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountNotIn = data
		case "accountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountGT = data
		case "accountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountGTE = data
		case "accountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountLT = data
		case "accountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountLTE = data
		case "accountContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountContains = data
		case "accountHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountHasPrefix = data
		case "accountHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountHasSuffix = data
		case "accountEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountEqualFold = data
		case "accountContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountContainsFold = data
		case "label":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Label = data
		case "labelNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelNEQ = data
		case "labelIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelIn = data
		case "labelNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelNotIn = data
		case "labelGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelGT = data
		case "labelGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelGTE = data
		case "labelLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelLT = data
		case "labelLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelLTE = data
		case "labelContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelContains = data
		case "labelHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelHasPrefix = data
		case "labelHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelHasSuffix = data
		case "labelEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelEqualFold = data
		case "labelContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelContainsFold = data
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "amountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountNEQ = data
		case "amountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountIn = data
		case "amountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountNotIn = data
		case "amountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountGT = data
		case "amountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountGTE = data
		case "amountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountLT = data
		case "amountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountLTE = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "descriptionNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNEQ = data
		case "descriptionIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIn = data
		case "descriptionNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotIn = data
		case "descriptionGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGT = data
		case "descriptionGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGTE = data
		case "descriptionLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLT = data
		case "descriptionLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLTE = data
		case "descriptionContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContains = data
		case "descriptionHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasPrefix = data
		case "descriptionHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasSuffix = data
		case "descriptionEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionEqualFold = data
		case "descriptionContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContainsFold = data
		case "accounttype":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accounttype"))
			data, err := ec.unmarshalOAccountingEntryAccountType2ᚖmazzaᚋentᚋaccountingentryᚐAccountType(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountType = data
		case "accounttypeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accounttypeNEQ"))
			data, err := ec.unmarshalOAccountingEntryAccountType2ᚖmazzaᚋentᚋaccountingentryᚐAccountType(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountTypeNEQ = data
		case "accounttypeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accounttypeIn"))
			data, err := ec.unmarshalOAccountingEntryAccountType2ᚕmazzaᚋentᚋaccountingentryᚐAccountTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountTypeIn = data
		case "accounttypeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accounttypeNotIn"))
			data, err := ec.unmarshalOAccountingEntryAccountType2ᚕmazzaᚋentᚋaccountingentryᚐAccountTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountTypeNotIn = data
		case "isdebit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdebit"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDebit = data
		case "isdebitNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdebitNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDebitNEQ = data
		case "isreversal":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isreversal"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsReversal = data
		case "isreversalNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isreversalNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsReversalNEQ = data
		case "reversed":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reversed"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Reversed = data
		case "reversedNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reversedNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReversedNEQ = data
		case "hasCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompany"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompany = data
		case "hasCompanyWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompanyWith"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompanyWith = data
		case "hasUser":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUser"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUser = data
		case "hasUserWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUserWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖmazzaᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUserWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCashMovementWhereInput(ctx context.Context, obj interface{}) (ent.CashMovementWhereInput, error) {
	var it ent.CashMovementWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdat", "createdatNEQ", "createdatIn", "createdatNotIn", "createdatGT", "createdatGTE", "createdatLT", "createdatLTE", "updatedat", "updatedatNEQ", "updatedatIn", "updatedatNotIn", "updatedatGT", "updatedatGTE", "updatedatLT", "updatedatLTE", "deletedat", "deletedatNEQ", "deletedatIn", "deletedatNotIn", "deletedatGT", "deletedatGTE", "deletedatLT", "deletedatLTE", "deletedatIsNil", "deletedatNotNil", "amount", "amountNEQ", "amountIn", "amountNotIn", "amountGT", "amountGTE", "amountLT", "amountLTE", "date", "dateNEQ", "dateIn", "dateNotIn", "dateGT", "dateGTE", "dateLT", "dateLTE", "entrygroup", "entrygroupNEQ", "entrygroupIn", "entrygroupNotIn", "entrygroupGT", "entrygroupGTE", "entrygroupLT", "entrygroupLTE", "hasTreasury", "hasTreasuryWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOCashMovementWhereInput2ᚖmazzaᚋentᚐCashMovementWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOCashMovementWhereInput2ᚕᚖmazzaᚋentᚐCashMovementWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOCashMovementWhereInput2ᚕᚖmazzaᚋentᚐCashMovementWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "deletedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNEQ = data
		case "deletedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIn = data
		case "deletedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotIn = data
		case "deletedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGT = data
		case "deletedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGTE = data
		case "deletedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLT = data
		case "deletedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLTE = data
		case "deletedatIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIsNil = data
		case "deletedatNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotNil = data
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "amountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountNEQ = data
		case "amountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountIn = data
		case "amountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountNotIn = data
		case "amountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountGT = data
		case "amountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountGTE = data
		case "amountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountLT = data
		case "amountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountLTE = data
		case "date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		case "dateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateNEQ = data
		case "dateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateIn = data
		case "dateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateNotIn = data
		case "dateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateGT = data
		case "dateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateGTE = data
		case "dateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateLT = data
		case "dateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateLTE = data
		case "entrygroup":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroup"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroup = data
		case "entrygroupNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupNEQ = data
		case "entrygroupIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupIn = data
		case "entrygroupNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupNotIn = data
		case "entrygroupGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupGT = data
		case "entrygroupGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupGTE = data
		case "entrygroupLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupLT = data
		case "entrygroupLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupLTE = data
		case "hasTreasury":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTreasury"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTreasury = data
		case "hasTreasuryWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTreasuryWith"))
			data, err := ec.unmarshalOTreasuryWhereInput2ᚕᚖmazzaᚋentᚐTreasuryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTreasuryWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCompanyOrder(ctx context.Context, obj interface{}) (ent.CompanyOrder, error) {
	var it ent.CompanyOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNCompanyOrderField2ᚖmazzaᚋentᚐCompanyOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCompanyWhereInput(ctx context.Context, obj interface{}) (ent.CompanyWhereInput, error) {
	var it ent.CompanyWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdat", "createdatNEQ", "createdatIn", "createdatNotIn", "createdatGT", "createdatGTE", "createdatLT", "createdatLTE", "updatedat", "updatedatNEQ", "updatedatIn", "updatedatNotIn", "updatedatGT", "updatedatGTE", "updatedatLT", "updatedatLTE", "deletedat", "deletedatNEQ", "deletedatIn", "deletedatNotIn", "deletedatGT", "deletedatGTE", "deletedatLT", "deletedatLTE", "deletedatIsNil", "deletedatNotNil", "address", "addressNEQ", "addressIn", "addressNotIn", "addressGT", "addressGTE", "addressLT", "addressLTE", "addressContains", "addressHasPrefix", "addressHasSuffix", "addressIsNil", "addressNotNil", "addressEqualFold", "addressContainsFold", "basecurrency", "basecurrencyNEQ", "basecurrencyIn", "basecurrencyNotIn", "basecurrencyGT", "basecurrencyGTE", "basecurrencyLT", "basecurrencyLTE", "basecurrencyContains", "basecurrencyHasPrefix", "basecurrencyHasSuffix", "basecurrencyEqualFold", "basecurrencyContainsFold", "ceoname", "ceonameNEQ", "ceonameIn", "ceonameNotIn", "ceonameGT", "ceonameGTE", "ceonameLT", "ceonameLTE", "ceonameContains", "ceonameHasPrefix", "ceonameHasSuffix", "ceonameIsNil", "ceonameNotNil", "ceonameEqualFold", "ceonameContainsFold", "city", "cityNEQ", "cityIn", "cityNotIn", "cityGT", "cityGTE", "cityLT", "cityLTE", "cityContains", "cityHasPrefix", "cityHasSuffix", "cityEqualFold", "cityContainsFold", "country", "countryNEQ", "countryIn", "countryNotIn", "countryGT", "countryGTE", "countryLT", "countryLTE", "countryContains", "countryHasPrefix", "countryHasSuffix", "countryEqualFold", "countryContainsFold", "establishedat", "establishedatNEQ", "establishedatIn", "establishedatNotIn", "establishedatGT", "establishedatGTE", "establishedatLT", "establishedatLTE", "description", "descriptionNEQ", "descriptionIn", "descriptionNotIn", "descriptionGT", "descriptionGTE", "descriptionLT", "descriptionLTE", "descriptionContains", "descriptionHasPrefix", "descriptionHasSuffix", "descriptionIsNil", "descriptionNotNil", "descriptionEqualFold", "descriptionContainsFold", "email", "emailNEQ", "emailIn", "emailNotIn", "emailGT", "emailGTE", "emailLT", "emailLTE", "emailContains", "emailHasPrefix", "emailHasSuffix", "emailIsNil", "emailNotNil", "emailEqualFold", "emailContainsFold", "lastentrydate", "lastentrydateNEQ", "lastentrydateIn", "lastentrydateNotIn", "lastentrydateGT", "lastentrydateGTE", "lastentrydateLT", "lastentrydateLTE", "lastinvoicenumber", "lastinvoicenumberNEQ", "lastinvoicenumberIn", "lastinvoicenumberNotIn", "lastinvoicenumberGT", "lastinvoicenumberGTE", "lastinvoicenumberLT", "lastinvoicenumberLTE", "lastinvoicenumberIsNil", "lastinvoicenumberNotNil", "logo", "logoNEQ", "logoIn", "logoNotIn", "logoGT", "logoGTE", "logoLT", "logoLTE", "logoContains", "logoHasPrefix", "logoHasSuffix", "logoIsNil", "logoNotNil", "logoEqualFold", "logoContainsFold", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "numberofemployees", "numberofemployeesNEQ", "numberofemployeesIn", "numberofemployeesNotIn", "numberofemployeesGT", "numberofemployeesGTE", "numberofemployeesLT", "numberofemployeesLTE", "phone", "phoneNEQ", "phoneIn", "phoneNotIn", "phoneGT", "phoneGTE", "phoneLT", "phoneLTE", "phoneContains", "phoneHasPrefix", "phoneHasSuffix", "phoneIsNil", "phoneNotNil", "phoneEqualFold", "phoneContainsFold", "sector", "sectorNEQ", "sectorIn", "sectorNotIn", "sectorGT", "sectorGTE", "sectorLT", "sectorLTE", "sectorContains", "sectorHasPrefix", "sectorHasSuffix", "sectorIsNil", "sectorNotNil", "sectorEqualFold", "sectorContainsFold", "taxid", "taxidNEQ", "taxidIn", "taxidNotIn", "taxidGT", "taxidGTE", "taxidLT", "taxidLTE", "taxidContains", "taxidHasPrefix", "taxidHasSuffix", "taxidEqualFold", "taxidContainsFold", "vatrate", "vatrateNEQ", "vatrateIn", "vatrateNotIn", "vatrateGT", "vatrateGTE", "vatrateLT", "vatrateLTE", "website", "websiteNEQ", "websiteIn", "websiteNotIn", "websiteGT", "websiteGTE", "websiteLT", "websiteLTE", "websiteContains", "websiteHasPrefix", "websiteHasSuffix", "websiteIsNil", "websiteNotNil", "websiteEqualFold", "websiteContainsFold", "hasAvailableRoles", "hasAvailableRolesWith", "hasAccountingEntries", "hasAccountingEntriesWith", "hasCustomers", "hasCustomersWith", "hasEmployees", "hasEmployeesWith", "hasFiles", "hasFilesWith", "hasProducts", "hasProductsWith", "hasSuppliers", "hasSuppliersWith", "hasTokens", "hasTokensWith", "hasTreasuries", "hasTreasuriesWith", "hasWorkShifts", "hasWorkShiftsWith", "hasWorkTasks", "hasWorkTasksWith", "hasWorkTags", "hasWorkTagsWith", "hasUsers", "hasUsersWith", "hasDaughterCompanies", "hasDaughterCompaniesWith", "hasParentCompany", "hasParentCompanyWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚖmazzaᚋentᚐCompanyWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "deletedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNEQ = data
		case "deletedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIn = data
		case "deletedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotIn = data
		case "deletedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGT = data
		case "deletedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGTE = data
		case "deletedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLT = data
		case "deletedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLTE = data
		case "deletedatIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIsNil = data
		case "deletedatNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotNil = data
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "addressNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressNEQ = data
		case "addressIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressIn = data
		case "addressNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressNotIn = data
		case "addressGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressGT = data
		case "addressGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressGTE = data
		case "addressLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressLT = data
		case "addressLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressLTE = data
		case "addressContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressContains = data
		case "addressHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressHasPrefix = data
		case "addressHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressHasSuffix = data
		case "addressIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressIsNil = data
		case "addressNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressNotNil = data
		case "addressEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressEqualFold = data
		case "addressContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressContainsFold = data
		case "basecurrency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("basecurrency"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseCurrency = data
		case "basecurrencyNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("basecurrencyNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseCurrencyNEQ = data
		case "basecurrencyIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("basecurrencyIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseCurrencyIn = data
		case "basecurrencyNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("basecurrencyNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseCurrencyNotIn = data
		case "basecurrencyGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("basecurrencyGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseCurrencyGT = data
		case "basecurrencyGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("basecurrencyGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseCurrencyGTE = data
		case "basecurrencyLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("basecurrencyLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseCurrencyLT = data
		case "basecurrencyLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("basecurrencyLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseCurrencyLTE = data
		case "basecurrencyContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("basecurrencyContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseCurrencyContains = data
		case "basecurrencyHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("basecurrencyHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseCurrencyHasPrefix = data
		case "basecurrencyHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("basecurrencyHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseCurrencyHasSuffix = data
		case "basecurrencyEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("basecurrencyEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseCurrencyEqualFold = data
		case "basecurrencyContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("basecurrencyContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseCurrencyContainsFold = data
		case "ceoname":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceoname"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CeoName = data
		case "ceonameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceonameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CeoNameNEQ = data
		case "ceonameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceonameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CeoNameIn = data
		case "ceonameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceonameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CeoNameNotIn = data
		case "ceonameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceonameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CeoNameGT = data
		case "ceonameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceonameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CeoNameGTE = data
		case "ceonameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceonameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CeoNameLT = data
		case "ceonameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceonameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CeoNameLTE = data
		case "ceonameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceonameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CeoNameContains = data
		case "ceonameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceonameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CeoNameHasPrefix = data
		case "ceonameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceonameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CeoNameHasSuffix = data
		case "ceonameIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceonameIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CeoNameIsNil = data
		case "ceonameNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceonameNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CeoNameNotNil = data
		case "ceonameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceonameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CeoNameEqualFold = data
		case "ceonameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceonameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CeoNameContainsFold = data
		case "city":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.City = data
		case "cityNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityNEQ = data
		case "cityIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIn = data
		case "cityNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityNotIn = data
		case "cityGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityGT = data
		case "cityGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityGTE = data
		case "cityLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityLT = data
		case "cityLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityLTE = data
		case "cityContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityContains = data
		case "cityHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityHasPrefix = data
		case "cityHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityHasSuffix = data
		case "cityEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityEqualFold = data
		case "cityContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityContainsFold = data
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "countryNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryNEQ = data
		case "countryIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryIn = data
		case "countryNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryNotIn = data
		case "countryGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryGT = data
		case "countryGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryGTE = data
		case "countryLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryLT = data
		case "countryLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryLTE = data
		case "countryContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryContains = data
		case "countryHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryHasPrefix = data
		case "countryHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryHasSuffix = data
		case "countryEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryEqualFold = data
		case "countryContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryContainsFold = data
		case "establishedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("establishedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstablishedAt = data
		case "establishedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("establishedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstablishedAtNEQ = data
		case "establishedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("establishedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstablishedAtIn = data
		case "establishedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("establishedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstablishedAtNotIn = data
		case "establishedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("establishedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstablishedAtGT = data
		case "establishedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("establishedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstablishedAtGTE = data
		case "establishedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("establishedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstablishedAtLT = data
		case "establishedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("establishedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstablishedAtLTE = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "descriptionNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNEQ = data
		case "descriptionIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIn = data
		case "descriptionNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotIn = data
		case "descriptionGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGT = data
		case "descriptionGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGTE = data
		case "descriptionLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLT = data
		case "descriptionLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLTE = data
		case "descriptionContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContains = data
		case "descriptionHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasPrefix = data
		case "descriptionHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasSuffix = data
		case "descriptionIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIsNil = data
		case "descriptionNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotNil = data
		case "descriptionEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionEqualFold = data
		case "descriptionContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContainsFold = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "emailNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNEQ = data
		case "emailIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailIn = data
		case "emailNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNotIn = data
		case "emailGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailGT = data
		case "emailGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailGTE = data
		case "emailLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailLT = data
		case "emailLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailLTE = data
		case "emailContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailContains = data
		case "emailHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailHasPrefix = data
		case "emailHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailHasSuffix = data
		case "emailIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailIsNil = data
		case "emailNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNotNil = data
		case "emailEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailEqualFold = data
		case "emailContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailContainsFold = data
		case "lastentrydate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastentrydate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEntryDate = data
		case "lastentrydateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastentrydateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEntryDateNEQ = data
		case "lastentrydateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastentrydateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEntryDateIn = data
		case "lastentrydateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastentrydateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEntryDateNotIn = data
		case "lastentrydateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastentrydateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEntryDateGT = data
		case "lastentrydateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastentrydateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEntryDateGTE = data
		case "lastentrydateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastentrydateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEntryDateLT = data
		case "lastentrydateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastentrydateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEntryDateLTE = data
		case "lastinvoicenumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastinvoicenumber"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastInvoiceNumber = data
		case "lastinvoicenumberNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastinvoicenumberNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastInvoiceNumberNEQ = data
		case "lastinvoicenumberIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastinvoicenumberIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastInvoiceNumberIn = data
		case "lastinvoicenumberNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastinvoicenumberNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastInvoiceNumberNotIn = data
		case "lastinvoicenumberGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastinvoicenumberGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastInvoiceNumberGT = data
		case "lastinvoicenumberGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastinvoicenumberGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastInvoiceNumberGTE = data
		case "lastinvoicenumberLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastinvoicenumberLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastInvoiceNumberLT = data
		case "lastinvoicenumberLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastinvoicenumberLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastInvoiceNumberLTE = data
		case "lastinvoicenumberIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastinvoicenumberIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastInvoiceNumberIsNil = data
		case "lastinvoicenumberNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastinvoicenumberNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastInvoiceNumberNotNil = data
		case "logo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logo"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Logo = data
		case "logoNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogoNEQ = data
		case "logoIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogoIn = data
		case "logoNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogoNotIn = data
		case "logoGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogoGT = data
		case "logoGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogoGTE = data
		case "logoLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogoLT = data
		case "logoLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogoLTE = data
		case "logoContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogoContains = data
		case "logoHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogoHasPrefix = data
		case "logoHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogoHasSuffix = data
		case "logoIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogoIsNil = data
		case "logoNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogoNotNil = data
		case "logoEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogoEqualFold = data
		case "logoContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogoContainsFold = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "numberofemployees":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numberofemployees"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumberOfEmployees = data
		case "numberofemployeesNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numberofemployeesNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumberOfEmployeesNEQ = data
		case "numberofemployeesIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numberofemployeesIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumberOfEmployeesIn = data
		case "numberofemployeesNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numberofemployeesNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumberOfEmployeesNotIn = data
		case "numberofemployeesGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numberofemployeesGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumberOfEmployeesGT = data
		case "numberofemployeesGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numberofemployeesGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumberOfEmployeesGTE = data
		case "numberofemployeesLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numberofemployeesLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumberOfEmployeesLT = data
		case "numberofemployeesLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numberofemployeesLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumberOfEmployeesLTE = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "phoneNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNEQ = data
		case "phoneIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneIn = data
		case "phoneNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNotIn = data
		case "phoneGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneGT = data
		case "phoneGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneGTE = data
		case "phoneLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneLT = data
		case "phoneLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneLTE = data
		case "phoneContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneContains = data
		case "phoneHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneHasPrefix = data
		case "phoneHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneHasSuffix = data
		case "phoneIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneIsNil = data
		case "phoneNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNotNil = data
		case "phoneEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneEqualFold = data
		case "phoneContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneContainsFold = data
		case "sector":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sector"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Sector = data
		case "sectorNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sectorNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SectorNEQ = data
		case "sectorIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sectorIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SectorIn = data
		case "sectorNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sectorNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SectorNotIn = data
		case "sectorGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sectorGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SectorGT = data
		case "sectorGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sectorGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SectorGTE = data
		case "sectorLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sectorLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SectorLT = data
		case "sectorLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sectorLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SectorLTE = data
		case "sectorContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sectorContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SectorContains = data
		case "sectorHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sectorHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SectorHasPrefix = data
		case "sectorHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sectorHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SectorHasSuffix = data
		case "sectorIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sectorIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SectorIsNil = data
		case "sectorNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sectorNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SectorNotNil = data
		case "sectorEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sectorEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SectorEqualFold = data
		case "sectorContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sectorContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SectorContainsFold = data
		case "taxid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxid"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxId = data
		case "taxidNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdNEQ = data
		case "taxidIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdIn = data
		case "taxidNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdNotIn = data
		case "taxidGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdGT = data
		case "taxidGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdGTE = data
		case "taxidLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdLT = data
		case "taxidLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdLTE = data
		case "taxidContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdContains = data
		case "taxidHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdHasPrefix = data
		case "taxidHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdHasSuffix = data
		case "taxidEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdEqualFold = data
		case "taxidContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdContainsFold = data
		case "vatrate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vatrate"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VatRate = data
		case "vatrateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vatrateNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VatRateNEQ = data
		case "vatrateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vatrateIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.VatRateIn = data
		case "vatrateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vatrateNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.VatRateNotIn = data
		case "vatrateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vatrateGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VatRateGT = data
		case "vatrateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vatrateGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VatRateGTE = data
		case "vatrateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vatrateLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VatRateLT = data
		case "vatrateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vatrateLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VatRateLTE = data
		case "website":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("website"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Website = data
		case "websiteNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteNEQ = data
		case "websiteIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteIn = data
		case "websiteNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteNotIn = data
		case "websiteGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteGT = data
		case "websiteGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteGTE = data
		case "websiteLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteLT = data
		case "websiteLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteLTE = data
		case "websiteContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteContains = data
		case "websiteHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteHasPrefix = data
		case "websiteHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteHasSuffix = data
		case "websiteIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteIsNil = data
		case "websiteNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteNotNil = data
		case "websiteEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteEqualFold = data
		case "websiteContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteContainsFold = data
		case "hasAvailableRoles":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAvailableRoles"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAvailableRoles = data
		case "hasAvailableRolesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAvailableRolesWith"))
			data, err := ec.unmarshalOUserRoleWhereInput2ᚕᚖmazzaᚋentᚐUserRoleWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAvailableRolesWith = data
		case "hasAccountingEntries":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAccountingEntries"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAccountingEntries = data
		case "hasAccountingEntriesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAccountingEntriesWith"))
			data, err := ec.unmarshalOAccountingEntryWhereInput2ᚕᚖmazzaᚋentᚐAccountingEntryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAccountingEntriesWith = data
		case "hasCustomers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCustomers"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCustomers = data
		case "hasCustomersWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCustomersWith"))
			data, err := ec.unmarshalOCustomerWhereInput2ᚕᚖmazzaᚋentᚐCustomerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCustomersWith = data
		case "hasEmployees":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEmployees"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEmployees = data
		case "hasEmployeesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEmployeesWith"))
			data, err := ec.unmarshalOEmployeeWhereInput2ᚕᚖmazzaᚋentᚐEmployeeWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEmployeesWith = data
		case "hasFiles":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasFiles"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasFiles = data
		case "hasFilesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasFilesWith"))
			data, err := ec.unmarshalOFileWhereInput2ᚕᚖmazzaᚋentᚐFileWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasFilesWith = data
		case "hasProducts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProducts"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProducts = data
		case "hasProductsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProductsWith"))
			data, err := ec.unmarshalOProductWhereInput2ᚕᚖmazzaᚋentᚐProductWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProductsWith = data
		case "hasSuppliers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSuppliers"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSuppliers = data
		case "hasSuppliersWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSuppliersWith"))
			data, err := ec.unmarshalOSupplierWhereInput2ᚕᚖmazzaᚋentᚐSupplierWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSuppliersWith = data
		case "hasTokens":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTokens"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTokens = data
		case "hasTokensWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTokensWith"))
			data, err := ec.unmarshalOTokenWhereInput2ᚕᚖmazzaᚋentᚐTokenWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTokensWith = data
		case "hasTreasuries":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTreasuries"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTreasuries = data
		case "hasTreasuriesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTreasuriesWith"))
			data, err := ec.unmarshalOTreasuryWhereInput2ᚕᚖmazzaᚋentᚐTreasuryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTreasuriesWith = data
		case "hasWorkShifts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasWorkShifts"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasWorkShifts = data
		case "hasWorkShiftsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasWorkShiftsWith"))
			data, err := ec.unmarshalOWorkshiftWhereInput2ᚕᚖmazzaᚋentᚐWorkshiftWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasWorkShiftsWith = data
		case "hasWorkTasks":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasWorkTasks"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasWorkTasks = data
		case "hasWorkTasksWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasWorkTasksWith"))
			data, err := ec.unmarshalOWorktaskWhereInput2ᚕᚖmazzaᚋentᚐWorktaskWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasWorkTasksWith = data
		case "hasWorkTags":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasWorkTags"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasWorkTags = data
		case "hasWorkTagsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasWorkTagsWith"))
			data, err := ec.unmarshalOWorktagWhereInput2ᚕᚖmazzaᚋentᚐWorktagWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasWorkTagsWith = data
		case "hasUsers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUsers"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUsers = data
		case "hasUsersWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUsersWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖmazzaᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUsersWith = data
		case "hasDaughterCompanies":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasDaughterCompanies"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasDaughterCompanies = data
		case "hasDaughterCompaniesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasDaughterCompaniesWith"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasDaughterCompaniesWith = data
		case "hasParentCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasParentCompany"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasParentCompany = data
		case "hasParentCompanyWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasParentCompanyWith"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasParentCompanyWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateAccountingEntryInput(ctx context.Context, obj interface{}) (ent.CreateAccountingEntryInput, error) {
	var it ent.CreateAccountingEntryInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdat", "updatedat", "deletedat", "number", "group", "date", "account", "label", "amount", "description", "accounttype", "isdebit", "isreversal", "reversed", "companyID", "userID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "number":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("number"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Number = data
		case "group":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("group"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Group = data
		case "date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		case "account":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("account"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Account = data
		case "label":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Label = data
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "accounttype":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accounttype"))
			data, err := ec.unmarshalNAccountingEntryAccountType2mazzaᚋentᚋaccountingentryᚐAccountType(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountType = data
		case "isdebit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdebit"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDebit = data
		case "isreversal":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isreversal"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsReversal = data
		case "reversed":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reversed"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Reversed = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateCashMovementInput(ctx context.Context, obj interface{}) (ent.CreateCashMovementInput, error) {
	var it ent.CreateCashMovementInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdat", "updatedat", "deletedat", "amount", "date", "entrygroup", "treasuryID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		case "entrygroup":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroup"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroup = data
		case "treasuryID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("treasuryID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TreasuryID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateCompanyInput(ctx context.Context, obj interface{}) (ent.CreateCompanyInput, error) {
	var it ent.CreateCompanyInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdat", "updatedat", "deletedat", "address", "basecurrency", "ceoname", "city", "country", "establishedat", "description", "email", "lastentrydate", "lastinvoicenumber", "logo", "name", "numberofemployees", "phone", "sector", "taxid", "vatrate", "website", "availableroleIDs", "accountingentryIDs", "customerIDs", "employeeIDs", "fileIDs", "productIDs", "supplierIDs", "tokenIDs", "treasuryIDs", "workshiftIDs", "worktaskIDs", "worktagIDs", "userIDs", "daughtercompanyIDs", "parentcompanyID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "basecurrency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("basecurrency"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseCurrency = data
		case "ceoname":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceoname"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CeoName = data
		case "city":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.City = data
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "establishedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("establishedat"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstablishedAt = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "lastentrydate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastentrydate"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEntryDate = data
		case "lastinvoicenumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastinvoicenumber"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastInvoiceNumber = data
		case "logo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logo"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Logo = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "numberofemployees":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numberofemployees"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumberOfEmployees = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "sector":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sector"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Sector = data
		case "taxid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxid"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxId = data
		case "vatrate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vatrate"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VatRate = data
		case "website":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("website"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Website = data
		case "availableroleIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("availableroleIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AvailableRoleIDs = data
		case "accountingentryIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountingentryIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountingEntryIDs = data
		case "customerIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDs = data
		case "employeeIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("employeeIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmployeeIDs = data
		case "fileIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileIDs = data
		case "productIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductIDs = data
		case "supplierIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supplierIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SupplierIDs = data
		case "tokenIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenIDs = data
		case "treasuryIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("treasuryIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TreasuryIDs = data
		case "workshiftIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workshiftIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkShiftIDs = data
		case "worktaskIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("worktaskIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkTaskIDs = data
		case "worktagIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("worktagIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkTagIDs = data
		case "userIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserIDs = data
		case "daughtercompanyIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("daughtercompanyIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DaughterCompanyIDs = data
		case "parentcompanyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentcompanyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParentCompanyID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateCustomerInput(ctx context.Context, obj interface{}) (ent.CreateCustomerInput, error) {
	var it ent.CreateCustomerInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdat", "updatedat", "deletedat", "address", "city", "country", "description", "email", "isdefault", "name", "phone", "taxid", "companyID", "receivableIDs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "city":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.City = data
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "isdefault":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdefault"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDefault = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "taxid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxid"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxId = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "receivableIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receivableIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReceivableIDs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateEmployeeInput(ctx context.Context, obj interface{}) (ent.CreateEmployeeInput, error) {
	var it ent.CreateEmployeeInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdat", "updatedat", "deletedat", "name", "gender", "position", "email", "phone", "companyID", "userID", "subordinateIDs", "leaderID", "workshiftIDs", "approvedworkshiftIDs", "assignedtaskIDs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "gender":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			data, err := ec.unmarshalNEmployeeGender2mazzaᚋentᚋemployeeᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
			it.Gender = data
		case "position":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("position"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Position = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "subordinateIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subordinateIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SubordinateIDs = data
		case "leaderID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderID = data
		case "workshiftIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workshiftIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkShiftIDs = data
		case "approvedworkshiftIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedworkshiftIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovedWorkShiftIDs = data
		case "assignedtaskIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assignedtaskIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AssignedTaskIDs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateFileInput(ctx context.Context, obj interface{}) (ent.CreateFileInput, error) {
	var it ent.CreateFileInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdat", "updatedat", "deletedat", "category", "extension", "size", "url", "description", "companyID", "productID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "category":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			data, err := ec.unmarshalNFileCategory2mazzaᚋentᚋfileᚐCategory(ctx, v)
			if err != nil {
				return it, err
			}
			it.Category = data
		case "extension":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extension"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Extension = data
		case "size":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Size = data
		case "url":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.URL = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "productID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreatePayableInput(ctx context.Context, obj interface{}) (ent.CreatePayableInput, error) {
	var it ent.CreatePayableInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdat", "updatedat", "deletedat", "entrygroup", "date", "outstandingbalance", "totaltransaction", "daysdue", "status", "supplierID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "entrygroup":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroup"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroup = data
		case "date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		case "outstandingbalance":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalance"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalance = data
		case "totaltransaction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransaction"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransaction = data
		case "daysdue":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("daysdue"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.DaysDue = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalNPayableStatus2mazzaᚋentᚋpayableᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "supplierID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supplierID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SupplierID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateProductInput(ctx context.Context, obj interface{}) (ent.CreateProductInput, error) {
	var it ent.CreateProductInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdat", "updatedat", "deletedat", "description", "isdefault", "minimumstock", "name", "price", "sku", "stock", "category", "unitcost", "companyID", "pictureIDs", "productmovementIDs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "isdefault":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdefault"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDefault = data
		case "minimumstock":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minimumstock"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinimumStock = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "price":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Price = data
		case "sku":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sku"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Sku = data
		case "stock":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stock"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Stock = data
		case "category":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			data, err := ec.unmarshalNProductCategory2mazzaᚋentᚋproductᚐCategory(ctx, v)
			if err != nil {
				return it, err
			}
			it.Category = data
		case "unitcost":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitcost"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitCost = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "pictureIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pictureIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PictureIDs = data
		case "productmovementIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productmovementIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductMovementIDs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateProductMovementInput(ctx context.Context, obj interface{}) (ent.CreateProductMovementInput, error) {
	var it ent.CreateProductMovementInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdat", "updatedat", "deletedat", "entrygroup", "averagecost", "unitcost", "price", "quantity", "productID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "entrygroup":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroup"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroup = data
		case "averagecost":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("averagecost"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AverageCost = data
		case "unitcost":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitcost"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitCost = data
		case "price":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Price = data
		case "quantity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quantity"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Quantity = data
		case "productID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateReceivableInput(ctx context.Context, obj interface{}) (ent.CreateReceivableInput, error) {
	var it ent.CreateReceivableInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdat", "updatedat", "deletedat", "entrygroup", "date", "outstandingbalance", "totaltransaction", "daysdue", "status", "customerID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "entrygroup":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroup"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroup = data
		case "date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		case "outstandingbalance":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalance"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalance = data
		case "totaltransaction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransaction"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransaction = data
		case "daysdue":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("daysdue"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.DaysDue = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalNReceivableStatus2mazzaᚋentᚋreceivableᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "customerID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateSupplierInput(ctx context.Context, obj interface{}) (ent.CreateSupplierInput, error) {
	var it ent.CreateSupplierInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdat", "updatedat", "deletedat", "address", "city", "country", "description", "email", "isdefault", "name", "phone", "taxid", "companyID", "payableIDs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "city":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.City = data
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "isdefault":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdefault"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDefault = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "taxid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxid"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxId = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "payableIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payableIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PayableIDs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateTreasuryInput(ctx context.Context, obj interface{}) (ent.CreateTreasuryInput, error) {
	var it ent.CreateTreasuryInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdat", "updatedat", "deletedat", "accountnumber", "balance", "bankname", "currency", "description", "iban", "isdefault", "ismainaccount", "name", "category", "swiftcode", "companyID", "cashmovementIDs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "accountnumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountnumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountNumber = data
		case "balance":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balance"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Balance = data
		case "bankname":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bankname"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BankName = data
		case "currency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			data, err := ec.unmarshalNTreasuryCurrency2mazzaᚋentᚋtreasuryᚐCurrency(ctx, v)
			if err != nil {
				return it, err
			}
			it.Currency = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "iban":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iban"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Iban = data
		case "isdefault":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdefault"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDefault = data
		case "ismainaccount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ismainaccount"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsMainAccount = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "category":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			data, err := ec.unmarshalNTreasuryCategory2mazzaᚋentᚋtreasuryᚐCategory(ctx, v)
			if err != nil {
				return it, err
			}
			it.Category = data
		case "swiftcode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("swiftcode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SwiftCode = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "cashmovementIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cashmovementIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CashMovementIDs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateUserInput(ctx context.Context, obj interface{}) (ent.CreateUserInput, error) {
	var it ent.CreateUserInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdat", "updatedat", "deletedat", "fcmtoken", "email", "name", "password", "username", "disabled", "notverified", "accountingentryIDs", "companyIDs", "assignedroleIDs", "createdtaskIDs", "employeeID", "tokenIDs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "fcmtoken":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fcmtoken"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FcmToken = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "disabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Disabled = data
		case "notverified":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notverified"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotVerified = data
		case "accountingentryIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountingentryIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountingEntryIDs = data
		case "companyIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyIDs"))
			data, err := ec.unmarshalNID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyIDs = data
		case "assignedroleIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assignedroleIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AssignedRoleIDs = data
		case "createdtaskIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdtaskIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedTaskIDs = data
		case "employeeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("employeeID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmployeeID = data
		case "tokenIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenIDs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateUserRoleInput(ctx context.Context, obj interface{}) (ent.CreateUserRoleInput, error) {
	var it ent.CreateUserRoleInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"role", "companyID", "userIDs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "role":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			data, err := ec.unmarshalNUserRoleRole2mazzaᚋentᚋuserroleᚐRole(ctx, v)
			if err != nil {
				return it, err
			}
			it.Role = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "userIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserIDs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateWorkshiftInput(ctx context.Context, obj interface{}) (ent.CreateWorkshiftInput, error) {
	var it ent.CreateWorkshiftInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdat", "updatedat", "deletedat", "approvedat", "clockin", "clockout", "clockinlocation", "clockoutlocation", "description", "note", "status", "companyID", "employeeID", "approvedbyID", "worktaskID", "editrequestID", "workshiftID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "approvedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovedAt = data
		case "clockin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockin"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockIn = data
		case "clockout":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockout"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOut = data
		case "clockinlocation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinlocation"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInLocation = data
		case "clockoutlocation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutlocation"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLocation = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "note":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Note = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOWorkshiftStatus2ᚖmazzaᚋentᚋworkshiftᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "employeeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("employeeID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmployeeID = data
		case "approvedbyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedbyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovedByID = data
		case "worktaskID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("worktaskID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkTaskID = data
		case "editrequestID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("editrequestID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EditRequestID = data
		case "workshiftID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workshiftID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkShiftID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateWorktagInput(ctx context.Context, obj interface{}) (ent.CreateWorktagInput, error) {
	var it ent.CreateWorktagInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdat", "updatedat", "deletedat", "name", "color", "companyID", "worktaskIDs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "color":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("color"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Color = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "worktaskIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("worktaskIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkTaskIDs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateWorktaskInput(ctx context.Context, obj interface{}) (ent.CreateWorktaskInput, error) {
	var it ent.CreateWorktaskInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdat", "updatedat", "deletedat", "description", "status", "subtasks", "title", "starttime", "endtime", "companyID", "createdbyID", "assignedtoIDs", "workshiftIDs", "worktagIDs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalNWorktaskStatus2mazzaᚋentᚋworktaskᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "subtasks":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subtasks"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Subtasks = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "starttime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("starttime"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartTime = data
		case "endtime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endtime"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndTime = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "createdbyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdbyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByID = data
		case "assignedtoIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assignedtoIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AssignedToIDs = data
		case "workshiftIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workshiftIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkShiftIDs = data
		case "worktagIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("worktagIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkTagIDs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCustomerWhereInput(ctx context.Context, obj interface{}) (ent.CustomerWhereInput, error) {
	var it ent.CustomerWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdat", "createdatNEQ", "createdatIn", "createdatNotIn", "createdatGT", "createdatGTE", "createdatLT", "createdatLTE", "updatedat", "updatedatNEQ", "updatedatIn", "updatedatNotIn", "updatedatGT", "updatedatGTE", "updatedatLT", "updatedatLTE", "deletedat", "deletedatNEQ", "deletedatIn", "deletedatNotIn", "deletedatGT", "deletedatGTE", "deletedatLT", "deletedatLTE", "deletedatIsNil", "deletedatNotNil", "address", "addressNEQ", "addressIn", "addressNotIn", "addressGT", "addressGTE", "addressLT", "addressLTE", "addressContains", "addressHasPrefix", "addressHasSuffix", "addressEqualFold", "addressContainsFold", "city", "cityNEQ", "cityIn", "cityNotIn", "cityGT", "cityGTE", "cityLT", "cityLTE", "cityContains", "cityHasPrefix", "cityHasSuffix", "cityEqualFold", "cityContainsFold", "country", "countryNEQ", "countryIn", "countryNotIn", "countryGT", "countryGTE", "countryLT", "countryLTE", "countryContains", "countryHasPrefix", "countryHasSuffix", "countryEqualFold", "countryContainsFold", "description", "descriptionNEQ", "descriptionIn", "descriptionNotIn", "descriptionGT", "descriptionGTE", "descriptionLT", "descriptionLTE", "descriptionContains", "descriptionHasPrefix", "descriptionHasSuffix", "descriptionEqualFold", "descriptionContainsFold", "email", "emailNEQ", "emailIn", "emailNotIn", "emailGT", "emailGTE", "emailLT", "emailLTE", "emailContains", "emailHasPrefix", "emailHasSuffix", "emailEqualFold", "emailContainsFold", "isdefault", "isdefaultNEQ", "isdefaultIsNil", "isdefaultNotNil", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "phone", "phoneNEQ", "phoneIn", "phoneNotIn", "phoneGT", "phoneGTE", "phoneLT", "phoneLTE", "phoneContains", "phoneHasPrefix", "phoneHasSuffix", "phoneEqualFold", "phoneContainsFold", "taxid", "taxidNEQ", "taxidIn", "taxidNotIn", "taxidGT", "taxidGTE", "taxidLT", "taxidLTE", "taxidContains", "taxidHasPrefix", "taxidHasSuffix", "taxidEqualFold", "taxidContainsFold", "hasCompany", "hasCompanyWith", "hasReceivables", "hasReceivablesWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOCustomerWhereInput2ᚖmazzaᚋentᚐCustomerWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOCustomerWhereInput2ᚕᚖmazzaᚋentᚐCustomerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOCustomerWhereInput2ᚕᚖmazzaᚋentᚐCustomerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "deletedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNEQ = data
		case "deletedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIn = data
		case "deletedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotIn = data
		case "deletedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGT = data
		case "deletedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGTE = data
		case "deletedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLT = data
		case "deletedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLTE = data
		case "deletedatIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIsNil = data
		case "deletedatNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotNil = data
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "addressNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressNEQ = data
		case "addressIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressIn = data
		case "addressNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressNotIn = data
		case "addressGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressGT = data
		case "addressGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressGTE = data
		case "addressLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressLT = data
		case "addressLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressLTE = data
		case "addressContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressContains = data
		case "addressHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressHasPrefix = data
		case "addressHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressHasSuffix = data
		case "addressEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressEqualFold = data
		case "addressContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressContainsFold = data
		case "city":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.City = data
		case "cityNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityNEQ = data
		case "cityIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIn = data
		case "cityNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityNotIn = data
		case "cityGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityGT = data
		case "cityGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityGTE = data
		case "cityLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityLT = data
		case "cityLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityLTE = data
		case "cityContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityContains = data
		case "cityHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityHasPrefix = data
		case "cityHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityHasSuffix = data
		case "cityEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityEqualFold = data
		case "cityContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityContainsFold = data
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "countryNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryNEQ = data
		case "countryIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryIn = data
		case "countryNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryNotIn = data
		case "countryGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryGT = data
		case "countryGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryGTE = data
		case "countryLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryLT = data
		case "countryLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryLTE = data
		case "countryContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryContains = data
		case "countryHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryHasPrefix = data
		case "countryHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryHasSuffix = data
		case "countryEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryEqualFold = data
		case "countryContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryContainsFold = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "descriptionNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNEQ = data
		case "descriptionIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIn = data
		case "descriptionNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotIn = data
		case "descriptionGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGT = data
		case "descriptionGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGTE = data
		case "descriptionLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLT = data
		case "descriptionLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLTE = data
		case "descriptionContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContains = data
		case "descriptionHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasPrefix = data
		case "descriptionHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasSuffix = data
		case "descriptionEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionEqualFold = data
		case "descriptionContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContainsFold = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "emailNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNEQ = data
		case "emailIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailIn = data
		case "emailNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNotIn = data
		case "emailGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailGT = data
		case "emailGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailGTE = data
		case "emailLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailLT = data
		case "emailLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailLTE = data
		case "emailContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailContains = data
		case "emailHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailHasPrefix = data
		case "emailHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailHasSuffix = data
		case "emailEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailEqualFold = data
		case "emailContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailContainsFold = data
		case "isdefault":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdefault"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDefault = data
		case "isdefaultNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdefaultNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDefaultNEQ = data
		case "isdefaultIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdefaultIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDefaultIsNil = data
		case "isdefaultNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdefaultNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDefaultNotNil = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "phoneNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNEQ = data
		case "phoneIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneIn = data
		case "phoneNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNotIn = data
		case "phoneGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneGT = data
		case "phoneGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneGTE = data
		case "phoneLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneLT = data
		case "phoneLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneLTE = data
		case "phoneContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneContains = data
		case "phoneHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneHasPrefix = data
		case "phoneHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneHasSuffix = data
		case "phoneEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneEqualFold = data
		case "phoneContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneContainsFold = data
		case "taxid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxid"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxId = data
		case "taxidNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdNEQ = data
		case "taxidIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdIn = data
		case "taxidNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdNotIn = data
		case "taxidGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdGT = data
		case "taxidGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdGTE = data
		case "taxidLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdLT = data
		case "taxidLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdLTE = data
		case "taxidContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdContains = data
		case "taxidHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdHasPrefix = data
		case "taxidHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdHasSuffix = data
		case "taxidEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdEqualFold = data
		case "taxidContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdContainsFold = data
		case "hasCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompany"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompany = data
		case "hasCompanyWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompanyWith"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompanyWith = data
		case "hasReceivables":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasReceivables"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasReceivables = data
		case "hasReceivablesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasReceivablesWith"))
			data, err := ec.unmarshalOReceivableWhereInput2ᚕᚖmazzaᚋentᚐReceivableWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasReceivablesWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEmployeeWhereInput(ctx context.Context, obj interface{}) (ent.EmployeeWhereInput, error) {
	var it ent.EmployeeWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdat", "createdatNEQ", "createdatIn", "createdatNotIn", "createdatGT", "createdatGTE", "createdatLT", "createdatLTE", "updatedat", "updatedatNEQ", "updatedatIn", "updatedatNotIn", "updatedatGT", "updatedatGTE", "updatedatLT", "updatedatLTE", "deletedat", "deletedatNEQ", "deletedatIn", "deletedatNotIn", "deletedatGT", "deletedatGTE", "deletedatLT", "deletedatLTE", "deletedatIsNil", "deletedatNotNil", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "gender", "genderNEQ", "genderIn", "genderNotIn", "position", "positionNEQ", "positionIn", "positionNotIn", "positionGT", "positionGTE", "positionLT", "positionLTE", "positionContains", "positionHasPrefix", "positionHasSuffix", "positionIsNil", "positionNotNil", "positionEqualFold", "positionContainsFold", "email", "emailNEQ", "emailIn", "emailNotIn", "emailGT", "emailGTE", "emailLT", "emailLTE", "emailContains", "emailHasPrefix", "emailHasSuffix", "emailIsNil", "emailNotNil", "emailEqualFold", "emailContainsFold", "phone", "phoneNEQ", "phoneIn", "phoneNotIn", "phoneGT", "phoneGTE", "phoneLT", "phoneLTE", "phoneContains", "phoneHasPrefix", "phoneHasSuffix", "phoneEqualFold", "phoneContainsFold", "hasCompany", "hasCompanyWith", "hasUser", "hasUserWith", "hasSubordinates", "hasSubordinatesWith", "hasLeader", "hasLeaderWith", "hasWorkShifts", "hasWorkShiftsWith", "hasApprovedWorkShifts", "hasApprovedWorkShiftsWith", "hasAssignedTasks", "hasAssignedTasksWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOEmployeeWhereInput2ᚖmazzaᚋentᚐEmployeeWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOEmployeeWhereInput2ᚕᚖmazzaᚋentᚐEmployeeWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOEmployeeWhereInput2ᚕᚖmazzaᚋentᚐEmployeeWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "deletedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNEQ = data
		case "deletedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIn = data
		case "deletedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotIn = data
		case "deletedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGT = data
		case "deletedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGTE = data
		case "deletedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLT = data
		case "deletedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLTE = data
		case "deletedatIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIsNil = data
		case "deletedatNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotNil = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "gender":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			data, err := ec.unmarshalOEmployeeGender2ᚖmazzaᚋentᚋemployeeᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
			it.Gender = data
		case "genderNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("genderNEQ"))
			data, err := ec.unmarshalOEmployeeGender2ᚖmazzaᚋentᚋemployeeᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
			it.GenderNEQ = data
		case "genderIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("genderIn"))
			data, err := ec.unmarshalOEmployeeGender2ᚕmazzaᚋentᚋemployeeᚐGenderᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.GenderIn = data
		case "genderNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("genderNotIn"))
			data, err := ec.unmarshalOEmployeeGender2ᚕmazzaᚋentᚋemployeeᚐGenderᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.GenderNotIn = data
		case "position":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("position"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Position = data
		case "positionNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionNEQ = data
		case "positionIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionIn = data
		case "positionNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionNotIn = data
		case "positionGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionGT = data
		case "positionGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionGTE = data
		case "positionLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionLT = data
		case "positionLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionLTE = data
		case "positionContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionContains = data
		case "positionHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionHasPrefix = data
		case "positionHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionHasSuffix = data
		case "positionIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionIsNil = data
		case "positionNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionNotNil = data
		case "positionEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionEqualFold = data
		case "positionContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionContainsFold = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "emailNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNEQ = data
		case "emailIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailIn = data
		case "emailNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNotIn = data
		case "emailGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailGT = data
		case "emailGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailGTE = data
		case "emailLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailLT = data
		case "emailLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailLTE = data
		case "emailContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailContains = data
		case "emailHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailHasPrefix = data
		case "emailHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailHasSuffix = data
		case "emailIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailIsNil = data
		case "emailNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNotNil = data
		case "emailEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailEqualFold = data
		case "emailContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailContainsFold = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "phoneNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNEQ = data
		case "phoneIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneIn = data
		case "phoneNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNotIn = data
		case "phoneGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneGT = data
		case "phoneGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneGTE = data
		case "phoneLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneLT = data
		case "phoneLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneLTE = data
		case "phoneContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneContains = data
		case "phoneHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneHasPrefix = data
		case "phoneHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneHasSuffix = data
		case "phoneEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneEqualFold = data
		case "phoneContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneContainsFold = data
		case "hasCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompany"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompany = data
		case "hasCompanyWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompanyWith"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompanyWith = data
		case "hasUser":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUser"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUser = data
		case "hasUserWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUserWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖmazzaᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUserWith = data
		case "hasSubordinates":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSubordinates"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSubordinates = data
		case "hasSubordinatesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSubordinatesWith"))
			data, err := ec.unmarshalOEmployeeWhereInput2ᚕᚖmazzaᚋentᚐEmployeeWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSubordinatesWith = data
		case "hasLeader":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasLeader"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasLeader = data
		case "hasLeaderWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasLeaderWith"))
			data, err := ec.unmarshalOEmployeeWhereInput2ᚕᚖmazzaᚋentᚐEmployeeWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasLeaderWith = data
		case "hasWorkShifts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasWorkShifts"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasWorkShifts = data
		case "hasWorkShiftsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasWorkShiftsWith"))
			data, err := ec.unmarshalOWorkshiftWhereInput2ᚕᚖmazzaᚋentᚐWorkshiftWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasWorkShiftsWith = data
		case "hasApprovedWorkShifts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasApprovedWorkShifts"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasApprovedWorkShifts = data
		case "hasApprovedWorkShiftsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasApprovedWorkShiftsWith"))
			data, err := ec.unmarshalOWorkshiftWhereInput2ᚕᚖmazzaᚋentᚐWorkshiftWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasApprovedWorkShiftsWith = data
		case "hasAssignedTasks":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAssignedTasks"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAssignedTasks = data
		case "hasAssignedTasksWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAssignedTasksWith"))
			data, err := ec.unmarshalOWorktaskWhereInput2ᚕᚖmazzaᚋentᚐWorktaskWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAssignedTasksWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFileOrder(ctx context.Context, obj interface{}) (ent.FileOrder, error) {
	var it ent.FileOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNFileOrderField2ᚖmazzaᚋentᚐFileOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFileWhereInput(ctx context.Context, obj interface{}) (ent.FileWhereInput, error) {
	var it ent.FileWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdat", "createdatNEQ", "createdatIn", "createdatNotIn", "createdatGT", "createdatGTE", "createdatLT", "createdatLTE", "updatedat", "updatedatNEQ", "updatedatIn", "updatedatNotIn", "updatedatGT", "updatedatGTE", "updatedatLT", "updatedatLTE", "deletedat", "deletedatNEQ", "deletedatIn", "deletedatNotIn", "deletedatGT", "deletedatGTE", "deletedatLT", "deletedatLTE", "deletedatIsNil", "deletedatNotNil", "category", "categoryNEQ", "categoryIn", "categoryNotIn", "extension", "extensionNEQ", "extensionIn", "extensionNotIn", "extensionGT", "extensionGTE", "extensionLT", "extensionLTE", "extensionContains", "extensionHasPrefix", "extensionHasSuffix", "extensionEqualFold", "extensionContainsFold", "size", "sizeNEQ", "sizeIn", "sizeNotIn", "sizeGT", "sizeGTE", "sizeLT", "sizeLTE", "sizeContains", "sizeHasPrefix", "sizeHasSuffix", "sizeEqualFold", "sizeContainsFold", "url", "urlNEQ", "urlIn", "urlNotIn", "urlGT", "urlGTE", "urlLT", "urlLTE", "urlContains", "urlHasPrefix", "urlHasSuffix", "urlEqualFold", "urlContainsFold", "description", "descriptionNEQ", "descriptionIn", "descriptionNotIn", "descriptionGT", "descriptionGTE", "descriptionLT", "descriptionLTE", "descriptionContains", "descriptionHasPrefix", "descriptionHasSuffix", "descriptionEqualFold", "descriptionContainsFold", "hasCompany", "hasCompanyWith", "hasProduct", "hasProductWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOFileWhereInput2ᚖmazzaᚋentᚐFileWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOFileWhereInput2ᚕᚖmazzaᚋentᚐFileWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOFileWhereInput2ᚕᚖmazzaᚋentᚐFileWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "deletedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNEQ = data
		case "deletedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIn = data
		case "deletedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotIn = data
		case "deletedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGT = data
		case "deletedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGTE = data
		case "deletedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLT = data
		case "deletedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLTE = data
		case "deletedatIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIsNil = data
		case "deletedatNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotNil = data
		case "category":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			data, err := ec.unmarshalOFileCategory2ᚖmazzaᚋentᚋfileᚐCategory(ctx, v)
			if err != nil {
				return it, err
			}
			it.Category = data
		case "categoryNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryNEQ"))
			data, err := ec.unmarshalOFileCategory2ᚖmazzaᚋentᚋfileᚐCategory(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryNEQ = data
		case "categoryIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryIn"))
			data, err := ec.unmarshalOFileCategory2ᚕmazzaᚋentᚋfileᚐCategoryᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryIn = data
		case "categoryNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryNotIn"))
			data, err := ec.unmarshalOFileCategory2ᚕmazzaᚋentᚋfileᚐCategoryᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryNotIn = data
		case "extension":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extension"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Extension = data
		case "extensionNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extensionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtensionNEQ = data
		case "extensionIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extensionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtensionIn = data
		case "extensionNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extensionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtensionNotIn = data
		case "extensionGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extensionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtensionGT = data
		case "extensionGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extensionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtensionGTE = data
		case "extensionLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extensionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtensionLT = data
		case "extensionLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extensionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtensionLTE = data
		case "extensionContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extensionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtensionContains = data
		case "extensionHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extensionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtensionHasPrefix = data
		case "extensionHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extensionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtensionHasSuffix = data
		case "extensionEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extensionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtensionEqualFold = data
		case "extensionContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extensionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtensionContainsFold = data
		case "size":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Size = data
		case "sizeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeNEQ = data
		case "sizeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeIn = data
		case "sizeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeNotIn = data
		case "sizeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeGT = data
		case "sizeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeGTE = data
		case "sizeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeLT = data
		case "sizeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeLTE = data
		case "sizeContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeContains = data
		case "sizeHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeHasPrefix = data
		case "sizeHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeHasSuffix = data
		case "sizeEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeEqualFold = data
		case "sizeContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeContainsFold = data
		case "url":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URL = data
		case "urlNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLNEQ = data
		case "urlIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLIn = data
		case "urlNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLNotIn = data
		case "urlGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLGT = data
		case "urlGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLGTE = data
		case "urlLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLLT = data
		case "urlLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLLTE = data
		case "urlContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLContains = data
		case "urlHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLHasPrefix = data
		case "urlHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLHasSuffix = data
		case "urlEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLEqualFold = data
		case "urlContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLContainsFold = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "descriptionNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNEQ = data
		case "descriptionIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIn = data
		case "descriptionNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotIn = data
		case "descriptionGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGT = data
		case "descriptionGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGTE = data
		case "descriptionLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLT = data
		case "descriptionLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLTE = data
		case "descriptionContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContains = data
		case "descriptionHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasPrefix = data
		case "descriptionHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasSuffix = data
		case "descriptionEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionEqualFold = data
		case "descriptionContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContainsFold = data
		case "hasCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompany"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompany = data
		case "hasCompanyWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompanyWith"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompanyWith = data
		case "hasProduct":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProduct"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProduct = data
		case "hasProductWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProductWith"))
			data, err := ec.unmarshalOProductWhereInput2ᚕᚖmazzaᚋentᚐProductWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProductWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLoginInput(ctx context.Context, obj interface{}) (LoginInput, error) {
	var it LoginInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"username", "password", "fcmToken"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		case "fcmToken":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fcmToken"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.FcmToken = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPayableWhereInput(ctx context.Context, obj interface{}) (ent.PayableWhereInput, error) {
	var it ent.PayableWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdat", "createdatNEQ", "createdatIn", "createdatNotIn", "createdatGT", "createdatGTE", "createdatLT", "createdatLTE", "updatedat", "updatedatNEQ", "updatedatIn", "updatedatNotIn", "updatedatGT", "updatedatGTE", "updatedatLT", "updatedatLTE", "deletedat", "deletedatNEQ", "deletedatIn", "deletedatNotIn", "deletedatGT", "deletedatGTE", "deletedatLT", "deletedatLTE", "deletedatIsNil", "deletedatNotNil", "entrygroup", "entrygroupNEQ", "entrygroupIn", "entrygroupNotIn", "entrygroupGT", "entrygroupGTE", "entrygroupLT", "entrygroupLTE", "date", "dateNEQ", "dateIn", "dateNotIn", "dateGT", "dateGTE", "dateLT", "dateLTE", "outstandingbalance", "outstandingbalanceNEQ", "outstandingbalanceIn", "outstandingbalanceNotIn", "outstandingbalanceGT", "outstandingbalanceGTE", "outstandingbalanceLT", "outstandingbalanceLTE", "totaltransaction", "totaltransactionNEQ", "totaltransactionIn", "totaltransactionNotIn", "totaltransactionGT", "totaltransactionGTE", "totaltransactionLT", "totaltransactionLTE", "daysdue", "daysdueNEQ", "daysdueIn", "daysdueNotIn", "daysdueGT", "daysdueGTE", "daysdueLT", "daysdueLTE", "status", "statusNEQ", "statusIn", "statusNotIn", "hasSupplier", "hasSupplierWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOPayableWhereInput2ᚖmazzaᚋentᚐPayableWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOPayableWhereInput2ᚕᚖmazzaᚋentᚐPayableWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOPayableWhereInput2ᚕᚖmazzaᚋentᚐPayableWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "deletedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNEQ = data
		case "deletedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIn = data
		case "deletedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotIn = data
		case "deletedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGT = data
		case "deletedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGTE = data
		case "deletedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLT = data
		case "deletedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLTE = data
		case "deletedatIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIsNil = data
		case "deletedatNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotNil = data
		case "entrygroup":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroup"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroup = data
		case "entrygroupNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupNEQ = data
		case "entrygroupIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupIn = data
		case "entrygroupNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupNotIn = data
		case "entrygroupGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupGT = data
		case "entrygroupGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupGTE = data
		case "entrygroupLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupLT = data
		case "entrygroupLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupLTE = data
		case "date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		case "dateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateNEQ = data
		case "dateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateIn = data
		case "dateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateNotIn = data
		case "dateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateGT = data
		case "dateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateGTE = data
		case "dateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateLT = data
		case "dateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateLTE = data
		case "outstandingbalance":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalance"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalance = data
		case "outstandingbalanceNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalanceNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalanceNEQ = data
		case "outstandingbalanceIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalanceIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalanceIn = data
		case "outstandingbalanceNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalanceNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalanceNotIn = data
		case "outstandingbalanceGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalanceGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalanceGT = data
		case "outstandingbalanceGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalanceGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalanceGTE = data
		case "outstandingbalanceLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalanceLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalanceLT = data
		case "outstandingbalanceLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalanceLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalanceLTE = data
		case "totaltransaction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransaction"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransaction = data
		case "totaltransactionNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransactionNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransactionNEQ = data
		case "totaltransactionIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransactionIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransactionIn = data
		case "totaltransactionNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransactionNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransactionNotIn = data
		case "totaltransactionGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransactionGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransactionGT = data
		case "totaltransactionGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransactionGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransactionGTE = data
		case "totaltransactionLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransactionLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransactionLT = data
		case "totaltransactionLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransactionLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransactionLTE = data
		case "daysdue":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("daysdue"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DaysDue = data
		case "daysdueNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("daysdueNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DaysDueNEQ = data
		case "daysdueIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("daysdueIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DaysDueIn = data
		case "daysdueNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("daysdueNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DaysDueNotIn = data
		case "daysdueGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("daysdueGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DaysDueGT = data
		case "daysdueGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("daysdueGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DaysDueGTE = data
		case "daysdueLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("daysdueLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DaysDueLT = data
		case "daysdueLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("daysdueLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DaysDueLTE = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOPayableStatus2ᚖmazzaᚋentᚋpayableᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "statusNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNEQ"))
			data, err := ec.unmarshalOPayableStatus2ᚖmazzaᚋentᚋpayableᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNEQ = data
		case "statusIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusIn"))
			data, err := ec.unmarshalOPayableStatus2ᚕmazzaᚋentᚋpayableᚐStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusIn = data
		case "statusNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNotIn"))
			data, err := ec.unmarshalOPayableStatus2ᚕmazzaᚋentᚋpayableᚐStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNotIn = data
		case "hasSupplier":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSupplier"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSupplier = data
		case "hasSupplierWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSupplierWith"))
			data, err := ec.unmarshalOSupplierWhereInput2ᚕᚖmazzaᚋentᚐSupplierWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSupplierWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProductMovementWhereInput(ctx context.Context, obj interface{}) (ent.ProductMovementWhereInput, error) {
	var it ent.ProductMovementWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdat", "createdatNEQ", "createdatIn", "createdatNotIn", "createdatGT", "createdatGTE", "createdatLT", "createdatLTE", "updatedat", "updatedatNEQ", "updatedatIn", "updatedatNotIn", "updatedatGT", "updatedatGTE", "updatedatLT", "updatedatLTE", "deletedat", "deletedatNEQ", "deletedatIn", "deletedatNotIn", "deletedatGT", "deletedatGTE", "deletedatLT", "deletedatLTE", "deletedatIsNil", "deletedatNotNil", "entrygroup", "entrygroupNEQ", "entrygroupIn", "entrygroupNotIn", "entrygroupGT", "entrygroupGTE", "entrygroupLT", "entrygroupLTE", "averagecost", "averagecostNEQ", "averagecostIn", "averagecostNotIn", "averagecostGT", "averagecostGTE", "averagecostLT", "averagecostLTE", "unitcost", "unitcostNEQ", "unitcostIn", "unitcostNotIn", "unitcostGT", "unitcostGTE", "unitcostLT", "unitcostLTE", "price", "priceNEQ", "priceIn", "priceNotIn", "priceGT", "priceGTE", "priceLT", "priceLTE", "quantity", "quantityNEQ", "quantityIn", "quantityNotIn", "quantityGT", "quantityGTE", "quantityLT", "quantityLTE", "hasProduct", "hasProductWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOProductMovementWhereInput2ᚖmazzaᚋentᚐProductMovementWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOProductMovementWhereInput2ᚕᚖmazzaᚋentᚐProductMovementWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOProductMovementWhereInput2ᚕᚖmazzaᚋentᚐProductMovementWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "deletedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNEQ = data
		case "deletedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIn = data
		case "deletedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotIn = data
		case "deletedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGT = data
		case "deletedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGTE = data
		case "deletedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLT = data
		case "deletedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLTE = data
		case "deletedatIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIsNil = data
		case "deletedatNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotNil = data
		case "entrygroup":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroup"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroup = data
		case "entrygroupNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupNEQ = data
		case "entrygroupIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupIn = data
		case "entrygroupNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupNotIn = data
		case "entrygroupGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupGT = data
		case "entrygroupGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupGTE = data
		case "entrygroupLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupLT = data
		case "entrygroupLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupLTE = data
		case "averagecost":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("averagecost"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AverageCost = data
		case "averagecostNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("averagecostNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AverageCostNEQ = data
		case "averagecostIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("averagecostIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AverageCostIn = data
		case "averagecostNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("averagecostNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AverageCostNotIn = data
		case "averagecostGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("averagecostGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AverageCostGT = data
		case "averagecostGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("averagecostGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AverageCostGTE = data
		case "averagecostLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("averagecostLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AverageCostLT = data
		case "averagecostLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("averagecostLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AverageCostLTE = data
		case "unitcost":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitcost"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitCost = data
		case "unitcostNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitcostNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitCostNEQ = data
		case "unitcostIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitcostIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitCostIn = data
		case "unitcostNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitcostNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitCostNotIn = data
		case "unitcostGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitcostGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitCostGT = data
		case "unitcostGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitcostGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitCostGTE = data
		case "unitcostLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitcostLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitCostLT = data
		case "unitcostLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitcostLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitCostLTE = data
		case "price":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Price = data
		case "priceNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceNEQ = data
		case "priceIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceIn = data
		case "priceNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceNotIn = data
		case "priceGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceGT = data
		case "priceGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceGTE = data
		case "priceLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceLT = data
		case "priceLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceLTE = data
		case "quantity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quantity"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Quantity = data
		case "quantityNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quantityNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.QuantityNEQ = data
		case "quantityIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quantityIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.QuantityIn = data
		case "quantityNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quantityNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.QuantityNotIn = data
		case "quantityGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quantityGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.QuantityGT = data
		case "quantityGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quantityGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.QuantityGTE = data
		case "quantityLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quantityLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.QuantityLT = data
		case "quantityLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quantityLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.QuantityLTE = data
		case "hasProduct":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProduct"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProduct = data
		case "hasProductWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProductWith"))
			data, err := ec.unmarshalOProductWhereInput2ᚕᚖmazzaᚋentᚐProductWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProductWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProductOrder(ctx context.Context, obj interface{}) (ent.ProductOrder, error) {
	var it ent.ProductOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNProductOrderField2ᚖmazzaᚋentᚐProductOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProductWhereInput(ctx context.Context, obj interface{}) (ent.ProductWhereInput, error) {
	var it ent.ProductWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdat", "createdatNEQ", "createdatIn", "createdatNotIn", "createdatGT", "createdatGTE", "createdatLT", "createdatLTE", "updatedat", "updatedatNEQ", "updatedatIn", "updatedatNotIn", "updatedatGT", "updatedatGTE", "updatedatLT", "updatedatLTE", "deletedat", "deletedatNEQ", "deletedatIn", "deletedatNotIn", "deletedatGT", "deletedatGTE", "deletedatLT", "deletedatLTE", "deletedatIsNil", "deletedatNotNil", "description", "descriptionNEQ", "descriptionIn", "descriptionNotIn", "descriptionGT", "descriptionGTE", "descriptionLT", "descriptionLTE", "descriptionContains", "descriptionHasPrefix", "descriptionHasSuffix", "descriptionEqualFold", "descriptionContainsFold", "isdefault", "isdefaultNEQ", "minimumstock", "minimumstockNEQ", "minimumstockIn", "minimumstockNotIn", "minimumstockGT", "minimumstockGTE", "minimumstockLT", "minimumstockLTE", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "price", "priceNEQ", "priceIn", "priceNotIn", "priceGT", "priceGTE", "priceLT", "priceLTE", "sku", "skuNEQ", "skuIn", "skuNotIn", "skuGT", "skuGTE", "skuLT", "skuLTE", "skuContains", "skuHasPrefix", "skuHasSuffix", "skuEqualFold", "skuContainsFold", "stock", "stockNEQ", "stockIn", "stockNotIn", "stockGT", "stockGTE", "stockLT", "stockLTE", "category", "categoryNEQ", "categoryIn", "categoryNotIn", "unitcost", "unitcostNEQ", "unitcostIn", "unitcostNotIn", "unitcostGT", "unitcostGTE", "unitcostLT", "unitcostLTE", "hasCompany", "hasCompanyWith", "hasPictures", "hasPicturesWith", "hasProductMovements", "hasProductMovementsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOProductWhereInput2ᚖmazzaᚋentᚐProductWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOProductWhereInput2ᚕᚖmazzaᚋentᚐProductWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOProductWhereInput2ᚕᚖmazzaᚋentᚐProductWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "deletedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNEQ = data
		case "deletedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIn = data
		case "deletedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotIn = data
		case "deletedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGT = data
		case "deletedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGTE = data
		case "deletedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLT = data
		case "deletedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLTE = data
		case "deletedatIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIsNil = data
		case "deletedatNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotNil = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "descriptionNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNEQ = data
		case "descriptionIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIn = data
		case "descriptionNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotIn = data
		case "descriptionGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGT = data
		case "descriptionGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGTE = data
		case "descriptionLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLT = data
		case "descriptionLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLTE = data
		case "descriptionContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContains = data
		case "descriptionHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasPrefix = data
		case "descriptionHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasSuffix = data
		case "descriptionEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionEqualFold = data
		case "descriptionContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContainsFold = data
		case "isdefault":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdefault"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDefault = data
		case "isdefaultNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdefaultNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDefaultNEQ = data
		case "minimumstock":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minimumstock"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinimumStock = data
		case "minimumstockNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minimumstockNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinimumStockNEQ = data
		case "minimumstockIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minimumstockIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinimumStockIn = data
		case "minimumstockNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minimumstockNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinimumStockNotIn = data
		case "minimumstockGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minimumstockGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinimumStockGT = data
		case "minimumstockGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minimumstockGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinimumStockGTE = data
		case "minimumstockLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minimumstockLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinimumStockLT = data
		case "minimumstockLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minimumstockLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinimumStockLTE = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "price":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Price = data
		case "priceNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceNEQ = data
		case "priceIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceIn = data
		case "priceNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceNotIn = data
		case "priceGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceGT = data
		case "priceGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceGTE = data
		case "priceLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceLT = data
		case "priceLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceLTE = data
		case "sku":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sku"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Sku = data
		case "skuNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skuNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SkuNEQ = data
		case "skuIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skuIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SkuIn = data
		case "skuNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skuNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SkuNotIn = data
		case "skuGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skuGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SkuGT = data
		case "skuGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skuGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SkuGTE = data
		case "skuLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skuLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SkuLT = data
		case "skuLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skuLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SkuLTE = data
		case "skuContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skuContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SkuContains = data
		case "skuHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skuHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SkuHasPrefix = data
		case "skuHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skuHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SkuHasSuffix = data
		case "skuEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skuEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SkuEqualFold = data
		case "skuContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skuContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SkuContainsFold = data
		case "stock":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stock"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Stock = data
		case "stockNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stockNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.StockNEQ = data
		case "stockIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stockIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StockIn = data
		case "stockNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stockNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StockNotIn = data
		case "stockGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stockGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.StockGT = data
		case "stockGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stockGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.StockGTE = data
		case "stockLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stockLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.StockLT = data
		case "stockLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stockLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.StockLTE = data
		case "category":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			data, err := ec.unmarshalOProductCategory2ᚖmazzaᚋentᚋproductᚐCategory(ctx, v)
			if err != nil {
				return it, err
			}
			it.Category = data
		case "categoryNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryNEQ"))
			data, err := ec.unmarshalOProductCategory2ᚖmazzaᚋentᚋproductᚐCategory(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryNEQ = data
		case "categoryIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryIn"))
			data, err := ec.unmarshalOProductCategory2ᚕmazzaᚋentᚋproductᚐCategoryᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryIn = data
		case "categoryNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryNotIn"))
			data, err := ec.unmarshalOProductCategory2ᚕmazzaᚋentᚋproductᚐCategoryᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryNotIn = data
		case "unitcost":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitcost"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitCost = data
		case "unitcostNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitcostNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitCostNEQ = data
		case "unitcostIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitcostIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitCostIn = data
		case "unitcostNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitcostNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitCostNotIn = data
		case "unitcostGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitcostGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitCostGT = data
		case "unitcostGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitcostGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitCostGTE = data
		case "unitcostLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitcostLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitCostLT = data
		case "unitcostLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitcostLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitCostLTE = data
		case "hasCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompany"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompany = data
		case "hasCompanyWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompanyWith"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompanyWith = data
		case "hasPictures":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPictures"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPictures = data
		case "hasPicturesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPicturesWith"))
			data, err := ec.unmarshalOFileWhereInput2ᚕᚖmazzaᚋentᚐFileWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPicturesWith = data
		case "hasProductMovements":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProductMovements"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProductMovements = data
		case "hasProductMovementsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProductMovementsWith"))
			data, err := ec.unmarshalOProductMovementWhereInput2ᚕᚖmazzaᚋentᚐProductMovementWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProductMovementsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReceivableWhereInput(ctx context.Context, obj interface{}) (ent.ReceivableWhereInput, error) {
	var it ent.ReceivableWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdat", "createdatNEQ", "createdatIn", "createdatNotIn", "createdatGT", "createdatGTE", "createdatLT", "createdatLTE", "updatedat", "updatedatNEQ", "updatedatIn", "updatedatNotIn", "updatedatGT", "updatedatGTE", "updatedatLT", "updatedatLTE", "deletedat", "deletedatNEQ", "deletedatIn", "deletedatNotIn", "deletedatGT", "deletedatGTE", "deletedatLT", "deletedatLTE", "deletedatIsNil", "deletedatNotNil", "entrygroup", "entrygroupNEQ", "entrygroupIn", "entrygroupNotIn", "entrygroupGT", "entrygroupGTE", "entrygroupLT", "entrygroupLTE", "date", "dateNEQ", "dateIn", "dateNotIn", "dateGT", "dateGTE", "dateLT", "dateLTE", "outstandingbalance", "outstandingbalanceNEQ", "outstandingbalanceIn", "outstandingbalanceNotIn", "outstandingbalanceGT", "outstandingbalanceGTE", "outstandingbalanceLT", "outstandingbalanceLTE", "totaltransaction", "totaltransactionNEQ", "totaltransactionIn", "totaltransactionNotIn", "totaltransactionGT", "totaltransactionGTE", "totaltransactionLT", "totaltransactionLTE", "daysdue", "daysdueNEQ", "daysdueIn", "daysdueNotIn", "daysdueGT", "daysdueGTE", "daysdueLT", "daysdueLTE", "status", "statusNEQ", "statusIn", "statusNotIn", "hasCustomer", "hasCustomerWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOReceivableWhereInput2ᚖmazzaᚋentᚐReceivableWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOReceivableWhereInput2ᚕᚖmazzaᚋentᚐReceivableWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOReceivableWhereInput2ᚕᚖmazzaᚋentᚐReceivableWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "deletedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNEQ = data
		case "deletedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIn = data
		case "deletedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotIn = data
		case "deletedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGT = data
		case "deletedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGTE = data
		case "deletedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLT = data
		case "deletedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLTE = data
		case "deletedatIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIsNil = data
		case "deletedatNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotNil = data
		case "entrygroup":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroup"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroup = data
		case "entrygroupNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupNEQ = data
		case "entrygroupIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupIn = data
		case "entrygroupNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupNotIn = data
		case "entrygroupGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupGT = data
		case "entrygroupGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupGTE = data
		case "entrygroupLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupLT = data
		case "entrygroupLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupLTE = data
		case "date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		case "dateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateNEQ = data
		case "dateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateIn = data
		case "dateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateNotIn = data
		case "dateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateGT = data
		case "dateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateGTE = data
		case "dateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateLT = data
		case "dateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateLTE = data
		case "outstandingbalance":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalance"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalance = data
		case "outstandingbalanceNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalanceNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalanceNEQ = data
		case "outstandingbalanceIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalanceIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalanceIn = data
		case "outstandingbalanceNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalanceNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalanceNotIn = data
		case "outstandingbalanceGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalanceGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalanceGT = data
		case "outstandingbalanceGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalanceGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalanceGTE = data
		case "outstandingbalanceLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalanceLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalanceLT = data
		case "outstandingbalanceLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalanceLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalanceLTE = data
		case "totaltransaction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransaction"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransaction = data
		case "totaltransactionNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransactionNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransactionNEQ = data
		case "totaltransactionIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransactionIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransactionIn = data
		case "totaltransactionNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransactionNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransactionNotIn = data
		case "totaltransactionGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransactionGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransactionGT = data
		case "totaltransactionGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransactionGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransactionGTE = data
		case "totaltransactionLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransactionLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransactionLT = data
		case "totaltransactionLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransactionLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransactionLTE = data
		case "daysdue":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("daysdue"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DaysDue = data
		case "daysdueNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("daysdueNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DaysDueNEQ = data
		case "daysdueIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("daysdueIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DaysDueIn = data
		case "daysdueNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("daysdueNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DaysDueNotIn = data
		case "daysdueGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("daysdueGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DaysDueGT = data
		case "daysdueGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("daysdueGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DaysDueGTE = data
		case "daysdueLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("daysdueLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DaysDueLT = data
		case "daysdueLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("daysdueLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DaysDueLTE = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOReceivableStatus2ᚖmazzaᚋentᚋreceivableᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "statusNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNEQ"))
			data, err := ec.unmarshalOReceivableStatus2ᚖmazzaᚋentᚋreceivableᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNEQ = data
		case "statusIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusIn"))
			data, err := ec.unmarshalOReceivableStatus2ᚕmazzaᚋentᚋreceivableᚐStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusIn = data
		case "statusNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNotIn"))
			data, err := ec.unmarshalOReceivableStatus2ᚕmazzaᚋentᚋreceivableᚐStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNotIn = data
		case "hasCustomer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCustomer"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCustomer = data
		case "hasCustomerWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCustomerWith"))
			data, err := ec.unmarshalOCustomerWhereInput2ᚕᚖmazzaᚋentᚐCustomerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCustomerWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputResetPasswordInput(ctx context.Context, obj interface{}) (ResetPasswordInput, error) {
	var it ResetPasswordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"token", "password"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "token":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Token = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSignupInput(ctx context.Context, obj interface{}) (SignupInput, error) {
	var it SignupInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"companyInput", "userInput"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "companyInput":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyInput"))
			data, err := ec.unmarshalNCreateCompanyInput2ᚖmazzaᚋentᚐCreateCompanyInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyInput = data
		case "userInput":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userInput"))
			data, err := ec.unmarshalNCreateUserInput2ᚖmazzaᚋentᚐCreateUserInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserInput = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSupplierWhereInput(ctx context.Context, obj interface{}) (ent.SupplierWhereInput, error) {
	var it ent.SupplierWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdat", "createdatNEQ", "createdatIn", "createdatNotIn", "createdatGT", "createdatGTE", "createdatLT", "createdatLTE", "updatedat", "updatedatNEQ", "updatedatIn", "updatedatNotIn", "updatedatGT", "updatedatGTE", "updatedatLT", "updatedatLTE", "deletedat", "deletedatNEQ", "deletedatIn", "deletedatNotIn", "deletedatGT", "deletedatGTE", "deletedatLT", "deletedatLTE", "deletedatIsNil", "deletedatNotNil", "address", "addressNEQ", "addressIn", "addressNotIn", "addressGT", "addressGTE", "addressLT", "addressLTE", "addressContains", "addressHasPrefix", "addressHasSuffix", "addressEqualFold", "addressContainsFold", "city", "cityNEQ", "cityIn", "cityNotIn", "cityGT", "cityGTE", "cityLT", "cityLTE", "cityContains", "cityHasPrefix", "cityHasSuffix", "cityEqualFold", "cityContainsFold", "country", "countryNEQ", "countryIn", "countryNotIn", "countryGT", "countryGTE", "countryLT", "countryLTE", "countryContains", "countryHasPrefix", "countryHasSuffix", "countryEqualFold", "countryContainsFold", "description", "descriptionNEQ", "descriptionIn", "descriptionNotIn", "descriptionGT", "descriptionGTE", "descriptionLT", "descriptionLTE", "descriptionContains", "descriptionHasPrefix", "descriptionHasSuffix", "descriptionEqualFold", "descriptionContainsFold", "email", "emailNEQ", "emailIn", "emailNotIn", "emailGT", "emailGTE", "emailLT", "emailLTE", "emailContains", "emailHasPrefix", "emailHasSuffix", "emailEqualFold", "emailContainsFold", "isdefault", "isdefaultNEQ", "isdefaultIsNil", "isdefaultNotNil", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "phone", "phoneNEQ", "phoneIn", "phoneNotIn", "phoneGT", "phoneGTE", "phoneLT", "phoneLTE", "phoneContains", "phoneHasPrefix", "phoneHasSuffix", "phoneEqualFold", "phoneContainsFold", "taxid", "taxidNEQ", "taxidIn", "taxidNotIn", "taxidGT", "taxidGTE", "taxidLT", "taxidLTE", "taxidContains", "taxidHasPrefix", "taxidHasSuffix", "taxidEqualFold", "taxidContainsFold", "hasCompany", "hasCompanyWith", "hasPayables", "hasPayablesWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOSupplierWhereInput2ᚖmazzaᚋentᚐSupplierWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOSupplierWhereInput2ᚕᚖmazzaᚋentᚐSupplierWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOSupplierWhereInput2ᚕᚖmazzaᚋentᚐSupplierWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "deletedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNEQ = data
		case "deletedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIn = data
		case "deletedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotIn = data
		case "deletedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGT = data
		case "deletedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGTE = data
		case "deletedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLT = data
		case "deletedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLTE = data
		case "deletedatIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIsNil = data
		case "deletedatNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotNil = data
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "addressNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressNEQ = data
		case "addressIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressIn = data
		case "addressNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressNotIn = data
		case "addressGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressGT = data
		case "addressGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressGTE = data
		case "addressLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressLT = data
		case "addressLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressLTE = data
		case "addressContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressContains = data
		case "addressHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressHasPrefix = data
		case "addressHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressHasSuffix = data
		case "addressEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressEqualFold = data
		case "addressContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressContainsFold = data
		case "city":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.City = data
		case "cityNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityNEQ = data
		case "cityIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIn = data
		case "cityNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityNotIn = data
		case "cityGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityGT = data
		case "cityGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityGTE = data
		case "cityLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityLT = data
		case "cityLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityLTE = data
		case "cityContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityContains = data
		case "cityHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityHasPrefix = data
		case "cityHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityHasSuffix = data
		case "cityEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityEqualFold = data
		case "cityContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityContainsFold = data
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "countryNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryNEQ = data
		case "countryIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryIn = data
		case "countryNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryNotIn = data
		case "countryGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryGT = data
		case "countryGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryGTE = data
		case "countryLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryLT = data
		case "countryLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryLTE = data
		case "countryContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryContains = data
		case "countryHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryHasPrefix = data
		case "countryHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryHasSuffix = data
		case "countryEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryEqualFold = data
		case "countryContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryContainsFold = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "descriptionNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNEQ = data
		case "descriptionIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIn = data
		case "descriptionNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotIn = data
		case "descriptionGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGT = data
		case "descriptionGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGTE = data
		case "descriptionLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLT = data
		case "descriptionLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLTE = data
		case "descriptionContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContains = data
		case "descriptionHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasPrefix = data
		case "descriptionHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasSuffix = data
		case "descriptionEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionEqualFold = data
		case "descriptionContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContainsFold = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "emailNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNEQ = data
		case "emailIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailIn = data
		case "emailNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNotIn = data
		case "emailGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailGT = data
		case "emailGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailGTE = data
		case "emailLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailLT = data
		case "emailLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailLTE = data
		case "emailContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailContains = data
		case "emailHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailHasPrefix = data
		case "emailHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailHasSuffix = data
		case "emailEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailEqualFold = data
		case "emailContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailContainsFold = data
		case "isdefault":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdefault"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDefault = data
		case "isdefaultNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdefaultNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDefaultNEQ = data
		case "isdefaultIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdefaultIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDefaultIsNil = data
		case "isdefaultNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdefaultNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDefaultNotNil = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "phoneNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNEQ = data
		case "phoneIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneIn = data
		case "phoneNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNotIn = data
		case "phoneGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneGT = data
		case "phoneGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneGTE = data
		case "phoneLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneLT = data
		case "phoneLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneLTE = data
		case "phoneContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneContains = data
		case "phoneHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneHasPrefix = data
		case "phoneHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneHasSuffix = data
		case "phoneEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneEqualFold = data
		case "phoneContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneContainsFold = data
		case "taxid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxid"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxId = data
		case "taxidNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdNEQ = data
		case "taxidIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdIn = data
		case "taxidNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdNotIn = data
		case "taxidGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdGT = data
		case "taxidGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdGTE = data
		case "taxidLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdLT = data
		case "taxidLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdLTE = data
		case "taxidContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdContains = data
		case "taxidHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdHasPrefix = data
		case "taxidHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdHasSuffix = data
		case "taxidEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdEqualFold = data
		case "taxidContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdContainsFold = data
		case "hasCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompany"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompany = data
		case "hasCompanyWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompanyWith"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompanyWith = data
		case "hasPayables":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPayables"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPayables = data
		case "hasPayablesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPayablesWith"))
			data, err := ec.unmarshalOPayableWhereInput2ᚕᚖmazzaᚋentᚐPayableWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPayablesWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTokenWhereInput(ctx context.Context, obj interface{}) (ent.TokenWhereInput, error) {
	var it ent.TokenWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "expiry", "expiryNEQ", "expiryIn", "expiryNotIn", "expiryGT", "expiryGTE", "expiryLT", "expiryLTE", "category", "categoryNEQ", "categoryIn", "categoryNotIn", "token", "tokenNEQ", "tokenIn", "tokenNotIn", "tokenGT", "tokenGTE", "tokenLT", "tokenLTE", "tokenContains", "tokenHasPrefix", "tokenHasSuffix", "tokenEqualFold", "tokenContainsFold", "hasCompany", "hasCompanyWith", "hasUser", "hasUserWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOTokenWhereInput2ᚖmazzaᚋentᚐTokenWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOTokenWhereInput2ᚕᚖmazzaᚋentᚐTokenWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOTokenWhereInput2ᚕᚖmazzaᚋentᚐTokenWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "expiry":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiry"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Expiry = data
		case "expiryNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiryNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiryNEQ = data
		case "expiryIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiryIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiryIn = data
		case "expiryNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiryNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiryNotIn = data
		case "expiryGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiryGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiryGT = data
		case "expiryGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiryGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiryGTE = data
		case "expiryLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiryLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiryLT = data
		case "expiryLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiryLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiryLTE = data
		case "category":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			data, err := ec.unmarshalOTokenCategory2ᚖmazzaᚋentᚋtokenᚐCategory(ctx, v)
			if err != nil {
				return it, err
			}
			it.Category = data
		case "categoryNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryNEQ"))
			data, err := ec.unmarshalOTokenCategory2ᚖmazzaᚋentᚋtokenᚐCategory(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryNEQ = data
		case "categoryIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryIn"))
			data, err := ec.unmarshalOTokenCategory2ᚕmazzaᚋentᚋtokenᚐCategoryᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryIn = data
		case "categoryNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryNotIn"))
			data, err := ec.unmarshalOTokenCategory2ᚕmazzaᚋentᚋtokenᚐCategoryᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryNotIn = data
		case "token":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Token = data
		case "tokenNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenNEQ = data
		case "tokenIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenIn = data
		case "tokenNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenNotIn = data
		case "tokenGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenGT = data
		case "tokenGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenGTE = data
		case "tokenLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenLT = data
		case "tokenLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenLTE = data
		case "tokenContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenContains = data
		case "tokenHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenHasPrefix = data
		case "tokenHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenHasSuffix = data
		case "tokenEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenEqualFold = data
		case "tokenContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenContainsFold = data
		case "hasCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompany"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompany = data
		case "hasCompanyWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompanyWith"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompanyWith = data
		case "hasUser":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUser"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUser = data
		case "hasUserWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUserWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖmazzaᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUserWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTreasuryWhereInput(ctx context.Context, obj interface{}) (ent.TreasuryWhereInput, error) {
	var it ent.TreasuryWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdat", "createdatNEQ", "createdatIn", "createdatNotIn", "createdatGT", "createdatGTE", "createdatLT", "createdatLTE", "updatedat", "updatedatNEQ", "updatedatIn", "updatedatNotIn", "updatedatGT", "updatedatGTE", "updatedatLT", "updatedatLTE", "deletedat", "deletedatNEQ", "deletedatIn", "deletedatNotIn", "deletedatGT", "deletedatGTE", "deletedatLT", "deletedatLTE", "deletedatIsNil", "deletedatNotNil", "accountnumber", "accountnumberNEQ", "accountnumberIn", "accountnumberNotIn", "accountnumberGT", "accountnumberGTE", "accountnumberLT", "accountnumberLTE", "accountnumberContains", "accountnumberHasPrefix", "accountnumberHasSuffix", "accountnumberIsNil", "accountnumberNotNil", "accountnumberEqualFold", "accountnumberContainsFold", "balance", "balanceNEQ", "balanceIn", "balanceNotIn", "balanceGT", "balanceGTE", "balanceLT", "balanceLTE", "bankname", "banknameNEQ", "banknameIn", "banknameNotIn", "banknameGT", "banknameGTE", "banknameLT", "banknameLTE", "banknameContains", "banknameHasPrefix", "banknameHasSuffix", "banknameIsNil", "banknameNotNil", "banknameEqualFold", "banknameContainsFold", "currency", "currencyNEQ", "currencyIn", "currencyNotIn", "description", "descriptionNEQ", "descriptionIn", "descriptionNotIn", "descriptionGT", "descriptionGTE", "descriptionLT", "descriptionLTE", "descriptionContains", "descriptionHasPrefix", "descriptionHasSuffix", "descriptionIsNil", "descriptionNotNil", "descriptionEqualFold", "descriptionContainsFold", "iban", "ibanNEQ", "ibanIn", "ibanNotIn", "ibanGT", "ibanGTE", "ibanLT", "ibanLTE", "ibanContains", "ibanHasPrefix", "ibanHasSuffix", "ibanIsNil", "ibanNotNil", "ibanEqualFold", "ibanContainsFold", "isdefault", "isdefaultNEQ", "isdefaultIsNil", "isdefaultNotNil", "ismainaccount", "ismainaccountNEQ", "ismainaccountIsNil", "ismainaccountNotNil", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "category", "categoryNEQ", "categoryIn", "categoryNotIn", "swiftcode", "swiftcodeNEQ", "swiftcodeIn", "swiftcodeNotIn", "swiftcodeGT", "swiftcodeGTE", "swiftcodeLT", "swiftcodeLTE", "swiftcodeContains", "swiftcodeHasPrefix", "swiftcodeHasSuffix", "swiftcodeIsNil", "swiftcodeNotNil", "swiftcodeEqualFold", "swiftcodeContainsFold", "hasCompany", "hasCompanyWith", "hasCashMovements", "hasCashMovementsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOTreasuryWhereInput2ᚖmazzaᚋentᚐTreasuryWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOTreasuryWhereInput2ᚕᚖmazzaᚋentᚐTreasuryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOTreasuryWhereInput2ᚕᚖmazzaᚋentᚐTreasuryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "deletedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNEQ = data
		case "deletedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIn = data
		case "deletedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotIn = data
		case "deletedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGT = data
		case "deletedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGTE = data
		case "deletedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLT = data
		case "deletedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLTE = data
		case "deletedatIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIsNil = data
		case "deletedatNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotNil = data
		case "accountnumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountnumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountNumber = data
		case "accountnumberNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountnumberNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountNumberNEQ = data
		case "accountnumberIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountnumberIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountNumberIn = data
		case "accountnumberNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountnumberNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountNumberNotIn = data
		case "accountnumberGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountnumberGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountNumberGT = data
		case "accountnumberGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountnumberGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountNumberGTE = data
		case "accountnumberLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountnumberLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountNumberLT = data
		case "accountnumberLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountnumberLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountNumberLTE = data
		case "accountnumberContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountnumberContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountNumberContains = data
		case "accountnumberHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountnumberHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountNumberHasPrefix = data
		case "accountnumberHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountnumberHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountNumberHasSuffix = data
		case "accountnumberIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountnumberIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountNumberIsNil = data
		case "accountnumberNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountnumberNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountNumberNotNil = data
		case "accountnumberEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountnumberEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountNumberEqualFold = data
		case "accountnumberContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountnumberContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountNumberContainsFold = data
		case "balance":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balance"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Balance = data
		case "balanceNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BalanceNEQ = data
		case "balanceIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BalanceIn = data
		case "balanceNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BalanceNotIn = data
		case "balanceGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BalanceGT = data
		case "balanceGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BalanceGTE = data
		case "balanceLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BalanceLT = data
		case "balanceLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BalanceLTE = data
		case "bankname":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bankname"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BankName = data
		case "banknameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("banknameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BankNameNEQ = data
		case "banknameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("banknameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BankNameIn = data
		case "banknameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("banknameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BankNameNotIn = data
		case "banknameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("banknameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BankNameGT = data
		case "banknameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("banknameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BankNameGTE = data
		case "banknameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("banknameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BankNameLT = data
		case "banknameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("banknameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BankNameLTE = data
		case "banknameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("banknameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BankNameContains = data
		case "banknameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("banknameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BankNameHasPrefix = data
		case "banknameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("banknameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BankNameHasSuffix = data
		case "banknameIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("banknameIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BankNameIsNil = data
		case "banknameNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("banknameNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BankNameNotNil = data
		case "banknameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("banknameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BankNameEqualFold = data
		case "banknameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("banknameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BankNameContainsFold = data
		case "currency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			data, err := ec.unmarshalOTreasuryCurrency2ᚖmazzaᚋentᚋtreasuryᚐCurrency(ctx, v)
			if err != nil {
				return it, err
			}
			it.Currency = data
		case "currencyNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currencyNEQ"))
			data, err := ec.unmarshalOTreasuryCurrency2ᚖmazzaᚋentᚋtreasuryᚐCurrency(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrencyNEQ = data
		case "currencyIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currencyIn"))
			data, err := ec.unmarshalOTreasuryCurrency2ᚕmazzaᚋentᚋtreasuryᚐCurrencyᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrencyIn = data
		case "currencyNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currencyNotIn"))
			data, err := ec.unmarshalOTreasuryCurrency2ᚕmazzaᚋentᚋtreasuryᚐCurrencyᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrencyNotIn = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "descriptionNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNEQ = data
		case "descriptionIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIn = data
		case "descriptionNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotIn = data
		case "descriptionGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGT = data
		case "descriptionGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGTE = data
		case "descriptionLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLT = data
		case "descriptionLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLTE = data
		case "descriptionContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContains = data
		case "descriptionHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasPrefix = data
		case "descriptionHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasSuffix = data
		case "descriptionIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIsNil = data
		case "descriptionNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotNil = data
		case "descriptionEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionEqualFold = data
		case "descriptionContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContainsFold = data
		case "iban":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iban"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Iban = data
		case "ibanNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ibanNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IbanNEQ = data
		case "ibanIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ibanIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IbanIn = data
		case "ibanNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ibanNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IbanNotIn = data
		case "ibanGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ibanGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IbanGT = data
		case "ibanGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ibanGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IbanGTE = data
		case "ibanLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ibanLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IbanLT = data
		case "ibanLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ibanLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IbanLTE = data
		case "ibanContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ibanContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IbanContains = data
		case "ibanHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ibanHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IbanHasPrefix = data
		case "ibanHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ibanHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IbanHasSuffix = data
		case "ibanIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ibanIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IbanIsNil = data
		case "ibanNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ibanNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IbanNotNil = data
		case "ibanEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ibanEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IbanEqualFold = data
		case "ibanContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ibanContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IbanContainsFold = data
		case "isdefault":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdefault"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDefault = data
		case "isdefaultNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdefaultNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDefaultNEQ = data
		case "isdefaultIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdefaultIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDefaultIsNil = data
		case "isdefaultNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdefaultNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDefaultNotNil = data
		case "ismainaccount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ismainaccount"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsMainAccount = data
		case "ismainaccountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ismainaccountNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsMainAccountNEQ = data
		case "ismainaccountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ismainaccountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsMainAccountIsNil = data
		case "ismainaccountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ismainaccountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsMainAccountNotNil = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "category":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			data, err := ec.unmarshalOTreasuryCategory2ᚖmazzaᚋentᚋtreasuryᚐCategory(ctx, v)
			if err != nil {
				return it, err
			}
			it.Category = data
		case "categoryNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryNEQ"))
			data, err := ec.unmarshalOTreasuryCategory2ᚖmazzaᚋentᚋtreasuryᚐCategory(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryNEQ = data
		case "categoryIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryIn"))
			data, err := ec.unmarshalOTreasuryCategory2ᚕmazzaᚋentᚋtreasuryᚐCategoryᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryIn = data
		case "categoryNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryNotIn"))
			data, err := ec.unmarshalOTreasuryCategory2ᚕmazzaᚋentᚋtreasuryᚐCategoryᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryNotIn = data
		case "swiftcode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("swiftcode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SwiftCode = data
		case "swiftcodeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("swiftcodeNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SwiftCodeNEQ = data
		case "swiftcodeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("swiftcodeIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SwiftCodeIn = data
		case "swiftcodeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("swiftcodeNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SwiftCodeNotIn = data
		case "swiftcodeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("swiftcodeGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SwiftCodeGT = data
		case "swiftcodeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("swiftcodeGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SwiftCodeGTE = data
		case "swiftcodeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("swiftcodeLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SwiftCodeLT = data
		case "swiftcodeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("swiftcodeLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SwiftCodeLTE = data
		case "swiftcodeContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("swiftcodeContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SwiftCodeContains = data
		case "swiftcodeHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("swiftcodeHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SwiftCodeHasPrefix = data
		case "swiftcodeHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("swiftcodeHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SwiftCodeHasSuffix = data
		case "swiftcodeIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("swiftcodeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SwiftCodeIsNil = data
		case "swiftcodeNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("swiftcodeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SwiftCodeNotNil = data
		case "swiftcodeEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("swiftcodeEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SwiftCodeEqualFold = data
		case "swiftcodeContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("swiftcodeContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SwiftCodeContainsFold = data
		case "hasCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompany"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompany = data
		case "hasCompanyWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompanyWith"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompanyWith = data
		case "hasCashMovements":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCashMovements"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCashMovements = data
		case "hasCashMovementsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCashMovementsWith"))
			data, err := ec.unmarshalOCashMovementWhereInput2ᚕᚖmazzaᚋentᚐCashMovementWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCashMovementsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateAccountingEntryInput(ctx context.Context, obj interface{}) (ent.UpdateAccountingEntryInput, error) {
	var it ent.UpdateAccountingEntryInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedat", "deletedat", "clearDeletedAt", "number", "group", "date", "account", "label", "amount", "description", "accounttype", "isdebit", "isreversal", "reversed", "companyID", "clearCompany", "userID", "clearUser"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "clearDeletedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDeletedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDeletedAt = data
		case "number":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("number"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Number = data
		case "group":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("group"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Group = data
		case "date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		case "account":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("account"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Account = data
		case "label":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Label = data
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "accounttype":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accounttype"))
			data, err := ec.unmarshalOAccountingEntryAccountType2ᚖmazzaᚋentᚋaccountingentryᚐAccountType(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountType = data
		case "isdebit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdebit"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDebit = data
		case "isreversal":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isreversal"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsReversal = data
		case "reversed":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reversed"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Reversed = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "clearCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCompany"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCompany = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "clearUser":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearUser"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearUser = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCashMovementInput(ctx context.Context, obj interface{}) (ent.UpdateCashMovementInput, error) {
	var it ent.UpdateCashMovementInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedat", "deletedat", "clearDeletedAt", "amount", "date", "entrygroup", "treasuryID", "clearTreasury"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "clearDeletedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDeletedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDeletedAt = data
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		case "entrygroup":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroup"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroup = data
		case "treasuryID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("treasuryID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TreasuryID = data
		case "clearTreasury":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearTreasury"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearTreasury = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCompanyInput(ctx context.Context, obj interface{}) (ent.UpdateCompanyInput, error) {
	var it ent.UpdateCompanyInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedat", "deletedat", "clearDeletedAt", "address", "clearAddress", "basecurrency", "ceoname", "clearCeoName", "city", "country", "establishedat", "description", "clearDescription", "email", "clearEmail", "lastentrydate", "lastinvoicenumber", "clearLastInvoiceNumber", "logo", "clearLogo", "name", "numberofemployees", "phone", "clearPhone", "sector", "clearSector", "taxid", "vatrate", "website", "clearWebsite", "addAvailableRoleIDs", "removeAvailableRoleIDs", "clearAvailableRoles", "addAccountingEntryIDs", "removeAccountingEntryIDs", "clearAccountingEntries", "addCustomerIDs", "removeCustomerIDs", "clearCustomers", "addEmployeeIDs", "removeEmployeeIDs", "clearEmployees", "addFileIDs", "removeFileIDs", "clearFiles", "addProductIDs", "removeProductIDs", "clearProducts", "addSupplierIDs", "removeSupplierIDs", "clearSuppliers", "addTokenIDs", "removeTokenIDs", "clearTokens", "addTreasuryIDs", "removeTreasuryIDs", "clearTreasuries", "addWorkShiftIDs", "removeWorkShiftIDs", "clearWorkShifts", "addWorkTaskIDs", "removeWorkTaskIDs", "clearWorkTasks", "addWorkTagIDs", "removeWorkTagIDs", "clearWorkTags", "addUserIDs", "removeUserIDs", "clearUsers", "addDaughterCompanyIDs", "removeDaughterCompanyIDs", "clearDaughterCompanies", "parentcompanyID", "clearParentCompany"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "clearDeletedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDeletedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDeletedAt = data
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "clearAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearAddress"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearAddress = data
		case "basecurrency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("basecurrency"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseCurrency = data
		case "ceoname":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceoname"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CeoName = data
		case "clearCeoName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCeoName"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCeoName = data
		case "city":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.City = data
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "establishedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("establishedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstablishedAt = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "clearDescription":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDescription"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDescription = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "clearEmail":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearEmail"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearEmail = data
		case "lastentrydate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastentrydate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEntryDate = data
		case "lastinvoicenumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastinvoicenumber"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastInvoiceNumber = data
		case "clearLastInvoiceNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearLastInvoiceNumber"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearLastInvoiceNumber = data
		case "logo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logo"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Logo = data
		case "clearLogo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearLogo"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearLogo = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "numberofemployees":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numberofemployees"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumberOfEmployees = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "clearPhone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearPhone"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearPhone = data
		case "sector":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sector"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Sector = data
		case "clearSector":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearSector"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearSector = data
		case "taxid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxid"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxId = data
		case "vatrate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vatrate"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VatRate = data
		case "website":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("website"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Website = data
		case "clearWebsite":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearWebsite"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearWebsite = data
		case "addAvailableRoleIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addAvailableRoleIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddAvailableRoleIDs = data
		case "removeAvailableRoleIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeAvailableRoleIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveAvailableRoleIDs = data
		case "clearAvailableRoles":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearAvailableRoles"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearAvailableRoles = data
		case "addAccountingEntryIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addAccountingEntryIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddAccountingEntryIDs = data
		case "removeAccountingEntryIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeAccountingEntryIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveAccountingEntryIDs = data
		case "clearAccountingEntries":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearAccountingEntries"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearAccountingEntries = data
		case "addCustomerIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addCustomerIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddCustomerIDs = data
		case "removeCustomerIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeCustomerIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveCustomerIDs = data
		case "clearCustomers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCustomers"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCustomers = data
		case "addEmployeeIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addEmployeeIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddEmployeeIDs = data
		case "removeEmployeeIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeEmployeeIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveEmployeeIDs = data
		case "clearEmployees":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearEmployees"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearEmployees = data
		case "addFileIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addFileIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddFileIDs = data
		case "removeFileIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeFileIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveFileIDs = data
		case "clearFiles":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearFiles"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearFiles = data
		case "addProductIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addProductIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddProductIDs = data
		case "removeProductIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeProductIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveProductIDs = data
		case "clearProducts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearProducts"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearProducts = data
		case "addSupplierIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addSupplierIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddSupplierIDs = data
		case "removeSupplierIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeSupplierIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveSupplierIDs = data
		case "clearSuppliers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearSuppliers"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearSuppliers = data
		case "addTokenIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addTokenIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddTokenIDs = data
		case "removeTokenIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeTokenIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveTokenIDs = data
		case "clearTokens":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearTokens"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearTokens = data
		case "addTreasuryIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addTreasuryIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddTreasuryIDs = data
		case "removeTreasuryIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeTreasuryIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveTreasuryIDs = data
		case "clearTreasuries":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearTreasuries"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearTreasuries = data
		case "addWorkShiftIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addWorkShiftIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddWorkShiftIDs = data
		case "removeWorkShiftIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeWorkShiftIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveWorkShiftIDs = data
		case "clearWorkShifts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearWorkShifts"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearWorkShifts = data
		case "addWorkTaskIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addWorkTaskIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddWorkTaskIDs = data
		case "removeWorkTaskIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeWorkTaskIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveWorkTaskIDs = data
		case "clearWorkTasks":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearWorkTasks"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearWorkTasks = data
		case "addWorkTagIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addWorkTagIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddWorkTagIDs = data
		case "removeWorkTagIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeWorkTagIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveWorkTagIDs = data
		case "clearWorkTags":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearWorkTags"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearWorkTags = data
		case "addUserIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addUserIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddUserIDs = data
		case "removeUserIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeUserIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveUserIDs = data
		case "clearUsers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearUsers"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearUsers = data
		case "addDaughterCompanyIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addDaughterCompanyIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddDaughterCompanyIDs = data
		case "removeDaughterCompanyIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeDaughterCompanyIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveDaughterCompanyIDs = data
		case "clearDaughterCompanies":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDaughterCompanies"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDaughterCompanies = data
		case "parentcompanyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentcompanyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParentCompanyID = data
		case "clearParentCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearParentCompany"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearParentCompany = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCustomerInput(ctx context.Context, obj interface{}) (ent.UpdateCustomerInput, error) {
	var it ent.UpdateCustomerInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedat", "deletedat", "clearDeletedAt", "address", "city", "country", "description", "email", "isdefault", "clearIsDefault", "name", "phone", "taxid", "companyID", "clearCompany", "addReceivableIDs", "removeReceivableIDs", "clearReceivables"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "clearDeletedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDeletedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDeletedAt = data
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "city":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.City = data
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "isdefault":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdefault"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDefault = data
		case "clearIsDefault":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearIsDefault"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearIsDefault = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "taxid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxid"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxId = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "clearCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCompany"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCompany = data
		case "addReceivableIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addReceivableIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddReceivableIDs = data
		case "removeReceivableIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeReceivableIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveReceivableIDs = data
		case "clearReceivables":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearReceivables"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearReceivables = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateEmployeeInput(ctx context.Context, obj interface{}) (ent.UpdateEmployeeInput, error) {
	var it ent.UpdateEmployeeInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedat", "deletedat", "clearDeletedAt", "name", "gender", "position", "clearPosition", "email", "clearEmail", "phone", "companyID", "clearCompany", "userID", "clearUser", "addSubordinateIDs", "removeSubordinateIDs", "clearSubordinates", "leaderID", "clearLeader", "addWorkShiftIDs", "removeWorkShiftIDs", "clearWorkShifts", "addApprovedWorkShiftIDs", "removeApprovedWorkShiftIDs", "clearApprovedWorkShifts", "addAssignedTaskIDs", "removeAssignedTaskIDs", "clearAssignedTasks"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "clearDeletedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDeletedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDeletedAt = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "gender":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			data, err := ec.unmarshalOEmployeeGender2ᚖmazzaᚋentᚋemployeeᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
			it.Gender = data
		case "position":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("position"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Position = data
		case "clearPosition":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearPosition"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearPosition = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "clearEmail":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearEmail"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearEmail = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "clearCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCompany"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCompany = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "clearUser":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearUser"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearUser = data
		case "addSubordinateIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addSubordinateIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddSubordinateIDs = data
		case "removeSubordinateIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeSubordinateIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveSubordinateIDs = data
		case "clearSubordinates":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearSubordinates"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearSubordinates = data
		case "leaderID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderID = data
		case "clearLeader":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearLeader"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearLeader = data
		case "addWorkShiftIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addWorkShiftIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddWorkShiftIDs = data
		case "removeWorkShiftIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeWorkShiftIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveWorkShiftIDs = data
		case "clearWorkShifts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearWorkShifts"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearWorkShifts = data
		case "addApprovedWorkShiftIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addApprovedWorkShiftIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddApprovedWorkShiftIDs = data
		case "removeApprovedWorkShiftIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeApprovedWorkShiftIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveApprovedWorkShiftIDs = data
		case "clearApprovedWorkShifts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearApprovedWorkShifts"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearApprovedWorkShifts = data
		case "addAssignedTaskIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addAssignedTaskIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddAssignedTaskIDs = data
		case "removeAssignedTaskIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeAssignedTaskIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveAssignedTaskIDs = data
		case "clearAssignedTasks":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearAssignedTasks"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearAssignedTasks = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateFileInput(ctx context.Context, obj interface{}) (ent.UpdateFileInput, error) {
	var it ent.UpdateFileInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedat", "deletedat", "clearDeletedAt", "category", "extension", "size", "url", "description", "companyID", "clearCompany", "productID", "clearProduct"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "clearDeletedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDeletedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDeletedAt = data
		case "category":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			data, err := ec.unmarshalOFileCategory2ᚖmazzaᚋentᚋfileᚐCategory(ctx, v)
			if err != nil {
				return it, err
			}
			it.Category = data
		case "extension":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extension"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Extension = data
		case "size":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Size = data
		case "url":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URL = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "clearCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCompany"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCompany = data
		case "productID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "clearProduct":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearProduct"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearProduct = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePayableInput(ctx context.Context, obj interface{}) (ent.UpdatePayableInput, error) {
	var it ent.UpdatePayableInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedat", "deletedat", "clearDeletedAt", "entrygroup", "date", "outstandingbalance", "totaltransaction", "daysdue", "status", "supplierID", "clearSupplier"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "clearDeletedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDeletedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDeletedAt = data
		case "entrygroup":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroup"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroup = data
		case "date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		case "outstandingbalance":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalance"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalance = data
		case "totaltransaction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransaction"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransaction = data
		case "daysdue":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("daysdue"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DaysDue = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOPayableStatus2ᚖmazzaᚋentᚋpayableᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "supplierID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supplierID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SupplierID = data
		case "clearSupplier":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearSupplier"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearSupplier = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProductInput(ctx context.Context, obj interface{}) (ent.UpdateProductInput, error) {
	var it ent.UpdateProductInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedat", "deletedat", "clearDeletedAt", "description", "isdefault", "minimumstock", "name", "price", "sku", "stock", "category", "unitcost", "companyID", "clearCompany", "addPictureIDs", "removePictureIDs", "clearPictures", "addProductMovementIDs", "removeProductMovementIDs", "clearProductMovements"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "clearDeletedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDeletedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDeletedAt = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "isdefault":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdefault"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDefault = data
		case "minimumstock":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minimumstock"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinimumStock = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "price":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Price = data
		case "sku":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sku"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Sku = data
		case "stock":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stock"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Stock = data
		case "category":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			data, err := ec.unmarshalOProductCategory2ᚖmazzaᚋentᚋproductᚐCategory(ctx, v)
			if err != nil {
				return it, err
			}
			it.Category = data
		case "unitcost":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitcost"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitCost = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "clearCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCompany"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCompany = data
		case "addPictureIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addPictureIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddPictureIDs = data
		case "removePictureIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removePictureIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemovePictureIDs = data
		case "clearPictures":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearPictures"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearPictures = data
		case "addProductMovementIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addProductMovementIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddProductMovementIDs = data
		case "removeProductMovementIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeProductMovementIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveProductMovementIDs = data
		case "clearProductMovements":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearProductMovements"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearProductMovements = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProductMovementInput(ctx context.Context, obj interface{}) (ent.UpdateProductMovementInput, error) {
	var it ent.UpdateProductMovementInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedat", "deletedat", "clearDeletedAt", "entrygroup", "averagecost", "unitcost", "price", "quantity", "productID", "clearProduct"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "clearDeletedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDeletedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDeletedAt = data
		case "entrygroup":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroup"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroup = data
		case "averagecost":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("averagecost"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AverageCost = data
		case "unitcost":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitcost"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitCost = data
		case "price":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Price = data
		case "quantity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quantity"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Quantity = data
		case "productID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "clearProduct":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearProduct"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearProduct = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateReceivableInput(ctx context.Context, obj interface{}) (ent.UpdateReceivableInput, error) {
	var it ent.UpdateReceivableInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedat", "deletedat", "clearDeletedAt", "entrygroup", "date", "outstandingbalance", "totaltransaction", "daysdue", "status", "customerID", "clearCustomer"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "clearDeletedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDeletedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDeletedAt = data
		case "entrygroup":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroup"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroup = data
		case "date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		case "outstandingbalance":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalance"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalance = data
		case "totaltransaction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransaction"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransaction = data
		case "daysdue":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("daysdue"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DaysDue = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOReceivableStatus2ᚖmazzaᚋentᚋreceivableᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "customerID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerID = data
		case "clearCustomer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCustomer"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCustomer = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateSupplierInput(ctx context.Context, obj interface{}) (ent.UpdateSupplierInput, error) {
	var it ent.UpdateSupplierInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedat", "deletedat", "clearDeletedAt", "address", "city", "country", "description", "email", "isdefault", "clearIsDefault", "name", "phone", "taxid", "companyID", "clearCompany", "addPayableIDs", "removePayableIDs", "clearPayables"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "clearDeletedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDeletedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDeletedAt = data
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "city":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.City = data
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "isdefault":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdefault"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDefault = data
		case "clearIsDefault":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearIsDefault"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearIsDefault = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "taxid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxid"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxId = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "clearCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCompany"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCompany = data
		case "addPayableIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addPayableIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddPayableIDs = data
		case "removePayableIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removePayableIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemovePayableIDs = data
		case "clearPayables":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearPayables"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearPayables = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTreasuryInput(ctx context.Context, obj interface{}) (ent.UpdateTreasuryInput, error) {
	var it ent.UpdateTreasuryInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedat", "deletedat", "clearDeletedAt", "accountnumber", "clearAccountNumber", "balance", "bankname", "clearBankName", "currency", "description", "clearDescription", "iban", "clearIban", "isdefault", "clearIsDefault", "ismainaccount", "clearIsMainAccount", "name", "category", "swiftcode", "clearSwiftCode", "companyID", "clearCompany", "addCashMovementIDs", "removeCashMovementIDs", "clearCashMovements"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "clearDeletedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDeletedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDeletedAt = data
		case "accountnumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountnumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountNumber = data
		case "clearAccountNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearAccountNumber"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearAccountNumber = data
		case "balance":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balance"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Balance = data
		case "bankname":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bankname"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BankName = data
		case "clearBankName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearBankName"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearBankName = data
		case "currency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			data, err := ec.unmarshalOTreasuryCurrency2ᚖmazzaᚋentᚋtreasuryᚐCurrency(ctx, v)
			if err != nil {
				return it, err
			}
			it.Currency = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "clearDescription":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDescription"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDescription = data
		case "iban":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iban"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Iban = data
		case "clearIban":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearIban"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearIban = data
		case "isdefault":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdefault"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDefault = data
		case "clearIsDefault":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearIsDefault"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearIsDefault = data
		case "ismainaccount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ismainaccount"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsMainAccount = data
		case "clearIsMainAccount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearIsMainAccount"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearIsMainAccount = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "category":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			data, err := ec.unmarshalOTreasuryCategory2ᚖmazzaᚋentᚋtreasuryᚐCategory(ctx, v)
			if err != nil {
				return it, err
			}
			it.Category = data
		case "swiftcode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("swiftcode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SwiftCode = data
		case "clearSwiftCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearSwiftCode"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearSwiftCode = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "clearCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCompany"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCompany = data
		case "addCashMovementIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addCashMovementIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddCashMovementIDs = data
		case "removeCashMovementIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeCashMovementIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveCashMovementIDs = data
		case "clearCashMovements":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCashMovements"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCashMovements = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateUserInput(ctx context.Context, obj interface{}) (ent.UpdateUserInput, error) {
	var it ent.UpdateUserInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedat", "deletedat", "clearDeletedAt", "fcmtoken", "clearFcmToken", "email", "clearEmail", "name", "password", "username", "disabled", "clearDisabled", "notverified", "clearNotVerified", "addAccountingEntryIDs", "removeAccountingEntryIDs", "clearAccountingEntries", "addCompanyIDs", "removeCompanyIDs", "addAssignedRoleIDs", "removeAssignedRoleIDs", "clearAssignedRoles", "addCreatedTaskIDs", "removeCreatedTaskIDs", "clearCreatedTasks", "employeeID", "clearEmployee", "addTokenIDs", "removeTokenIDs", "clearTokens"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "clearDeletedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDeletedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDeletedAt = data
		case "fcmtoken":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fcmtoken"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FcmToken = data
		case "clearFcmToken":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearFcmToken"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearFcmToken = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "clearEmail":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearEmail"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearEmail = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "disabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Disabled = data
		case "clearDisabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDisabled"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDisabled = data
		case "notverified":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notverified"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotVerified = data
		case "clearNotVerified":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearNotVerified"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearNotVerified = data
		case "addAccountingEntryIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addAccountingEntryIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddAccountingEntryIDs = data
		case "removeAccountingEntryIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeAccountingEntryIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveAccountingEntryIDs = data
		case "clearAccountingEntries":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearAccountingEntries"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearAccountingEntries = data
		case "addCompanyIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addCompanyIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddCompanyIDs = data
		case "removeCompanyIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeCompanyIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveCompanyIDs = data
		case "addAssignedRoleIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addAssignedRoleIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddAssignedRoleIDs = data
		case "removeAssignedRoleIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeAssignedRoleIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveAssignedRoleIDs = data
		case "clearAssignedRoles":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearAssignedRoles"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearAssignedRoles = data
		case "addCreatedTaskIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addCreatedTaskIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddCreatedTaskIDs = data
		case "removeCreatedTaskIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeCreatedTaskIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveCreatedTaskIDs = data
		case "clearCreatedTasks":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCreatedTasks"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCreatedTasks = data
		case "employeeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("employeeID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmployeeID = data
		case "clearEmployee":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearEmployee"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearEmployee = data
		case "addTokenIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addTokenIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddTokenIDs = data
		case "removeTokenIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeTokenIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveTokenIDs = data
		case "clearTokens":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearTokens"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearTokens = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateUserRoleInput(ctx context.Context, obj interface{}) (ent.UpdateUserRoleInput, error) {
	var it ent.UpdateUserRoleInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"role", "companyID", "clearCompany", "addUserIDs", "removeUserIDs", "clearUser"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "role":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			data, err := ec.unmarshalOUserRoleRole2ᚖmazzaᚋentᚋuserroleᚐRole(ctx, v)
			if err != nil {
				return it, err
			}
			it.Role = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "clearCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCompany"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCompany = data
		case "addUserIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addUserIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddUserIDs = data
		case "removeUserIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeUserIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveUserIDs = data
		case "clearUser":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearUser"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearUser = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateWorkshiftInput(ctx context.Context, obj interface{}) (ent.UpdateWorkshiftInput, error) {
	var it ent.UpdateWorkshiftInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedat", "deletedat", "clearDeletedAt", "approvedat", "clearApprovedAt", "clockin", "clockout", "clearClockOut", "clockinlocation", "clockoutlocation", "clearClockOutLocation", "description", "clearDescription", "note", "clearNote", "status", "companyID", "clearCompany", "employeeID", "clearEmployee", "approvedbyID", "clearApprovedBy", "worktaskID", "clearWorkTask", "editrequestID", "clearEditRequest", "workshiftID", "clearWorkShift"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "clearDeletedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDeletedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDeletedAt = data
		case "approvedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovedAt = data
		case "clearApprovedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearApprovedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearApprovedAt = data
		case "clockin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockin"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockIn = data
		case "clockout":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockout"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOut = data
		case "clearClockOut":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearClockOut"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearClockOut = data
		case "clockinlocation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinlocation"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInLocation = data
		case "clockoutlocation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutlocation"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLocation = data
		case "clearClockOutLocation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearClockOutLocation"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearClockOutLocation = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "clearDescription":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDescription"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDescription = data
		case "note":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Note = data
		case "clearNote":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearNote"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearNote = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOWorkshiftStatus2ᚖmazzaᚋentᚋworkshiftᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "clearCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCompany"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCompany = data
		case "employeeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("employeeID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmployeeID = data
		case "clearEmployee":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearEmployee"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearEmployee = data
		case "approvedbyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedbyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovedByID = data
		case "clearApprovedBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearApprovedBy"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearApprovedBy = data
		case "worktaskID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("worktaskID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkTaskID = data
		case "clearWorkTask":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearWorkTask"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearWorkTask = data
		case "editrequestID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("editrequestID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EditRequestID = data
		case "clearEditRequest":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearEditRequest"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearEditRequest = data
		case "workshiftID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workshiftID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkShiftID = data
		case "clearWorkShift":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearWorkShift"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearWorkShift = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateWorktagInput(ctx context.Context, obj interface{}) (ent.UpdateWorktagInput, error) {
	var it ent.UpdateWorktagInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedat", "deletedat", "clearDeletedAt", "name", "color", "companyID", "clearCompany", "addWorkTaskIDs", "removeWorkTaskIDs", "clearWorkTasks"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "clearDeletedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDeletedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDeletedAt = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "color":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("color"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Color = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "clearCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCompany"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCompany = data
		case "addWorkTaskIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addWorkTaskIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddWorkTaskIDs = data
		case "removeWorkTaskIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeWorkTaskIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveWorkTaskIDs = data
		case "clearWorkTasks":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearWorkTasks"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearWorkTasks = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateWorktaskInput(ctx context.Context, obj interface{}) (ent.UpdateWorktaskInput, error) {
	var it ent.UpdateWorktaskInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedat", "deletedat", "clearDeletedAt", "description", "clearDescription", "status", "subtasks", "appendSubtasks", "clearSubtasks", "title", "starttime", "endtime", "clearEndTime", "companyID", "clearCompany", "createdbyID", "clearCreatedBy", "addAssignedToIDs", "removeAssignedToIDs", "clearAssignedTo", "addWorkShiftIDs", "removeWorkShiftIDs", "clearWorkShifts", "addWorkTagIDs", "removeWorkTagIDs", "clearWorkTags"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "clearDeletedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDeletedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDeletedAt = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "clearDescription":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDescription"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDescription = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOWorktaskStatus2ᚖmazzaᚋentᚋworktaskᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "subtasks":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subtasks"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Subtasks = data
		case "appendSubtasks":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appendSubtasks"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AppendSubtasks = data
		case "clearSubtasks":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearSubtasks"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearSubtasks = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "starttime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("starttime"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartTime = data
		case "endtime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endtime"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndTime = data
		case "clearEndTime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearEndTime"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearEndTime = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "clearCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCompany"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCompany = data
		case "createdbyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdbyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByID = data
		case "clearCreatedBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCreatedBy"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCreatedBy = data
		case "addAssignedToIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addAssignedToIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddAssignedToIDs = data
		case "removeAssignedToIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeAssignedToIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveAssignedToIDs = data
		case "clearAssignedTo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearAssignedTo"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearAssignedTo = data
		case "addWorkShiftIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addWorkShiftIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddWorkShiftIDs = data
		case "removeWorkShiftIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeWorkShiftIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveWorkShiftIDs = data
		case "clearWorkShifts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearWorkShifts"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearWorkShifts = data
		case "addWorkTagIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addWorkTagIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddWorkTagIDs = data
		case "removeWorkTagIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeWorkTagIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveWorkTagIDs = data
		case "clearWorkTags":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearWorkTags"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearWorkTags = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserOrder(ctx context.Context, obj interface{}) (ent.UserOrder, error) {
	var it ent.UserOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNUserOrderField2ᚖmazzaᚋentᚐUserOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserRoleOrder(ctx context.Context, obj interface{}) (ent.UserRoleOrder, error) {
	var it ent.UserRoleOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNUserRoleOrderField2ᚖmazzaᚋentᚐUserRoleOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserRoleWhereInput(ctx context.Context, obj interface{}) (ent.UserRoleWhereInput, error) {
	var it ent.UserRoleWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "role", "roleNEQ", "roleIn", "roleNotIn", "hasCompany", "hasCompanyWith", "hasUser", "hasUserWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOUserRoleWhereInput2ᚖmazzaᚋentᚐUserRoleWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOUserRoleWhereInput2ᚕᚖmazzaᚋentᚐUserRoleWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOUserRoleWhereInput2ᚕᚖmazzaᚋentᚐUserRoleWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "role":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			data, err := ec.unmarshalOUserRoleRole2ᚖmazzaᚋentᚋuserroleᚐRole(ctx, v)
			if err != nil {
				return it, err
			}
			it.Role = data
		case "roleNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleNEQ"))
			data, err := ec.unmarshalOUserRoleRole2ᚖmazzaᚋentᚋuserroleᚐRole(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoleNEQ = data
		case "roleIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleIn"))
			data, err := ec.unmarshalOUserRoleRole2ᚕmazzaᚋentᚋuserroleᚐRoleᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoleIn = data
		case "roleNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleNotIn"))
			data, err := ec.unmarshalOUserRoleRole2ᚕmazzaᚋentᚋuserroleᚐRoleᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoleNotIn = data
		case "hasCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompany"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompany = data
		case "hasCompanyWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompanyWith"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompanyWith = data
		case "hasUser":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUser"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUser = data
		case "hasUserWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUserWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖmazzaᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUserWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserWhereInput(ctx context.Context, obj interface{}) (ent.UserWhereInput, error) {
	var it ent.UserWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdat", "createdatNEQ", "createdatIn", "createdatNotIn", "createdatGT", "createdatGTE", "createdatLT", "createdatLTE", "updatedat", "updatedatNEQ", "updatedatIn", "updatedatNotIn", "updatedatGT", "updatedatGTE", "updatedatLT", "updatedatLTE", "deletedat", "deletedatNEQ", "deletedatIn", "deletedatNotIn", "deletedatGT", "deletedatGTE", "deletedatLT", "deletedatLTE", "deletedatIsNil", "deletedatNotNil", "fcmtoken", "fcmtokenNEQ", "fcmtokenIn", "fcmtokenNotIn", "fcmtokenGT", "fcmtokenGTE", "fcmtokenLT", "fcmtokenLTE", "fcmtokenContains", "fcmtokenHasPrefix", "fcmtokenHasSuffix", "fcmtokenIsNil", "fcmtokenNotNil", "fcmtokenEqualFold", "fcmtokenContainsFold", "email", "emailNEQ", "emailIn", "emailNotIn", "emailGT", "emailGTE", "emailLT", "emailLTE", "emailContains", "emailHasPrefix", "emailHasSuffix", "emailIsNil", "emailNotNil", "emailEqualFold", "emailContainsFold", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "username", "usernameNEQ", "usernameIn", "usernameNotIn", "usernameGT", "usernameGTE", "usernameLT", "usernameLTE", "usernameContains", "usernameHasPrefix", "usernameHasSuffix", "usernameEqualFold", "usernameContainsFold", "disabled", "disabledNEQ", "disabledIsNil", "disabledNotNil", "notverified", "notverifiedNEQ", "notverifiedIsNil", "notverifiedNotNil", "hasAccountingEntries", "hasAccountingEntriesWith", "hasCompany", "hasCompanyWith", "hasAssignedRoles", "hasAssignedRolesWith", "hasCreatedTasks", "hasCreatedTasksWith", "hasEmployee", "hasEmployeeWith", "hasTokens", "hasTokensWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOUserWhereInput2ᚖmazzaᚋentᚐUserWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖmazzaᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖmazzaᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "deletedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNEQ = data
		case "deletedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIn = data
		case "deletedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotIn = data
		case "deletedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGT = data
		case "deletedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGTE = data
		case "deletedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLT = data
		case "deletedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLTE = data
		case "deletedatIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIsNil = data
		case "deletedatNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotNil = data
		case "fcmtoken":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fcmtoken"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FcmToken = data
		case "fcmtokenNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fcmtokenNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FcmTokenNEQ = data
		case "fcmtokenIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fcmtokenIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FcmTokenIn = data
		case "fcmtokenNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fcmtokenNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FcmTokenNotIn = data
		case "fcmtokenGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fcmtokenGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FcmTokenGT = data
		case "fcmtokenGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fcmtokenGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FcmTokenGTE = data
		case "fcmtokenLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fcmtokenLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FcmTokenLT = data
		case "fcmtokenLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fcmtokenLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FcmTokenLTE = data
		case "fcmtokenContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fcmtokenContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FcmTokenContains = data
		case "fcmtokenHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fcmtokenHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FcmTokenHasPrefix = data
		case "fcmtokenHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fcmtokenHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FcmTokenHasSuffix = data
		case "fcmtokenIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fcmtokenIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.FcmTokenIsNil = data
		case "fcmtokenNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fcmtokenNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.FcmTokenNotNil = data
		case "fcmtokenEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fcmtokenEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FcmTokenEqualFold = data
		case "fcmtokenContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fcmtokenContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FcmTokenContainsFold = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "emailNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNEQ = data
		case "emailIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailIn = data
		case "emailNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNotIn = data
		case "emailGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailGT = data
		case "emailGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailGTE = data
		case "emailLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailLT = data
		case "emailLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailLTE = data
		case "emailContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailContains = data
		case "emailHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailHasPrefix = data
		case "emailHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailHasSuffix = data
		case "emailIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailIsNil = data
		case "emailNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNotNil = data
		case "emailEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailEqualFold = data
		case "emailContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailContainsFold = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "usernameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameNEQ = data
		case "usernameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameIn = data
		case "usernameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameNotIn = data
		case "usernameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameGT = data
		case "usernameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameGTE = data
		case "usernameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameLT = data
		case "usernameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameLTE = data
		case "usernameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameContains = data
		case "usernameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameHasPrefix = data
		case "usernameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameHasSuffix = data
		case "usernameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameEqualFold = data
		case "usernameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameContainsFold = data
		case "disabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Disabled = data
		case "disabledNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disabledNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DisabledNEQ = data
		case "disabledIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disabledIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DisabledIsNil = data
		case "disabledNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disabledNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DisabledNotNil = data
		case "notverified":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notverified"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotVerified = data
		case "notverifiedNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notverifiedNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotVerifiedNEQ = data
		case "notverifiedIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notverifiedIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotVerifiedIsNil = data
		case "notverifiedNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notverifiedNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotVerifiedNotNil = data
		case "hasAccountingEntries":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAccountingEntries"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAccountingEntries = data
		case "hasAccountingEntriesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAccountingEntriesWith"))
			data, err := ec.unmarshalOAccountingEntryWhereInput2ᚕᚖmazzaᚋentᚐAccountingEntryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAccountingEntriesWith = data
		case "hasCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompany"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompany = data
		case "hasCompanyWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompanyWith"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompanyWith = data
		case "hasAssignedRoles":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAssignedRoles"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAssignedRoles = data
		case "hasAssignedRolesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAssignedRolesWith"))
			data, err := ec.unmarshalOUserRoleWhereInput2ᚕᚖmazzaᚋentᚐUserRoleWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAssignedRolesWith = data
		case "hasCreatedTasks":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedTasks"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedTasks = data
		case "hasCreatedTasksWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedTasksWith"))
			data, err := ec.unmarshalOWorktaskWhereInput2ᚕᚖmazzaᚋentᚐWorktaskWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedTasksWith = data
		case "hasEmployee":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEmployee"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEmployee = data
		case "hasEmployeeWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEmployeeWith"))
			data, err := ec.unmarshalOEmployeeWhereInput2ᚕᚖmazzaᚋentᚐEmployeeWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEmployeeWith = data
		case "hasTokens":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTokens"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTokens = data
		case "hasTokensWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTokensWith"))
			data, err := ec.unmarshalOTokenWhereInput2ᚕᚖmazzaᚋentᚐTokenWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTokensWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputWorkshiftOrder(ctx context.Context, obj interface{}) (ent.WorkshiftOrder, error) {
	var it ent.WorkshiftOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNWorkshiftOrderField2ᚖmazzaᚋentᚐWorkshiftOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputWorkshiftWhereInput(ctx context.Context, obj interface{}) (ent.WorkshiftWhereInput, error) {
	var it ent.WorkshiftWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdat", "createdatNEQ", "createdatIn", "createdatNotIn", "createdatGT", "createdatGTE", "createdatLT", "createdatLTE", "updatedat", "updatedatNEQ", "updatedatIn", "updatedatNotIn", "updatedatGT", "updatedatGTE", "updatedatLT", "updatedatLTE", "deletedat", "deletedatNEQ", "deletedatIn", "deletedatNotIn", "deletedatGT", "deletedatGTE", "deletedatLT", "deletedatLTE", "deletedatIsNil", "deletedatNotNil", "approvedat", "approvedatNEQ", "approvedatIn", "approvedatNotIn", "approvedatGT", "approvedatGTE", "approvedatLT", "approvedatLTE", "approvedatIsNil", "approvedatNotNil", "clockin", "clockinNEQ", "clockinIn", "clockinNotIn", "clockinGT", "clockinGTE", "clockinLT", "clockinLTE", "clockout", "clockoutNEQ", "clockoutIn", "clockoutNotIn", "clockoutGT", "clockoutGTE", "clockoutLT", "clockoutLTE", "clockoutIsNil", "clockoutNotNil", "clockinlocation", "clockinlocationNEQ", "clockinlocationIn", "clockinlocationNotIn", "clockinlocationGT", "clockinlocationGTE", "clockinlocationLT", "clockinlocationLTE", "clockinlocationContains", "clockinlocationHasPrefix", "clockinlocationHasSuffix", "clockinlocationEqualFold", "clockinlocationContainsFold", "clockoutlocation", "clockoutlocationNEQ", "clockoutlocationIn", "clockoutlocationNotIn", "clockoutlocationGT", "clockoutlocationGTE", "clockoutlocationLT", "clockoutlocationLTE", "clockoutlocationContains", "clockoutlocationHasPrefix", "clockoutlocationHasSuffix", "clockoutlocationIsNil", "clockoutlocationNotNil", "clockoutlocationEqualFold", "clockoutlocationContainsFold", "description", "descriptionNEQ", "descriptionIn", "descriptionNotIn", "descriptionGT", "descriptionGTE", "descriptionLT", "descriptionLTE", "descriptionContains", "descriptionHasPrefix", "descriptionHasSuffix", "descriptionIsNil", "descriptionNotNil", "descriptionEqualFold", "descriptionContainsFold", "note", "noteNEQ", "noteIn", "noteNotIn", "noteGT", "noteGTE", "noteLT", "noteLTE", "noteContains", "noteHasPrefix", "noteHasSuffix", "noteIsNil", "noteNotNil", "noteEqualFold", "noteContainsFold", "status", "statusNEQ", "statusIn", "statusNotIn", "hasCompany", "hasCompanyWith", "hasEmployee", "hasEmployeeWith", "hasApprovedBy", "hasApprovedByWith", "hasWorkTask", "hasWorkTaskWith", "hasEditRequest", "hasEditRequestWith", "hasWorkShift", "hasWorkShiftWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOWorkshiftWhereInput2ᚖmazzaᚋentᚐWorkshiftWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOWorkshiftWhereInput2ᚕᚖmazzaᚋentᚐWorkshiftWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOWorkshiftWhereInput2ᚕᚖmazzaᚋentᚐWorkshiftWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "deletedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNEQ = data
		case "deletedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIn = data
		case "deletedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotIn = data
		case "deletedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGT = data
		case "deletedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGTE = data
		case "deletedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLT = data
		case "deletedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLTE = data
		case "deletedatIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIsNil = data
		case "deletedatNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotNil = data
		case "approvedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovedAt = data
		case "approvedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovedAtNEQ = data
		case "approvedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovedAtIn = data
		case "approvedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovedAtNotIn = data
		case "approvedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovedAtGT = data
		case "approvedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovedAtGTE = data
		case "approvedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovedAtLT = data
		case "approvedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovedAtLTE = data
		case "approvedatIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedatIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovedAtIsNil = data
		case "approvedatNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedatNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovedAtNotNil = data
		case "clockin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockin"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockIn = data
		case "clockinNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInNEQ = data
		case "clockinIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInIn = data
		case "clockinNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInNotIn = data
		case "clockinGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInGT = data
		case "clockinGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInGTE = data
		case "clockinLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInLT = data
		case "clockinLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInLTE = data
		case "clockout":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockout"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOut = data
		case "clockoutNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutNEQ = data
		case "clockoutIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutIn = data
		case "clockoutNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutNotIn = data
		case "clockoutGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutGT = data
		case "clockoutGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutGTE = data
		case "clockoutLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLT = data
		case "clockoutLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLTE = data
		case "clockoutIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutIsNil = data
		case "clockoutNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutNotNil = data
		case "clockinlocation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinlocation"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInLocation = data
		case "clockinlocationNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinlocationNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInLocationNEQ = data
		case "clockinlocationIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinlocationIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInLocationIn = data
		case "clockinlocationNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinlocationNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInLocationNotIn = data
		case "clockinlocationGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinlocationGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInLocationGT = data
		case "clockinlocationGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinlocationGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInLocationGTE = data
		case "clockinlocationLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinlocationLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInLocationLT = data
		case "clockinlocationLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinlocationLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInLocationLTE = data
		case "clockinlocationContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinlocationContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInLocationContains = data
		case "clockinlocationHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinlocationHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInLocationHasPrefix = data
		case "clockinlocationHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinlocationHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInLocationHasSuffix = data
		case "clockinlocationEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinlocationEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInLocationEqualFold = data
		case "clockinlocationContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinlocationContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInLocationContainsFold = data
		case "clockoutlocation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutlocation"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLocation = data
		case "clockoutlocationNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutlocationNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLocationNEQ = data
		case "clockoutlocationIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutlocationIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLocationIn = data
		case "clockoutlocationNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutlocationNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLocationNotIn = data
		case "clockoutlocationGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutlocationGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLocationGT = data
		case "clockoutlocationGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutlocationGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLocationGTE = data
		case "clockoutlocationLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutlocationLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLocationLT = data
		case "clockoutlocationLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutlocationLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLocationLTE = data
		case "clockoutlocationContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutlocationContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLocationContains = data
		case "clockoutlocationHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutlocationHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLocationHasPrefix = data
		case "clockoutlocationHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutlocationHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLocationHasSuffix = data
		case "clockoutlocationIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutlocationIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLocationIsNil = data
		case "clockoutlocationNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutlocationNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLocationNotNil = data
		case "clockoutlocationEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutlocationEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLocationEqualFold = data
		case "clockoutlocationContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutlocationContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLocationContainsFold = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "descriptionNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNEQ = data
		case "descriptionIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIn = data
		case "descriptionNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotIn = data
		case "descriptionGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGT = data
		case "descriptionGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGTE = data
		case "descriptionLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLT = data
		case "descriptionLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLTE = data
		case "descriptionContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContains = data
		case "descriptionHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasPrefix = data
		case "descriptionHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasSuffix = data
		case "descriptionIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIsNil = data
		case "descriptionNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotNil = data
		case "descriptionEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionEqualFold = data
		case "descriptionContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContainsFold = data
		case "note":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Note = data
		case "noteNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteNEQ = data
		case "noteIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteIn = data
		case "noteNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteNotIn = data
		case "noteGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteGT = data
		case "noteGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteGTE = data
		case "noteLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteLT = data
		case "noteLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteLTE = data
		case "noteContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteContains = data
		case "noteHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteHasPrefix = data
		case "noteHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteHasSuffix = data
		case "noteIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteIsNil = data
		case "noteNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteNotNil = data
		case "noteEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteEqualFold = data
		case "noteContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteContainsFold = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOWorkshiftStatus2ᚖmazzaᚋentᚋworkshiftᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "statusNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNEQ"))
			data, err := ec.unmarshalOWorkshiftStatus2ᚖmazzaᚋentᚋworkshiftᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNEQ = data
		case "statusIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusIn"))
			data, err := ec.unmarshalOWorkshiftStatus2ᚕmazzaᚋentᚋworkshiftᚐStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusIn = data
		case "statusNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNotIn"))
			data, err := ec.unmarshalOWorkshiftStatus2ᚕmazzaᚋentᚋworkshiftᚐStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNotIn = data
		case "hasCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompany"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompany = data
		case "hasCompanyWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompanyWith"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompanyWith = data
		case "hasEmployee":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEmployee"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEmployee = data
		case "hasEmployeeWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEmployeeWith"))
			data, err := ec.unmarshalOEmployeeWhereInput2ᚕᚖmazzaᚋentᚐEmployeeWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEmployeeWith = data
		case "hasApprovedBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasApprovedBy"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasApprovedBy = data
		case "hasApprovedByWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasApprovedByWith"))
			data, err := ec.unmarshalOEmployeeWhereInput2ᚕᚖmazzaᚋentᚐEmployeeWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasApprovedByWith = data
		case "hasWorkTask":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasWorkTask"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasWorkTask = data
		case "hasWorkTaskWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasWorkTaskWith"))
			data, err := ec.unmarshalOWorktaskWhereInput2ᚕᚖmazzaᚋentᚐWorktaskWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasWorkTaskWith = data
		case "hasEditRequest":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEditRequest"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEditRequest = data
		case "hasEditRequestWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEditRequestWith"))
			data, err := ec.unmarshalOWorkshiftWhereInput2ᚕᚖmazzaᚋentᚐWorkshiftWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEditRequestWith = data
		case "hasWorkShift":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasWorkShift"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasWorkShift = data
		case "hasWorkShiftWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasWorkShiftWith"))
			data, err := ec.unmarshalOWorkshiftWhereInput2ᚕᚖmazzaᚋentᚐWorkshiftWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasWorkShiftWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputWorktagWhereInput(ctx context.Context, obj interface{}) (ent.WorktagWhereInput, error) {
	var it ent.WorktagWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdat", "createdatNEQ", "createdatIn", "createdatNotIn", "createdatGT", "createdatGTE", "createdatLT", "createdatLTE", "updatedat", "updatedatNEQ", "updatedatIn", "updatedatNotIn", "updatedatGT", "updatedatGTE", "updatedatLT", "updatedatLTE", "deletedat", "deletedatNEQ", "deletedatIn", "deletedatNotIn", "deletedatGT", "deletedatGTE", "deletedatLT", "deletedatLTE", "deletedatIsNil", "deletedatNotNil", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "color", "colorNEQ", "colorIn", "colorNotIn", "colorGT", "colorGTE", "colorLT", "colorLTE", "colorContains", "colorHasPrefix", "colorHasSuffix", "colorEqualFold", "colorContainsFold", "hasCompany", "hasCompanyWith", "hasWorkTasks", "hasWorkTasksWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOWorktagWhereInput2ᚖmazzaᚋentᚐWorktagWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOWorktagWhereInput2ᚕᚖmazzaᚋentᚐWorktagWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOWorktagWhereInput2ᚕᚖmazzaᚋentᚐWorktagWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "deletedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNEQ = data
		case "deletedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIn = data
		case "deletedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotIn = data
		case "deletedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGT = data
		case "deletedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGTE = data
		case "deletedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLT = data
		case "deletedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLTE = data
		case "deletedatIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIsNil = data
		case "deletedatNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotNil = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "color":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("color"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Color = data
		case "colorNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colorNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ColorNEQ = data
		case "colorIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colorIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ColorIn = data
		case "colorNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colorNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ColorNotIn = data
		case "colorGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colorGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ColorGT = data
		case "colorGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colorGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ColorGTE = data
		case "colorLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colorLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ColorLT = data
		case "colorLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colorLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ColorLTE = data
		case "colorContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colorContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ColorContains = data
		case "colorHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colorHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ColorHasPrefix = data
		case "colorHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colorHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ColorHasSuffix = data
		case "colorEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colorEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ColorEqualFold = data
		case "colorContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colorContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ColorContainsFold = data
		case "hasCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompany"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompany = data
		case "hasCompanyWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompanyWith"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompanyWith = data
		case "hasWorkTasks":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasWorkTasks"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasWorkTasks = data
		case "hasWorkTasksWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasWorkTasksWith"))
			data, err := ec.unmarshalOWorktaskWhereInput2ᚕᚖmazzaᚋentᚐWorktaskWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasWorkTasksWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputWorktaskWhereInput(ctx context.Context, obj interface{}) (ent.WorktaskWhereInput, error) {
	var it ent.WorktaskWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdat", "createdatNEQ", "createdatIn", "createdatNotIn", "createdatGT", "createdatGTE", "createdatLT", "createdatLTE", "updatedat", "updatedatNEQ", "updatedatIn", "updatedatNotIn", "updatedatGT", "updatedatGTE", "updatedatLT", "updatedatLTE", "deletedat", "deletedatNEQ", "deletedatIn", "deletedatNotIn", "deletedatGT", "deletedatGTE", "deletedatLT", "deletedatLTE", "deletedatIsNil", "deletedatNotNil", "description", "descriptionNEQ", "descriptionIn", "descriptionNotIn", "descriptionGT", "descriptionGTE", "descriptionLT", "descriptionLTE", "descriptionContains", "descriptionHasPrefix", "descriptionHasSuffix", "descriptionIsNil", "descriptionNotNil", "descriptionEqualFold", "descriptionContainsFold", "status", "statusNEQ", "statusIn", "statusNotIn", "title", "titleNEQ", "titleIn", "titleNotIn", "titleGT", "titleGTE", "titleLT", "titleLTE", "titleContains", "titleHasPrefix", "titleHasSuffix", "titleEqualFold", "titleContainsFold", "starttime", "starttimeNEQ", "starttimeIn", "starttimeNotIn", "starttimeGT", "starttimeGTE", "starttimeLT", "starttimeLTE", "endtime", "endtimeNEQ", "endtimeIn", "endtimeNotIn", "endtimeGT", "endtimeGTE", "endtimeLT", "endtimeLTE", "endtimeIsNil", "endtimeNotNil", "hasCompany", "hasCompanyWith", "hasCreatedBy", "hasCreatedByWith", "hasAssignedTo", "hasAssignedToWith", "hasWorkShifts", "hasWorkShiftsWith", "hasWorkTags", "hasWorkTagsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOWorktaskWhereInput2ᚖmazzaᚋentᚐWorktaskWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOWorktaskWhereInput2ᚕᚖmazzaᚋentᚐWorktaskWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOWorktaskWhereInput2ᚕᚖmazzaᚋentᚐWorktaskWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "deletedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNEQ = data
		case "deletedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIn = data
		case "deletedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotIn = data
		case "deletedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGT = data
		case "deletedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGTE = data
		case "deletedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLT = data
		case "deletedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLTE = data
		case "deletedatIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIsNil = data
		case "deletedatNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotNil = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "descriptionNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNEQ = data
		case "descriptionIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIn = data
		case "descriptionNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotIn = data
		case "descriptionGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGT = data
		case "descriptionGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGTE = data
		case "descriptionLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLT = data
		case "descriptionLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLTE = data
		case "descriptionContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContains = data
		case "descriptionHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasPrefix = data
		case "descriptionHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasSuffix = data
		case "descriptionIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIsNil = data
		case "descriptionNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotNil = data
		case "descriptionEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionEqualFold = data
		case "descriptionContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContainsFold = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOWorktaskStatus2ᚖmazzaᚋentᚋworktaskᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "statusNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNEQ"))
			data, err := ec.unmarshalOWorktaskStatus2ᚖmazzaᚋentᚋworktaskᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNEQ = data
		case "statusIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusIn"))
			data, err := ec.unmarshalOWorktaskStatus2ᚕmazzaᚋentᚋworktaskᚐStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusIn = data
		case "statusNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNotIn"))
			data, err := ec.unmarshalOWorktaskStatus2ᚕmazzaᚋentᚋworktaskᚐStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNotIn = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "titleNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleNEQ = data
		case "titleIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleIn = data
		case "titleNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleNotIn = data
		case "titleGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleGT = data
		case "titleGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleGTE = data
		case "titleLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleLT = data
		case "titleLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleLTE = data
		case "titleContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleContains = data
		case "titleHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleHasPrefix = data
		case "titleHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleHasSuffix = data
		case "titleEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleEqualFold = data
		case "titleContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleContainsFold = data
		case "starttime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("starttime"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartTime = data
		case "starttimeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("starttimeNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartTimeNEQ = data
		case "starttimeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("starttimeIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartTimeIn = data
		case "starttimeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("starttimeNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartTimeNotIn = data
		case "starttimeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("starttimeGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartTimeGT = data
		case "starttimeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("starttimeGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartTimeGTE = data
		case "starttimeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("starttimeLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartTimeLT = data
		case "starttimeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("starttimeLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartTimeLTE = data
		case "endtime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endtime"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndTime = data
		case "endtimeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endtimeNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndTimeNEQ = data
		case "endtimeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endtimeIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndTimeIn = data
		case "endtimeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endtimeNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndTimeNotIn = data
		case "endtimeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endtimeGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndTimeGT = data
		case "endtimeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endtimeGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndTimeGTE = data
		case "endtimeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endtimeLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndTimeLT = data
		case "endtimeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endtimeLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndTimeLTE = data
		case "endtimeIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endtimeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndTimeIsNil = data
		case "endtimeNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endtimeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndTimeNotNil = data
		case "hasCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompany"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompany = data
		case "hasCompanyWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompanyWith"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompanyWith = data
		case "hasCreatedBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedBy"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedBy = data
		case "hasCreatedByWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedByWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖmazzaᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedByWith = data
		case "hasAssignedTo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAssignedTo"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAssignedTo = data
		case "hasAssignedToWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAssignedToWith"))
			data, err := ec.unmarshalOEmployeeWhereInput2ᚕᚖmazzaᚋentᚐEmployeeWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAssignedToWith = data
		case "hasWorkShifts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasWorkShifts"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasWorkShifts = data
		case "hasWorkShiftsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasWorkShiftsWith"))
			data, err := ec.unmarshalOWorkshiftWhereInput2ᚕᚖmazzaᚋentᚐWorkshiftWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasWorkShiftsWith = data
		case "hasWorkTags":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasWorkTags"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasWorkTags = data
		case "hasWorkTagsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasWorkTagsWith"))
			data, err := ec.unmarshalOWorktagWhereInput2ᚕᚖmazzaᚋentᚐWorktagWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasWorkTagsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputinvitedUserSignupInput(ctx context.Context, obj interface{}) (InvitedUserSignupInput, error) {
	var it InvitedUserSignupInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"userInput", "invitationToken"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "userInput":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userInput"))
			data, err := ec.unmarshalNCreateUserInput2ᚖmazzaᚋentᚐCreateUserInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserInput = data
		case "invitationToken":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invitationToken"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvitationToken = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj ent.Noder) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case *ent.AccountingEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._AccountingEntry(ctx, sel, obj)
	case *ent.CashMovement:
		if obj == nil {
			return graphql.Null
		}
		return ec._CashMovement(ctx, sel, obj)
	case *ent.Company:
		if obj == nil {
			return graphql.Null
		}
		return ec._Company(ctx, sel, obj)
	case *ent.Customer:
		if obj == nil {
			return graphql.Null
		}
		return ec._Customer(ctx, sel, obj)
	case *ent.Employee:
		if obj == nil {
			return graphql.Null
		}
		return ec._Employee(ctx, sel, obj)
	case *ent.File:
		if obj == nil {
			return graphql.Null
		}
		return ec._File(ctx, sel, obj)
	case *ent.Payable:
		if obj == nil {
			return graphql.Null
		}
		return ec._Payable(ctx, sel, obj)
	case *ent.Product:
		if obj == nil {
			return graphql.Null
		}
		return ec._Product(ctx, sel, obj)
	case *ent.ProductMovement:
		if obj == nil {
			return graphql.Null
		}
		return ec._ProductMovement(ctx, sel, obj)
	case *ent.Receivable:
		if obj == nil {
			return graphql.Null
		}
		return ec._Receivable(ctx, sel, obj)
	case *ent.Supplier:
		if obj == nil {
			return graphql.Null
		}
		return ec._Supplier(ctx, sel, obj)
	case *ent.Token:
		if obj == nil {
			return graphql.Null
		}
		return ec._Token(ctx, sel, obj)
	case *ent.Treasury:
		if obj == nil {
			return graphql.Null
		}
		return ec._Treasury(ctx, sel, obj)
	case *ent.User:
		if obj == nil {
			return graphql.Null
		}
		return ec._User(ctx, sel, obj)
	case *ent.UserRole:
		if obj == nil {
			return graphql.Null
		}
		return ec._UserRole(ctx, sel, obj)
	case *ent.Workshift:
		if obj == nil {
			return graphql.Null
		}
		return ec._Workshift(ctx, sel, obj)
	case *ent.Worktag:
		if obj == nil {
			return graphql.Null
		}
		return ec._Worktag(ctx, sel, obj)
	case *ent.Worktask:
		if obj == nil {
			return graphql.Null
		}
		return ec._Worktask(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var accountingEntryImplementors = []string{"AccountingEntry", "Node"}

func (ec *executionContext) _AccountingEntry(ctx context.Context, sel ast.SelectionSet, obj *ent.AccountingEntry) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountingEntryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountingEntry")
		case "id":
			out.Values[i] = ec._AccountingEntry_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdat":
			out.Values[i] = ec._AccountingEntry_createdat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedat":
			out.Values[i] = ec._AccountingEntry_updatedat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deletedat":
			out.Values[i] = ec._AccountingEntry_deletedat(ctx, field, obj)
		case "number":
			out.Values[i] = ec._AccountingEntry_number(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "group":
			out.Values[i] = ec._AccountingEntry_group(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "date":
			out.Values[i] = ec._AccountingEntry_date(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "account":
			out.Values[i] = ec._AccountingEntry_account(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "label":
			out.Values[i] = ec._AccountingEntry_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "amount":
			out.Values[i] = ec._AccountingEntry_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "description":
			out.Values[i] = ec._AccountingEntry_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "accounttype":
			out.Values[i] = ec._AccountingEntry_accounttype(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "isdebit":
			out.Values[i] = ec._AccountingEntry_isdebit(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "isreversal":
			out.Values[i] = ec._AccountingEntry_isreversal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "reversed":
			out.Values[i] = ec._AccountingEntry_reversed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "company":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AccountingEntry_company(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "user":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AccountingEntry_user(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var accountingEntryConnectionImplementors = []string{"AccountingEntryConnection"}

func (ec *executionContext) _AccountingEntryConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.AccountingEntryConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountingEntryConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountingEntryConnection")
		case "edges":
			out.Values[i] = ec._AccountingEntryConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._AccountingEntryConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._AccountingEntryConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var accountingEntryEdgeImplementors = []string{"AccountingEntryEdge"}

func (ec *executionContext) _AccountingEntryEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.AccountingEntryEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountingEntryEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountingEntryEdge")
		case "node":
			out.Values[i] = ec._AccountingEntryEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._AccountingEntryEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cashMovementImplementors = []string{"CashMovement", "Node"}

func (ec *executionContext) _CashMovement(ctx context.Context, sel ast.SelectionSet, obj *ent.CashMovement) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cashMovementImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CashMovement")
		case "id":
			out.Values[i] = ec._CashMovement_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdat":
			out.Values[i] = ec._CashMovement_createdat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedat":
			out.Values[i] = ec._CashMovement_updatedat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deletedat":
			out.Values[i] = ec._CashMovement_deletedat(ctx, field, obj)
		case "amount":
			out.Values[i] = ec._CashMovement_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "date":
			out.Values[i] = ec._CashMovement_date(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "entrygroup":
			out.Values[i] = ec._CashMovement_entrygroup(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "treasury":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CashMovement_treasury(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cashMovementConnectionImplementors = []string{"CashMovementConnection"}

func (ec *executionContext) _CashMovementConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.CashMovementConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cashMovementConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CashMovementConnection")
		case "edges":
			out.Values[i] = ec._CashMovementConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._CashMovementConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._CashMovementConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cashMovementEdgeImplementors = []string{"CashMovementEdge"}

func (ec *executionContext) _CashMovementEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.CashMovementEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cashMovementEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CashMovementEdge")
		case "node":
			out.Values[i] = ec._CashMovementEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._CashMovementEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var companyImplementors = []string{"Company", "Node"}

func (ec *executionContext) _Company(ctx context.Context, sel ast.SelectionSet, obj *ent.Company) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, companyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Company")
		case "id":
			out.Values[i] = ec._Company_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdat":
			out.Values[i] = ec._Company_createdat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedat":
			out.Values[i] = ec._Company_updatedat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deletedat":
			out.Values[i] = ec._Company_deletedat(ctx, field, obj)
		case "address":
			out.Values[i] = ec._Company_address(ctx, field, obj)
		case "basecurrency":
			out.Values[i] = ec._Company_basecurrency(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "ceoname":
			out.Values[i] = ec._Company_ceoname(ctx, field, obj)
		case "city":
			out.Values[i] = ec._Company_city(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "country":
			out.Values[i] = ec._Company_country(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "establishedat":
			out.Values[i] = ec._Company_establishedat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "description":
			out.Values[i] = ec._Company_description(ctx, field, obj)
		case "email":
			out.Values[i] = ec._Company_email(ctx, field, obj)
		case "lastentrydate":
			out.Values[i] = ec._Company_lastentrydate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastinvoicenumber":
			out.Values[i] = ec._Company_lastinvoicenumber(ctx, field, obj)
		case "logo":
			out.Values[i] = ec._Company_logo(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Company_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "numberofemployees":
			out.Values[i] = ec._Company_numberofemployees(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "phone":
			out.Values[i] = ec._Company_phone(ctx, field, obj)
		case "sector":
			out.Values[i] = ec._Company_sector(ctx, field, obj)
		case "taxid":
			out.Values[i] = ec._Company_taxid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "vatrate":
			out.Values[i] = ec._Company_vatrate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "website":
			out.Values[i] = ec._Company_website(ctx, field, obj)
		case "availableroles":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_availableroles(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "accountingentries":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_accountingentries(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "customers":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_customers(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "employees":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_employees(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "files":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_files(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "products":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_products(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "suppliers":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_suppliers(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "tokens":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_tokens(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "treasuries":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_treasuries(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "workshifts":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_workshifts(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "worktasks":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_worktasks(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "worktags":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_worktags(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "users":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_users(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "daughtercompanies":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_daughtercompanies(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "parentcompany":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_parentcompany(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var customerImplementors = []string{"Customer", "Node"}

func (ec *executionContext) _Customer(ctx context.Context, sel ast.SelectionSet, obj *ent.Customer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Customer")
		case "id":
			out.Values[i] = ec._Customer_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdat":
			out.Values[i] = ec._Customer_createdat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedat":
			out.Values[i] = ec._Customer_updatedat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deletedat":
			out.Values[i] = ec._Customer_deletedat(ctx, field, obj)
		case "address":
			out.Values[i] = ec._Customer_address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "city":
			out.Values[i] = ec._Customer_city(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "country":
			out.Values[i] = ec._Customer_country(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "description":
			out.Values[i] = ec._Customer_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "email":
			out.Values[i] = ec._Customer_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "isdefault":
			out.Values[i] = ec._Customer_isdefault(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Customer_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "phone":
			out.Values[i] = ec._Customer_phone(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "taxid":
			out.Values[i] = ec._Customer_taxid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "company":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Customer_company(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "receivables":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Customer_receivables(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var employeeImplementors = []string{"Employee", "Node"}

func (ec *executionContext) _Employee(ctx context.Context, sel ast.SelectionSet, obj *ent.Employee) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, employeeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Employee")
		case "id":
			out.Values[i] = ec._Employee_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdat":
			out.Values[i] = ec._Employee_createdat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedat":
			out.Values[i] = ec._Employee_updatedat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deletedat":
			out.Values[i] = ec._Employee_deletedat(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Employee_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "gender":
			out.Values[i] = ec._Employee_gender(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "position":
			out.Values[i] = ec._Employee_position(ctx, field, obj)
		case "email":
			out.Values[i] = ec._Employee_email(ctx, field, obj)
		case "phone":
			out.Values[i] = ec._Employee_phone(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "company":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Employee_company(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "user":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Employee_user(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "subordinates":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Employee_subordinates(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "leader":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Employee_leader(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "workshifts":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Employee_workshifts(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "approvedworkshifts":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Employee_approvedworkshifts(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "assignedtasks":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Employee_assignedtasks(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var fileImplementors = []string{"File", "Node"}

func (ec *executionContext) _File(ctx context.Context, sel ast.SelectionSet, obj *ent.File) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fileImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("File")
		case "id":
			out.Values[i] = ec._File_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdat":
			out.Values[i] = ec._File_createdat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedat":
			out.Values[i] = ec._File_updatedat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deletedat":
			out.Values[i] = ec._File_deletedat(ctx, field, obj)
		case "category":
			out.Values[i] = ec._File_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "extension":
			out.Values[i] = ec._File_extension(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "size":
			out.Values[i] = ec._File_size(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "url":
			out.Values[i] = ec._File_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "description":
			out.Values[i] = ec._File_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "company":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._File_company(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "product":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._File_product(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var fileConnectionImplementors = []string{"FileConnection"}

func (ec *executionContext) _FileConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.FileConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fileConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FileConnection")
		case "edges":
			out.Values[i] = ec._FileConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._FileConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._FileConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var fileEdgeImplementors = []string{"FileEdge"}

func (ec *executionContext) _FileEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.FileEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fileEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FileEdge")
		case "node":
			out.Values[i] = ec._FileEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._FileEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var loginOutputImplementors = []string{"LoginOutput"}

func (ec *executionContext) _LoginOutput(ctx context.Context, sel ast.SelectionSet, obj *LoginOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, loginOutputImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LoginOutput")
		case "user":
			out.Values[i] = ec._LoginOutput_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "companyId":
			out.Values[i] = ec._LoginOutput_companyId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "companies":
			out.Values[i] = ec._LoginOutput_companies(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "accessToken":
			out.Values[i] = ec._LoginOutput_accessToken(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "refreshToken":
			out.Values[i] = ec._LoginOutput_refreshToken(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "ttl":
			out.Values[i] = ec._LoginOutput_ttl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "signup":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_signup(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createCompany":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createCompany(ctx, field)
			})
		case "updateCompany":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCompany(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "invitedUserSignup":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_invitedUserSignup(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createUser(ctx, field)
			})
		case "updateUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "forgotPassword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_forgotPassword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "resetPassword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_resetPassword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "unsubscribe":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_unsubscribe(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createUserRole":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createUserRole(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createCustomer":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createCustomer(ctx, field)
			})
		case "updateCustomer":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCustomer(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteCustomer":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteCustomer(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createEmployee":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createEmployee(ctx, field)
			})
		case "updateEmployee":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateEmployee(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteEmployee":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteEmployee(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createProduct":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createProduct(ctx, field)
			})
		case "updateProduct":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateProduct(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteProduct":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteProduct(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createSupplier":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createSupplier(ctx, field)
			})
		case "updateSupplier":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateSupplier(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteSupplier":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteSupplier(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createTreasury":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTreasury(ctx, field)
			})
		case "updateTreasury":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTreasury(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteTreasury":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteTreasury(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createWorkShift":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createWorkShift(ctx, field)
			})
		case "updateWorkShift":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateWorkShift(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteWorkShift":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteWorkShift(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createWorkTask":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createWorkTask(ctx, field)
			})
		case "updateWorkTask":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateWorkTask(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteWorkTask":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteWorkTask(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createWorkTag":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createWorkTag(ctx, field)
			})
		case "updateWorkTag":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateWorkTag(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteWorkTag":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteWorkTag(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *entgql.PageInfo[int]) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "hasNextPage":
			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hasPreviousPage":
			out.Values[i] = ec._PageInfo_hasPreviousPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "startCursor":
			out.Values[i] = ec._PageInfo_startCursor(ctx, field, obj)
		case "endCursor":
			out.Values[i] = ec._PageInfo_endCursor(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var payableImplementors = []string{"Payable", "Node"}

func (ec *executionContext) _Payable(ctx context.Context, sel ast.SelectionSet, obj *ent.Payable) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, payableImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Payable")
		case "id":
			out.Values[i] = ec._Payable_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdat":
			out.Values[i] = ec._Payable_createdat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedat":
			out.Values[i] = ec._Payable_updatedat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deletedat":
			out.Values[i] = ec._Payable_deletedat(ctx, field, obj)
		case "entrygroup":
			out.Values[i] = ec._Payable_entrygroup(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "date":
			out.Values[i] = ec._Payable_date(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "outstandingbalance":
			out.Values[i] = ec._Payable_outstandingbalance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "totaltransaction":
			out.Values[i] = ec._Payable_totaltransaction(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "daysdue":
			out.Values[i] = ec._Payable_daysdue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			out.Values[i] = ec._Payable_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "supplier":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Payable_supplier(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var productImplementors = []string{"Product", "Node"}

func (ec *executionContext) _Product(ctx context.Context, sel ast.SelectionSet, obj *ent.Product) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Product")
		case "id":
			out.Values[i] = ec._Product_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdat":
			out.Values[i] = ec._Product_createdat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedat":
			out.Values[i] = ec._Product_updatedat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deletedat":
			out.Values[i] = ec._Product_deletedat(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Product_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "isdefault":
			out.Values[i] = ec._Product_isdefault(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "minimumstock":
			out.Values[i] = ec._Product_minimumstock(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Product_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "price":
			out.Values[i] = ec._Product_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "sku":
			out.Values[i] = ec._Product_sku(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "stock":
			out.Values[i] = ec._Product_stock(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "category":
			out.Values[i] = ec._Product_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "unitcost":
			out.Values[i] = ec._Product_unitcost(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "company":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_company(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "pictures":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_pictures(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "productmovements":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_productmovements(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var productMovementImplementors = []string{"ProductMovement", "Node"}

func (ec *executionContext) _ProductMovement(ctx context.Context, sel ast.SelectionSet, obj *ent.ProductMovement) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productMovementImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductMovement")
		case "id":
			out.Values[i] = ec._ProductMovement_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdat":
			out.Values[i] = ec._ProductMovement_createdat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedat":
			out.Values[i] = ec._ProductMovement_updatedat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deletedat":
			out.Values[i] = ec._ProductMovement_deletedat(ctx, field, obj)
		case "entrygroup":
			out.Values[i] = ec._ProductMovement_entrygroup(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "averagecost":
			out.Values[i] = ec._ProductMovement_averagecost(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "unitcost":
			out.Values[i] = ec._ProductMovement_unitcost(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "price":
			out.Values[i] = ec._ProductMovement_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "quantity":
			out.Values[i] = ec._ProductMovement_quantity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "product":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ProductMovement_product(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var productMovementConnectionImplementors = []string{"ProductMovementConnection"}

func (ec *executionContext) _ProductMovementConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.ProductMovementConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productMovementConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductMovementConnection")
		case "edges":
			out.Values[i] = ec._ProductMovementConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._ProductMovementConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._ProductMovementConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var productMovementEdgeImplementors = []string{"ProductMovementEdge"}

func (ec *executionContext) _ProductMovementEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.ProductMovementEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productMovementEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductMovementEdge")
		case "node":
			out.Values[i] = ec._ProductMovementEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._ProductMovementEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "node":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_node(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "nodes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_nodes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "accountingEntries":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_accountingEntries(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "cashMovements":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cashMovements(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "files":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_files(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "productMovements":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_productMovements(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "receivables":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_receivables(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "tokens":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tokens(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "workshifts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_workshifts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "verifyPasswordResetToken":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_verifyPasswordResetToken(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "companies":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_companies(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "customers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_customers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "employees":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_employees(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "payables":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_payables(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "products":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_products(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "lowStock":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_lowStock(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "numberOfProducts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_numberOfProducts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "numberOfLowStock":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_numberOfLowStock(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "numberOfOutOfStock":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_numberOfOutOfStock(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "suppliers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_suppliers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "treasuries":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_treasuries(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "users":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_users(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "userRoles":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_userRoles(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "workShifts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_workShifts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "aggregateWorkShift":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_aggregateWorkShift(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "workTags":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_workTags(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "workTasks":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_workTasks(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var receivableImplementors = []string{"Receivable", "Node"}

func (ec *executionContext) _Receivable(ctx context.Context, sel ast.SelectionSet, obj *ent.Receivable) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, receivableImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Receivable")
		case "id":
			out.Values[i] = ec._Receivable_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdat":
			out.Values[i] = ec._Receivable_createdat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedat":
			out.Values[i] = ec._Receivable_updatedat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deletedat":
			out.Values[i] = ec._Receivable_deletedat(ctx, field, obj)
		case "entrygroup":
			out.Values[i] = ec._Receivable_entrygroup(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "date":
			out.Values[i] = ec._Receivable_date(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "outstandingbalance":
			out.Values[i] = ec._Receivable_outstandingbalance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "totaltransaction":
			out.Values[i] = ec._Receivable_totaltransaction(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "daysdue":
			out.Values[i] = ec._Receivable_daysdue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			out.Values[i] = ec._Receivable_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "customer":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Receivable_customer(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var receivableConnectionImplementors = []string{"ReceivableConnection"}

func (ec *executionContext) _ReceivableConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.ReceivableConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, receivableConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReceivableConnection")
		case "edges":
			out.Values[i] = ec._ReceivableConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._ReceivableConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._ReceivableConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var receivableEdgeImplementors = []string{"ReceivableEdge"}

func (ec *executionContext) _ReceivableEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.ReceivableEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, receivableEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReceivableEdge")
		case "node":
			out.Values[i] = ec._ReceivableEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._ReceivableEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var supplierImplementors = []string{"Supplier", "Node"}

func (ec *executionContext) _Supplier(ctx context.Context, sel ast.SelectionSet, obj *ent.Supplier) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, supplierImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Supplier")
		case "id":
			out.Values[i] = ec._Supplier_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdat":
			out.Values[i] = ec._Supplier_createdat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedat":
			out.Values[i] = ec._Supplier_updatedat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deletedat":
			out.Values[i] = ec._Supplier_deletedat(ctx, field, obj)
		case "address":
			out.Values[i] = ec._Supplier_address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "city":
			out.Values[i] = ec._Supplier_city(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "country":
			out.Values[i] = ec._Supplier_country(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "description":
			out.Values[i] = ec._Supplier_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "email":
			out.Values[i] = ec._Supplier_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "isdefault":
			out.Values[i] = ec._Supplier_isdefault(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Supplier_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "phone":
			out.Values[i] = ec._Supplier_phone(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "taxid":
			out.Values[i] = ec._Supplier_taxid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "company":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Supplier_company(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "payables":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Supplier_payables(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tokenImplementors = []string{"Token", "Node"}

func (ec *executionContext) _Token(ctx context.Context, sel ast.SelectionSet, obj *ent.Token) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tokenImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Token")
		case "id":
			out.Values[i] = ec._Token_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "expiry":
			out.Values[i] = ec._Token_expiry(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "category":
			out.Values[i] = ec._Token_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "token":
			out.Values[i] = ec._Token_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "company":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Token_company(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "user":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Token_user(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var treasuryImplementors = []string{"Treasury", "Node"}

func (ec *executionContext) _Treasury(ctx context.Context, sel ast.SelectionSet, obj *ent.Treasury) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, treasuryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Treasury")
		case "id":
			out.Values[i] = ec._Treasury_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdat":
			out.Values[i] = ec._Treasury_createdat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedat":
			out.Values[i] = ec._Treasury_updatedat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deletedat":
			out.Values[i] = ec._Treasury_deletedat(ctx, field, obj)
		case "accountnumber":
			out.Values[i] = ec._Treasury_accountnumber(ctx, field, obj)
		case "balance":
			out.Values[i] = ec._Treasury_balance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "bankname":
			out.Values[i] = ec._Treasury_bankname(ctx, field, obj)
		case "currency":
			out.Values[i] = ec._Treasury_currency(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "description":
			out.Values[i] = ec._Treasury_description(ctx, field, obj)
		case "iban":
			out.Values[i] = ec._Treasury_iban(ctx, field, obj)
		case "isdefault":
			out.Values[i] = ec._Treasury_isdefault(ctx, field, obj)
		case "ismainaccount":
			out.Values[i] = ec._Treasury_ismainaccount(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Treasury_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "category":
			out.Values[i] = ec._Treasury_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "swiftcode":
			out.Values[i] = ec._Treasury_swiftcode(ctx, field, obj)
		case "company":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Treasury_company(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "cashmovements":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Treasury_cashmovements(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userImplementors = []string{"User", "Node"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *ent.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			out.Values[i] = ec._User_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdat":
			out.Values[i] = ec._User_createdat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedat":
			out.Values[i] = ec._User_updatedat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deletedat":
			out.Values[i] = ec._User_deletedat(ctx, field, obj)
		case "fcmtoken":
			out.Values[i] = ec._User_fcmtoken(ctx, field, obj)
		case "email":
			out.Values[i] = ec._User_email(ctx, field, obj)
		case "name":
			out.Values[i] = ec._User_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "username":
			out.Values[i] = ec._User_username(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "disabled":
			out.Values[i] = ec._User_disabled(ctx, field, obj)
		case "notverified":
			out.Values[i] = ec._User_notverified(ctx, field, obj)
		case "accountingentries":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_accountingentries(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "company":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_company(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "assignedroles":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_assignedroles(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdtasks":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_createdtasks(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "employee":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_employee(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "tokens":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_tokens(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userRoleImplementors = []string{"UserRole", "Node"}

func (ec *executionContext) _UserRole(ctx context.Context, sel ast.SelectionSet, obj *ent.UserRole) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userRoleImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserRole")
		case "id":
			out.Values[i] = ec._UserRole_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "role":
			out.Values[i] = ec._UserRole_role(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "company":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserRole_company(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "user":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserRole_user(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var workShiftAggregationPayloadImplementors = []string{"WorkShiftAggregationPayload"}

func (ec *executionContext) _WorkShiftAggregationPayload(ctx context.Context, sel ast.SelectionSet, obj *WorkShiftAggregationPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, workShiftAggregationPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("WorkShiftAggregationPayload")
		case "date":
			out.Values[i] = ec._WorkShiftAggregationPayload_date(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "count":
			out.Values[i] = ec._WorkShiftAggregationPayload_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "durationInMinutes":
			out.Values[i] = ec._WorkShiftAggregationPayload_durationInMinutes(ctx, field, obj)
		case "pendingCount":
			out.Values[i] = ec._WorkShiftAggregationPayload_pendingCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var workshiftImplementors = []string{"Workshift", "Node"}

func (ec *executionContext) _Workshift(ctx context.Context, sel ast.SelectionSet, obj *ent.Workshift) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, workshiftImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Workshift")
		case "id":
			out.Values[i] = ec._Workshift_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdat":
			out.Values[i] = ec._Workshift_createdat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedat":
			out.Values[i] = ec._Workshift_updatedat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deletedat":
			out.Values[i] = ec._Workshift_deletedat(ctx, field, obj)
		case "approvedat":
			out.Values[i] = ec._Workshift_approvedat(ctx, field, obj)
		case "clockin":
			out.Values[i] = ec._Workshift_clockin(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "clockout":
			out.Values[i] = ec._Workshift_clockout(ctx, field, obj)
		case "clockinlocation":
			out.Values[i] = ec._Workshift_clockinlocation(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "clockoutlocation":
			out.Values[i] = ec._Workshift_clockoutlocation(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Workshift_description(ctx, field, obj)
		case "note":
			out.Values[i] = ec._Workshift_note(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Workshift_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "company":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Workshift_company(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "employee":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Workshift_employee(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "approvedby":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Workshift_approvedby(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "worktask":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Workshift_worktask(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "editrequest":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Workshift_editrequest(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "workshift":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Workshift_workshift(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var worktagImplementors = []string{"Worktag", "Node"}

func (ec *executionContext) _Worktag(ctx context.Context, sel ast.SelectionSet, obj *ent.Worktag) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, worktagImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Worktag")
		case "id":
			out.Values[i] = ec._Worktag_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdat":
			out.Values[i] = ec._Worktag_createdat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedat":
			out.Values[i] = ec._Worktag_updatedat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deletedat":
			out.Values[i] = ec._Worktag_deletedat(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Worktag_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "color":
			out.Values[i] = ec._Worktag_color(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "company":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Worktag_company(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "worktasks":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Worktag_worktasks(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var worktaskImplementors = []string{"Worktask", "Node"}

func (ec *executionContext) _Worktask(ctx context.Context, sel ast.SelectionSet, obj *ent.Worktask) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, worktaskImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Worktask")
		case "id":
			out.Values[i] = ec._Worktask_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdat":
			out.Values[i] = ec._Worktask_createdat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedat":
			out.Values[i] = ec._Worktask_updatedat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deletedat":
			out.Values[i] = ec._Worktask_deletedat(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Worktask_description(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Worktask_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "subtasks":
			out.Values[i] = ec._Worktask_subtasks(ctx, field, obj)
		case "title":
			out.Values[i] = ec._Worktask_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "starttime":
			out.Values[i] = ec._Worktask_starttime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "endtime":
			out.Values[i] = ec._Worktask_endtime(ctx, field, obj)
		case "company":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Worktask_company(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdby":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Worktask_createdby(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "assignedto":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Worktask_assignedto(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "workshifts":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Worktask_workshifts(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "worktags":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Worktask_worktags(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAccountingEntry2ᚖmazzaᚋentᚐAccountingEntry(ctx context.Context, sel ast.SelectionSet, v *ent.AccountingEntry) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AccountingEntry(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAccountingEntryAccountType2mazzaᚋentᚋaccountingentryᚐAccountType(ctx context.Context, v interface{}) (accountingentry.AccountType, error) {
	var res accountingentry.AccountType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAccountingEntryAccountType2mazzaᚋentᚋaccountingentryᚐAccountType(ctx context.Context, sel ast.SelectionSet, v accountingentry.AccountType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNAccountingEntryConnection2mazzaᚋentᚐAccountingEntryConnection(ctx context.Context, sel ast.SelectionSet, v ent.AccountingEntryConnection) graphql.Marshaler {
	return ec._AccountingEntryConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNAccountingEntryConnection2ᚖmazzaᚋentᚐAccountingEntryConnection(ctx context.Context, sel ast.SelectionSet, v *ent.AccountingEntryConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AccountingEntryConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAccountingEntryOrderField2ᚖmazzaᚋentᚐAccountingEntryOrderField(ctx context.Context, v interface{}) (*ent.AccountingEntryOrderField, error) {
	var res = new(ent.AccountingEntryOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAccountingEntryOrderField2ᚖmazzaᚋentᚐAccountingEntryOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.AccountingEntryOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNAccountingEntryWhereInput2ᚖmazzaᚋentᚐAccountingEntryWhereInput(ctx context.Context, v interface{}) (*ent.AccountingEntryWhereInput, error) {
	res, err := ec.unmarshalInputAccountingEntryWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNCashMovement2ᚖmazzaᚋentᚐCashMovement(ctx context.Context, sel ast.SelectionSet, v *ent.CashMovement) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CashMovement(ctx, sel, v)
}

func (ec *executionContext) marshalNCashMovementConnection2mazzaᚋentᚐCashMovementConnection(ctx context.Context, sel ast.SelectionSet, v ent.CashMovementConnection) graphql.Marshaler {
	return ec._CashMovementConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNCashMovementConnection2ᚖmazzaᚋentᚐCashMovementConnection(ctx context.Context, sel ast.SelectionSet, v *ent.CashMovementConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CashMovementConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCashMovementWhereInput2ᚖmazzaᚋentᚐCashMovementWhereInput(ctx context.Context, v interface{}) (*ent.CashMovementWhereInput, error) {
	res, err := ec.unmarshalInputCashMovementWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCompany2mazzaᚋentᚐCompany(ctx context.Context, sel ast.SelectionSet, v ent.Company) graphql.Marshaler {
	return ec._Company(ctx, sel, &v)
}

func (ec *executionContext) marshalNCompany2ᚕᚖmazzaᚋentᚐCompanyᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.Company) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCompany2ᚖmazzaᚋentᚐCompany(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCompany2ᚖmazzaᚋentᚐCompany(ctx context.Context, sel ast.SelectionSet, v *ent.Company) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Company(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCompanyOrderField2ᚖmazzaᚋentᚐCompanyOrderField(ctx context.Context, v interface{}) (*ent.CompanyOrderField, error) {
	var res = new(ent.CompanyOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCompanyOrderField2ᚖmazzaᚋentᚐCompanyOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.CompanyOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNCompanyWhereInput2ᚖmazzaᚋentᚐCompanyWhereInput(ctx context.Context, v interface{}) (*ent.CompanyWhereInput, error) {
	res, err := ec.unmarshalInputCompanyWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateCompanyInput2ᚖmazzaᚋentᚐCreateCompanyInput(ctx context.Context, v interface{}) (*ent.CreateCompanyInput, error) {
	res, err := ec.unmarshalInputCreateCompanyInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateCustomerInput2mazzaᚋentᚐCreateCustomerInput(ctx context.Context, v interface{}) (ent.CreateCustomerInput, error) {
	res, err := ec.unmarshalInputCreateCustomerInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateEmployeeInput2mazzaᚋentᚐCreateEmployeeInput(ctx context.Context, v interface{}) (ent.CreateEmployeeInput, error) {
	res, err := ec.unmarshalInputCreateEmployeeInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateProductInput2mazzaᚋentᚐCreateProductInput(ctx context.Context, v interface{}) (ent.CreateProductInput, error) {
	res, err := ec.unmarshalInputCreateProductInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateSupplierInput2mazzaᚋentᚐCreateSupplierInput(ctx context.Context, v interface{}) (ent.CreateSupplierInput, error) {
	res, err := ec.unmarshalInputCreateSupplierInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateTreasuryInput2mazzaᚋentᚐCreateTreasuryInput(ctx context.Context, v interface{}) (ent.CreateTreasuryInput, error) {
	res, err := ec.unmarshalInputCreateTreasuryInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateUserInput2mazzaᚋentᚐCreateUserInput(ctx context.Context, v interface{}) (ent.CreateUserInput, error) {
	res, err := ec.unmarshalInputCreateUserInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateUserInput2ᚖmazzaᚋentᚐCreateUserInput(ctx context.Context, v interface{}) (*ent.CreateUserInput, error) {
	res, err := ec.unmarshalInputCreateUserInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateUserRoleInput2mazzaᚋentᚐCreateUserRoleInput(ctx context.Context, v interface{}) (ent.CreateUserRoleInput, error) {
	res, err := ec.unmarshalInputCreateUserRoleInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateWorkshiftInput2mazzaᚋentᚐCreateWorkshiftInput(ctx context.Context, v interface{}) (ent.CreateWorkshiftInput, error) {
	res, err := ec.unmarshalInputCreateWorkshiftInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateWorktagInput2mazzaᚋentᚐCreateWorktagInput(ctx context.Context, v interface{}) (ent.CreateWorktagInput, error) {
	res, err := ec.unmarshalInputCreateWorktagInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateWorktaskInput2mazzaᚋentᚐCreateWorktaskInput(ctx context.Context, v interface{}) (ent.CreateWorktaskInput, error) {
	res, err := ec.unmarshalInputCreateWorktaskInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx context.Context, v interface{}) (entgql.Cursor[int], error) {
	var res entgql.Cursor[int]
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx context.Context, sel ast.SelectionSet, v entgql.Cursor[int]) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNCustomer2mazzaᚋentᚐCustomer(ctx context.Context, sel ast.SelectionSet, v ent.Customer) graphql.Marshaler {
	return ec._Customer(ctx, sel, &v)
}

func (ec *executionContext) marshalNCustomer2ᚕᚖmazzaᚋentᚐCustomerᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.Customer) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCustomer2ᚖmazzaᚋentᚐCustomer(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCustomer2ᚖmazzaᚋentᚐCustomer(ctx context.Context, sel ast.SelectionSet, v *ent.Customer) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Customer(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCustomerWhereInput2ᚖmazzaᚋentᚐCustomerWhereInput(ctx context.Context, v interface{}) (*ent.CustomerWhereInput, error) {
	res, err := ec.unmarshalInputCustomerWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEmployee2mazzaᚋentᚐEmployee(ctx context.Context, sel ast.SelectionSet, v ent.Employee) graphql.Marshaler {
	return ec._Employee(ctx, sel, &v)
}

func (ec *executionContext) marshalNEmployee2ᚕᚖmazzaᚋentᚐEmployeeᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.Employee) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEmployee2ᚖmazzaᚋentᚐEmployee(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNEmployee2ᚖmazzaᚋentᚐEmployee(ctx context.Context, sel ast.SelectionSet, v *ent.Employee) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Employee(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEmployeeGender2mazzaᚋentᚋemployeeᚐGender(ctx context.Context, v interface{}) (employee.Gender, error) {
	var res employee.Gender
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEmployeeGender2mazzaᚋentᚋemployeeᚐGender(ctx context.Context, sel ast.SelectionSet, v employee.Gender) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNEmployeeWhereInput2ᚖmazzaᚋentᚐEmployeeWhereInput(ctx context.Context, v interface{}) (*ent.EmployeeWhereInput, error) {
	res, err := ec.unmarshalInputEmployeeWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFile2ᚖmazzaᚋentᚐFile(ctx context.Context, sel ast.SelectionSet, v *ent.File) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._File(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFileCategory2mazzaᚋentᚋfileᚐCategory(ctx context.Context, v interface{}) (file.Category, error) {
	var res file.Category
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFileCategory2mazzaᚋentᚋfileᚐCategory(ctx context.Context, sel ast.SelectionSet, v file.Category) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNFileConnection2mazzaᚋentᚐFileConnection(ctx context.Context, sel ast.SelectionSet, v ent.FileConnection) graphql.Marshaler {
	return ec._FileConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNFileConnection2ᚖmazzaᚋentᚐFileConnection(ctx context.Context, sel ast.SelectionSet, v *ent.FileConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._FileConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFileOrderField2ᚖmazzaᚋentᚐFileOrderField(ctx context.Context, v interface{}) (*ent.FileOrderField, error) {
	var res = new(ent.FileOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFileOrderField2ᚖmazzaᚋentᚐFileOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.FileOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNFileWhereInput2ᚖmazzaᚋentᚐFileWhereInput(ctx context.Context, v interface{}) (*ent.FileWhereInput, error) {
	res, err := ec.unmarshalInputFileWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloatContext(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalNID2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalIntID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalIntID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2int(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int32(ctx context.Context, v interface{}) (int32, error) {
	res, err := graphql.UnmarshalInt32(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int32(ctx context.Context, sel ast.SelectionSet, v int32) graphql.Marshaler {
	res := graphql.MarshalInt32(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNLoginOutput2mazzaᚐLoginOutput(ctx context.Context, sel ast.SelectionSet, v LoginOutput) graphql.Marshaler {
	return ec._LoginOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNLoginOutput2ᚖmazzaᚐLoginOutput(ctx context.Context, sel ast.SelectionSet, v *LoginOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LoginOutput(ctx, sel, v)
}

func (ec *executionContext) marshalNNode2ᚕmazzaᚋentᚐNoder(ctx context.Context, sel ast.SelectionSet, v []ent.Noder) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalONode2mazzaᚋentᚐNoder(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx context.Context, v interface{}) (entgql.OrderDirection, error) {
	var res entgql.OrderDirection
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx context.Context, sel ast.SelectionSet, v entgql.OrderDirection) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v entgql.PageInfo[int]) graphql.Marshaler {
	return ec._PageInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNPayable2ᚕᚖmazzaᚋentᚐPayableᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.Payable) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPayable2ᚖmazzaᚋentᚐPayable(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPayable2ᚖmazzaᚋentᚐPayable(ctx context.Context, sel ast.SelectionSet, v *ent.Payable) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Payable(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPayableStatus2mazzaᚋentᚋpayableᚐStatus(ctx context.Context, v interface{}) (payable.Status, error) {
	var res payable.Status
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPayableStatus2mazzaᚋentᚋpayableᚐStatus(ctx context.Context, sel ast.SelectionSet, v payable.Status) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPayableWhereInput2ᚖmazzaᚋentᚐPayableWhereInput(ctx context.Context, v interface{}) (*ent.PayableWhereInput, error) {
	res, err := ec.unmarshalInputPayableWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProduct2mazzaᚋentᚐProduct(ctx context.Context, sel ast.SelectionSet, v ent.Product) graphql.Marshaler {
	return ec._Product(ctx, sel, &v)
}

func (ec *executionContext) marshalNProduct2ᚕᚖmazzaᚋentᚐProductᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.Product) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProduct2ᚖmazzaᚋentᚐProduct(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNProduct2ᚖmazzaᚋentᚐProduct(ctx context.Context, sel ast.SelectionSet, v *ent.Product) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Product(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProductCategory2mazzaᚋentᚋproductᚐCategory(ctx context.Context, v interface{}) (product.Category, error) {
	var res product.Category
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProductCategory2mazzaᚋentᚋproductᚐCategory(ctx context.Context, sel ast.SelectionSet, v product.Category) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNProductMovement2ᚖmazzaᚋentᚐProductMovement(ctx context.Context, sel ast.SelectionSet, v *ent.ProductMovement) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProductMovement(ctx, sel, v)
}

func (ec *executionContext) marshalNProductMovementConnection2mazzaᚋentᚐProductMovementConnection(ctx context.Context, sel ast.SelectionSet, v ent.ProductMovementConnection) graphql.Marshaler {
	return ec._ProductMovementConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNProductMovementConnection2ᚖmazzaᚋentᚐProductMovementConnection(ctx context.Context, sel ast.SelectionSet, v *ent.ProductMovementConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProductMovementConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProductMovementWhereInput2ᚖmazzaᚋentᚐProductMovementWhereInput(ctx context.Context, v interface{}) (*ent.ProductMovementWhereInput, error) {
	res, err := ec.unmarshalInputProductMovementWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNProductOrderField2ᚖmazzaᚋentᚐProductOrderField(ctx context.Context, v interface{}) (*ent.ProductOrderField, error) {
	var res = new(ent.ProductOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProductOrderField2ᚖmazzaᚋentᚐProductOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.ProductOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNProductWhereInput2ᚖmazzaᚋentᚐProductWhereInput(ctx context.Context, v interface{}) (*ent.ProductWhereInput, error) {
	res, err := ec.unmarshalInputProductWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNReceivable2ᚖmazzaᚋentᚐReceivable(ctx context.Context, sel ast.SelectionSet, v *ent.Receivable) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Receivable(ctx, sel, v)
}

func (ec *executionContext) marshalNReceivableConnection2mazzaᚋentᚐReceivableConnection(ctx context.Context, sel ast.SelectionSet, v ent.ReceivableConnection) graphql.Marshaler {
	return ec._ReceivableConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNReceivableConnection2ᚖmazzaᚋentᚐReceivableConnection(ctx context.Context, sel ast.SelectionSet, v *ent.ReceivableConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ReceivableConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNReceivableStatus2mazzaᚋentᚋreceivableᚐStatus(ctx context.Context, v interface{}) (receivable.Status, error) {
	var res receivable.Status
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNReceivableStatus2mazzaᚋentᚋreceivableᚐStatus(ctx context.Context, sel ast.SelectionSet, v receivable.Status) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNReceivableWhereInput2ᚖmazzaᚋentᚐReceivableWhereInput(ctx context.Context, v interface{}) (*ent.ReceivableWhereInput, error) {
	res, err := ec.unmarshalInputReceivableWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNResetPasswordInput2mazzaᚐResetPasswordInput(ctx context.Context, v interface{}) (ResetPasswordInput, error) {
	res, err := ec.unmarshalInputResetPasswordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNShiftGroupBy2mazzaᚐShiftGroupBy(ctx context.Context, v interface{}) (ShiftGroupBy, error) {
	var res ShiftGroupBy
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNShiftGroupBy2mazzaᚐShiftGroupBy(ctx context.Context, sel ast.SelectionSet, v ShiftGroupBy) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNShiftGroupBy2ᚕmazzaᚐShiftGroupByᚄ(ctx context.Context, v interface{}) ([]ShiftGroupBy, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]ShiftGroupBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNShiftGroupBy2mazzaᚐShiftGroupBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNShiftGroupBy2ᚕmazzaᚐShiftGroupByᚄ(ctx context.Context, sel ast.SelectionSet, v []ShiftGroupBy) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNShiftGroupBy2mazzaᚐShiftGroupBy(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNSignupInput2mazzaᚐSignupInput(ctx context.Context, v interface{}) (SignupInput, error) {
	res, err := ec.unmarshalInputSignupInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNSupplier2mazzaᚋentᚐSupplier(ctx context.Context, sel ast.SelectionSet, v ent.Supplier) graphql.Marshaler {
	return ec._Supplier(ctx, sel, &v)
}

func (ec *executionContext) marshalNSupplier2ᚕᚖmazzaᚋentᚐSupplierᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.Supplier) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSupplier2ᚖmazzaᚋentᚐSupplier(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSupplier2ᚖmazzaᚋentᚐSupplier(ctx context.Context, sel ast.SelectionSet, v *ent.Supplier) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Supplier(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSupplierWhereInput2ᚖmazzaᚋentᚐSupplierWhereInput(ctx context.Context, v interface{}) (*ent.SupplierWhereInput, error) {
	res, err := ec.unmarshalInputSupplierWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNToken2ᚕᚖmazzaᚋentᚐTokenᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.Token) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNToken2ᚖmazzaᚋentᚐToken(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNToken2ᚖmazzaᚋentᚐToken(ctx context.Context, sel ast.SelectionSet, v *ent.Token) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Token(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTokenCategory2mazzaᚋentᚋtokenᚐCategory(ctx context.Context, v interface{}) (token.Category, error) {
	var res token.Category
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTokenCategory2mazzaᚋentᚋtokenᚐCategory(ctx context.Context, sel ast.SelectionSet, v token.Category) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNTokenWhereInput2ᚖmazzaᚋentᚐTokenWhereInput(ctx context.Context, v interface{}) (*ent.TokenWhereInput, error) {
	res, err := ec.unmarshalInputTokenWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTreasury2mazzaᚋentᚐTreasury(ctx context.Context, sel ast.SelectionSet, v ent.Treasury) graphql.Marshaler {
	return ec._Treasury(ctx, sel, &v)
}

func (ec *executionContext) marshalNTreasury2ᚕᚖmazzaᚋentᚐTreasuryᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.Treasury) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTreasury2ᚖmazzaᚋentᚐTreasury(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTreasury2ᚖmazzaᚋentᚐTreasury(ctx context.Context, sel ast.SelectionSet, v *ent.Treasury) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Treasury(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTreasuryCategory2mazzaᚋentᚋtreasuryᚐCategory(ctx context.Context, v interface{}) (treasury.Category, error) {
	var res treasury.Category
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTreasuryCategory2mazzaᚋentᚋtreasuryᚐCategory(ctx context.Context, sel ast.SelectionSet, v treasury.Category) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNTreasuryCurrency2mazzaᚋentᚋtreasuryᚐCurrency(ctx context.Context, v interface{}) (treasury.Currency, error) {
	var res treasury.Currency
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTreasuryCurrency2mazzaᚋentᚋtreasuryᚐCurrency(ctx context.Context, sel ast.SelectionSet, v treasury.Currency) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNTreasuryWhereInput2ᚖmazzaᚋentᚐTreasuryWhereInput(ctx context.Context, v interface{}) (*ent.TreasuryWhereInput, error) {
	res, err := ec.unmarshalInputTreasuryWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateCompanyInput2mazzaᚋentᚐUpdateCompanyInput(ctx context.Context, v interface{}) (ent.UpdateCompanyInput, error) {
	res, err := ec.unmarshalInputUpdateCompanyInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateCustomerInput2mazzaᚋentᚐUpdateCustomerInput(ctx context.Context, v interface{}) (ent.UpdateCustomerInput, error) {
	res, err := ec.unmarshalInputUpdateCustomerInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateEmployeeInput2mazzaᚋentᚐUpdateEmployeeInput(ctx context.Context, v interface{}) (ent.UpdateEmployeeInput, error) {
	res, err := ec.unmarshalInputUpdateEmployeeInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateProductInput2mazzaᚋentᚐUpdateProductInput(ctx context.Context, v interface{}) (ent.UpdateProductInput, error) {
	res, err := ec.unmarshalInputUpdateProductInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateSupplierInput2mazzaᚋentᚐUpdateSupplierInput(ctx context.Context, v interface{}) (ent.UpdateSupplierInput, error) {
	res, err := ec.unmarshalInputUpdateSupplierInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateTreasuryInput2mazzaᚋentᚐUpdateTreasuryInput(ctx context.Context, v interface{}) (ent.UpdateTreasuryInput, error) {
	res, err := ec.unmarshalInputUpdateTreasuryInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateUserInput2mazzaᚋentᚐUpdateUserInput(ctx context.Context, v interface{}) (ent.UpdateUserInput, error) {
	res, err := ec.unmarshalInputUpdateUserInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateWorkshiftInput2mazzaᚋentᚐUpdateWorkshiftInput(ctx context.Context, v interface{}) (ent.UpdateWorkshiftInput, error) {
	res, err := ec.unmarshalInputUpdateWorkshiftInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateWorktagInput2mazzaᚋentᚐUpdateWorktagInput(ctx context.Context, v interface{}) (ent.UpdateWorktagInput, error) {
	res, err := ec.unmarshalInputUpdateWorktagInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateWorktaskInput2mazzaᚋentᚐUpdateWorktaskInput(ctx context.Context, v interface{}) (ent.UpdateWorktaskInput, error) {
	res, err := ec.unmarshalInputUpdateWorktaskInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUser2mazzaᚋentᚐUser(ctx context.Context, sel ast.SelectionSet, v ent.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚕᚖmazzaᚋentᚐUserᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.User) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUser2ᚖmazzaᚋentᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUser2ᚖmazzaᚋentᚐUser(ctx context.Context, sel ast.SelectionSet, v *ent.User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserOrderField2ᚖmazzaᚋentᚐUserOrderField(ctx context.Context, v interface{}) (*ent.UserOrderField, error) {
	var res = new(ent.UserOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserOrderField2ᚖmazzaᚋentᚐUserOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.UserOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalNUserRole2ᚕᚖmazzaᚋentᚐUserRoleᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.UserRole) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserRole2ᚖmazzaᚋentᚐUserRole(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUserRole2ᚖmazzaᚋentᚐUserRole(ctx context.Context, sel ast.SelectionSet, v *ent.UserRole) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserRole(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserRoleOrderField2ᚖmazzaᚋentᚐUserRoleOrderField(ctx context.Context, v interface{}) (*ent.UserRoleOrderField, error) {
	var res = new(ent.UserRoleOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserRoleOrderField2ᚖmazzaᚋentᚐUserRoleOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.UserRoleOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNUserRoleRole2mazzaᚋentᚋuserroleᚐRole(ctx context.Context, v interface{}) (userrole.Role, error) {
	var res userrole.Role
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserRoleRole2mazzaᚋentᚋuserroleᚐRole(ctx context.Context, sel ast.SelectionSet, v userrole.Role) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNUserRoleWhereInput2ᚖmazzaᚋentᚐUserRoleWhereInput(ctx context.Context, v interface{}) (*ent.UserRoleWhereInput, error) {
	res, err := ec.unmarshalInputUserRoleWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserWhereInput2ᚖmazzaᚋentᚐUserWhereInput(ctx context.Context, v interface{}) (*ent.UserWhereInput, error) {
	res, err := ec.unmarshalInputUserWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNWorkShiftAggregationPayload2ᚕᚖmazzaᚐWorkShiftAggregationPayloadᚄ(ctx context.Context, sel ast.SelectionSet, v []*WorkShiftAggregationPayload) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWorkShiftAggregationPayload2ᚖmazzaᚐWorkShiftAggregationPayload(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNWorkShiftAggregationPayload2ᚖmazzaᚐWorkShiftAggregationPayload(ctx context.Context, sel ast.SelectionSet, v *WorkShiftAggregationPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._WorkShiftAggregationPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNWorkshift2mazzaᚋentᚐWorkshift(ctx context.Context, sel ast.SelectionSet, v ent.Workshift) graphql.Marshaler {
	return ec._Workshift(ctx, sel, &v)
}

func (ec *executionContext) marshalNWorkshift2ᚕᚖmazzaᚋentᚐWorkshiftᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.Workshift) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWorkshift2ᚖmazzaᚋentᚐWorkshift(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNWorkshift2ᚖmazzaᚋentᚐWorkshift(ctx context.Context, sel ast.SelectionSet, v *ent.Workshift) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Workshift(ctx, sel, v)
}

func (ec *executionContext) unmarshalNWorkshiftOrderField2ᚖmazzaᚋentᚐWorkshiftOrderField(ctx context.Context, v interface{}) (*ent.WorkshiftOrderField, error) {
	var res = new(ent.WorkshiftOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNWorkshiftOrderField2ᚖmazzaᚋentᚐWorkshiftOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.WorkshiftOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNWorkshiftStatus2mazzaᚋentᚋworkshiftᚐStatus(ctx context.Context, v interface{}) (workshift.Status, error) {
	var res workshift.Status
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNWorkshiftStatus2mazzaᚋentᚋworkshiftᚐStatus(ctx context.Context, sel ast.SelectionSet, v workshift.Status) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNWorkshiftWhereInput2ᚖmazzaᚋentᚐWorkshiftWhereInput(ctx context.Context, v interface{}) (*ent.WorkshiftWhereInput, error) {
	res, err := ec.unmarshalInputWorkshiftWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNWorktag2mazzaᚋentᚐWorktag(ctx context.Context, sel ast.SelectionSet, v ent.Worktag) graphql.Marshaler {
	return ec._Worktag(ctx, sel, &v)
}

func (ec *executionContext) marshalNWorktag2ᚕᚖmazzaᚋentᚐWorktagᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.Worktag) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWorktag2ᚖmazzaᚋentᚐWorktag(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNWorktag2ᚖmazzaᚋentᚐWorktag(ctx context.Context, sel ast.SelectionSet, v *ent.Worktag) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Worktag(ctx, sel, v)
}

func (ec *executionContext) unmarshalNWorktagWhereInput2ᚖmazzaᚋentᚐWorktagWhereInput(ctx context.Context, v interface{}) (*ent.WorktagWhereInput, error) {
	res, err := ec.unmarshalInputWorktagWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNWorktask2mazzaᚋentᚐWorktask(ctx context.Context, sel ast.SelectionSet, v ent.Worktask) graphql.Marshaler {
	return ec._Worktask(ctx, sel, &v)
}

func (ec *executionContext) marshalNWorktask2ᚕᚖmazzaᚋentᚐWorktaskᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.Worktask) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWorktask2ᚖmazzaᚋentᚐWorktask(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNWorktask2ᚖmazzaᚋentᚐWorktask(ctx context.Context, sel ast.SelectionSet, v *ent.Worktask) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Worktask(ctx, sel, v)
}

func (ec *executionContext) unmarshalNWorktaskStatus2mazzaᚋentᚋworktaskᚐStatus(ctx context.Context, v interface{}) (worktask.Status, error) {
	var res worktask.Status
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNWorktaskStatus2mazzaᚋentᚋworktaskᚐStatus(ctx context.Context, sel ast.SelectionSet, v worktask.Status) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNWorktaskWhereInput2ᚖmazzaᚋentᚐWorktaskWhereInput(ctx context.Context, v interface{}) (*ent.WorktaskWhereInput, error) {
	res, err := ec.unmarshalInputWorktaskWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNinvitedUserSignupInput2mazzaᚐInvitedUserSignupInput(ctx context.Context, v interface{}) (InvitedUserSignupInput, error) {
	res, err := ec.unmarshalInputinvitedUserSignupInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAccountingEntry2ᚕᚖmazzaᚋentᚐAccountingEntryᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.AccountingEntry) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAccountingEntry2ᚖmazzaᚋentᚐAccountingEntry(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOAccountingEntry2ᚖmazzaᚋentᚐAccountingEntry(ctx context.Context, sel ast.SelectionSet, v *ent.AccountingEntry) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AccountingEntry(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAccountingEntryAccountType2ᚕmazzaᚋentᚋaccountingentryᚐAccountTypeᚄ(ctx context.Context, v interface{}) ([]accountingentry.AccountType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]accountingentry.AccountType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAccountingEntryAccountType2mazzaᚋentᚋaccountingentryᚐAccountType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOAccountingEntryAccountType2ᚕmazzaᚋentᚋaccountingentryᚐAccountTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []accountingentry.AccountType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAccountingEntryAccountType2mazzaᚋentᚋaccountingentryᚐAccountType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOAccountingEntryAccountType2ᚖmazzaᚋentᚋaccountingentryᚐAccountType(ctx context.Context, v interface{}) (*accountingentry.AccountType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(accountingentry.AccountType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAccountingEntryAccountType2ᚖmazzaᚋentᚋaccountingentryᚐAccountType(ctx context.Context, sel ast.SelectionSet, v *accountingentry.AccountType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOAccountingEntryEdge2ᚕᚖmazzaᚋentᚐAccountingEntryEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.AccountingEntryEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAccountingEntryEdge2ᚖmazzaᚋentᚐAccountingEntryEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOAccountingEntryEdge2ᚖmazzaᚋentᚐAccountingEntryEdge(ctx context.Context, sel ast.SelectionSet, v *ent.AccountingEntryEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AccountingEntryEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAccountingEntryOrder2ᚖmazzaᚋentᚐAccountingEntryOrder(ctx context.Context, v interface{}) (*ent.AccountingEntryOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAccountingEntryOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOAccountingEntryWhereInput2ᚕᚖmazzaᚋentᚐAccountingEntryWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.AccountingEntryWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.AccountingEntryWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAccountingEntryWhereInput2ᚖmazzaᚋentᚐAccountingEntryWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOAccountingEntryWhereInput2ᚖmazzaᚋentᚐAccountingEntryWhereInput(ctx context.Context, v interface{}) (*ent.AccountingEntryWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAccountingEntryWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOCashMovement2ᚕᚖmazzaᚋentᚐCashMovementᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.CashMovement) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCashMovement2ᚖmazzaᚋentᚐCashMovement(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCashMovement2ᚖmazzaᚋentᚐCashMovement(ctx context.Context, sel ast.SelectionSet, v *ent.CashMovement) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CashMovement(ctx, sel, v)
}

func (ec *executionContext) marshalOCashMovementEdge2ᚕᚖmazzaᚋentᚐCashMovementEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.CashMovementEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCashMovementEdge2ᚖmazzaᚋentᚐCashMovementEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCashMovementEdge2ᚖmazzaᚋentᚐCashMovementEdge(ctx context.Context, sel ast.SelectionSet, v *ent.CashMovementEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CashMovementEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCashMovementWhereInput2ᚕᚖmazzaᚋentᚐCashMovementWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.CashMovementWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.CashMovementWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCashMovementWhereInput2ᚖmazzaᚋentᚐCashMovementWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCashMovementWhereInput2ᚖmazzaᚋentᚐCashMovementWhereInput(ctx context.Context, v interface{}) (*ent.CashMovementWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCashMovementWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCompany2ᚕᚖmazzaᚋentᚐCompanyᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.Company) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCompany2ᚖmazzaᚋentᚐCompany(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCompany2ᚖmazzaᚋentᚐCompany(ctx context.Context, sel ast.SelectionSet, v *ent.Company) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Company(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚐCompanyWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.CompanyWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.CompanyWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCompanyWhereInput2ᚖmazzaᚋentᚐCompanyWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCompanyWhereInput2ᚖmazzaᚋentᚐCompanyWhereInput(ctx context.Context, v interface{}) (*ent.CompanyWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCompanyWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCreateCompanyInput2ᚖmazzaᚋentᚐCreateCompanyInput(ctx context.Context, v interface{}) (*ent.CreateCompanyInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCreateCompanyInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx context.Context, v interface{}) (*entgql.Cursor[int], error) {
	if v == nil {
		return nil, nil
	}
	var res = new(entgql.Cursor[int])
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx context.Context, sel ast.SelectionSet, v *entgql.Cursor[int]) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOCustomer2ᚕᚖmazzaᚋentᚐCustomerᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.Customer) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCustomer2ᚖmazzaᚋentᚐCustomer(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCustomer2ᚖmazzaᚋentᚐCustomer(ctx context.Context, sel ast.SelectionSet, v *ent.Customer) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Customer(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCustomerWhereInput2ᚕᚖmazzaᚋentᚐCustomerWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.CustomerWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.CustomerWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCustomerWhereInput2ᚖmazzaᚋentᚐCustomerWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCustomerWhereInput2ᚖmazzaᚋentᚐCustomerWhereInput(ctx context.Context, v interface{}) (*ent.CustomerWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCustomerWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEmployee2ᚕᚖmazzaᚋentᚐEmployeeᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.Employee) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEmployee2ᚖmazzaᚋentᚐEmployee(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOEmployee2ᚖmazzaᚋentᚐEmployee(ctx context.Context, sel ast.SelectionSet, v *ent.Employee) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Employee(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEmployeeGender2ᚕmazzaᚋentᚋemployeeᚐGenderᚄ(ctx context.Context, v interface{}) ([]employee.Gender, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]employee.Gender, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEmployeeGender2mazzaᚋentᚋemployeeᚐGender(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOEmployeeGender2ᚕmazzaᚋentᚋemployeeᚐGenderᚄ(ctx context.Context, sel ast.SelectionSet, v []employee.Gender) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEmployeeGender2mazzaᚋentᚋemployeeᚐGender(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOEmployeeGender2ᚖmazzaᚋentᚋemployeeᚐGender(ctx context.Context, v interface{}) (*employee.Gender, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(employee.Gender)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEmployeeGender2ᚖmazzaᚋentᚋemployeeᚐGender(ctx context.Context, sel ast.SelectionSet, v *employee.Gender) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOEmployeeWhereInput2ᚕᚖmazzaᚋentᚐEmployeeWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.EmployeeWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.EmployeeWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEmployeeWhereInput2ᚖmazzaᚋentᚐEmployeeWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEmployeeWhereInput2ᚖmazzaᚋentᚐEmployeeWhereInput(ctx context.Context, v interface{}) (*ent.EmployeeWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEmployeeWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFile2ᚕᚖmazzaᚋentᚐFileᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.File) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFile2ᚖmazzaᚋentᚐFile(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOFile2ᚖmazzaᚋentᚐFile(ctx context.Context, sel ast.SelectionSet, v *ent.File) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._File(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFileCategory2ᚕmazzaᚋentᚋfileᚐCategoryᚄ(ctx context.Context, v interface{}) ([]file.Category, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]file.Category, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFileCategory2mazzaᚋentᚋfileᚐCategory(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFileCategory2ᚕmazzaᚋentᚋfileᚐCategoryᚄ(ctx context.Context, sel ast.SelectionSet, v []file.Category) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFileCategory2mazzaᚋentᚋfileᚐCategory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOFileCategory2ᚖmazzaᚋentᚋfileᚐCategory(ctx context.Context, v interface{}) (*file.Category, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(file.Category)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFileCategory2ᚖmazzaᚋentᚋfileᚐCategory(ctx context.Context, sel ast.SelectionSet, v *file.Category) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOFileEdge2ᚕᚖmazzaᚋentᚐFileEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.FileEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFileEdge2ᚖmazzaᚋentᚐFileEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFileEdge2ᚖmazzaᚋentᚐFileEdge(ctx context.Context, sel ast.SelectionSet, v *ent.FileEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FileEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFileOrder2ᚖmazzaᚋentᚐFileOrder(ctx context.Context, v interface{}) (*ent.FileOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFileOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFileWhereInput2ᚕᚖmazzaᚋentᚐFileWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.FileWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.FileWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFileWhereInput2ᚖmazzaᚋentᚐFileWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFileWhereInput2ᚖmazzaᚋentᚐFileWhereInput(ctx context.Context, v interface{}) (*ent.FileWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFileWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFloat2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFloat2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNFloat2float64(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalOID2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2int(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalIntID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalIntID(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2int32(ctx context.Context, v interface{}) (int32, error) {
	res, err := graphql.UnmarshalInt32(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2int32(ctx context.Context, sel ast.SelectionSet, v int32) graphql.Marshaler {
	res := graphql.MarshalInt32(v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚕint32ᚄ(ctx context.Context, v interface{}) ([]int32, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]int32, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int32(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕint32ᚄ(ctx context.Context, sel ast.SelectionSet, v []int32) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int32(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint32(ctx context.Context, v interface{}) (*int32, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt32(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint32(ctx context.Context, sel ast.SelectionSet, v *int32) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt32(*v)
	return res
}

func (ec *executionContext) marshalONode2mazzaᚋentᚐNoder(ctx context.Context, sel ast.SelectionSet, v ent.Noder) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Node(ctx, sel, v)
}

func (ec *executionContext) marshalOPayable2ᚕᚖmazzaᚋentᚐPayableᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.Payable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPayable2ᚖmazzaᚋentᚐPayable(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOPayableStatus2ᚕmazzaᚋentᚋpayableᚐStatusᚄ(ctx context.Context, v interface{}) ([]payable.Status, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]payable.Status, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPayableStatus2mazzaᚋentᚋpayableᚐStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPayableStatus2ᚕmazzaᚋentᚋpayableᚐStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []payable.Status) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPayableStatus2mazzaᚋentᚋpayableᚐStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOPayableStatus2ᚖmazzaᚋentᚋpayableᚐStatus(ctx context.Context, v interface{}) (*payable.Status, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(payable.Status)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPayableStatus2ᚖmazzaᚋentᚋpayableᚐStatus(ctx context.Context, sel ast.SelectionSet, v *payable.Status) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPayableWhereInput2ᚕᚖmazzaᚋentᚐPayableWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.PayableWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.PayableWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPayableWhereInput2ᚖmazzaᚋentᚐPayableWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPayableWhereInput2ᚖmazzaᚋentᚐPayableWhereInput(ctx context.Context, v interface{}) (*ent.PayableWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPayableWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProduct2ᚕᚖmazzaᚋentᚐProductᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.Product) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProduct2ᚖmazzaᚋentᚐProduct(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOProduct2ᚖmazzaᚋentᚐProduct(ctx context.Context, sel ast.SelectionSet, v *ent.Product) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Product(ctx, sel, v)
}

func (ec *executionContext) unmarshalOProductCategory2ᚕmazzaᚋentᚋproductᚐCategoryᚄ(ctx context.Context, v interface{}) ([]product.Category, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]product.Category, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProductCategory2mazzaᚋentᚋproductᚐCategory(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOProductCategory2ᚕmazzaᚋentᚋproductᚐCategoryᚄ(ctx context.Context, sel ast.SelectionSet, v []product.Category) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProductCategory2mazzaᚋentᚋproductᚐCategory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOProductCategory2ᚖmazzaᚋentᚋproductᚐCategory(ctx context.Context, v interface{}) (*product.Category, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(product.Category)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProductCategory2ᚖmazzaᚋentᚋproductᚐCategory(ctx context.Context, sel ast.SelectionSet, v *product.Category) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOProductMovement2ᚕᚖmazzaᚋentᚐProductMovementᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.ProductMovement) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProductMovement2ᚖmazzaᚋentᚐProductMovement(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOProductMovement2ᚖmazzaᚋentᚐProductMovement(ctx context.Context, sel ast.SelectionSet, v *ent.ProductMovement) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductMovement(ctx, sel, v)
}

func (ec *executionContext) marshalOProductMovementEdge2ᚕᚖmazzaᚋentᚐProductMovementEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.ProductMovementEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProductMovementEdge2ᚖmazzaᚋentᚐProductMovementEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOProductMovementEdge2ᚖmazzaᚋentᚐProductMovementEdge(ctx context.Context, sel ast.SelectionSet, v *ent.ProductMovementEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductMovementEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOProductMovementWhereInput2ᚕᚖmazzaᚋentᚐProductMovementWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ProductMovementWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.ProductMovementWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProductMovementWhereInput2ᚖmazzaᚋentᚐProductMovementWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOProductMovementWhereInput2ᚖmazzaᚋentᚐProductMovementWhereInput(ctx context.Context, v interface{}) (*ent.ProductMovementWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProductMovementWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOProductWhereInput2ᚕᚖmazzaᚋentᚐProductWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ProductWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.ProductWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProductWhereInput2ᚖmazzaᚋentᚐProductWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOProductWhereInput2ᚖmazzaᚋentᚐProductWhereInput(ctx context.Context, v interface{}) (*ent.ProductWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProductWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOReceivable2ᚕᚖmazzaᚋentᚐReceivableᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.Receivable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNReceivable2ᚖmazzaᚋentᚐReceivable(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOReceivable2ᚖmazzaᚋentᚐReceivable(ctx context.Context, sel ast.SelectionSet, v *ent.Receivable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Receivable(ctx, sel, v)
}

func (ec *executionContext) marshalOReceivableEdge2ᚕᚖmazzaᚋentᚐReceivableEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.ReceivableEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOReceivableEdge2ᚖmazzaᚋentᚐReceivableEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOReceivableEdge2ᚖmazzaᚋentᚐReceivableEdge(ctx context.Context, sel ast.SelectionSet, v *ent.ReceivableEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ReceivableEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOReceivableStatus2ᚕmazzaᚋentᚋreceivableᚐStatusᚄ(ctx context.Context, v interface{}) ([]receivable.Status, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]receivable.Status, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNReceivableStatus2mazzaᚋentᚋreceivableᚐStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOReceivableStatus2ᚕmazzaᚋentᚋreceivableᚐStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []receivable.Status) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNReceivableStatus2mazzaᚋentᚋreceivableᚐStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOReceivableStatus2ᚖmazzaᚋentᚋreceivableᚐStatus(ctx context.Context, v interface{}) (*receivable.Status, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(receivable.Status)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOReceivableStatus2ᚖmazzaᚋentᚋreceivableᚐStatus(ctx context.Context, sel ast.SelectionSet, v *receivable.Status) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOReceivableWhereInput2ᚕᚖmazzaᚋentᚐReceivableWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ReceivableWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.ReceivableWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNReceivableWhereInput2ᚖmazzaᚋentᚐReceivableWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOReceivableWhereInput2ᚖmazzaᚋentᚐReceivableWhereInput(ctx context.Context, v interface{}) (*ent.ReceivableWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputReceivableWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	return res
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOSupplier2ᚕᚖmazzaᚋentᚐSupplierᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.Supplier) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSupplier2ᚖmazzaᚋentᚐSupplier(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOSupplier2ᚖmazzaᚋentᚐSupplier(ctx context.Context, sel ast.SelectionSet, v *ent.Supplier) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Supplier(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSupplierWhereInput2ᚕᚖmazzaᚋentᚐSupplierWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.SupplierWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.SupplierWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSupplierWhereInput2ᚖmazzaᚋentᚐSupplierWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSupplierWhereInput2ᚖmazzaᚋentᚐSupplierWhereInput(ctx context.Context, v interface{}) (*ent.SupplierWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSupplierWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	return res
}

func (ec *executionContext) unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTime2timeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTime2ᚕtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNTime2timeᚐTime(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) marshalOToken2ᚕᚖmazzaᚋentᚐTokenᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.Token) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNToken2ᚖmazzaᚋentᚐToken(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOTokenCategory2ᚕmazzaᚋentᚋtokenᚐCategoryᚄ(ctx context.Context, v interface{}) ([]token.Category, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]token.Category, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTokenCategory2mazzaᚋentᚋtokenᚐCategory(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTokenCategory2ᚕmazzaᚋentᚋtokenᚐCategoryᚄ(ctx context.Context, sel ast.SelectionSet, v []token.Category) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTokenCategory2mazzaᚋentᚋtokenᚐCategory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOTokenCategory2ᚖmazzaᚋentᚋtokenᚐCategory(ctx context.Context, v interface{}) (*token.Category, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(token.Category)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTokenCategory2ᚖmazzaᚋentᚋtokenᚐCategory(ctx context.Context, sel ast.SelectionSet, v *token.Category) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOTokenWhereInput2ᚕᚖmazzaᚋentᚐTokenWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.TokenWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.TokenWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTokenWhereInput2ᚖmazzaᚋentᚐTokenWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTokenWhereInput2ᚖmazzaᚋentᚐTokenWhereInput(ctx context.Context, v interface{}) (*ent.TokenWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTokenWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTreasury2ᚕᚖmazzaᚋentᚐTreasuryᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.Treasury) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTreasury2ᚖmazzaᚋentᚐTreasury(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOTreasury2ᚖmazzaᚋentᚐTreasury(ctx context.Context, sel ast.SelectionSet, v *ent.Treasury) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Treasury(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTreasuryCategory2ᚕmazzaᚋentᚋtreasuryᚐCategoryᚄ(ctx context.Context, v interface{}) ([]treasury.Category, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]treasury.Category, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTreasuryCategory2mazzaᚋentᚋtreasuryᚐCategory(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTreasuryCategory2ᚕmazzaᚋentᚋtreasuryᚐCategoryᚄ(ctx context.Context, sel ast.SelectionSet, v []treasury.Category) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTreasuryCategory2mazzaᚋentᚋtreasuryᚐCategory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOTreasuryCategory2ᚖmazzaᚋentᚋtreasuryᚐCategory(ctx context.Context, v interface{}) (*treasury.Category, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(treasury.Category)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTreasuryCategory2ᚖmazzaᚋentᚋtreasuryᚐCategory(ctx context.Context, sel ast.SelectionSet, v *treasury.Category) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOTreasuryCurrency2ᚕmazzaᚋentᚋtreasuryᚐCurrencyᚄ(ctx context.Context, v interface{}) ([]treasury.Currency, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]treasury.Currency, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTreasuryCurrency2mazzaᚋentᚋtreasuryᚐCurrency(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTreasuryCurrency2ᚕmazzaᚋentᚋtreasuryᚐCurrencyᚄ(ctx context.Context, sel ast.SelectionSet, v []treasury.Currency) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTreasuryCurrency2mazzaᚋentᚋtreasuryᚐCurrency(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOTreasuryCurrency2ᚖmazzaᚋentᚋtreasuryᚐCurrency(ctx context.Context, v interface{}) (*treasury.Currency, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(treasury.Currency)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTreasuryCurrency2ᚖmazzaᚋentᚋtreasuryᚐCurrency(ctx context.Context, sel ast.SelectionSet, v *treasury.Currency) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOTreasuryWhereInput2ᚕᚖmazzaᚋentᚐTreasuryWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.TreasuryWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.TreasuryWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTreasuryWhereInput2ᚖmazzaᚋentᚐTreasuryWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTreasuryWhereInput2ᚖmazzaᚋentᚐTreasuryWhereInput(ctx context.Context, v interface{}) (*ent.TreasuryWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTreasuryWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUser2ᚕᚖmazzaᚋentᚐUserᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUser2ᚖmazzaᚋentᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOUser2ᚖmazzaᚋentᚐUser(ctx context.Context, sel ast.SelectionSet, v *ent.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalOUserRole2ᚕᚖmazzaᚋentᚐUserRoleᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.UserRole) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserRole2ᚖmazzaᚋentᚐUserRole(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOUserRoleRole2ᚕmazzaᚋentᚋuserroleᚐRoleᚄ(ctx context.Context, v interface{}) ([]userrole.Role, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]userrole.Role, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUserRoleRole2mazzaᚋentᚋuserroleᚐRole(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOUserRoleRole2ᚕmazzaᚋentᚋuserroleᚐRoleᚄ(ctx context.Context, sel ast.SelectionSet, v []userrole.Role) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserRoleRole2mazzaᚋentᚋuserroleᚐRole(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOUserRoleRole2ᚖmazzaᚋentᚋuserroleᚐRole(ctx context.Context, v interface{}) (*userrole.Role, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(userrole.Role)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserRoleRole2ᚖmazzaᚋentᚋuserroleᚐRole(ctx context.Context, sel ast.SelectionSet, v *userrole.Role) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOUserRoleWhereInput2ᚕᚖmazzaᚋentᚐUserRoleWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.UserRoleWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.UserRoleWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUserRoleWhereInput2ᚖmazzaᚋentᚐUserRoleWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOUserRoleWhereInput2ᚖmazzaᚋentᚐUserRoleWhereInput(ctx context.Context, v interface{}) (*ent.UserRoleWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserRoleWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserWhereInput2ᚕᚖmazzaᚋentᚐUserWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.UserWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.UserWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUserWhereInput2ᚖmazzaᚋentᚐUserWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOUserWhereInput2ᚖmazzaᚋentᚐUserWhereInput(ctx context.Context, v interface{}) (*ent.UserWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOWorkshift2ᚕᚖmazzaᚋentᚐWorkshiftᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.Workshift) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWorkshift2ᚖmazzaᚋentᚐWorkshift(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOWorkshift2ᚖmazzaᚋentᚐWorkshift(ctx context.Context, sel ast.SelectionSet, v *ent.Workshift) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Workshift(ctx, sel, v)
}

func (ec *executionContext) unmarshalOWorkshiftStatus2ᚕmazzaᚋentᚋworkshiftᚐStatusᚄ(ctx context.Context, v interface{}) ([]workshift.Status, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]workshift.Status, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNWorkshiftStatus2mazzaᚋentᚋworkshiftᚐStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOWorkshiftStatus2ᚕmazzaᚋentᚋworkshiftᚐStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []workshift.Status) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWorkshiftStatus2mazzaᚋentᚋworkshiftᚐStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOWorkshiftStatus2ᚖmazzaᚋentᚋworkshiftᚐStatus(ctx context.Context, v interface{}) (*workshift.Status, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(workshift.Status)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOWorkshiftStatus2ᚖmazzaᚋentᚋworkshiftᚐStatus(ctx context.Context, sel ast.SelectionSet, v *workshift.Status) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOWorkshiftWhereInput2ᚕᚖmazzaᚋentᚐWorkshiftWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.WorkshiftWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.WorkshiftWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNWorkshiftWhereInput2ᚖmazzaᚋentᚐWorkshiftWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOWorkshiftWhereInput2ᚖmazzaᚋentᚐWorkshiftWhereInput(ctx context.Context, v interface{}) (*ent.WorkshiftWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputWorkshiftWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOWorktag2ᚕᚖmazzaᚋentᚐWorktagᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.Worktag) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWorktag2ᚖmazzaᚋentᚐWorktag(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOWorktag2ᚖmazzaᚋentᚐWorktag(ctx context.Context, sel ast.SelectionSet, v *ent.Worktag) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Worktag(ctx, sel, v)
}

func (ec *executionContext) unmarshalOWorktagWhereInput2ᚕᚖmazzaᚋentᚐWorktagWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.WorktagWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.WorktagWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNWorktagWhereInput2ᚖmazzaᚋentᚐWorktagWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOWorktagWhereInput2ᚖmazzaᚋentᚐWorktagWhereInput(ctx context.Context, v interface{}) (*ent.WorktagWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputWorktagWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOWorktask2ᚕᚖmazzaᚋentᚐWorktaskᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.Worktask) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWorktask2ᚖmazzaᚋentᚐWorktask(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOWorktask2ᚖmazzaᚋentᚐWorktask(ctx context.Context, sel ast.SelectionSet, v *ent.Worktask) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Worktask(ctx, sel, v)
}

func (ec *executionContext) unmarshalOWorktaskStatus2ᚕmazzaᚋentᚋworktaskᚐStatusᚄ(ctx context.Context, v interface{}) ([]worktask.Status, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]worktask.Status, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNWorktaskStatus2mazzaᚋentᚋworktaskᚐStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOWorktaskStatus2ᚕmazzaᚋentᚋworktaskᚐStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []worktask.Status) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWorktaskStatus2mazzaᚋentᚋworktaskᚐStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOWorktaskStatus2ᚖmazzaᚋentᚋworktaskᚐStatus(ctx context.Context, v interface{}) (*worktask.Status, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(worktask.Status)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOWorktaskStatus2ᚖmazzaᚋentᚋworktaskᚐStatus(ctx context.Context, sel ast.SelectionSet, v *worktask.Status) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOWorktaskWhereInput2ᚕᚖmazzaᚋentᚐWorktaskWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.WorktaskWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.WorktaskWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNWorktaskWhereInput2ᚖmazzaᚋentᚐWorktaskWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOWorktaskWhereInput2ᚖmazzaᚋentᚐWorktaskWhereInput(ctx context.Context, v interface{}) (*ent.WorktaskWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputWorktaskWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
