// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package mazza

import (
	"bytes"
	"context"
	"embed"
	"errors"
	"fmt"
	"mazza/ent/generated"
	"mazza/ent/generated/accountingentry"
	"mazza/ent/generated/companydocument"
	"mazza/ent/generated/employee"
	"mazza/ent/generated/file"
	"mazza/ent/generated/payable"
	"mazza/ent/generated/project"
	"mazza/ent/generated/projecttask"
	"mazza/ent/generated/receivable"
	"mazza/ent/generated/token"
	"mazza/ent/generated/user"
	"mazza/ent/generated/userrole"
	"mazza/ent/generated/workshift"
	"mazza/mazza/generated/model"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	AccountingEntry struct {
		Account     func(childComplexity int) int
		AccountType func(childComplexity int) int
		Amount      func(childComplexity int) int
		Category    func(childComplexity int) int
		Company     func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		Date        func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		Group       func(childComplexity int) int
		ID          func(childComplexity int) int
		IsDebit     func(childComplexity int) int
		IsReversal  func(childComplexity int) int
		Label       func(childComplexity int) int
		Number      func(childComplexity int) int
		Reversed    func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		User        func(childComplexity int) int
	}

	AccountingEntryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	AccountingEntryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	AgingBucket struct {
		Count       func(childComplexity int) int
		Range       func(childComplexity int) int
		TotalAmount func(childComplexity int) int
	}

	Assets struct {
		CurrentAssets      func(childComplexity int) int
		FixedAssets        func(childComplexity int) int
		TotalAssets        func(childComplexity int) int
		TotalCurrentAssets func(childComplexity int) int
		TotalFixedAssets   func(childComplexity int) int
	}

	BalanceSheetOuput struct {
		Assets                  func(childComplexity int) int
		Equity                  func(childComplexity int) int
		IsProvisional           func(childComplexity int) int
		Liabilities             func(childComplexity int) int
		Period                  func(childComplexity int) int
		TotalLiabilityAndEquity func(childComplexity int) int
	}

	Company struct {
		AccountingEntries func(childComplexity int) int
		Address           func(childComplexity int) int
		AvailableRoles    func(childComplexity int) int
		BaseCurrency      func(childComplexity int) int
		CeoName           func(childComplexity int) int
		City              func(childComplexity int) int
		Country           func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		Customers         func(childComplexity int) int
		DaughterCompanies func(childComplexity int) int
		DeletedAt         func(childComplexity int) int
		Description       func(childComplexity int) int
		Documents         func(childComplexity int) int
		Email             func(childComplexity int) int
		Employees         func(childComplexity int) int
		EstablishedAt     func(childComplexity int) int
		Files             func(childComplexity int) int
		ID                func(childComplexity int) int
		IncompleteSetup   func(childComplexity int) int
		Industry          func(childComplexity int) int
		LastEntryDate     func(childComplexity int) int
		LastInvoiceNumber func(childComplexity int) int
		Logo              func(childComplexity int) int
		Name              func(childComplexity int) int
		NumberOfEmployees func(childComplexity int) int
		ParentCompany     func(childComplexity int) int
		Payables          func(childComplexity int) int
		Phone             func(childComplexity int) int
		Products          func(childComplexity int) int
		Projects          func(childComplexity int) int
		Receivables       func(childComplexity int) int
		Sector            func(childComplexity int) int
		Suppliers         func(childComplexity int) int
		TaxId             func(childComplexity int) int
		Tokens            func(childComplexity int) int
		Treasuries        func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		Users             func(childComplexity int) int
		VatRate           func(childComplexity int) int
		Website           func(childComplexity int) int
		WorkShifts        func(childComplexity int) int
	}

	CompanyDocument struct {
		ApprovedBy func(childComplexity int) int
		Category   func(childComplexity int) int
		Company    func(childComplexity int) int
		CreatedAt  func(childComplexity int) int
		DeletedAt  func(childComplexity int) int
		ExpiryDate func(childComplexity int) int
		FileType   func(childComplexity int) int
		Filename   func(childComplexity int) int
		ID         func(childComplexity int) int
		Keywords   func(childComplexity int) int
		Size       func(childComplexity int) int
		Status     func(childComplexity int) int
		Thumbnail  func(childComplexity int) int
		Title      func(childComplexity int) int
		URL        func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
		UploadedBy func(childComplexity int) int
	}

	CompanyDocumentConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CompanyDocumentEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Customer struct {
		Address     func(childComplexity int) int
		City        func(childComplexity int) int
		Company     func(childComplexity int) int
		Country     func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		Email       func(childComplexity int) int
		ID          func(childComplexity int) int
		IsDefault   func(childComplexity int) int
		Name        func(childComplexity int) int
		Phone       func(childComplexity int) int
		Receivables func(childComplexity int) int
		TaxId       func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	CustomerAggregationOutput struct {
		Company func(childComplexity int) int
		Count   func(childComplexity int) int
	}

	DocumentCount struct {
		Category func(childComplexity int) int
		Count    func(childComplexity int) int
	}

	Employee struct {
		Company   func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		Email     func(childComplexity int) int
		Gender    func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Phone     func(childComplexity int) int
		Position  func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		User      func(childComplexity int) int
	}

	Equity struct {
		Equity      func(childComplexity int) int
		TotalEquity func(childComplexity int) int
	}

	ExpensesBreakdownOutput struct {
		Amount func(childComplexity int) int
		Name   func(childComplexity int) int
	}

	File struct {
		Category    func(childComplexity int) int
		Company     func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		Extension   func(childComplexity int) int
		ID          func(childComplexity int) int
		Size        func(childComplexity int) int
		URL         func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	FileConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	FileDetailsOutput struct {
		File    func(childComplexity int) int
		Message func(childComplexity int) int
	}

	FileEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	FileOutput struct {
		Data     func(childComplexity int) int
		Encoding func(childComplexity int) int
		Kind     func(childComplexity int) int
		Name     func(childComplexity int) int
	}

	IncomeStatementOuput struct {
		EarningsBeforeTax func(childComplexity int) int
		Expenses          func(childComplexity int) int
		IsProvisional     func(childComplexity int) int
		NetIncome         func(childComplexity int) int
		NetRevenue        func(childComplexity int) int
		Period            func(childComplexity int) int
		Revenues          func(childComplexity int) int
		TaxExpense        func(childComplexity int) int
		TotalExpenses     func(childComplexity int) int
	}

	InvoiceIssuanceOutput struct {
		FileURL func(childComplexity int) int
		Message func(childComplexity int) int
	}

	Liabilities struct {
		CurrentLiabilities         func(childComplexity int) int
		NonCurrentLiabilities      func(childComplexity int) int
		TotalCurrentLiabilities    func(childComplexity int) int
		TotalLiabilities           func(childComplexity int) int
		TotalNonCurrentLiabilities func(childComplexity int) int
	}

	LoginOutput struct {
		AccessToken  func(childComplexity int) int
		Companies    func(childComplexity int) int
		CompanyID    func(childComplexity int) int
		RefreshToken func(childComplexity int) int
		TTL          func(childComplexity int) int
		User         func(childComplexity int) int
	}

	Mutation struct {
		CreateCompany             func(childComplexity int, input *generated.CreateCompanyInput) int
		CreateCustomer            func(childComplexity int, input generated.CreateCustomerInput) int
		CreateEmployee            func(childComplexity int, input generated.CreateEmployeeInput) int
		CreateProduct             func(childComplexity int, input generated.CreateProductInput) int
		CreateProject             func(childComplexity int, input generated.CreateProjectInput) int
		CreateProjectMilestone    func(childComplexity int, input generated.CreateProjectMilestoneInput) int
		CreateProjectTask         func(childComplexity int, input generated.CreateProjectTaskInput) int
		CreateSupplier            func(childComplexity int, input generated.CreateSupplierInput) int
		CreateTreasury            func(childComplexity int, input generated.CreateTreasuryInput) int
		CreateUser                func(childComplexity int, input generated.CreateUserInput) int
		CreateUserRole            func(childComplexity int, input generated.CreateUserRoleInput) int
		CreateWorkShift           func(childComplexity int, input generated.CreateWorkshiftInput) int
		DeleteCustomer            func(childComplexity int, id int) int
		DeleteDocuments           func(childComplexity int, ids []int) int
		DeleteEmployee            func(childComplexity int, id int) int
		DeleteProduct             func(childComplexity int, id int) int
		DeleteProject             func(childComplexity int, id int) int
		DeleteProjectMilestone    func(childComplexity int, id int) int
		DeleteProjectTask         func(childComplexity int, id int) int
		DeleteSupplier            func(childComplexity int, id int) int
		DeleteTreasury            func(childComplexity int, id int) int
		DeleteWorkShift           func(childComplexity int, id int) int
		ForgotPassword            func(childComplexity int, username string) int
		InitialSetup              func(childComplexity int, input model.InitialSetupInput) int
		InvitedUserSignup         func(childComplexity int, input model.InvitedUserSignupInput) int
		IssueInvoice              func(childComplexity int, input model.InvoiceInput) int
		IssueSalesQuotation       func(childComplexity int, input model.SalesQuotationInput) int
		RegisterAccountingEntries func(childComplexity int, input model.BaseEntryRegistrationInput) int
		ResetPassword             func(childComplexity int, input model.ResetPasswordInput) int
		Signup                    func(childComplexity int, input model.SignupInput) int
		Unsubscribe               func(childComplexity int, id int) int
		UpdateCompany             func(childComplexity int, id int, input generated.UpdateCompanyInput) int
		UpdateCustomer            func(childComplexity int, id int, input generated.UpdateCustomerInput) int
		UpdateDocument            func(childComplexity int, id int, input generated.UpdateCompanyDocumentInput) int
		UpdateEmployee            func(childComplexity int, id int, input generated.UpdateEmployeeInput) int
		UpdateProduct             func(childComplexity int, id int, input generated.UpdateProductInput) int
		UpdateProject             func(childComplexity int, id int, input generated.UpdateProjectInput) int
		UpdateProjectMilestone    func(childComplexity int, id int, input generated.UpdateProjectMilestoneInput) int
		UpdateProjectTask         func(childComplexity int, id int, input generated.UpdateProjectTaskInput) int
		UpdateSupplier            func(childComplexity int, id int, input generated.UpdateSupplierInput) int
		UpdateTreasury            func(childComplexity int, id int, input generated.UpdateTreasuryInput) int
		UpdateUser                func(childComplexity int, id int, input generated.UpdateUserInput) int
		UpdateWorkShift           func(childComplexity int, id int, input generated.UpdateWorkshiftInput) int
		UploadDocument            func(childComplexity int, input generated.CreateCompanyDocumentInput) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	Payable struct {
		Company            func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		Date               func(childComplexity int) int
		DeletedAt          func(childComplexity int) int
		DueDate            func(childComplexity int) int
		EntryGroup         func(childComplexity int) int
		ID                 func(childComplexity int) int
		Name               func(childComplexity int) int
		OutstandingBalance func(childComplexity int) int
		Status             func(childComplexity int) int
		TotalTransaction   func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
	}

	PayableConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PayableEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Period struct {
		End   func(childComplexity int) int
		Start func(childComplexity int) int
	}

	Product struct {
		Company   func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Stock     func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	Project struct {
		Company     func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		EndDate     func(childComplexity int) int
		ID          func(childComplexity int) int
		Leader      func(childComplexity int) int
		Milestones  func(childComplexity int) int
		Name        func(childComplexity int) int
		Progress    func(childComplexity int) int
		StartDate   func(childComplexity int) int
		Status      func(childComplexity int) int
		Tasks       func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	ProjectConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ProjectEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ProjectMilestone struct {
		DueDate func(childComplexity int) int
		ID      func(childComplexity int) int
		Name    func(childComplexity int) int
		Project func(childComplexity int) int
	}

	ProjectTask struct {
		Assignee     func(childComplexity int) int
		AssigneeName func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		Description  func(childComplexity int) int
		DueDate      func(childComplexity int) int
		EndDate      func(childComplexity int) int
		ID           func(childComplexity int) int
		Location     func(childComplexity int) int
		Name         func(childComplexity int) int
		Participants func(childComplexity int) int
		Project      func(childComplexity int) int
		StartDate    func(childComplexity int) int
		Status       func(childComplexity int) int
		WorkShifts   func(childComplexity int) int
	}

	ProjectTaskConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ProjectTaskEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Query struct {
		AccountingEntries        func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy []*generated.AccountingEntryOrder, where *generated.AccountingEntryWhereInput) int
		AccountsPayableAging     func(childComplexity int) int
		AccountsReceivableAging  func(childComplexity int) int
		AggregateCustomers       func(childComplexity int, where *generated.CustomerWhereInput, groupBy []model.CustomersGroupBy) int
		AggregateReceivables     func(childComplexity int, where *generated.ReceivableWhereInput, groupBy []model.ReceivablesGroupBy) int
		AggregateTreasury        func(childComplexity int, where *generated.TreasuryWhereInput) int
		AggregateWorkShift       func(childComplexity int, where *generated.WorkshiftWhereInput, groupBy []model.ShiftGroupBy) int
		BalanceSheet             func(childComplexity int, date time.Time) int
		Companies                func(childComplexity int, where *generated.CompanyWhereInput) int
		CompanyDocuments         func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy []*generated.CompanyDocumentOrder, where *generated.CompanyDocumentWhereInput) int
		CountDocuments           func(childComplexity int) int
		Customers                func(childComplexity int, where *generated.CustomerWhereInput) int
		DownloadBalanceSheet     func(childComplexity int, where model.ReportInput) int
		DownloadIncomeStatement  func(childComplexity int, where model.ReportInput) int
		DownloadLedger           func(childComplexity int, where model.LedgerDownloadInput) int
		DownloadTrialBalance     func(childComplexity int, where model.ReportInput) int
		Employees                func(childComplexity int, where *generated.EmployeeWhereInput) int
		ExpensesBreakdown        func(childComplexity int, rangeArg model.TimeRange) int
		Files                    func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *generated.FileOrder, where *generated.FileWhereInput) int
		IncomeStatement          func(childComplexity int, date time.Time) int
		LowStock                 func(childComplexity int, where *generated.ProductWhereInput) int
		Node                     func(childComplexity int, id int) int
		Nodes                    func(childComplexity int, ids []int) int
		NumberOfLowStock         func(childComplexity int, where *generated.ProductWhereInput) int
		NumberOfOutOfStock       func(childComplexity int, where *generated.ProductWhereInput) int
		NumberOfProducts         func(childComplexity int, where *generated.ProductWhereInput) int
		Payables                 func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy []*generated.PayableOrder, where *generated.PayableWhereInput) int
		Products                 func(childComplexity int, where *generated.ProductWhereInput) int
		ProjectTasks             func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy []*generated.ProjectTaskOrder, where *generated.ProjectTaskWhereInput) int
		Projects                 func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy []*generated.ProjectOrder, where *generated.ProjectWhereInput) int
		Receivables              func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy []*generated.ReceivableOrder, where *generated.ReceivableWhereInput) int
		RetrieveProject          func(childComplexity int, id int) int
		RetrieveProjectTask      func(childComplexity int, id int) int
		RevenueTrend             func(childComplexity int, rangeArg model.TimeRange) int
		Suppliers                func(childComplexity int, where *generated.SupplierWhereInput) int
		Tokens                   func(childComplexity int) int
		Treasuries               func(childComplexity int, where *generated.TreasuryWhereInput) int
		TrialBalance             func(childComplexity int, date time.Time) int
		UserRoles                func(childComplexity int, where *generated.UserRoleWhereInput) int
		Users                    func(childComplexity int, where *generated.UserWhereInput) int
		VerifyPasswordResetToken func(childComplexity int, token string) int
		WorkShifts               func(childComplexity int, where *generated.WorkshiftWhereInput) int
		Workshifts               func(childComplexity int) int
	}

	Receivable struct {
		Company            func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		Date               func(childComplexity int) int
		DeletedAt          func(childComplexity int) int
		DueDate            func(childComplexity int) int
		EntryGroup         func(childComplexity int) int
		ID                 func(childComplexity int) int
		Name               func(childComplexity int) int
		OutstandingBalance func(childComplexity int) int
		Status             func(childComplexity int) int
		TotalTransaction   func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
	}

	ReceivableAggregationOutput struct {
		Company func(childComplexity int) int
		Count   func(childComplexity int) int
		Sum     func(childComplexity int) int
	}

	ReceivableConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ReceivableEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ReportRowItem struct {
		Account func(childComplexity int) int
		Label   func(childComplexity int) int
		Value   func(childComplexity int) int
	}

	RevenueTrendOutput struct {
		Amount func(childComplexity int) int
		Date   func(childComplexity int) int
	}

	Supplier struct {
		Address     func(childComplexity int) int
		City        func(childComplexity int) int
		Company     func(childComplexity int) int
		Country     func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		Email       func(childComplexity int) int
		ID          func(childComplexity int) int
		IsDefault   func(childComplexity int) int
		Name        func(childComplexity int) int
		Payables    func(childComplexity int) int
		Phone       func(childComplexity int) int
		TaxId       func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	Token struct {
		Category func(childComplexity int) int
		Company  func(childComplexity int) int
		Expiry   func(childComplexity int) int
		ID       func(childComplexity int) int
		Token    func(childComplexity int) int
		User     func(childComplexity int) int
	}

	Treasury struct {
		Balance   func(childComplexity int) int
		Company   func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	TreasuryAggregatePayload struct {
		CompanyID    func(childComplexity int) int
		Count        func(childComplexity int) int
		TotalBalance func(childComplexity int) int
	}

	TrialBalanceRowItem struct {
		Account func(childComplexity int) int
		Balance func(childComplexity int) int
		Credit  func(childComplexity int) int
		Debit   func(childComplexity int) int
		Label   func(childComplexity int) int
	}

	User struct {
		AccountingEntries        func(childComplexity int) int
		ApprovedDocuments        func(childComplexity int) int
		ApprovedWorkShifts       func(childComplexity int) int
		AssignedProjectTasks     func(childComplexity int) int
		AssignedRoles            func(childComplexity int) int
		Birthdate                func(childComplexity int) int
		Company                  func(childComplexity int) int
		CreatedAt                func(childComplexity int) int
		CreatedProjects          func(childComplexity int) int
		CreatedTasks             func(childComplexity int) int
		DeletedAt                func(childComplexity int) int
		Disabled                 func(childComplexity int) int
		Email                    func(childComplexity int) int
		Employee                 func(childComplexity int) int
		Gender                   func(childComplexity int) int
		ID                       func(childComplexity int) int
		Leader                   func(childComplexity int) int
		LeaderedProjects         func(childComplexity int) int
		Name                     func(childComplexity int) int
		NotVerified              func(childComplexity int) int
		ParticipatedProjectTasks func(childComplexity int) int
		Phone                    func(childComplexity int) int
		Subordinates             func(childComplexity int) int
		Tokens                   func(childComplexity int) int
		UpdatedAt                func(childComplexity int) int
		UploadedDocuments        func(childComplexity int) int
		WorkShifts               func(childComplexity int) int
	}

	UserRole struct {
		Company func(childComplexity int) int
		ID      func(childComplexity int) int
		Role    func(childComplexity int) int
		User    func(childComplexity int) int
	}

	WorkShiftAggregationPayload struct {
		Count             func(childComplexity int) int
		Date              func(childComplexity int) int
		DurationInMinutes func(childComplexity int) int
		PendingCount      func(childComplexity int) int
	}

	Workshift struct {
		ApprovedAt       func(childComplexity int) int
		ApprovedBy       func(childComplexity int) int
		ClockIn          func(childComplexity int) int
		ClockInLocation  func(childComplexity int) int
		ClockOut         func(childComplexity int) int
		ClockOutLocation func(childComplexity int) int
		Company          func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		DeletedAt        func(childComplexity int) int
		Description      func(childComplexity int) int
		EditRequest      func(childComplexity int) int
		ID               func(childComplexity int) int
		Note             func(childComplexity int) int
		Status           func(childComplexity int) int
		Task             func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
		User             func(childComplexity int) int
		WorkShift        func(childComplexity int) int
	}
}

type MutationResolver interface {
	Signup(ctx context.Context, input model.SignupInput) (*model.LoginOutput, error)
	CreateCompany(ctx context.Context, input *generated.CreateCompanyInput) (*generated.Company, error)
	UpdateCompany(ctx context.Context, id int, input generated.UpdateCompanyInput) (*generated.Company, error)
	InvitedUserSignup(ctx context.Context, input model.InvitedUserSignupInput) (*generated.User, error)
	CreateUser(ctx context.Context, input generated.CreateUserInput) (*generated.User, error)
	UpdateUser(ctx context.Context, id int, input generated.UpdateUserInput) (*generated.User, error)
	ForgotPassword(ctx context.Context, username string) (string, error)
	ResetPassword(ctx context.Context, input model.ResetPasswordInput) (bool, error)
	Unsubscribe(ctx context.Context, id int) (bool, error)
	CreateUserRole(ctx context.Context, input generated.CreateUserRoleInput) (bool, error)
	CreateCustomer(ctx context.Context, input generated.CreateCustomerInput) (*generated.Customer, error)
	UpdateCustomer(ctx context.Context, id int, input generated.UpdateCustomerInput) (*generated.Customer, error)
	DeleteCustomer(ctx context.Context, id int) (bool, error)
	CreateEmployee(ctx context.Context, input generated.CreateEmployeeInput) (*generated.Employee, error)
	UpdateEmployee(ctx context.Context, id int, input generated.UpdateEmployeeInput) (*generated.Employee, error)
	DeleteEmployee(ctx context.Context, id int) (bool, error)
	CreateProduct(ctx context.Context, input generated.CreateProductInput) (*generated.Product, error)
	UpdateProduct(ctx context.Context, id int, input generated.UpdateProductInput) (*generated.Product, error)
	DeleteProduct(ctx context.Context, id int) (bool, error)
	CreateProject(ctx context.Context, input generated.CreateProjectInput) (*generated.Project, error)
	UpdateProject(ctx context.Context, id int, input generated.UpdateProjectInput) (*generated.Project, error)
	DeleteProject(ctx context.Context, id int) (bool, error)
	CreateProjectTask(ctx context.Context, input generated.CreateProjectTaskInput) (*generated.ProjectTask, error)
	UpdateProjectTask(ctx context.Context, id int, input generated.UpdateProjectTaskInput) (*generated.ProjectTask, error)
	DeleteProjectTask(ctx context.Context, id int) (bool, error)
	CreateProjectMilestone(ctx context.Context, input generated.CreateProjectMilestoneInput) (*generated.ProjectMilestone, error)
	UpdateProjectMilestone(ctx context.Context, id int, input generated.UpdateProjectMilestoneInput) (*generated.ProjectMilestone, error)
	DeleteProjectMilestone(ctx context.Context, id int) (bool, error)
	CreateSupplier(ctx context.Context, input generated.CreateSupplierInput) (*generated.Supplier, error)
	UpdateSupplier(ctx context.Context, id int, input generated.UpdateSupplierInput) (*generated.Supplier, error)
	DeleteSupplier(ctx context.Context, id int) (bool, error)
	CreateTreasury(ctx context.Context, input generated.CreateTreasuryInput) (*generated.Treasury, error)
	UpdateTreasury(ctx context.Context, id int, input generated.UpdateTreasuryInput) (*generated.Treasury, error)
	DeleteTreasury(ctx context.Context, id int) (bool, error)
	CreateWorkShift(ctx context.Context, input generated.CreateWorkshiftInput) (*generated.Workshift, error)
	UpdateWorkShift(ctx context.Context, id int, input generated.UpdateWorkshiftInput) (*generated.Workshift, error)
	DeleteWorkShift(ctx context.Context, id int) (bool, error)
	IssueSalesQuotation(ctx context.Context, input model.SalesQuotationInput) (*model.InvoiceIssuanceOutput, error)
	IssueInvoice(ctx context.Context, input model.InvoiceInput) (*model.InvoiceIssuanceOutput, error)
	RegisterAccountingEntries(ctx context.Context, input model.BaseEntryRegistrationInput) (*string, error)
	InitialSetup(ctx context.Context, input model.InitialSetupInput) (*string, error)
	UploadDocument(ctx context.Context, input generated.CreateCompanyDocumentInput) (*generated.CompanyDocument, error)
	UpdateDocument(ctx context.Context, id int, input generated.UpdateCompanyDocumentInput) (*generated.CompanyDocument, error)
	DeleteDocuments(ctx context.Context, ids []int) (*string, error)
}
type QueryResolver interface {
	Node(ctx context.Context, id int) (generated.Noder, error)
	Nodes(ctx context.Context, ids []int) ([]generated.Noder, error)
	AccountingEntries(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy []*generated.AccountingEntryOrder, where *generated.AccountingEntryWhereInput) (*generated.AccountingEntryConnection, error)
	CompanyDocuments(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy []*generated.CompanyDocumentOrder, where *generated.CompanyDocumentWhereInput) (*generated.CompanyDocumentConnection, error)
	Files(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *generated.FileOrder, where *generated.FileWhereInput) (*generated.FileConnection, error)
	Payables(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy []*generated.PayableOrder, where *generated.PayableWhereInput) (*generated.PayableConnection, error)
	Projects(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy []*generated.ProjectOrder, where *generated.ProjectWhereInput) (*generated.ProjectConnection, error)
	ProjectTasks(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy []*generated.ProjectTaskOrder, where *generated.ProjectTaskWhereInput) (*generated.ProjectTaskConnection, error)
	Receivables(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy []*generated.ReceivableOrder, where *generated.ReceivableWhereInput) (*generated.ReceivableConnection, error)
	Tokens(ctx context.Context) ([]*generated.Token, error)
	Workshifts(ctx context.Context) ([]*generated.Workshift, error)
	TrialBalance(ctx context.Context, date time.Time) ([]*model.TrialBalanceRowItem, error)
	IncomeStatement(ctx context.Context, date time.Time) (*model.IncomeStatementOuput, error)
	BalanceSheet(ctx context.Context, date time.Time) (*model.BalanceSheetOuput, error)
	DownloadLedger(ctx context.Context, where model.LedgerDownloadInput) (*model.FileDetailsOutput, error)
	DownloadTrialBalance(ctx context.Context, where model.ReportInput) (*model.FileDetailsOutput, error)
	DownloadIncomeStatement(ctx context.Context, where model.ReportInput) (*model.FileDetailsOutput, error)
	DownloadBalanceSheet(ctx context.Context, where model.ReportInput) (*model.FileDetailsOutput, error)
	ExpensesBreakdown(ctx context.Context, rangeArg model.TimeRange) ([]*model.ExpensesBreakdownOutput, error)
	RevenueTrend(ctx context.Context, rangeArg model.TimeRange) ([]*model.RevenueTrendOutput, error)
	VerifyPasswordResetToken(ctx context.Context, token string) (bool, error)
	Companies(ctx context.Context, where *generated.CompanyWhereInput) ([]*generated.Company, error)
	Customers(ctx context.Context, where *generated.CustomerWhereInput) ([]*generated.Customer, error)
	AggregateCustomers(ctx context.Context, where *generated.CustomerWhereInput, groupBy []model.CustomersGroupBy) ([]*model.CustomerAggregationOutput, error)
	AggregateReceivables(ctx context.Context, where *generated.ReceivableWhereInput, groupBy []model.ReceivablesGroupBy) ([]*model.ReceivableAggregationOutput, error)
	AccountsReceivableAging(ctx context.Context) ([]*model.AgingBucket, error)
	AccountsPayableAging(ctx context.Context) ([]*model.AgingBucket, error)
	Employees(ctx context.Context, where *generated.EmployeeWhereInput) ([]*generated.Employee, error)
	Products(ctx context.Context, where *generated.ProductWhereInput) ([]*generated.Product, error)
	LowStock(ctx context.Context, where *generated.ProductWhereInput) ([]*generated.Product, error)
	NumberOfProducts(ctx context.Context, where *generated.ProductWhereInput) (int, error)
	NumberOfLowStock(ctx context.Context, where *generated.ProductWhereInput) (int, error)
	NumberOfOutOfStock(ctx context.Context, where *generated.ProductWhereInput) (int, error)
	RetrieveProject(ctx context.Context, id int) (*generated.Project, error)
	RetrieveProjectTask(ctx context.Context, id int) (*generated.ProjectTask, error)
	Suppliers(ctx context.Context, where *generated.SupplierWhereInput) ([]*generated.Supplier, error)
	Treasuries(ctx context.Context, where *generated.TreasuryWhereInput) ([]*generated.Treasury, error)
	AggregateTreasury(ctx context.Context, where *generated.TreasuryWhereInput) ([]*model.TreasuryAggregatePayload, error)
	Users(ctx context.Context, where *generated.UserWhereInput) ([]*generated.User, error)
	UserRoles(ctx context.Context, where *generated.UserRoleWhereInput) ([]*generated.UserRole, error)
	WorkShifts(ctx context.Context, where *generated.WorkshiftWhereInput) ([]*generated.Workshift, error)
	AggregateWorkShift(ctx context.Context, where *generated.WorkshiftWhereInput, groupBy []model.ShiftGroupBy) ([]*model.WorkShiftAggregationPayload, error)
	CountDocuments(ctx context.Context) ([]*model.DocumentCount, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "AccountingEntry.account":
		if e.complexity.AccountingEntry.Account == nil {
			break
		}

		return e.complexity.AccountingEntry.Account(childComplexity), true

	case "AccountingEntry.accounttype":
		if e.complexity.AccountingEntry.AccountType == nil {
			break
		}

		return e.complexity.AccountingEntry.AccountType(childComplexity), true

	case "AccountingEntry.amount":
		if e.complexity.AccountingEntry.Amount == nil {
			break
		}

		return e.complexity.AccountingEntry.Amount(childComplexity), true

	case "AccountingEntry.category":
		if e.complexity.AccountingEntry.Category == nil {
			break
		}

		return e.complexity.AccountingEntry.Category(childComplexity), true

	case "AccountingEntry.company":
		if e.complexity.AccountingEntry.Company == nil {
			break
		}

		return e.complexity.AccountingEntry.Company(childComplexity), true

	case "AccountingEntry.createdat":
		if e.complexity.AccountingEntry.CreatedAt == nil {
			break
		}

		return e.complexity.AccountingEntry.CreatedAt(childComplexity), true

	case "AccountingEntry.date":
		if e.complexity.AccountingEntry.Date == nil {
			break
		}

		return e.complexity.AccountingEntry.Date(childComplexity), true

	case "AccountingEntry.deletedat":
		if e.complexity.AccountingEntry.DeletedAt == nil {
			break
		}

		return e.complexity.AccountingEntry.DeletedAt(childComplexity), true

	case "AccountingEntry.description":
		if e.complexity.AccountingEntry.Description == nil {
			break
		}

		return e.complexity.AccountingEntry.Description(childComplexity), true

	case "AccountingEntry.group":
		if e.complexity.AccountingEntry.Group == nil {
			break
		}

		return e.complexity.AccountingEntry.Group(childComplexity), true

	case "AccountingEntry.id":
		if e.complexity.AccountingEntry.ID == nil {
			break
		}

		return e.complexity.AccountingEntry.ID(childComplexity), true

	case "AccountingEntry.isdebit":
		if e.complexity.AccountingEntry.IsDebit == nil {
			break
		}

		return e.complexity.AccountingEntry.IsDebit(childComplexity), true

	case "AccountingEntry.isreversal":
		if e.complexity.AccountingEntry.IsReversal == nil {
			break
		}

		return e.complexity.AccountingEntry.IsReversal(childComplexity), true

	case "AccountingEntry.label":
		if e.complexity.AccountingEntry.Label == nil {
			break
		}

		return e.complexity.AccountingEntry.Label(childComplexity), true

	case "AccountingEntry.number":
		if e.complexity.AccountingEntry.Number == nil {
			break
		}

		return e.complexity.AccountingEntry.Number(childComplexity), true

	case "AccountingEntry.reversed":
		if e.complexity.AccountingEntry.Reversed == nil {
			break
		}

		return e.complexity.AccountingEntry.Reversed(childComplexity), true

	case "AccountingEntry.updatedat":
		if e.complexity.AccountingEntry.UpdatedAt == nil {
			break
		}

		return e.complexity.AccountingEntry.UpdatedAt(childComplexity), true

	case "AccountingEntry.user":
		if e.complexity.AccountingEntry.User == nil {
			break
		}

		return e.complexity.AccountingEntry.User(childComplexity), true

	case "AccountingEntryConnection.edges":
		if e.complexity.AccountingEntryConnection.Edges == nil {
			break
		}

		return e.complexity.AccountingEntryConnection.Edges(childComplexity), true

	case "AccountingEntryConnection.pageInfo":
		if e.complexity.AccountingEntryConnection.PageInfo == nil {
			break
		}

		return e.complexity.AccountingEntryConnection.PageInfo(childComplexity), true

	case "AccountingEntryConnection.totalCount":
		if e.complexity.AccountingEntryConnection.TotalCount == nil {
			break
		}

		return e.complexity.AccountingEntryConnection.TotalCount(childComplexity), true

	case "AccountingEntryEdge.cursor":
		if e.complexity.AccountingEntryEdge.Cursor == nil {
			break
		}

		return e.complexity.AccountingEntryEdge.Cursor(childComplexity), true

	case "AccountingEntryEdge.node":
		if e.complexity.AccountingEntryEdge.Node == nil {
			break
		}

		return e.complexity.AccountingEntryEdge.Node(childComplexity), true

	case "AgingBucket.count":
		if e.complexity.AgingBucket.Count == nil {
			break
		}

		return e.complexity.AgingBucket.Count(childComplexity), true

	case "AgingBucket.range":
		if e.complexity.AgingBucket.Range == nil {
			break
		}

		return e.complexity.AgingBucket.Range(childComplexity), true

	case "AgingBucket.totalAmount":
		if e.complexity.AgingBucket.TotalAmount == nil {
			break
		}

		return e.complexity.AgingBucket.TotalAmount(childComplexity), true

	case "Assets.currentAssets":
		if e.complexity.Assets.CurrentAssets == nil {
			break
		}

		return e.complexity.Assets.CurrentAssets(childComplexity), true

	case "Assets.fixedAssets":
		if e.complexity.Assets.FixedAssets == nil {
			break
		}

		return e.complexity.Assets.FixedAssets(childComplexity), true

	case "Assets.totalAssets":
		if e.complexity.Assets.TotalAssets == nil {
			break
		}

		return e.complexity.Assets.TotalAssets(childComplexity), true

	case "Assets.totalCurrentAssets":
		if e.complexity.Assets.TotalCurrentAssets == nil {
			break
		}

		return e.complexity.Assets.TotalCurrentAssets(childComplexity), true

	case "Assets.totalFixedAssets":
		if e.complexity.Assets.TotalFixedAssets == nil {
			break
		}

		return e.complexity.Assets.TotalFixedAssets(childComplexity), true

	case "BalanceSheetOuput.assets":
		if e.complexity.BalanceSheetOuput.Assets == nil {
			break
		}

		return e.complexity.BalanceSheetOuput.Assets(childComplexity), true

	case "BalanceSheetOuput.equity":
		if e.complexity.BalanceSheetOuput.Equity == nil {
			break
		}

		return e.complexity.BalanceSheetOuput.Equity(childComplexity), true

	case "BalanceSheetOuput.isProvisional":
		if e.complexity.BalanceSheetOuput.IsProvisional == nil {
			break
		}

		return e.complexity.BalanceSheetOuput.IsProvisional(childComplexity), true

	case "BalanceSheetOuput.liabilities":
		if e.complexity.BalanceSheetOuput.Liabilities == nil {
			break
		}

		return e.complexity.BalanceSheetOuput.Liabilities(childComplexity), true

	case "BalanceSheetOuput.period":
		if e.complexity.BalanceSheetOuput.Period == nil {
			break
		}

		return e.complexity.BalanceSheetOuput.Period(childComplexity), true

	case "BalanceSheetOuput.totalLiabilityAndEquity":
		if e.complexity.BalanceSheetOuput.TotalLiabilityAndEquity == nil {
			break
		}

		return e.complexity.BalanceSheetOuput.TotalLiabilityAndEquity(childComplexity), true

	case "Company.accountingentries":
		if e.complexity.Company.AccountingEntries == nil {
			break
		}

		return e.complexity.Company.AccountingEntries(childComplexity), true

	case "Company.address":
		if e.complexity.Company.Address == nil {
			break
		}

		return e.complexity.Company.Address(childComplexity), true

	case "Company.availableroles":
		if e.complexity.Company.AvailableRoles == nil {
			break
		}

		return e.complexity.Company.AvailableRoles(childComplexity), true

	case "Company.basecurrency":
		if e.complexity.Company.BaseCurrency == nil {
			break
		}

		return e.complexity.Company.BaseCurrency(childComplexity), true

	case "Company.ceoname":
		if e.complexity.Company.CeoName == nil {
			break
		}

		return e.complexity.Company.CeoName(childComplexity), true

	case "Company.city":
		if e.complexity.Company.City == nil {
			break
		}

		return e.complexity.Company.City(childComplexity), true

	case "Company.country":
		if e.complexity.Company.Country == nil {
			break
		}

		return e.complexity.Company.Country(childComplexity), true

	case "Company.createdat":
		if e.complexity.Company.CreatedAt == nil {
			break
		}

		return e.complexity.Company.CreatedAt(childComplexity), true

	case "Company.customers":
		if e.complexity.Company.Customers == nil {
			break
		}

		return e.complexity.Company.Customers(childComplexity), true

	case "Company.daughtercompanies":
		if e.complexity.Company.DaughterCompanies == nil {
			break
		}

		return e.complexity.Company.DaughterCompanies(childComplexity), true

	case "Company.deletedat":
		if e.complexity.Company.DeletedAt == nil {
			break
		}

		return e.complexity.Company.DeletedAt(childComplexity), true

	case "Company.description":
		if e.complexity.Company.Description == nil {
			break
		}

		return e.complexity.Company.Description(childComplexity), true

	case "Company.documents":
		if e.complexity.Company.Documents == nil {
			break
		}

		return e.complexity.Company.Documents(childComplexity), true

	case "Company.email":
		if e.complexity.Company.Email == nil {
			break
		}

		return e.complexity.Company.Email(childComplexity), true

	case "Company.employees":
		if e.complexity.Company.Employees == nil {
			break
		}

		return e.complexity.Company.Employees(childComplexity), true

	case "Company.establishedat":
		if e.complexity.Company.EstablishedAt == nil {
			break
		}

		return e.complexity.Company.EstablishedAt(childComplexity), true

	case "Company.files":
		if e.complexity.Company.Files == nil {
			break
		}

		return e.complexity.Company.Files(childComplexity), true

	case "Company.id":
		if e.complexity.Company.ID == nil {
			break
		}

		return e.complexity.Company.ID(childComplexity), true

	case "Company.incompletesetup":
		if e.complexity.Company.IncompleteSetup == nil {
			break
		}

		return e.complexity.Company.IncompleteSetup(childComplexity), true

	case "Company.industry":
		if e.complexity.Company.Industry == nil {
			break
		}

		return e.complexity.Company.Industry(childComplexity), true

	case "Company.lastentrydate":
		if e.complexity.Company.LastEntryDate == nil {
			break
		}

		return e.complexity.Company.LastEntryDate(childComplexity), true

	case "Company.lastinvoicenumber":
		if e.complexity.Company.LastInvoiceNumber == nil {
			break
		}

		return e.complexity.Company.LastInvoiceNumber(childComplexity), true

	case "Company.logo":
		if e.complexity.Company.Logo == nil {
			break
		}

		return e.complexity.Company.Logo(childComplexity), true

	case "Company.name":
		if e.complexity.Company.Name == nil {
			break
		}

		return e.complexity.Company.Name(childComplexity), true

	case "Company.numberofemployees":
		if e.complexity.Company.NumberOfEmployees == nil {
			break
		}

		return e.complexity.Company.NumberOfEmployees(childComplexity), true

	case "Company.parentcompany":
		if e.complexity.Company.ParentCompany == nil {
			break
		}

		return e.complexity.Company.ParentCompany(childComplexity), true

	case "Company.payables":
		if e.complexity.Company.Payables == nil {
			break
		}

		return e.complexity.Company.Payables(childComplexity), true

	case "Company.phone":
		if e.complexity.Company.Phone == nil {
			break
		}

		return e.complexity.Company.Phone(childComplexity), true

	case "Company.products":
		if e.complexity.Company.Products == nil {
			break
		}

		return e.complexity.Company.Products(childComplexity), true

	case "Company.projects":
		if e.complexity.Company.Projects == nil {
			break
		}

		return e.complexity.Company.Projects(childComplexity), true

	case "Company.receivables":
		if e.complexity.Company.Receivables == nil {
			break
		}

		return e.complexity.Company.Receivables(childComplexity), true

	case "Company.sector":
		if e.complexity.Company.Sector == nil {
			break
		}

		return e.complexity.Company.Sector(childComplexity), true

	case "Company.suppliers":
		if e.complexity.Company.Suppliers == nil {
			break
		}

		return e.complexity.Company.Suppliers(childComplexity), true

	case "Company.taxid":
		if e.complexity.Company.TaxId == nil {
			break
		}

		return e.complexity.Company.TaxId(childComplexity), true

	case "Company.tokens":
		if e.complexity.Company.Tokens == nil {
			break
		}

		return e.complexity.Company.Tokens(childComplexity), true

	case "Company.treasuries":
		if e.complexity.Company.Treasuries == nil {
			break
		}

		return e.complexity.Company.Treasuries(childComplexity), true

	case "Company.updatedat":
		if e.complexity.Company.UpdatedAt == nil {
			break
		}

		return e.complexity.Company.UpdatedAt(childComplexity), true

	case "Company.users":
		if e.complexity.Company.Users == nil {
			break
		}

		return e.complexity.Company.Users(childComplexity), true

	case "Company.vatrate":
		if e.complexity.Company.VatRate == nil {
			break
		}

		return e.complexity.Company.VatRate(childComplexity), true

	case "Company.website":
		if e.complexity.Company.Website == nil {
			break
		}

		return e.complexity.Company.Website(childComplexity), true

	case "Company.workshifts":
		if e.complexity.Company.WorkShifts == nil {
			break
		}

		return e.complexity.Company.WorkShifts(childComplexity), true

	case "CompanyDocument.approvedby":
		if e.complexity.CompanyDocument.ApprovedBy == nil {
			break
		}

		return e.complexity.CompanyDocument.ApprovedBy(childComplexity), true

	case "CompanyDocument.category":
		if e.complexity.CompanyDocument.Category == nil {
			break
		}

		return e.complexity.CompanyDocument.Category(childComplexity), true

	case "CompanyDocument.company":
		if e.complexity.CompanyDocument.Company == nil {
			break
		}

		return e.complexity.CompanyDocument.Company(childComplexity), true

	case "CompanyDocument.createdat":
		if e.complexity.CompanyDocument.CreatedAt == nil {
			break
		}

		return e.complexity.CompanyDocument.CreatedAt(childComplexity), true

	case "CompanyDocument.deletedat":
		if e.complexity.CompanyDocument.DeletedAt == nil {
			break
		}

		return e.complexity.CompanyDocument.DeletedAt(childComplexity), true

	case "CompanyDocument.expirydate":
		if e.complexity.CompanyDocument.ExpiryDate == nil {
			break
		}

		return e.complexity.CompanyDocument.ExpiryDate(childComplexity), true

	case "CompanyDocument.filetype":
		if e.complexity.CompanyDocument.FileType == nil {
			break
		}

		return e.complexity.CompanyDocument.FileType(childComplexity), true

	case "CompanyDocument.filename":
		if e.complexity.CompanyDocument.Filename == nil {
			break
		}

		return e.complexity.CompanyDocument.Filename(childComplexity), true

	case "CompanyDocument.id":
		if e.complexity.CompanyDocument.ID == nil {
			break
		}

		return e.complexity.CompanyDocument.ID(childComplexity), true

	case "CompanyDocument.keywords":
		if e.complexity.CompanyDocument.Keywords == nil {
			break
		}

		return e.complexity.CompanyDocument.Keywords(childComplexity), true

	case "CompanyDocument.size":
		if e.complexity.CompanyDocument.Size == nil {
			break
		}

		return e.complexity.CompanyDocument.Size(childComplexity), true

	case "CompanyDocument.status":
		if e.complexity.CompanyDocument.Status == nil {
			break
		}

		return e.complexity.CompanyDocument.Status(childComplexity), true

	case "CompanyDocument.thumbnail":
		if e.complexity.CompanyDocument.Thumbnail == nil {
			break
		}

		return e.complexity.CompanyDocument.Thumbnail(childComplexity), true

	case "CompanyDocument.title":
		if e.complexity.CompanyDocument.Title == nil {
			break
		}

		return e.complexity.CompanyDocument.Title(childComplexity), true

	case "CompanyDocument.url":
		if e.complexity.CompanyDocument.URL == nil {
			break
		}

		return e.complexity.CompanyDocument.URL(childComplexity), true

	case "CompanyDocument.updatedat":
		if e.complexity.CompanyDocument.UpdatedAt == nil {
			break
		}

		return e.complexity.CompanyDocument.UpdatedAt(childComplexity), true

	case "CompanyDocument.uploadedby":
		if e.complexity.CompanyDocument.UploadedBy == nil {
			break
		}

		return e.complexity.CompanyDocument.UploadedBy(childComplexity), true

	case "CompanyDocumentConnection.edges":
		if e.complexity.CompanyDocumentConnection.Edges == nil {
			break
		}

		return e.complexity.CompanyDocumentConnection.Edges(childComplexity), true

	case "CompanyDocumentConnection.pageInfo":
		if e.complexity.CompanyDocumentConnection.PageInfo == nil {
			break
		}

		return e.complexity.CompanyDocumentConnection.PageInfo(childComplexity), true

	case "CompanyDocumentConnection.totalCount":
		if e.complexity.CompanyDocumentConnection.TotalCount == nil {
			break
		}

		return e.complexity.CompanyDocumentConnection.TotalCount(childComplexity), true

	case "CompanyDocumentEdge.cursor":
		if e.complexity.CompanyDocumentEdge.Cursor == nil {
			break
		}

		return e.complexity.CompanyDocumentEdge.Cursor(childComplexity), true

	case "CompanyDocumentEdge.node":
		if e.complexity.CompanyDocumentEdge.Node == nil {
			break
		}

		return e.complexity.CompanyDocumentEdge.Node(childComplexity), true

	case "Customer.address":
		if e.complexity.Customer.Address == nil {
			break
		}

		return e.complexity.Customer.Address(childComplexity), true

	case "Customer.city":
		if e.complexity.Customer.City == nil {
			break
		}

		return e.complexity.Customer.City(childComplexity), true

	case "Customer.company":
		if e.complexity.Customer.Company == nil {
			break
		}

		return e.complexity.Customer.Company(childComplexity), true

	case "Customer.country":
		if e.complexity.Customer.Country == nil {
			break
		}

		return e.complexity.Customer.Country(childComplexity), true

	case "Customer.createdat":
		if e.complexity.Customer.CreatedAt == nil {
			break
		}

		return e.complexity.Customer.CreatedAt(childComplexity), true

	case "Customer.deletedat":
		if e.complexity.Customer.DeletedAt == nil {
			break
		}

		return e.complexity.Customer.DeletedAt(childComplexity), true

	case "Customer.description":
		if e.complexity.Customer.Description == nil {
			break
		}

		return e.complexity.Customer.Description(childComplexity), true

	case "Customer.email":
		if e.complexity.Customer.Email == nil {
			break
		}

		return e.complexity.Customer.Email(childComplexity), true

	case "Customer.id":
		if e.complexity.Customer.ID == nil {
			break
		}

		return e.complexity.Customer.ID(childComplexity), true

	case "Customer.isdefault":
		if e.complexity.Customer.IsDefault == nil {
			break
		}

		return e.complexity.Customer.IsDefault(childComplexity), true

	case "Customer.name":
		if e.complexity.Customer.Name == nil {
			break
		}

		return e.complexity.Customer.Name(childComplexity), true

	case "Customer.phone":
		if e.complexity.Customer.Phone == nil {
			break
		}

		return e.complexity.Customer.Phone(childComplexity), true

	case "Customer.receivables":
		if e.complexity.Customer.Receivables == nil {
			break
		}

		return e.complexity.Customer.Receivables(childComplexity), true

	case "Customer.taxid":
		if e.complexity.Customer.TaxId == nil {
			break
		}

		return e.complexity.Customer.TaxId(childComplexity), true

	case "Customer.updatedat":
		if e.complexity.Customer.UpdatedAt == nil {
			break
		}

		return e.complexity.Customer.UpdatedAt(childComplexity), true

	case "CustomerAggregationOutput.company":
		if e.complexity.CustomerAggregationOutput.Company == nil {
			break
		}

		return e.complexity.CustomerAggregationOutput.Company(childComplexity), true

	case "CustomerAggregationOutput.count":
		if e.complexity.CustomerAggregationOutput.Count == nil {
			break
		}

		return e.complexity.CustomerAggregationOutput.Count(childComplexity), true

	case "DocumentCount.category":
		if e.complexity.DocumentCount.Category == nil {
			break
		}

		return e.complexity.DocumentCount.Category(childComplexity), true

	case "DocumentCount.count":
		if e.complexity.DocumentCount.Count == nil {
			break
		}

		return e.complexity.DocumentCount.Count(childComplexity), true

	case "Employee.company":
		if e.complexity.Employee.Company == nil {
			break
		}

		return e.complexity.Employee.Company(childComplexity), true

	case "Employee.createdat":
		if e.complexity.Employee.CreatedAt == nil {
			break
		}

		return e.complexity.Employee.CreatedAt(childComplexity), true

	case "Employee.deletedat":
		if e.complexity.Employee.DeletedAt == nil {
			break
		}

		return e.complexity.Employee.DeletedAt(childComplexity), true

	case "Employee.email":
		if e.complexity.Employee.Email == nil {
			break
		}

		return e.complexity.Employee.Email(childComplexity), true

	case "Employee.gender":
		if e.complexity.Employee.Gender == nil {
			break
		}

		return e.complexity.Employee.Gender(childComplexity), true

	case "Employee.id":
		if e.complexity.Employee.ID == nil {
			break
		}

		return e.complexity.Employee.ID(childComplexity), true

	case "Employee.name":
		if e.complexity.Employee.Name == nil {
			break
		}

		return e.complexity.Employee.Name(childComplexity), true

	case "Employee.phone":
		if e.complexity.Employee.Phone == nil {
			break
		}

		return e.complexity.Employee.Phone(childComplexity), true

	case "Employee.position":
		if e.complexity.Employee.Position == nil {
			break
		}

		return e.complexity.Employee.Position(childComplexity), true

	case "Employee.updatedat":
		if e.complexity.Employee.UpdatedAt == nil {
			break
		}

		return e.complexity.Employee.UpdatedAt(childComplexity), true

	case "Employee.user":
		if e.complexity.Employee.User == nil {
			break
		}

		return e.complexity.Employee.User(childComplexity), true

	case "Equity.equity":
		if e.complexity.Equity.Equity == nil {
			break
		}

		return e.complexity.Equity.Equity(childComplexity), true

	case "Equity.totalEquity":
		if e.complexity.Equity.TotalEquity == nil {
			break
		}

		return e.complexity.Equity.TotalEquity(childComplexity), true

	case "ExpensesBreakdownOutput.amount":
		if e.complexity.ExpensesBreakdownOutput.Amount == nil {
			break
		}

		return e.complexity.ExpensesBreakdownOutput.Amount(childComplexity), true

	case "ExpensesBreakdownOutput.name":
		if e.complexity.ExpensesBreakdownOutput.Name == nil {
			break
		}

		return e.complexity.ExpensesBreakdownOutput.Name(childComplexity), true

	case "File.category":
		if e.complexity.File.Category == nil {
			break
		}

		return e.complexity.File.Category(childComplexity), true

	case "File.company":
		if e.complexity.File.Company == nil {
			break
		}

		return e.complexity.File.Company(childComplexity), true

	case "File.createdat":
		if e.complexity.File.CreatedAt == nil {
			break
		}

		return e.complexity.File.CreatedAt(childComplexity), true

	case "File.deletedat":
		if e.complexity.File.DeletedAt == nil {
			break
		}

		return e.complexity.File.DeletedAt(childComplexity), true

	case "File.description":
		if e.complexity.File.Description == nil {
			break
		}

		return e.complexity.File.Description(childComplexity), true

	case "File.extension":
		if e.complexity.File.Extension == nil {
			break
		}

		return e.complexity.File.Extension(childComplexity), true

	case "File.id":
		if e.complexity.File.ID == nil {
			break
		}

		return e.complexity.File.ID(childComplexity), true

	case "File.size":
		if e.complexity.File.Size == nil {
			break
		}

		return e.complexity.File.Size(childComplexity), true

	case "File.url":
		if e.complexity.File.URL == nil {
			break
		}

		return e.complexity.File.URL(childComplexity), true

	case "File.updatedat":
		if e.complexity.File.UpdatedAt == nil {
			break
		}

		return e.complexity.File.UpdatedAt(childComplexity), true

	case "FileConnection.edges":
		if e.complexity.FileConnection.Edges == nil {
			break
		}

		return e.complexity.FileConnection.Edges(childComplexity), true

	case "FileConnection.pageInfo":
		if e.complexity.FileConnection.PageInfo == nil {
			break
		}

		return e.complexity.FileConnection.PageInfo(childComplexity), true

	case "FileConnection.totalCount":
		if e.complexity.FileConnection.TotalCount == nil {
			break
		}

		return e.complexity.FileConnection.TotalCount(childComplexity), true

	case "FileDetailsOutput.file":
		if e.complexity.FileDetailsOutput.File == nil {
			break
		}

		return e.complexity.FileDetailsOutput.File(childComplexity), true

	case "FileDetailsOutput.message":
		if e.complexity.FileDetailsOutput.Message == nil {
			break
		}

		return e.complexity.FileDetailsOutput.Message(childComplexity), true

	case "FileEdge.cursor":
		if e.complexity.FileEdge.Cursor == nil {
			break
		}

		return e.complexity.FileEdge.Cursor(childComplexity), true

	case "FileEdge.node":
		if e.complexity.FileEdge.Node == nil {
			break
		}

		return e.complexity.FileEdge.Node(childComplexity), true

	case "FileOutput.data":
		if e.complexity.FileOutput.Data == nil {
			break
		}

		return e.complexity.FileOutput.Data(childComplexity), true

	case "FileOutput.encoding":
		if e.complexity.FileOutput.Encoding == nil {
			break
		}

		return e.complexity.FileOutput.Encoding(childComplexity), true

	case "FileOutput.kind":
		if e.complexity.FileOutput.Kind == nil {
			break
		}

		return e.complexity.FileOutput.Kind(childComplexity), true

	case "FileOutput.name":
		if e.complexity.FileOutput.Name == nil {
			break
		}

		return e.complexity.FileOutput.Name(childComplexity), true

	case "IncomeStatementOuput.earningsBeforeTax":
		if e.complexity.IncomeStatementOuput.EarningsBeforeTax == nil {
			break
		}

		return e.complexity.IncomeStatementOuput.EarningsBeforeTax(childComplexity), true

	case "IncomeStatementOuput.expenses":
		if e.complexity.IncomeStatementOuput.Expenses == nil {
			break
		}

		return e.complexity.IncomeStatementOuput.Expenses(childComplexity), true

	case "IncomeStatementOuput.isProvisional":
		if e.complexity.IncomeStatementOuput.IsProvisional == nil {
			break
		}

		return e.complexity.IncomeStatementOuput.IsProvisional(childComplexity), true

	case "IncomeStatementOuput.netIncome":
		if e.complexity.IncomeStatementOuput.NetIncome == nil {
			break
		}

		return e.complexity.IncomeStatementOuput.NetIncome(childComplexity), true

	case "IncomeStatementOuput.netRevenue":
		if e.complexity.IncomeStatementOuput.NetRevenue == nil {
			break
		}

		return e.complexity.IncomeStatementOuput.NetRevenue(childComplexity), true

	case "IncomeStatementOuput.period":
		if e.complexity.IncomeStatementOuput.Period == nil {
			break
		}

		return e.complexity.IncomeStatementOuput.Period(childComplexity), true

	case "IncomeStatementOuput.revenues":
		if e.complexity.IncomeStatementOuput.Revenues == nil {
			break
		}

		return e.complexity.IncomeStatementOuput.Revenues(childComplexity), true

	case "IncomeStatementOuput.taxExpense":
		if e.complexity.IncomeStatementOuput.TaxExpense == nil {
			break
		}

		return e.complexity.IncomeStatementOuput.TaxExpense(childComplexity), true

	case "IncomeStatementOuput.totalExpenses":
		if e.complexity.IncomeStatementOuput.TotalExpenses == nil {
			break
		}

		return e.complexity.IncomeStatementOuput.TotalExpenses(childComplexity), true

	case "InvoiceIssuanceOutput.fileUrl":
		if e.complexity.InvoiceIssuanceOutput.FileURL == nil {
			break
		}

		return e.complexity.InvoiceIssuanceOutput.FileURL(childComplexity), true

	case "InvoiceIssuanceOutput.message":
		if e.complexity.InvoiceIssuanceOutput.Message == nil {
			break
		}

		return e.complexity.InvoiceIssuanceOutput.Message(childComplexity), true

	case "Liabilities.currentLiabilities":
		if e.complexity.Liabilities.CurrentLiabilities == nil {
			break
		}

		return e.complexity.Liabilities.CurrentLiabilities(childComplexity), true

	case "Liabilities.nonCurrentLiabilities":
		if e.complexity.Liabilities.NonCurrentLiabilities == nil {
			break
		}

		return e.complexity.Liabilities.NonCurrentLiabilities(childComplexity), true

	case "Liabilities.totalCurrentLiabilities":
		if e.complexity.Liabilities.TotalCurrentLiabilities == nil {
			break
		}

		return e.complexity.Liabilities.TotalCurrentLiabilities(childComplexity), true

	case "Liabilities.totalLiabilities":
		if e.complexity.Liabilities.TotalLiabilities == nil {
			break
		}

		return e.complexity.Liabilities.TotalLiabilities(childComplexity), true

	case "Liabilities.totalNonCurrentLiabilities":
		if e.complexity.Liabilities.TotalNonCurrentLiabilities == nil {
			break
		}

		return e.complexity.Liabilities.TotalNonCurrentLiabilities(childComplexity), true

	case "LoginOutput.accessToken":
		if e.complexity.LoginOutput.AccessToken == nil {
			break
		}

		return e.complexity.LoginOutput.AccessToken(childComplexity), true

	case "LoginOutput.companies":
		if e.complexity.LoginOutput.Companies == nil {
			break
		}

		return e.complexity.LoginOutput.Companies(childComplexity), true

	case "LoginOutput.companyId":
		if e.complexity.LoginOutput.CompanyID == nil {
			break
		}

		return e.complexity.LoginOutput.CompanyID(childComplexity), true

	case "LoginOutput.refreshToken":
		if e.complexity.LoginOutput.RefreshToken == nil {
			break
		}

		return e.complexity.LoginOutput.RefreshToken(childComplexity), true

	case "LoginOutput.ttl":
		if e.complexity.LoginOutput.TTL == nil {
			break
		}

		return e.complexity.LoginOutput.TTL(childComplexity), true

	case "LoginOutput.user":
		if e.complexity.LoginOutput.User == nil {
			break
		}

		return e.complexity.LoginOutput.User(childComplexity), true

	case "Mutation.createCompany":
		if e.complexity.Mutation.CreateCompany == nil {
			break
		}

		args, err := ec.field_Mutation_createCompany_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCompany(childComplexity, args["input"].(*generated.CreateCompanyInput)), true

	case "Mutation.createCustomer":
		if e.complexity.Mutation.CreateCustomer == nil {
			break
		}

		args, err := ec.field_Mutation_createCustomer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCustomer(childComplexity, args["input"].(generated.CreateCustomerInput)), true

	case "Mutation.createEmployee":
		if e.complexity.Mutation.CreateEmployee == nil {
			break
		}

		args, err := ec.field_Mutation_createEmployee_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateEmployee(childComplexity, args["input"].(generated.CreateEmployeeInput)), true

	case "Mutation.createProduct":
		if e.complexity.Mutation.CreateProduct == nil {
			break
		}

		args, err := ec.field_Mutation_createProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProduct(childComplexity, args["input"].(generated.CreateProductInput)), true

	case "Mutation.createProject":
		if e.complexity.Mutation.CreateProject == nil {
			break
		}

		args, err := ec.field_Mutation_createProject_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProject(childComplexity, args["input"].(generated.CreateProjectInput)), true

	case "Mutation.createProjectMilestone":
		if e.complexity.Mutation.CreateProjectMilestone == nil {
			break
		}

		args, err := ec.field_Mutation_createProjectMilestone_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProjectMilestone(childComplexity, args["input"].(generated.CreateProjectMilestoneInput)), true

	case "Mutation.createProjectTask":
		if e.complexity.Mutation.CreateProjectTask == nil {
			break
		}

		args, err := ec.field_Mutation_createProjectTask_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProjectTask(childComplexity, args["input"].(generated.CreateProjectTaskInput)), true

	case "Mutation.createSupplier":
		if e.complexity.Mutation.CreateSupplier == nil {
			break
		}

		args, err := ec.field_Mutation_createSupplier_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSupplier(childComplexity, args["input"].(generated.CreateSupplierInput)), true

	case "Mutation.createTreasury":
		if e.complexity.Mutation.CreateTreasury == nil {
			break
		}

		args, err := ec.field_Mutation_createTreasury_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTreasury(childComplexity, args["input"].(generated.CreateTreasuryInput)), true

	case "Mutation.createUser":
		if e.complexity.Mutation.CreateUser == nil {
			break
		}

		args, err := ec.field_Mutation_createUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUser(childComplexity, args["input"].(generated.CreateUserInput)), true

	case "Mutation.createUserRole":
		if e.complexity.Mutation.CreateUserRole == nil {
			break
		}

		args, err := ec.field_Mutation_createUserRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUserRole(childComplexity, args["input"].(generated.CreateUserRoleInput)), true

	case "Mutation.createWorkShift":
		if e.complexity.Mutation.CreateWorkShift == nil {
			break
		}

		args, err := ec.field_Mutation_createWorkShift_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateWorkShift(childComplexity, args["input"].(generated.CreateWorkshiftInput)), true

	case "Mutation.deleteCustomer":
		if e.complexity.Mutation.DeleteCustomer == nil {
			break
		}

		args, err := ec.field_Mutation_deleteCustomer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCustomer(childComplexity, args["id"].(int)), true

	case "Mutation.deleteDocuments":
		if e.complexity.Mutation.DeleteDocuments == nil {
			break
		}

		args, err := ec.field_Mutation_deleteDocuments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDocuments(childComplexity, args["ids"].([]int)), true

	case "Mutation.deleteEmployee":
		if e.complexity.Mutation.DeleteEmployee == nil {
			break
		}

		args, err := ec.field_Mutation_deleteEmployee_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEmployee(childComplexity, args["id"].(int)), true

	case "Mutation.deleteProduct":
		if e.complexity.Mutation.DeleteProduct == nil {
			break
		}

		args, err := ec.field_Mutation_deleteProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteProduct(childComplexity, args["id"].(int)), true

	case "Mutation.deleteProject":
		if e.complexity.Mutation.DeleteProject == nil {
			break
		}

		args, err := ec.field_Mutation_deleteProject_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteProject(childComplexity, args["id"].(int)), true

	case "Mutation.deleteProjectMilestone":
		if e.complexity.Mutation.DeleteProjectMilestone == nil {
			break
		}

		args, err := ec.field_Mutation_deleteProjectMilestone_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteProjectMilestone(childComplexity, args["id"].(int)), true

	case "Mutation.deleteProjectTask":
		if e.complexity.Mutation.DeleteProjectTask == nil {
			break
		}

		args, err := ec.field_Mutation_deleteProjectTask_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteProjectTask(childComplexity, args["id"].(int)), true

	case "Mutation.deleteSupplier":
		if e.complexity.Mutation.DeleteSupplier == nil {
			break
		}

		args, err := ec.field_Mutation_deleteSupplier_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSupplier(childComplexity, args["id"].(int)), true

	case "Mutation.deleteTreasury":
		if e.complexity.Mutation.DeleteTreasury == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTreasury_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTreasury(childComplexity, args["id"].(int)), true

	case "Mutation.deleteWorkShift":
		if e.complexity.Mutation.DeleteWorkShift == nil {
			break
		}

		args, err := ec.field_Mutation_deleteWorkShift_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteWorkShift(childComplexity, args["id"].(int)), true

	case "Mutation.forgotPassword":
		if e.complexity.Mutation.ForgotPassword == nil {
			break
		}

		args, err := ec.field_Mutation_forgotPassword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ForgotPassword(childComplexity, args["username"].(string)), true

	case "Mutation.initialSetup":
		if e.complexity.Mutation.InitialSetup == nil {
			break
		}

		args, err := ec.field_Mutation_initialSetup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InitialSetup(childComplexity, args["input"].(model.InitialSetupInput)), true

	case "Mutation.invitedUserSignup":
		if e.complexity.Mutation.InvitedUserSignup == nil {
			break
		}

		args, err := ec.field_Mutation_invitedUserSignup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InvitedUserSignup(childComplexity, args["input"].(model.InvitedUserSignupInput)), true

	case "Mutation.issueInvoice":
		if e.complexity.Mutation.IssueInvoice == nil {
			break
		}

		args, err := ec.field_Mutation_issueInvoice_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.IssueInvoice(childComplexity, args["input"].(model.InvoiceInput)), true

	case "Mutation.issueSalesQuotation":
		if e.complexity.Mutation.IssueSalesQuotation == nil {
			break
		}

		args, err := ec.field_Mutation_issueSalesQuotation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.IssueSalesQuotation(childComplexity, args["input"].(model.SalesQuotationInput)), true

	case "Mutation.registerAccountingEntries":
		if e.complexity.Mutation.RegisterAccountingEntries == nil {
			break
		}

		args, err := ec.field_Mutation_registerAccountingEntries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterAccountingEntries(childComplexity, args["input"].(model.BaseEntryRegistrationInput)), true

	case "Mutation.resetPassword":
		if e.complexity.Mutation.ResetPassword == nil {
			break
		}

		args, err := ec.field_Mutation_resetPassword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ResetPassword(childComplexity, args["input"].(model.ResetPasswordInput)), true

	case "Mutation.signup":
		if e.complexity.Mutation.Signup == nil {
			break
		}

		args, err := ec.field_Mutation_signup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Signup(childComplexity, args["input"].(model.SignupInput)), true

	case "Mutation.unsubscribe":
		if e.complexity.Mutation.Unsubscribe == nil {
			break
		}

		args, err := ec.field_Mutation_unsubscribe_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Unsubscribe(childComplexity, args["id"].(int)), true

	case "Mutation.updateCompany":
		if e.complexity.Mutation.UpdateCompany == nil {
			break
		}

		args, err := ec.field_Mutation_updateCompany_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCompany(childComplexity, args["id"].(int), args["input"].(generated.UpdateCompanyInput)), true

	case "Mutation.updateCustomer":
		if e.complexity.Mutation.UpdateCustomer == nil {
			break
		}

		args, err := ec.field_Mutation_updateCustomer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCustomer(childComplexity, args["id"].(int), args["input"].(generated.UpdateCustomerInput)), true

	case "Mutation.updateDocument":
		if e.complexity.Mutation.UpdateDocument == nil {
			break
		}

		args, err := ec.field_Mutation_updateDocument_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDocument(childComplexity, args["id"].(int), args["input"].(generated.UpdateCompanyDocumentInput)), true

	case "Mutation.updateEmployee":
		if e.complexity.Mutation.UpdateEmployee == nil {
			break
		}

		args, err := ec.field_Mutation_updateEmployee_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEmployee(childComplexity, args["id"].(int), args["input"].(generated.UpdateEmployeeInput)), true

	case "Mutation.updateProduct":
		if e.complexity.Mutation.UpdateProduct == nil {
			break
		}

		args, err := ec.field_Mutation_updateProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProduct(childComplexity, args["id"].(int), args["input"].(generated.UpdateProductInput)), true

	case "Mutation.updateProject":
		if e.complexity.Mutation.UpdateProject == nil {
			break
		}

		args, err := ec.field_Mutation_updateProject_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProject(childComplexity, args["id"].(int), args["input"].(generated.UpdateProjectInput)), true

	case "Mutation.updateProjectMilestone":
		if e.complexity.Mutation.UpdateProjectMilestone == nil {
			break
		}

		args, err := ec.field_Mutation_updateProjectMilestone_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProjectMilestone(childComplexity, args["id"].(int), args["input"].(generated.UpdateProjectMilestoneInput)), true

	case "Mutation.updateProjectTask":
		if e.complexity.Mutation.UpdateProjectTask == nil {
			break
		}

		args, err := ec.field_Mutation_updateProjectTask_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProjectTask(childComplexity, args["id"].(int), args["input"].(generated.UpdateProjectTaskInput)), true

	case "Mutation.updateSupplier":
		if e.complexity.Mutation.UpdateSupplier == nil {
			break
		}

		args, err := ec.field_Mutation_updateSupplier_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSupplier(childComplexity, args["id"].(int), args["input"].(generated.UpdateSupplierInput)), true

	case "Mutation.updateTreasury":
		if e.complexity.Mutation.UpdateTreasury == nil {
			break
		}

		args, err := ec.field_Mutation_updateTreasury_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTreasury(childComplexity, args["id"].(int), args["input"].(generated.UpdateTreasuryInput)), true

	case "Mutation.updateUser":
		if e.complexity.Mutation.UpdateUser == nil {
			break
		}

		args, err := ec.field_Mutation_updateUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUser(childComplexity, args["id"].(int), args["input"].(generated.UpdateUserInput)), true

	case "Mutation.updateWorkShift":
		if e.complexity.Mutation.UpdateWorkShift == nil {
			break
		}

		args, err := ec.field_Mutation_updateWorkShift_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateWorkShift(childComplexity, args["id"].(int), args["input"].(generated.UpdateWorkshiftInput)), true

	case "Mutation.uploadDocument":
		if e.complexity.Mutation.UploadDocument == nil {
			break
		}

		args, err := ec.field_Mutation_uploadDocument_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UploadDocument(childComplexity, args["input"].(generated.CreateCompanyDocumentInput)), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "Payable.company":
		if e.complexity.Payable.Company == nil {
			break
		}

		return e.complexity.Payable.Company(childComplexity), true

	case "Payable.createdat":
		if e.complexity.Payable.CreatedAt == nil {
			break
		}

		return e.complexity.Payable.CreatedAt(childComplexity), true

	case "Payable.date":
		if e.complexity.Payable.Date == nil {
			break
		}

		return e.complexity.Payable.Date(childComplexity), true

	case "Payable.deletedat":
		if e.complexity.Payable.DeletedAt == nil {
			break
		}

		return e.complexity.Payable.DeletedAt(childComplexity), true

	case "Payable.duedate":
		if e.complexity.Payable.DueDate == nil {
			break
		}

		return e.complexity.Payable.DueDate(childComplexity), true

	case "Payable.entrygroup":
		if e.complexity.Payable.EntryGroup == nil {
			break
		}

		return e.complexity.Payable.EntryGroup(childComplexity), true

	case "Payable.id":
		if e.complexity.Payable.ID == nil {
			break
		}

		return e.complexity.Payable.ID(childComplexity), true

	case "Payable.name":
		if e.complexity.Payable.Name == nil {
			break
		}

		return e.complexity.Payable.Name(childComplexity), true

	case "Payable.outstandingbalance":
		if e.complexity.Payable.OutstandingBalance == nil {
			break
		}

		return e.complexity.Payable.OutstandingBalance(childComplexity), true

	case "Payable.status":
		if e.complexity.Payable.Status == nil {
			break
		}

		return e.complexity.Payable.Status(childComplexity), true

	case "Payable.totaltransaction":
		if e.complexity.Payable.TotalTransaction == nil {
			break
		}

		return e.complexity.Payable.TotalTransaction(childComplexity), true

	case "Payable.updatedat":
		if e.complexity.Payable.UpdatedAt == nil {
			break
		}

		return e.complexity.Payable.UpdatedAt(childComplexity), true

	case "PayableConnection.edges":
		if e.complexity.PayableConnection.Edges == nil {
			break
		}

		return e.complexity.PayableConnection.Edges(childComplexity), true

	case "PayableConnection.pageInfo":
		if e.complexity.PayableConnection.PageInfo == nil {
			break
		}

		return e.complexity.PayableConnection.PageInfo(childComplexity), true

	case "PayableConnection.totalCount":
		if e.complexity.PayableConnection.TotalCount == nil {
			break
		}

		return e.complexity.PayableConnection.TotalCount(childComplexity), true

	case "PayableEdge.cursor":
		if e.complexity.PayableEdge.Cursor == nil {
			break
		}

		return e.complexity.PayableEdge.Cursor(childComplexity), true

	case "PayableEdge.node":
		if e.complexity.PayableEdge.Node == nil {
			break
		}

		return e.complexity.PayableEdge.Node(childComplexity), true

	case "Period.end":
		if e.complexity.Period.End == nil {
			break
		}

		return e.complexity.Period.End(childComplexity), true

	case "Period.start":
		if e.complexity.Period.Start == nil {
			break
		}

		return e.complexity.Period.Start(childComplexity), true

	case "Product.company":
		if e.complexity.Product.Company == nil {
			break
		}

		return e.complexity.Product.Company(childComplexity), true

	case "Product.createdat":
		if e.complexity.Product.CreatedAt == nil {
			break
		}

		return e.complexity.Product.CreatedAt(childComplexity), true

	case "Product.deletedat":
		if e.complexity.Product.DeletedAt == nil {
			break
		}

		return e.complexity.Product.DeletedAt(childComplexity), true

	case "Product.id":
		if e.complexity.Product.ID == nil {
			break
		}

		return e.complexity.Product.ID(childComplexity), true

	case "Product.stock":
		if e.complexity.Product.Stock == nil {
			break
		}

		return e.complexity.Product.Stock(childComplexity), true

	case "Product.updatedat":
		if e.complexity.Product.UpdatedAt == nil {
			break
		}

		return e.complexity.Product.UpdatedAt(childComplexity), true

	case "Project.company":
		if e.complexity.Project.Company == nil {
			break
		}

		return e.complexity.Project.Company(childComplexity), true

	case "Project.createdat":
		if e.complexity.Project.CreatedAt == nil {
			break
		}

		return e.complexity.Project.CreatedAt(childComplexity), true

	case "Project.createdby":
		if e.complexity.Project.CreatedBy == nil {
			break
		}

		return e.complexity.Project.CreatedBy(childComplexity), true

	case "Project.deletedat":
		if e.complexity.Project.DeletedAt == nil {
			break
		}

		return e.complexity.Project.DeletedAt(childComplexity), true

	case "Project.description":
		if e.complexity.Project.Description == nil {
			break
		}

		return e.complexity.Project.Description(childComplexity), true

	case "Project.enddate":
		if e.complexity.Project.EndDate == nil {
			break
		}

		return e.complexity.Project.EndDate(childComplexity), true

	case "Project.id":
		if e.complexity.Project.ID == nil {
			break
		}

		return e.complexity.Project.ID(childComplexity), true

	case "Project.leader":
		if e.complexity.Project.Leader == nil {
			break
		}

		return e.complexity.Project.Leader(childComplexity), true

	case "Project.milestones":
		if e.complexity.Project.Milestones == nil {
			break
		}

		return e.complexity.Project.Milestones(childComplexity), true

	case "Project.name":
		if e.complexity.Project.Name == nil {
			break
		}

		return e.complexity.Project.Name(childComplexity), true

	case "Project.progress":
		if e.complexity.Project.Progress == nil {
			break
		}

		return e.complexity.Project.Progress(childComplexity), true

	case "Project.startdate":
		if e.complexity.Project.StartDate == nil {
			break
		}

		return e.complexity.Project.StartDate(childComplexity), true

	case "Project.status":
		if e.complexity.Project.Status == nil {
			break
		}

		return e.complexity.Project.Status(childComplexity), true

	case "Project.tasks":
		if e.complexity.Project.Tasks == nil {
			break
		}

		return e.complexity.Project.Tasks(childComplexity), true

	case "Project.updatedat":
		if e.complexity.Project.UpdatedAt == nil {
			break
		}

		return e.complexity.Project.UpdatedAt(childComplexity), true

	case "ProjectConnection.edges":
		if e.complexity.ProjectConnection.Edges == nil {
			break
		}

		return e.complexity.ProjectConnection.Edges(childComplexity), true

	case "ProjectConnection.pageInfo":
		if e.complexity.ProjectConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProjectConnection.PageInfo(childComplexity), true

	case "ProjectConnection.totalCount":
		if e.complexity.ProjectConnection.TotalCount == nil {
			break
		}

		return e.complexity.ProjectConnection.TotalCount(childComplexity), true

	case "ProjectEdge.cursor":
		if e.complexity.ProjectEdge.Cursor == nil {
			break
		}

		return e.complexity.ProjectEdge.Cursor(childComplexity), true

	case "ProjectEdge.node":
		if e.complexity.ProjectEdge.Node == nil {
			break
		}

		return e.complexity.ProjectEdge.Node(childComplexity), true

	case "ProjectMilestone.duedate":
		if e.complexity.ProjectMilestone.DueDate == nil {
			break
		}

		return e.complexity.ProjectMilestone.DueDate(childComplexity), true

	case "ProjectMilestone.id":
		if e.complexity.ProjectMilestone.ID == nil {
			break
		}

		return e.complexity.ProjectMilestone.ID(childComplexity), true

	case "ProjectMilestone.name":
		if e.complexity.ProjectMilestone.Name == nil {
			break
		}

		return e.complexity.ProjectMilestone.Name(childComplexity), true

	case "ProjectMilestone.project":
		if e.complexity.ProjectMilestone.Project == nil {
			break
		}

		return e.complexity.ProjectMilestone.Project(childComplexity), true

	case "ProjectTask.assignee":
		if e.complexity.ProjectTask.Assignee == nil {
			break
		}

		return e.complexity.ProjectTask.Assignee(childComplexity), true

	case "ProjectTask.assigneename":
		if e.complexity.ProjectTask.AssigneeName == nil {
			break
		}

		return e.complexity.ProjectTask.AssigneeName(childComplexity), true

	case "ProjectTask.createdat":
		if e.complexity.ProjectTask.CreatedAt == nil {
			break
		}

		return e.complexity.ProjectTask.CreatedAt(childComplexity), true

	case "ProjectTask.createdby":
		if e.complexity.ProjectTask.CreatedBy == nil {
			break
		}

		return e.complexity.ProjectTask.CreatedBy(childComplexity), true

	case "ProjectTask.description":
		if e.complexity.ProjectTask.Description == nil {
			break
		}

		return e.complexity.ProjectTask.Description(childComplexity), true

	case "ProjectTask.duedate":
		if e.complexity.ProjectTask.DueDate == nil {
			break
		}

		return e.complexity.ProjectTask.DueDate(childComplexity), true

	case "ProjectTask.enddate":
		if e.complexity.ProjectTask.EndDate == nil {
			break
		}

		return e.complexity.ProjectTask.EndDate(childComplexity), true

	case "ProjectTask.id":
		if e.complexity.ProjectTask.ID == nil {
			break
		}

		return e.complexity.ProjectTask.ID(childComplexity), true

	case "ProjectTask.location":
		if e.complexity.ProjectTask.Location == nil {
			break
		}

		return e.complexity.ProjectTask.Location(childComplexity), true

	case "ProjectTask.name":
		if e.complexity.ProjectTask.Name == nil {
			break
		}

		return e.complexity.ProjectTask.Name(childComplexity), true

	case "ProjectTask.participants":
		if e.complexity.ProjectTask.Participants == nil {
			break
		}

		return e.complexity.ProjectTask.Participants(childComplexity), true

	case "ProjectTask.project":
		if e.complexity.ProjectTask.Project == nil {
			break
		}

		return e.complexity.ProjectTask.Project(childComplexity), true

	case "ProjectTask.startdate":
		if e.complexity.ProjectTask.StartDate == nil {
			break
		}

		return e.complexity.ProjectTask.StartDate(childComplexity), true

	case "ProjectTask.status":
		if e.complexity.ProjectTask.Status == nil {
			break
		}

		return e.complexity.ProjectTask.Status(childComplexity), true

	case "ProjectTask.workshifts":
		if e.complexity.ProjectTask.WorkShifts == nil {
			break
		}

		return e.complexity.ProjectTask.WorkShifts(childComplexity), true

	case "ProjectTaskConnection.edges":
		if e.complexity.ProjectTaskConnection.Edges == nil {
			break
		}

		return e.complexity.ProjectTaskConnection.Edges(childComplexity), true

	case "ProjectTaskConnection.pageInfo":
		if e.complexity.ProjectTaskConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProjectTaskConnection.PageInfo(childComplexity), true

	case "ProjectTaskConnection.totalCount":
		if e.complexity.ProjectTaskConnection.TotalCount == nil {
			break
		}

		return e.complexity.ProjectTaskConnection.TotalCount(childComplexity), true

	case "ProjectTaskEdge.cursor":
		if e.complexity.ProjectTaskEdge.Cursor == nil {
			break
		}

		return e.complexity.ProjectTaskEdge.Cursor(childComplexity), true

	case "ProjectTaskEdge.node":
		if e.complexity.ProjectTaskEdge.Node == nil {
			break
		}

		return e.complexity.ProjectTaskEdge.Node(childComplexity), true

	case "Query.accountingEntries":
		if e.complexity.Query.AccountingEntries == nil {
			break
		}

		args, err := ec.field_Query_accountingEntries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AccountingEntries(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].([]*generated.AccountingEntryOrder), args["where"].(*generated.AccountingEntryWhereInput)), true

	case "Query.accountsPayableAging":
		if e.complexity.Query.AccountsPayableAging == nil {
			break
		}

		return e.complexity.Query.AccountsPayableAging(childComplexity), true

	case "Query.accountsReceivableAging":
		if e.complexity.Query.AccountsReceivableAging == nil {
			break
		}

		return e.complexity.Query.AccountsReceivableAging(childComplexity), true

	case "Query.aggregateCustomers":
		if e.complexity.Query.AggregateCustomers == nil {
			break
		}

		args, err := ec.field_Query_aggregateCustomers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AggregateCustomers(childComplexity, args["where"].(*generated.CustomerWhereInput), args["groupBy"].([]model.CustomersGroupBy)), true

	case "Query.aggregateReceivables":
		if e.complexity.Query.AggregateReceivables == nil {
			break
		}

		args, err := ec.field_Query_aggregateReceivables_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AggregateReceivables(childComplexity, args["where"].(*generated.ReceivableWhereInput), args["groupBy"].([]model.ReceivablesGroupBy)), true

	case "Query.aggregateTreasury":
		if e.complexity.Query.AggregateTreasury == nil {
			break
		}

		args, err := ec.field_Query_aggregateTreasury_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AggregateTreasury(childComplexity, args["where"].(*generated.TreasuryWhereInput)), true

	case "Query.aggregateWorkShift":
		if e.complexity.Query.AggregateWorkShift == nil {
			break
		}

		args, err := ec.field_Query_aggregateWorkShift_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AggregateWorkShift(childComplexity, args["where"].(*generated.WorkshiftWhereInput), args["groupBy"].([]model.ShiftGroupBy)), true

	case "Query.balanceSheet":
		if e.complexity.Query.BalanceSheet == nil {
			break
		}

		args, err := ec.field_Query_balanceSheet_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BalanceSheet(childComplexity, args["date"].(time.Time)), true

	case "Query.companies":
		if e.complexity.Query.Companies == nil {
			break
		}

		args, err := ec.field_Query_companies_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Companies(childComplexity, args["where"].(*generated.CompanyWhereInput)), true

	case "Query.companyDocuments":
		if e.complexity.Query.CompanyDocuments == nil {
			break
		}

		args, err := ec.field_Query_companyDocuments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CompanyDocuments(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].([]*generated.CompanyDocumentOrder), args["where"].(*generated.CompanyDocumentWhereInput)), true

	case "Query.countDocuments":
		if e.complexity.Query.CountDocuments == nil {
			break
		}

		return e.complexity.Query.CountDocuments(childComplexity), true

	case "Query.customers":
		if e.complexity.Query.Customers == nil {
			break
		}

		args, err := ec.field_Query_customers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Customers(childComplexity, args["where"].(*generated.CustomerWhereInput)), true

	case "Query.downloadBalanceSheet":
		if e.complexity.Query.DownloadBalanceSheet == nil {
			break
		}

		args, err := ec.field_Query_downloadBalanceSheet_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DownloadBalanceSheet(childComplexity, args["where"].(model.ReportInput)), true

	case "Query.downloadIncomeStatement":
		if e.complexity.Query.DownloadIncomeStatement == nil {
			break
		}

		args, err := ec.field_Query_downloadIncomeStatement_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DownloadIncomeStatement(childComplexity, args["where"].(model.ReportInput)), true

	case "Query.downloadLedger":
		if e.complexity.Query.DownloadLedger == nil {
			break
		}

		args, err := ec.field_Query_downloadLedger_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DownloadLedger(childComplexity, args["where"].(model.LedgerDownloadInput)), true

	case "Query.downloadTrialBalance":
		if e.complexity.Query.DownloadTrialBalance == nil {
			break
		}

		args, err := ec.field_Query_downloadTrialBalance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DownloadTrialBalance(childComplexity, args["where"].(model.ReportInput)), true

	case "Query.employees":
		if e.complexity.Query.Employees == nil {
			break
		}

		args, err := ec.field_Query_employees_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Employees(childComplexity, args["where"].(*generated.EmployeeWhereInput)), true

	case "Query.expensesBreakdown":
		if e.complexity.Query.ExpensesBreakdown == nil {
			break
		}

		args, err := ec.field_Query_expensesBreakdown_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ExpensesBreakdown(childComplexity, args["range"].(model.TimeRange)), true

	case "Query.files":
		if e.complexity.Query.Files == nil {
			break
		}

		args, err := ec.field_Query_files_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Files(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].(*generated.FileOrder), args["where"].(*generated.FileWhereInput)), true

	case "Query.incomeStatement":
		if e.complexity.Query.IncomeStatement == nil {
			break
		}

		args, err := ec.field_Query_incomeStatement_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.IncomeStatement(childComplexity, args["date"].(time.Time)), true

	case "Query.lowStock":
		if e.complexity.Query.LowStock == nil {
			break
		}

		args, err := ec.field_Query_lowStock_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LowStock(childComplexity, args["where"].(*generated.ProductWhereInput)), true

	case "Query.node":
		if e.complexity.Query.Node == nil {
			break
		}

		args, err := ec.field_Query_node_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Node(childComplexity, args["id"].(int)), true

	case "Query.nodes":
		if e.complexity.Query.Nodes == nil {
			break
		}

		args, err := ec.field_Query_nodes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Nodes(childComplexity, args["ids"].([]int)), true

	case "Query.numberOfLowStock":
		if e.complexity.Query.NumberOfLowStock == nil {
			break
		}

		args, err := ec.field_Query_numberOfLowStock_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NumberOfLowStock(childComplexity, args["where"].(*generated.ProductWhereInput)), true

	case "Query.numberOfOutOfStock":
		if e.complexity.Query.NumberOfOutOfStock == nil {
			break
		}

		args, err := ec.field_Query_numberOfOutOfStock_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NumberOfOutOfStock(childComplexity, args["where"].(*generated.ProductWhereInput)), true

	case "Query.numberOfProducts":
		if e.complexity.Query.NumberOfProducts == nil {
			break
		}

		args, err := ec.field_Query_numberOfProducts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NumberOfProducts(childComplexity, args["where"].(*generated.ProductWhereInput)), true

	case "Query.payables":
		if e.complexity.Query.Payables == nil {
			break
		}

		args, err := ec.field_Query_payables_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Payables(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].([]*generated.PayableOrder), args["where"].(*generated.PayableWhereInput)), true

	case "Query.products":
		if e.complexity.Query.Products == nil {
			break
		}

		args, err := ec.field_Query_products_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Products(childComplexity, args["where"].(*generated.ProductWhereInput)), true

	case "Query.projectTasks":
		if e.complexity.Query.ProjectTasks == nil {
			break
		}

		args, err := ec.field_Query_projectTasks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProjectTasks(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].([]*generated.ProjectTaskOrder), args["where"].(*generated.ProjectTaskWhereInput)), true

	case "Query.projects":
		if e.complexity.Query.Projects == nil {
			break
		}

		args, err := ec.field_Query_projects_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Projects(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].([]*generated.ProjectOrder), args["where"].(*generated.ProjectWhereInput)), true

	case "Query.receivables":
		if e.complexity.Query.Receivables == nil {
			break
		}

		args, err := ec.field_Query_receivables_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Receivables(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].([]*generated.ReceivableOrder), args["where"].(*generated.ReceivableWhereInput)), true

	case "Query.retrieveProject":
		if e.complexity.Query.RetrieveProject == nil {
			break
		}

		args, err := ec.field_Query_retrieveProject_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RetrieveProject(childComplexity, args["id"].(int)), true

	case "Query.retrieveProjectTask":
		if e.complexity.Query.RetrieveProjectTask == nil {
			break
		}

		args, err := ec.field_Query_retrieveProjectTask_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RetrieveProjectTask(childComplexity, args["id"].(int)), true

	case "Query.revenueTrend":
		if e.complexity.Query.RevenueTrend == nil {
			break
		}

		args, err := ec.field_Query_revenueTrend_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RevenueTrend(childComplexity, args["range"].(model.TimeRange)), true

	case "Query.suppliers":
		if e.complexity.Query.Suppliers == nil {
			break
		}

		args, err := ec.field_Query_suppliers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Suppliers(childComplexity, args["where"].(*generated.SupplierWhereInput)), true

	case "Query.tokens":
		if e.complexity.Query.Tokens == nil {
			break
		}

		return e.complexity.Query.Tokens(childComplexity), true

	case "Query.treasuries":
		if e.complexity.Query.Treasuries == nil {
			break
		}

		args, err := ec.field_Query_treasuries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Treasuries(childComplexity, args["where"].(*generated.TreasuryWhereInput)), true

	case "Query.trialBalance":
		if e.complexity.Query.TrialBalance == nil {
			break
		}

		args, err := ec.field_Query_trialBalance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TrialBalance(childComplexity, args["date"].(time.Time)), true

	case "Query.userRoles":
		if e.complexity.Query.UserRoles == nil {
			break
		}

		args, err := ec.field_Query_userRoles_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserRoles(childComplexity, args["where"].(*generated.UserRoleWhereInput)), true

	case "Query.users":
		if e.complexity.Query.Users == nil {
			break
		}

		args, err := ec.field_Query_users_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Users(childComplexity, args["where"].(*generated.UserWhereInput)), true

	case "Query.verifyPasswordResetToken":
		if e.complexity.Query.VerifyPasswordResetToken == nil {
			break
		}

		args, err := ec.field_Query_verifyPasswordResetToken_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VerifyPasswordResetToken(childComplexity, args["token"].(string)), true

	case "Query.workShifts":
		if e.complexity.Query.WorkShifts == nil {
			break
		}

		args, err := ec.field_Query_workShifts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.WorkShifts(childComplexity, args["where"].(*generated.WorkshiftWhereInput)), true

	case "Query.workshifts":
		if e.complexity.Query.Workshifts == nil {
			break
		}

		return e.complexity.Query.Workshifts(childComplexity), true

	case "Receivable.company":
		if e.complexity.Receivable.Company == nil {
			break
		}

		return e.complexity.Receivable.Company(childComplexity), true

	case "Receivable.createdat":
		if e.complexity.Receivable.CreatedAt == nil {
			break
		}

		return e.complexity.Receivable.CreatedAt(childComplexity), true

	case "Receivable.date":
		if e.complexity.Receivable.Date == nil {
			break
		}

		return e.complexity.Receivable.Date(childComplexity), true

	case "Receivable.deletedat":
		if e.complexity.Receivable.DeletedAt == nil {
			break
		}

		return e.complexity.Receivable.DeletedAt(childComplexity), true

	case "Receivable.duedate":
		if e.complexity.Receivable.DueDate == nil {
			break
		}

		return e.complexity.Receivable.DueDate(childComplexity), true

	case "Receivable.entrygroup":
		if e.complexity.Receivable.EntryGroup == nil {
			break
		}

		return e.complexity.Receivable.EntryGroup(childComplexity), true

	case "Receivable.id":
		if e.complexity.Receivable.ID == nil {
			break
		}

		return e.complexity.Receivable.ID(childComplexity), true

	case "Receivable.name":
		if e.complexity.Receivable.Name == nil {
			break
		}

		return e.complexity.Receivable.Name(childComplexity), true

	case "Receivable.outstandingbalance":
		if e.complexity.Receivable.OutstandingBalance == nil {
			break
		}

		return e.complexity.Receivable.OutstandingBalance(childComplexity), true

	case "Receivable.status":
		if e.complexity.Receivable.Status == nil {
			break
		}

		return e.complexity.Receivable.Status(childComplexity), true

	case "Receivable.totaltransaction":
		if e.complexity.Receivable.TotalTransaction == nil {
			break
		}

		return e.complexity.Receivable.TotalTransaction(childComplexity), true

	case "Receivable.updatedat":
		if e.complexity.Receivable.UpdatedAt == nil {
			break
		}

		return e.complexity.Receivable.UpdatedAt(childComplexity), true

	case "ReceivableAggregationOutput.company":
		if e.complexity.ReceivableAggregationOutput.Company == nil {
			break
		}

		return e.complexity.ReceivableAggregationOutput.Company(childComplexity), true

	case "ReceivableAggregationOutput.count":
		if e.complexity.ReceivableAggregationOutput.Count == nil {
			break
		}

		return e.complexity.ReceivableAggregationOutput.Count(childComplexity), true

	case "ReceivableAggregationOutput.sum":
		if e.complexity.ReceivableAggregationOutput.Sum == nil {
			break
		}

		return e.complexity.ReceivableAggregationOutput.Sum(childComplexity), true

	case "ReceivableConnection.edges":
		if e.complexity.ReceivableConnection.Edges == nil {
			break
		}

		return e.complexity.ReceivableConnection.Edges(childComplexity), true

	case "ReceivableConnection.pageInfo":
		if e.complexity.ReceivableConnection.PageInfo == nil {
			break
		}

		return e.complexity.ReceivableConnection.PageInfo(childComplexity), true

	case "ReceivableConnection.totalCount":
		if e.complexity.ReceivableConnection.TotalCount == nil {
			break
		}

		return e.complexity.ReceivableConnection.TotalCount(childComplexity), true

	case "ReceivableEdge.cursor":
		if e.complexity.ReceivableEdge.Cursor == nil {
			break
		}

		return e.complexity.ReceivableEdge.Cursor(childComplexity), true

	case "ReceivableEdge.node":
		if e.complexity.ReceivableEdge.Node == nil {
			break
		}

		return e.complexity.ReceivableEdge.Node(childComplexity), true

	case "ReportRowItem.account":
		if e.complexity.ReportRowItem.Account == nil {
			break
		}

		return e.complexity.ReportRowItem.Account(childComplexity), true

	case "ReportRowItem.label":
		if e.complexity.ReportRowItem.Label == nil {
			break
		}

		return e.complexity.ReportRowItem.Label(childComplexity), true

	case "ReportRowItem.value":
		if e.complexity.ReportRowItem.Value == nil {
			break
		}

		return e.complexity.ReportRowItem.Value(childComplexity), true

	case "RevenueTrendOutput.amount":
		if e.complexity.RevenueTrendOutput.Amount == nil {
			break
		}

		return e.complexity.RevenueTrendOutput.Amount(childComplexity), true

	case "RevenueTrendOutput.date":
		if e.complexity.RevenueTrendOutput.Date == nil {
			break
		}

		return e.complexity.RevenueTrendOutput.Date(childComplexity), true

	case "Supplier.address":
		if e.complexity.Supplier.Address == nil {
			break
		}

		return e.complexity.Supplier.Address(childComplexity), true

	case "Supplier.city":
		if e.complexity.Supplier.City == nil {
			break
		}

		return e.complexity.Supplier.City(childComplexity), true

	case "Supplier.company":
		if e.complexity.Supplier.Company == nil {
			break
		}

		return e.complexity.Supplier.Company(childComplexity), true

	case "Supplier.country":
		if e.complexity.Supplier.Country == nil {
			break
		}

		return e.complexity.Supplier.Country(childComplexity), true

	case "Supplier.createdat":
		if e.complexity.Supplier.CreatedAt == nil {
			break
		}

		return e.complexity.Supplier.CreatedAt(childComplexity), true

	case "Supplier.deletedat":
		if e.complexity.Supplier.DeletedAt == nil {
			break
		}

		return e.complexity.Supplier.DeletedAt(childComplexity), true

	case "Supplier.description":
		if e.complexity.Supplier.Description == nil {
			break
		}

		return e.complexity.Supplier.Description(childComplexity), true

	case "Supplier.email":
		if e.complexity.Supplier.Email == nil {
			break
		}

		return e.complexity.Supplier.Email(childComplexity), true

	case "Supplier.id":
		if e.complexity.Supplier.ID == nil {
			break
		}

		return e.complexity.Supplier.ID(childComplexity), true

	case "Supplier.isdefault":
		if e.complexity.Supplier.IsDefault == nil {
			break
		}

		return e.complexity.Supplier.IsDefault(childComplexity), true

	case "Supplier.name":
		if e.complexity.Supplier.Name == nil {
			break
		}

		return e.complexity.Supplier.Name(childComplexity), true

	case "Supplier.payables":
		if e.complexity.Supplier.Payables == nil {
			break
		}

		return e.complexity.Supplier.Payables(childComplexity), true

	case "Supplier.phone":
		if e.complexity.Supplier.Phone == nil {
			break
		}

		return e.complexity.Supplier.Phone(childComplexity), true

	case "Supplier.taxid":
		if e.complexity.Supplier.TaxId == nil {
			break
		}

		return e.complexity.Supplier.TaxId(childComplexity), true

	case "Supplier.updatedat":
		if e.complexity.Supplier.UpdatedAt == nil {
			break
		}

		return e.complexity.Supplier.UpdatedAt(childComplexity), true

	case "Token.category":
		if e.complexity.Token.Category == nil {
			break
		}

		return e.complexity.Token.Category(childComplexity), true

	case "Token.company":
		if e.complexity.Token.Company == nil {
			break
		}

		return e.complexity.Token.Company(childComplexity), true

	case "Token.expiry":
		if e.complexity.Token.Expiry == nil {
			break
		}

		return e.complexity.Token.Expiry(childComplexity), true

	case "Token.id":
		if e.complexity.Token.ID == nil {
			break
		}

		return e.complexity.Token.ID(childComplexity), true

	case "Token.token":
		if e.complexity.Token.Token == nil {
			break
		}

		return e.complexity.Token.Token(childComplexity), true

	case "Token.user":
		if e.complexity.Token.User == nil {
			break
		}

		return e.complexity.Token.User(childComplexity), true

	case "Treasury.balance":
		if e.complexity.Treasury.Balance == nil {
			break
		}

		return e.complexity.Treasury.Balance(childComplexity), true

	case "Treasury.company":
		if e.complexity.Treasury.Company == nil {
			break
		}

		return e.complexity.Treasury.Company(childComplexity), true

	case "Treasury.createdat":
		if e.complexity.Treasury.CreatedAt == nil {
			break
		}

		return e.complexity.Treasury.CreatedAt(childComplexity), true

	case "Treasury.deletedat":
		if e.complexity.Treasury.DeletedAt == nil {
			break
		}

		return e.complexity.Treasury.DeletedAt(childComplexity), true

	case "Treasury.id":
		if e.complexity.Treasury.ID == nil {
			break
		}

		return e.complexity.Treasury.ID(childComplexity), true

	case "Treasury.updatedat":
		if e.complexity.Treasury.UpdatedAt == nil {
			break
		}

		return e.complexity.Treasury.UpdatedAt(childComplexity), true

	case "TreasuryAggregatePayload.companyID":
		if e.complexity.TreasuryAggregatePayload.CompanyID == nil {
			break
		}

		return e.complexity.TreasuryAggregatePayload.CompanyID(childComplexity), true

	case "TreasuryAggregatePayload.count":
		if e.complexity.TreasuryAggregatePayload.Count == nil {
			break
		}

		return e.complexity.TreasuryAggregatePayload.Count(childComplexity), true

	case "TreasuryAggregatePayload.totalBalance":
		if e.complexity.TreasuryAggregatePayload.TotalBalance == nil {
			break
		}

		return e.complexity.TreasuryAggregatePayload.TotalBalance(childComplexity), true

	case "TrialBalanceRowItem.account":
		if e.complexity.TrialBalanceRowItem.Account == nil {
			break
		}

		return e.complexity.TrialBalanceRowItem.Account(childComplexity), true

	case "TrialBalanceRowItem.balance":
		if e.complexity.TrialBalanceRowItem.Balance == nil {
			break
		}

		return e.complexity.TrialBalanceRowItem.Balance(childComplexity), true

	case "TrialBalanceRowItem.credit":
		if e.complexity.TrialBalanceRowItem.Credit == nil {
			break
		}

		return e.complexity.TrialBalanceRowItem.Credit(childComplexity), true

	case "TrialBalanceRowItem.debit":
		if e.complexity.TrialBalanceRowItem.Debit == nil {
			break
		}

		return e.complexity.TrialBalanceRowItem.Debit(childComplexity), true

	case "TrialBalanceRowItem.label":
		if e.complexity.TrialBalanceRowItem.Label == nil {
			break
		}

		return e.complexity.TrialBalanceRowItem.Label(childComplexity), true

	case "User.accountingentries":
		if e.complexity.User.AccountingEntries == nil {
			break
		}

		return e.complexity.User.AccountingEntries(childComplexity), true

	case "User.approveddocuments":
		if e.complexity.User.ApprovedDocuments == nil {
			break
		}

		return e.complexity.User.ApprovedDocuments(childComplexity), true

	case "User.approvedworkshifts":
		if e.complexity.User.ApprovedWorkShifts == nil {
			break
		}

		return e.complexity.User.ApprovedWorkShifts(childComplexity), true

	case "User.assignedprojecttasks":
		if e.complexity.User.AssignedProjectTasks == nil {
			break
		}

		return e.complexity.User.AssignedProjectTasks(childComplexity), true

	case "User.assignedroles":
		if e.complexity.User.AssignedRoles == nil {
			break
		}

		return e.complexity.User.AssignedRoles(childComplexity), true

	case "User.birthdate":
		if e.complexity.User.Birthdate == nil {
			break
		}

		return e.complexity.User.Birthdate(childComplexity), true

	case "User.company":
		if e.complexity.User.Company == nil {
			break
		}

		return e.complexity.User.Company(childComplexity), true

	case "User.createdat":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true

	case "User.createdprojects":
		if e.complexity.User.CreatedProjects == nil {
			break
		}

		return e.complexity.User.CreatedProjects(childComplexity), true

	case "User.createdtasks":
		if e.complexity.User.CreatedTasks == nil {
			break
		}

		return e.complexity.User.CreatedTasks(childComplexity), true

	case "User.deletedat":
		if e.complexity.User.DeletedAt == nil {
			break
		}

		return e.complexity.User.DeletedAt(childComplexity), true

	case "User.disabled":
		if e.complexity.User.Disabled == nil {
			break
		}

		return e.complexity.User.Disabled(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.employee":
		if e.complexity.User.Employee == nil {
			break
		}

		return e.complexity.User.Employee(childComplexity), true

	case "User.gender":
		if e.complexity.User.Gender == nil {
			break
		}

		return e.complexity.User.Gender(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.leader":
		if e.complexity.User.Leader == nil {
			break
		}

		return e.complexity.User.Leader(childComplexity), true

	case "User.leaderedprojects":
		if e.complexity.User.LeaderedProjects == nil {
			break
		}

		return e.complexity.User.LeaderedProjects(childComplexity), true

	case "User.name":
		if e.complexity.User.Name == nil {
			break
		}

		return e.complexity.User.Name(childComplexity), true

	case "User.notverified":
		if e.complexity.User.NotVerified == nil {
			break
		}

		return e.complexity.User.NotVerified(childComplexity), true

	case "User.participatedprojecttasks":
		if e.complexity.User.ParticipatedProjectTasks == nil {
			break
		}

		return e.complexity.User.ParticipatedProjectTasks(childComplexity), true

	case "User.phone":
		if e.complexity.User.Phone == nil {
			break
		}

		return e.complexity.User.Phone(childComplexity), true

	case "User.subordinates":
		if e.complexity.User.Subordinates == nil {
			break
		}

		return e.complexity.User.Subordinates(childComplexity), true

	case "User.tokens":
		if e.complexity.User.Tokens == nil {
			break
		}

		return e.complexity.User.Tokens(childComplexity), true

	case "User.updatedat":
		if e.complexity.User.UpdatedAt == nil {
			break
		}

		return e.complexity.User.UpdatedAt(childComplexity), true

	case "User.uploadeddocuments":
		if e.complexity.User.UploadedDocuments == nil {
			break
		}

		return e.complexity.User.UploadedDocuments(childComplexity), true

	case "User.workshifts":
		if e.complexity.User.WorkShifts == nil {
			break
		}

		return e.complexity.User.WorkShifts(childComplexity), true

	case "UserRole.company":
		if e.complexity.UserRole.Company == nil {
			break
		}

		return e.complexity.UserRole.Company(childComplexity), true

	case "UserRole.id":
		if e.complexity.UserRole.ID == nil {
			break
		}

		return e.complexity.UserRole.ID(childComplexity), true

	case "UserRole.role":
		if e.complexity.UserRole.Role == nil {
			break
		}

		return e.complexity.UserRole.Role(childComplexity), true

	case "UserRole.user":
		if e.complexity.UserRole.User == nil {
			break
		}

		return e.complexity.UserRole.User(childComplexity), true

	case "WorkShiftAggregationPayload.count":
		if e.complexity.WorkShiftAggregationPayload.Count == nil {
			break
		}

		return e.complexity.WorkShiftAggregationPayload.Count(childComplexity), true

	case "WorkShiftAggregationPayload.date":
		if e.complexity.WorkShiftAggregationPayload.Date == nil {
			break
		}

		return e.complexity.WorkShiftAggregationPayload.Date(childComplexity), true

	case "WorkShiftAggregationPayload.durationInMinutes":
		if e.complexity.WorkShiftAggregationPayload.DurationInMinutes == nil {
			break
		}

		return e.complexity.WorkShiftAggregationPayload.DurationInMinutes(childComplexity), true

	case "WorkShiftAggregationPayload.pendingCount":
		if e.complexity.WorkShiftAggregationPayload.PendingCount == nil {
			break
		}

		return e.complexity.WorkShiftAggregationPayload.PendingCount(childComplexity), true

	case "Workshift.approvedat":
		if e.complexity.Workshift.ApprovedAt == nil {
			break
		}

		return e.complexity.Workshift.ApprovedAt(childComplexity), true

	case "Workshift.approvedby":
		if e.complexity.Workshift.ApprovedBy == nil {
			break
		}

		return e.complexity.Workshift.ApprovedBy(childComplexity), true

	case "Workshift.clockin":
		if e.complexity.Workshift.ClockIn == nil {
			break
		}

		return e.complexity.Workshift.ClockIn(childComplexity), true

	case "Workshift.clockinlocation":
		if e.complexity.Workshift.ClockInLocation == nil {
			break
		}

		return e.complexity.Workshift.ClockInLocation(childComplexity), true

	case "Workshift.clockout":
		if e.complexity.Workshift.ClockOut == nil {
			break
		}

		return e.complexity.Workshift.ClockOut(childComplexity), true

	case "Workshift.clockoutlocation":
		if e.complexity.Workshift.ClockOutLocation == nil {
			break
		}

		return e.complexity.Workshift.ClockOutLocation(childComplexity), true

	case "Workshift.company":
		if e.complexity.Workshift.Company == nil {
			break
		}

		return e.complexity.Workshift.Company(childComplexity), true

	case "Workshift.createdat":
		if e.complexity.Workshift.CreatedAt == nil {
			break
		}

		return e.complexity.Workshift.CreatedAt(childComplexity), true

	case "Workshift.deletedat":
		if e.complexity.Workshift.DeletedAt == nil {
			break
		}

		return e.complexity.Workshift.DeletedAt(childComplexity), true

	case "Workshift.description":
		if e.complexity.Workshift.Description == nil {
			break
		}

		return e.complexity.Workshift.Description(childComplexity), true

	case "Workshift.editrequest":
		if e.complexity.Workshift.EditRequest == nil {
			break
		}

		return e.complexity.Workshift.EditRequest(childComplexity), true

	case "Workshift.id":
		if e.complexity.Workshift.ID == nil {
			break
		}

		return e.complexity.Workshift.ID(childComplexity), true

	case "Workshift.note":
		if e.complexity.Workshift.Note == nil {
			break
		}

		return e.complexity.Workshift.Note(childComplexity), true

	case "Workshift.status":
		if e.complexity.Workshift.Status == nil {
			break
		}

		return e.complexity.Workshift.Status(childComplexity), true

	case "Workshift.task":
		if e.complexity.Workshift.Task == nil {
			break
		}

		return e.complexity.Workshift.Task(childComplexity), true

	case "Workshift.updatedat":
		if e.complexity.Workshift.UpdatedAt == nil {
			break
		}

		return e.complexity.Workshift.UpdatedAt(childComplexity), true

	case "Workshift.user":
		if e.complexity.Workshift.User == nil {
			break
		}

		return e.complexity.Workshift.User(childComplexity), true

	case "Workshift.workshift":
		if e.complexity.Workshift.WorkShift == nil {
			break
		}

		return e.complexity.Workshift.WorkShift(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAccountingEntryOrder,
		ec.unmarshalInputAccountingEntryWhereInput,
		ec.unmarshalInputBaseEntryRegistrationInput,
		ec.unmarshalInputCompanyDocumentOrder,
		ec.unmarshalInputCompanyDocumentWhereInput,
		ec.unmarshalInputCompanyInfoInput,
		ec.unmarshalInputCompanyOrder,
		ec.unmarshalInputCompanyWhereInput,
		ec.unmarshalInputCreateAccountingEntryInput,
		ec.unmarshalInputCreateCompanyDocumentInput,
		ec.unmarshalInputCreateCompanyInput,
		ec.unmarshalInputCreateCustomerInput,
		ec.unmarshalInputCreateEmployeeInput,
		ec.unmarshalInputCreateFileInput,
		ec.unmarshalInputCreatePayableInput,
		ec.unmarshalInputCreateProductInput,
		ec.unmarshalInputCreateProjectInput,
		ec.unmarshalInputCreateProjectMilestoneInput,
		ec.unmarshalInputCreateProjectTaskInput,
		ec.unmarshalInputCreateReceivableInput,
		ec.unmarshalInputCreateSupplierInput,
		ec.unmarshalInputCreateTreasuryInput,
		ec.unmarshalInputCreateUserInput,
		ec.unmarshalInputCreateUserRoleInput,
		ec.unmarshalInputCreateWorkshiftInput,
		ec.unmarshalInputCustomerOrder,
		ec.unmarshalInputCustomerWhereInput,
		ec.unmarshalInputEmployeeOrder,
		ec.unmarshalInputEmployeeWhereInput,
		ec.unmarshalInputEntryItem,
		ec.unmarshalInputEntryProductInput,
		ec.unmarshalInputFileOrder,
		ec.unmarshalInputFileWhereInput,
		ec.unmarshalInputInitialSetupInput,
		ec.unmarshalInputInvoice,
		ec.unmarshalInputInvoiceCustomer,
		ec.unmarshalInputInvoiceInput,
		ec.unmarshalInputInvoiceIssuer,
		ec.unmarshalInputInvoiceTotals,
		ec.unmarshalInputLedgerDownloadInput,
		ec.unmarshalInputLoginInput,
		ec.unmarshalInputPayableInput,
		ec.unmarshalInputPayableOrder,
		ec.unmarshalInputPayableWhereInput,
		ec.unmarshalInputPaymentDetails,
		ec.unmarshalInputProductOrder,
		ec.unmarshalInputProductWhereInput,
		ec.unmarshalInputProjectMilestoneWhereInput,
		ec.unmarshalInputProjectOrder,
		ec.unmarshalInputProjectTaskOrder,
		ec.unmarshalInputProjectTaskWhereInput,
		ec.unmarshalInputProjectWhereInput,
		ec.unmarshalInputReceivableInput,
		ec.unmarshalInputReceivableOrder,
		ec.unmarshalInputReceivableWhereInput,
		ec.unmarshalInputReportInput,
		ec.unmarshalInputResetPasswordInput,
		ec.unmarshalInputSalesQuotationInput,
		ec.unmarshalInputSignupInput,
		ec.unmarshalInputSupplierOrder,
		ec.unmarshalInputSupplierWhereInput,
		ec.unmarshalInputTokenWhereInput,
		ec.unmarshalInputTreasuryOrder,
		ec.unmarshalInputTreasuryWhereInput,
		ec.unmarshalInputUpdateAccountingEntryInput,
		ec.unmarshalInputUpdateCompanyDocumentInput,
		ec.unmarshalInputUpdateCompanyInput,
		ec.unmarshalInputUpdateCustomerInput,
		ec.unmarshalInputUpdateEmployeeInput,
		ec.unmarshalInputUpdateFileInput,
		ec.unmarshalInputUpdatePayableInput,
		ec.unmarshalInputUpdateProductInput,
		ec.unmarshalInputUpdateProjectInput,
		ec.unmarshalInputUpdateProjectMilestoneInput,
		ec.unmarshalInputUpdateProjectTaskInput,
		ec.unmarshalInputUpdateReceivableInput,
		ec.unmarshalInputUpdateSupplierInput,
		ec.unmarshalInputUpdateTreasuryInput,
		ec.unmarshalInputUpdateUserInput,
		ec.unmarshalInputUpdateUserRoleInput,
		ec.unmarshalInputUpdateWorkshiftInput,
		ec.unmarshalInputUserOrder,
		ec.unmarshalInputUserRoleOrder,
		ec.unmarshalInputUserRoleWhereInput,
		ec.unmarshalInputUserWhereInput,
		ec.unmarshalInputWorkshiftOrder,
		ec.unmarshalInputWorkshiftWhereInput,
		ec.unmarshalInputinvitedUserSignupInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

//go:embed "accounting.graphql" "analytics.graphql" "app.graphql" "companyOps.graphql" "ent.graphql"
var sourcesFS embed.FS

func sourceData(filename string) string {
	data, err := sourcesFS.ReadFile(filename)
	if err != nil {
		panic(fmt.Sprintf("codegen problem: %s not available", filename))
	}
	return string(data)
}

var sources = []*ast.Source{
	{Name: "accounting.graphql", Input: sourceData("accounting.graphql"), BuiltIn: false},
	{Name: "analytics.graphql", Input: sourceData("analytics.graphql"), BuiltIn: false},
	{Name: "app.graphql", Input: sourceData("app.graphql"), BuiltIn: false},
	{Name: "companyOps.graphql", Input: sourceData("companyOps.graphql"), BuiltIn: false},
	{Name: "ent.graphql", Input: sourceData("ent.graphql"), BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_createCompany_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_createCompany_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createCompany_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*generated.CreateCompanyInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal *generated.CreateCompanyInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalOCreateCompanyInput2ᚖmazzaᚋentᚋgeneratedᚐCreateCompanyInput(ctx, tmp)
	}

	var zeroVal *generated.CreateCompanyInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createCustomer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_createCustomer_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createCustomer_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (generated.CreateCustomerInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal generated.CreateCustomerInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateCustomerInput2mazzaᚋentᚋgeneratedᚐCreateCustomerInput(ctx, tmp)
	}

	var zeroVal generated.CreateCustomerInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createEmployee_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_createEmployee_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createEmployee_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (generated.CreateEmployeeInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal generated.CreateEmployeeInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateEmployeeInput2mazzaᚋentᚋgeneratedᚐCreateEmployeeInput(ctx, tmp)
	}

	var zeroVal generated.CreateEmployeeInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_createProduct_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createProduct_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (generated.CreateProductInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal generated.CreateProductInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateProductInput2mazzaᚋentᚋgeneratedᚐCreateProductInput(ctx, tmp)
	}

	var zeroVal generated.CreateProductInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createProjectMilestone_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_createProjectMilestone_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createProjectMilestone_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (generated.CreateProjectMilestoneInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal generated.CreateProjectMilestoneInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateProjectMilestoneInput2mazzaᚋentᚋgeneratedᚐCreateProjectMilestoneInput(ctx, tmp)
	}

	var zeroVal generated.CreateProjectMilestoneInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createProjectTask_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_createProjectTask_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createProjectTask_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (generated.CreateProjectTaskInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal generated.CreateProjectTaskInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateProjectTaskInput2mazzaᚋentᚋgeneratedᚐCreateProjectTaskInput(ctx, tmp)
	}

	var zeroVal generated.CreateProjectTaskInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createProject_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_createProject_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createProject_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (generated.CreateProjectInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal generated.CreateProjectInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateProjectInput2mazzaᚋentᚋgeneratedᚐCreateProjectInput(ctx, tmp)
	}

	var zeroVal generated.CreateProjectInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createSupplier_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_createSupplier_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createSupplier_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (generated.CreateSupplierInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal generated.CreateSupplierInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateSupplierInput2mazzaᚋentᚋgeneratedᚐCreateSupplierInput(ctx, tmp)
	}

	var zeroVal generated.CreateSupplierInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createTreasury_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_createTreasury_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createTreasury_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (generated.CreateTreasuryInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal generated.CreateTreasuryInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateTreasuryInput2mazzaᚋentᚋgeneratedᚐCreateTreasuryInput(ctx, tmp)
	}

	var zeroVal generated.CreateTreasuryInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createUserRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_createUserRole_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createUserRole_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (generated.CreateUserRoleInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal generated.CreateUserRoleInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateUserRoleInput2mazzaᚋentᚋgeneratedᚐCreateUserRoleInput(ctx, tmp)
	}

	var zeroVal generated.CreateUserRoleInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_createUser_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createUser_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (generated.CreateUserInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal generated.CreateUserInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateUserInput2mazzaᚋentᚋgeneratedᚐCreateUserInput(ctx, tmp)
	}

	var zeroVal generated.CreateUserInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createWorkShift_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_createWorkShift_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createWorkShift_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (generated.CreateWorkshiftInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal generated.CreateWorkshiftInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateWorkshiftInput2mazzaᚋentᚋgeneratedᚐCreateWorkshiftInput(ctx, tmp)
	}

	var zeroVal generated.CreateWorkshiftInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteCustomer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_deleteCustomer_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteCustomer_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteDocuments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_deleteDocuments_argsIds(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ids"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteDocuments_argsIds(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["ids"]
	if !ok {
		var zeroVal []int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
	if tmp, ok := rawArgs["ids"]; ok {
		return ec.unmarshalNID2ᚕintᚄ(ctx, tmp)
	}

	var zeroVal []int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteEmployee_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_deleteEmployee_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteEmployee_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_deleteProduct_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteProduct_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteProjectMilestone_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_deleteProjectMilestone_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteProjectMilestone_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteProjectTask_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_deleteProjectTask_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteProjectTask_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteProject_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_deleteProject_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteProject_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteSupplier_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_deleteSupplier_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteSupplier_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteTreasury_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_deleteTreasury_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteTreasury_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteWorkShift_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_deleteWorkShift_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteWorkShift_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_forgotPassword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_forgotPassword_argsUsername(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["username"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_forgotPassword_argsUsername(
	ctx context.Context,
	rawArgs map[string]interface{},
) (string, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["username"]
	if !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
	if tmp, ok := rawArgs["username"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_initialSetup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_initialSetup_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_initialSetup_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (model.InitialSetupInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal model.InitialSetupInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNInitialSetupInput2mazzaᚋmazzaᚋgeneratedᚋmodelᚐInitialSetupInput(ctx, tmp)
	}

	var zeroVal model.InitialSetupInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_invitedUserSignup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_invitedUserSignup_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_invitedUserSignup_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (model.InvitedUserSignupInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal model.InvitedUserSignupInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNinvitedUserSignupInput2mazzaᚋmazzaᚋgeneratedᚋmodelᚐInvitedUserSignupInput(ctx, tmp)
	}

	var zeroVal model.InvitedUserSignupInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_issueInvoice_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_issueInvoice_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_issueInvoice_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (model.InvoiceInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal model.InvoiceInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNInvoiceInput2mazzaᚋmazzaᚋgeneratedᚋmodelᚐInvoiceInput(ctx, tmp)
	}

	var zeroVal model.InvoiceInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_issueSalesQuotation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_issueSalesQuotation_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_issueSalesQuotation_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (model.SalesQuotationInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal model.SalesQuotationInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNSalesQuotationInput2mazzaᚋmazzaᚋgeneratedᚋmodelᚐSalesQuotationInput(ctx, tmp)
	}

	var zeroVal model.SalesQuotationInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_registerAccountingEntries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_registerAccountingEntries_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_registerAccountingEntries_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (model.BaseEntryRegistrationInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal model.BaseEntryRegistrationInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNBaseEntryRegistrationInput2mazzaᚋmazzaᚋgeneratedᚋmodelᚐBaseEntryRegistrationInput(ctx, tmp)
	}

	var zeroVal model.BaseEntryRegistrationInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_resetPassword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_resetPassword_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_resetPassword_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (model.ResetPasswordInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal model.ResetPasswordInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNResetPasswordInput2mazzaᚋmazzaᚋgeneratedᚋmodelᚐResetPasswordInput(ctx, tmp)
	}

	var zeroVal model.ResetPasswordInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_signup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_signup_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_signup_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (model.SignupInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal model.SignupInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNSignupInput2mazzaᚋmazzaᚋgeneratedᚋmodelᚐSignupInput(ctx, tmp)
	}

	var zeroVal model.SignupInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_unsubscribe_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_unsubscribe_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_unsubscribe_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateCompany_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_updateCompany_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateCompany_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateCompany_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateCompany_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (generated.UpdateCompanyInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal generated.UpdateCompanyInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateCompanyInput2mazzaᚋentᚋgeneratedᚐUpdateCompanyInput(ctx, tmp)
	}

	var zeroVal generated.UpdateCompanyInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateCustomer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_updateCustomer_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateCustomer_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateCustomer_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateCustomer_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (generated.UpdateCustomerInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal generated.UpdateCustomerInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateCustomerInput2mazzaᚋentᚋgeneratedᚐUpdateCustomerInput(ctx, tmp)
	}

	var zeroVal generated.UpdateCustomerInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateDocument_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_updateDocument_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateDocument_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateDocument_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateDocument_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (generated.UpdateCompanyDocumentInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal generated.UpdateCompanyDocumentInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateCompanyDocumentInput2mazzaᚋentᚋgeneratedᚐUpdateCompanyDocumentInput(ctx, tmp)
	}

	var zeroVal generated.UpdateCompanyDocumentInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateEmployee_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_updateEmployee_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateEmployee_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateEmployee_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateEmployee_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (generated.UpdateEmployeeInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal generated.UpdateEmployeeInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateEmployeeInput2mazzaᚋentᚋgeneratedᚐUpdateEmployeeInput(ctx, tmp)
	}

	var zeroVal generated.UpdateEmployeeInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_updateProduct_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateProduct_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateProduct_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateProduct_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (generated.UpdateProductInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal generated.UpdateProductInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateProductInput2mazzaᚋentᚋgeneratedᚐUpdateProductInput(ctx, tmp)
	}

	var zeroVal generated.UpdateProductInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateProjectMilestone_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_updateProjectMilestone_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateProjectMilestone_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateProjectMilestone_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateProjectMilestone_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (generated.UpdateProjectMilestoneInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal generated.UpdateProjectMilestoneInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateProjectMilestoneInput2mazzaᚋentᚋgeneratedᚐUpdateProjectMilestoneInput(ctx, tmp)
	}

	var zeroVal generated.UpdateProjectMilestoneInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateProjectTask_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_updateProjectTask_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateProjectTask_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateProjectTask_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateProjectTask_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (generated.UpdateProjectTaskInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal generated.UpdateProjectTaskInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateProjectTaskInput2mazzaᚋentᚋgeneratedᚐUpdateProjectTaskInput(ctx, tmp)
	}

	var zeroVal generated.UpdateProjectTaskInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateProject_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_updateProject_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateProject_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateProject_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateProject_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (generated.UpdateProjectInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal generated.UpdateProjectInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateProjectInput2mazzaᚋentᚋgeneratedᚐUpdateProjectInput(ctx, tmp)
	}

	var zeroVal generated.UpdateProjectInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateSupplier_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_updateSupplier_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateSupplier_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateSupplier_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateSupplier_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (generated.UpdateSupplierInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal generated.UpdateSupplierInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateSupplierInput2mazzaᚋentᚋgeneratedᚐUpdateSupplierInput(ctx, tmp)
	}

	var zeroVal generated.UpdateSupplierInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateTreasury_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_updateTreasury_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateTreasury_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateTreasury_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateTreasury_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (generated.UpdateTreasuryInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal generated.UpdateTreasuryInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateTreasuryInput2mazzaᚋentᚋgeneratedᚐUpdateTreasuryInput(ctx, tmp)
	}

	var zeroVal generated.UpdateTreasuryInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_updateUser_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateUser_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateUser_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateUser_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (generated.UpdateUserInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal generated.UpdateUserInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateUserInput2mazzaᚋentᚋgeneratedᚐUpdateUserInput(ctx, tmp)
	}

	var zeroVal generated.UpdateUserInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateWorkShift_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_updateWorkShift_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateWorkShift_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateWorkShift_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateWorkShift_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (generated.UpdateWorkshiftInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal generated.UpdateWorkshiftInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateWorkshiftInput2mazzaᚋentᚋgeneratedᚐUpdateWorkshiftInput(ctx, tmp)
	}

	var zeroVal generated.UpdateWorkshiftInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_uploadDocument_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_uploadDocument_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_uploadDocument_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (generated.CreateCompanyDocumentInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal generated.CreateCompanyDocumentInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateCompanyDocumentInput2mazzaᚋentᚋgeneratedᚐCreateCompanyDocumentInput(ctx, tmp)
	}

	var zeroVal generated.CreateCompanyDocumentInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query___type_argsName(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["name"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query___type_argsName(
	ctx context.Context,
	rawArgs map[string]interface{},
) (string, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["name"]
	if !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
	if tmp, ok := rawArgs["name"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_accountingEntries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_accountingEntries_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_accountingEntries_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_accountingEntries_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_accountingEntries_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_accountingEntries_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Query_accountingEntries_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Query_accountingEntries_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[int], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_accountingEntries_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_accountingEntries_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[int], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_accountingEntries_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_accountingEntries_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]*generated.AccountingEntryOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal []*generated.AccountingEntryOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOAccountingEntryOrder2ᚕᚖmazzaᚋentᚋgeneratedᚐAccountingEntryOrderᚄ(ctx, tmp)
	}

	var zeroVal []*generated.AccountingEntryOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_accountingEntries_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*generated.AccountingEntryWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *generated.AccountingEntryWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOAccountingEntryWhereInput2ᚖmazzaᚋentᚋgeneratedᚐAccountingEntryWhereInput(ctx, tmp)
	}

	var zeroVal *generated.AccountingEntryWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_aggregateCustomers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_aggregateCustomers_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	arg1, err := ec.field_Query_aggregateCustomers_argsGroupBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["groupBy"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_aggregateCustomers_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*generated.CustomerWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *generated.CustomerWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOCustomerWhereInput2ᚖmazzaᚋentᚋgeneratedᚐCustomerWhereInput(ctx, tmp)
	}

	var zeroVal *generated.CustomerWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_aggregateCustomers_argsGroupBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]model.CustomersGroupBy, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["groupBy"]
	if !ok {
		var zeroVal []model.CustomersGroupBy
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("groupBy"))
	if tmp, ok := rawArgs["groupBy"]; ok {
		return ec.unmarshalOCustomersGroupBy2ᚕmazzaᚋmazzaᚋgeneratedᚋmodelᚐCustomersGroupByᚄ(ctx, tmp)
	}

	var zeroVal []model.CustomersGroupBy
	return zeroVal, nil
}

func (ec *executionContext) field_Query_aggregateReceivables_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_aggregateReceivables_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	arg1, err := ec.field_Query_aggregateReceivables_argsGroupBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["groupBy"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_aggregateReceivables_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*generated.ReceivableWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *generated.ReceivableWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOReceivableWhereInput2ᚖmazzaᚋentᚋgeneratedᚐReceivableWhereInput(ctx, tmp)
	}

	var zeroVal *generated.ReceivableWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_aggregateReceivables_argsGroupBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]model.ReceivablesGroupBy, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["groupBy"]
	if !ok {
		var zeroVal []model.ReceivablesGroupBy
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("groupBy"))
	if tmp, ok := rawArgs["groupBy"]; ok {
		return ec.unmarshalOReceivablesGroupBy2ᚕmazzaᚋmazzaᚋgeneratedᚋmodelᚐReceivablesGroupByᚄ(ctx, tmp)
	}

	var zeroVal []model.ReceivablesGroupBy
	return zeroVal, nil
}

func (ec *executionContext) field_Query_aggregateTreasury_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_aggregateTreasury_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_aggregateTreasury_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*generated.TreasuryWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *generated.TreasuryWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOTreasuryWhereInput2ᚖmazzaᚋentᚋgeneratedᚐTreasuryWhereInput(ctx, tmp)
	}

	var zeroVal *generated.TreasuryWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_aggregateWorkShift_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_aggregateWorkShift_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	arg1, err := ec.field_Query_aggregateWorkShift_argsGroupBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["groupBy"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_aggregateWorkShift_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*generated.WorkshiftWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *generated.WorkshiftWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOWorkshiftWhereInput2ᚖmazzaᚋentᚋgeneratedᚐWorkshiftWhereInput(ctx, tmp)
	}

	var zeroVal *generated.WorkshiftWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_aggregateWorkShift_argsGroupBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]model.ShiftGroupBy, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["groupBy"]
	if !ok {
		var zeroVal []model.ShiftGroupBy
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("groupBy"))
	if tmp, ok := rawArgs["groupBy"]; ok {
		return ec.unmarshalNShiftGroupBy2ᚕmazzaᚋmazzaᚋgeneratedᚋmodelᚐShiftGroupByᚄ(ctx, tmp)
	}

	var zeroVal []model.ShiftGroupBy
	return zeroVal, nil
}

func (ec *executionContext) field_Query_balanceSheet_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_balanceSheet_argsDate(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["date"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_balanceSheet_argsDate(
	ctx context.Context,
	rawArgs map[string]interface{},
) (time.Time, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["date"]
	if !ok {
		var zeroVal time.Time
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
	if tmp, ok := rawArgs["date"]; ok {
		return ec.unmarshalNTime2timeᚐTime(ctx, tmp)
	}

	var zeroVal time.Time
	return zeroVal, nil
}

func (ec *executionContext) field_Query_companies_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_companies_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_companies_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*generated.CompanyWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *generated.CompanyWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOCompanyWhereInput2ᚖmazzaᚋentᚋgeneratedᚐCompanyWhereInput(ctx, tmp)
	}

	var zeroVal *generated.CompanyWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_companyDocuments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_companyDocuments_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_companyDocuments_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_companyDocuments_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_companyDocuments_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_companyDocuments_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Query_companyDocuments_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Query_companyDocuments_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[int], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_companyDocuments_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_companyDocuments_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[int], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_companyDocuments_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_companyDocuments_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]*generated.CompanyDocumentOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal []*generated.CompanyDocumentOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOCompanyDocumentOrder2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyDocumentOrderᚄ(ctx, tmp)
	}

	var zeroVal []*generated.CompanyDocumentOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_companyDocuments_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*generated.CompanyDocumentWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *generated.CompanyDocumentWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOCompanyDocumentWhereInput2ᚖmazzaᚋentᚋgeneratedᚐCompanyDocumentWhereInput(ctx, tmp)
	}

	var zeroVal *generated.CompanyDocumentWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_customers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_customers_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_customers_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*generated.CustomerWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *generated.CustomerWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOCustomerWhereInput2ᚖmazzaᚋentᚋgeneratedᚐCustomerWhereInput(ctx, tmp)
	}

	var zeroVal *generated.CustomerWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_downloadBalanceSheet_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_downloadBalanceSheet_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_downloadBalanceSheet_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (model.ReportInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal model.ReportInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalNReportInput2mazzaᚋmazzaᚋgeneratedᚋmodelᚐReportInput(ctx, tmp)
	}

	var zeroVal model.ReportInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_downloadIncomeStatement_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_downloadIncomeStatement_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_downloadIncomeStatement_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (model.ReportInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal model.ReportInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalNReportInput2mazzaᚋmazzaᚋgeneratedᚋmodelᚐReportInput(ctx, tmp)
	}

	var zeroVal model.ReportInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_downloadLedger_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_downloadLedger_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_downloadLedger_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (model.LedgerDownloadInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal model.LedgerDownloadInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalNLedgerDownloadInput2mazzaᚋmazzaᚋgeneratedᚋmodelᚐLedgerDownloadInput(ctx, tmp)
	}

	var zeroVal model.LedgerDownloadInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_downloadTrialBalance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_downloadTrialBalance_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_downloadTrialBalance_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (model.ReportInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal model.ReportInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalNReportInput2mazzaᚋmazzaᚋgeneratedᚋmodelᚐReportInput(ctx, tmp)
	}

	var zeroVal model.ReportInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_employees_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_employees_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_employees_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*generated.EmployeeWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *generated.EmployeeWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOEmployeeWhereInput2ᚖmazzaᚋentᚋgeneratedᚐEmployeeWhereInput(ctx, tmp)
	}

	var zeroVal *generated.EmployeeWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_expensesBreakdown_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_expensesBreakdown_argsRange(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["range"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_expensesBreakdown_argsRange(
	ctx context.Context,
	rawArgs map[string]interface{},
) (model.TimeRange, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["range"]
	if !ok {
		var zeroVal model.TimeRange
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("range"))
	if tmp, ok := rawArgs["range"]; ok {
		return ec.unmarshalNTimeRange2mazzaᚋmazzaᚋgeneratedᚋmodelᚐTimeRange(ctx, tmp)
	}

	var zeroVal model.TimeRange
	return zeroVal, nil
}

func (ec *executionContext) field_Query_files_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_files_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_files_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_files_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_files_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_files_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Query_files_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Query_files_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[int], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_files_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_files_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[int], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_files_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_files_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*generated.FileOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal *generated.FileOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOFileOrder2ᚖmazzaᚋentᚋgeneratedᚐFileOrder(ctx, tmp)
	}

	var zeroVal *generated.FileOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_files_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*generated.FileWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *generated.FileWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOFileWhereInput2ᚖmazzaᚋentᚋgeneratedᚐFileWhereInput(ctx, tmp)
	}

	var zeroVal *generated.FileWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_incomeStatement_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_incomeStatement_argsDate(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["date"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_incomeStatement_argsDate(
	ctx context.Context,
	rawArgs map[string]interface{},
) (time.Time, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["date"]
	if !ok {
		var zeroVal time.Time
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
	if tmp, ok := rawArgs["date"]; ok {
		return ec.unmarshalNTime2timeᚐTime(ctx, tmp)
	}

	var zeroVal time.Time
	return zeroVal, nil
}

func (ec *executionContext) field_Query_lowStock_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_lowStock_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_lowStock_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*generated.ProductWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *generated.ProductWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOProductWhereInput2ᚖmazzaᚋentᚋgeneratedᚐProductWhereInput(ctx, tmp)
	}

	var zeroVal *generated.ProductWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_node_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_node_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_node_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_nodes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_nodes_argsIds(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ids"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_nodes_argsIds(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["ids"]
	if !ok {
		var zeroVal []int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
	if tmp, ok := rawArgs["ids"]; ok {
		return ec.unmarshalNID2ᚕintᚄ(ctx, tmp)
	}

	var zeroVal []int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_numberOfLowStock_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_numberOfLowStock_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_numberOfLowStock_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*generated.ProductWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *generated.ProductWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOProductWhereInput2ᚖmazzaᚋentᚋgeneratedᚐProductWhereInput(ctx, tmp)
	}

	var zeroVal *generated.ProductWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_numberOfOutOfStock_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_numberOfOutOfStock_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_numberOfOutOfStock_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*generated.ProductWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *generated.ProductWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOProductWhereInput2ᚖmazzaᚋentᚋgeneratedᚐProductWhereInput(ctx, tmp)
	}

	var zeroVal *generated.ProductWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_numberOfProducts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_numberOfProducts_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_numberOfProducts_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*generated.ProductWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *generated.ProductWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOProductWhereInput2ᚖmazzaᚋentᚋgeneratedᚐProductWhereInput(ctx, tmp)
	}

	var zeroVal *generated.ProductWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_payables_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_payables_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_payables_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_payables_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_payables_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_payables_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Query_payables_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Query_payables_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[int], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_payables_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_payables_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[int], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_payables_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_payables_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]*generated.PayableOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal []*generated.PayableOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOPayableOrder2ᚕᚖmazzaᚋentᚋgeneratedᚐPayableOrderᚄ(ctx, tmp)
	}

	var zeroVal []*generated.PayableOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_payables_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*generated.PayableWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *generated.PayableWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOPayableWhereInput2ᚖmazzaᚋentᚋgeneratedᚐPayableWhereInput(ctx, tmp)
	}

	var zeroVal *generated.PayableWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_products_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_products_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_products_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*generated.ProductWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *generated.ProductWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOProductWhereInput2ᚖmazzaᚋentᚋgeneratedᚐProductWhereInput(ctx, tmp)
	}

	var zeroVal *generated.ProductWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_projectTasks_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_projectTasks_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_projectTasks_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_projectTasks_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_projectTasks_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_projectTasks_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Query_projectTasks_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Query_projectTasks_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[int], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_projectTasks_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_projectTasks_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[int], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_projectTasks_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_projectTasks_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]*generated.ProjectTaskOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal []*generated.ProjectTaskOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOProjectTaskOrder2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectTaskOrderᚄ(ctx, tmp)
	}

	var zeroVal []*generated.ProjectTaskOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_projectTasks_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*generated.ProjectTaskWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *generated.ProjectTaskWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOProjectTaskWhereInput2ᚖmazzaᚋentᚋgeneratedᚐProjectTaskWhereInput(ctx, tmp)
	}

	var zeroVal *generated.ProjectTaskWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_projects_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_projects_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_projects_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_projects_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_projects_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_projects_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Query_projects_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Query_projects_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[int], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_projects_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_projects_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[int], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_projects_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_projects_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]*generated.ProjectOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal []*generated.ProjectOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOProjectOrder2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectOrderᚄ(ctx, tmp)
	}

	var zeroVal []*generated.ProjectOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_projects_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*generated.ProjectWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *generated.ProjectWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOProjectWhereInput2ᚖmazzaᚋentᚋgeneratedᚐProjectWhereInput(ctx, tmp)
	}

	var zeroVal *generated.ProjectWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_receivables_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_receivables_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_receivables_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_receivables_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_receivables_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_receivables_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Query_receivables_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Query_receivables_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[int], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_receivables_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_receivables_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[int], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_receivables_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_receivables_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]*generated.ReceivableOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal []*generated.ReceivableOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOReceivableOrder2ᚕᚖmazzaᚋentᚋgeneratedᚐReceivableOrderᚄ(ctx, tmp)
	}

	var zeroVal []*generated.ReceivableOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_receivables_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*generated.ReceivableWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *generated.ReceivableWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOReceivableWhereInput2ᚖmazzaᚋentᚋgeneratedᚐReceivableWhereInput(ctx, tmp)
	}

	var zeroVal *generated.ReceivableWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_retrieveProjectTask_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_retrieveProjectTask_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_retrieveProjectTask_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_retrieveProject_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_retrieveProject_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_retrieveProject_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_revenueTrend_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_revenueTrend_argsRange(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["range"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_revenueTrend_argsRange(
	ctx context.Context,
	rawArgs map[string]interface{},
) (model.TimeRange, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["range"]
	if !ok {
		var zeroVal model.TimeRange
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("range"))
	if tmp, ok := rawArgs["range"]; ok {
		return ec.unmarshalNTimeRange2mazzaᚋmazzaᚋgeneratedᚋmodelᚐTimeRange(ctx, tmp)
	}

	var zeroVal model.TimeRange
	return zeroVal, nil
}

func (ec *executionContext) field_Query_suppliers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_suppliers_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_suppliers_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*generated.SupplierWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *generated.SupplierWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOSupplierWhereInput2ᚖmazzaᚋentᚋgeneratedᚐSupplierWhereInput(ctx, tmp)
	}

	var zeroVal *generated.SupplierWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_treasuries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_treasuries_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_treasuries_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*generated.TreasuryWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *generated.TreasuryWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOTreasuryWhereInput2ᚖmazzaᚋentᚋgeneratedᚐTreasuryWhereInput(ctx, tmp)
	}

	var zeroVal *generated.TreasuryWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_trialBalance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_trialBalance_argsDate(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["date"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_trialBalance_argsDate(
	ctx context.Context,
	rawArgs map[string]interface{},
) (time.Time, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["date"]
	if !ok {
		var zeroVal time.Time
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
	if tmp, ok := rawArgs["date"]; ok {
		return ec.unmarshalNTime2timeᚐTime(ctx, tmp)
	}

	var zeroVal time.Time
	return zeroVal, nil
}

func (ec *executionContext) field_Query_userRoles_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_userRoles_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_userRoles_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*generated.UserRoleWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *generated.UserRoleWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOUserRoleWhereInput2ᚖmazzaᚋentᚋgeneratedᚐUserRoleWhereInput(ctx, tmp)
	}

	var zeroVal *generated.UserRoleWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_users_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_users_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_users_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*generated.UserWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *generated.UserWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOUserWhereInput2ᚖmazzaᚋentᚋgeneratedᚐUserWhereInput(ctx, tmp)
	}

	var zeroVal *generated.UserWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_verifyPasswordResetToken_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_verifyPasswordResetToken_argsToken(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["token"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_verifyPasswordResetToken_argsToken(
	ctx context.Context,
	rawArgs map[string]interface{},
) (string, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["token"]
	if !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
	if tmp, ok := rawArgs["token"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_workShifts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_workShifts_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_workShifts_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*generated.WorkshiftWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *generated.WorkshiftWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOWorkshiftWhereInput2ᚖmazzaᚋentᚋgeneratedᚐWorkshiftWhereInput(ctx, tmp)
	}

	var zeroVal *generated.WorkshiftWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field___Type_enumValues_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Type_enumValues_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]interface{},
) (bool, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["includeDeprecated"]
	if !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field___Type_fields_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Type_fields_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]interface{},
) (bool, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["includeDeprecated"]
	if !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _AccountingEntry_id(ctx context.Context, field graphql.CollectedField, obj *generated.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntry_createdat(ctx context.Context, field graphql.CollectedField, obj *generated.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_createdat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_createdat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntry_updatedat(ctx context.Context, field graphql.CollectedField, obj *generated.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_updatedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_updatedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntry_deletedat(ctx context.Context, field graphql.CollectedField, obj *generated.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_deletedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_deletedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntry_number(ctx context.Context, field graphql.CollectedField, obj *generated.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Number, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_number(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntry_group(ctx context.Context, field graphql.CollectedField, obj *generated.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_group(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Group, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_group(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntry_date(ctx context.Context, field graphql.CollectedField, obj *generated.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_date(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntry_account(ctx context.Context, field graphql.CollectedField, obj *generated.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_account(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Account, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_account(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntry_label(ctx context.Context, field graphql.CollectedField, obj *generated.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_label(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntry_amount(ctx context.Context, field graphql.CollectedField, obj *generated.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntry_description(ctx context.Context, field graphql.CollectedField, obj *generated.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntry_accounttype(ctx context.Context, field graphql.CollectedField, obj *generated.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_accounttype(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(accountingentry.AccountType)
	fc.Result = res
	return ec.marshalNAccountingEntryAccountType2mazzaᚋentᚋgeneratedᚋaccountingentryᚐAccountType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_accounttype(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AccountingEntryAccountType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntry_category(ctx context.Context, field graphql.CollectedField, obj *generated.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_category(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntry_isdebit(ctx context.Context, field graphql.CollectedField, obj *generated.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_isdebit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDebit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_isdebit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntry_isreversal(ctx context.Context, field graphql.CollectedField, obj *generated.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_isreversal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReversal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_isreversal(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntry_reversed(ctx context.Context, field graphql.CollectedField, obj *generated.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_reversed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reversed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_reversed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntry_company(ctx context.Context, field graphql.CollectedField, obj *generated.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.Company)
	fc.Result = res
	return ec.marshalOCompany2ᚖmazzaᚋentᚋgeneratedᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "industry":
				return ec.fieldContext_Company_industry(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "incompletesetup":
				return ec.fieldContext_Company_incompletesetup(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "documents":
				return ec.fieldContext_Company_documents(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "projects":
				return ec.fieldContext_Company_projects(ctx, field)
			case "payables":
				return ec.fieldContext_Company_payables(ctx, field)
			case "receivables":
				return ec.fieldContext_Company_receivables(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntry_user(ctx context.Context, field graphql.CollectedField, obj *generated.AccountingEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntry_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.User)
	fc.Result = res
	return ec.marshalOUser2ᚖmazzaᚋentᚋgeneratedᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntry_user(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntry",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdat":
				return ec.fieldContext_User_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_User_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_User_deletedat(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "birthdate":
				return ec.fieldContext_User_birthdate(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "notverified":
				return ec.fieldContext_User_notverified(ctx, field)
			case "accountingentries":
				return ec.fieldContext_User_accountingentries(ctx, field)
			case "company":
				return ec.fieldContext_User_company(ctx, field)
			case "assignedroles":
				return ec.fieldContext_User_assignedroles(ctx, field)
			case "subordinates":
				return ec.fieldContext_User_subordinates(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "employee":
				return ec.fieldContext_User_employee(ctx, field)
			case "createdprojects":
				return ec.fieldContext_User_createdprojects(ctx, field)
			case "leaderedprojects":
				return ec.fieldContext_User_leaderedprojects(ctx, field)
			case "assignedprojecttasks":
				return ec.fieldContext_User_assignedprojecttasks(ctx, field)
			case "participatedprojecttasks":
				return ec.fieldContext_User_participatedprojecttasks(ctx, field)
			case "createdtasks":
				return ec.fieldContext_User_createdtasks(ctx, field)
			case "tokens":
				return ec.fieldContext_User_tokens(ctx, field)
			case "approvedworkshifts":
				return ec.fieldContext_User_approvedworkshifts(ctx, field)
			case "workshifts":
				return ec.fieldContext_User_workshifts(ctx, field)
			case "uploadeddocuments":
				return ec.fieldContext_User_uploadeddocuments(ctx, field)
			case "approveddocuments":
				return ec.fieldContext_User_approveddocuments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntryConnection_edges(ctx context.Context, field graphql.CollectedField, obj *generated.AccountingEntryConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntryConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.AccountingEntryEdge)
	fc.Result = res
	return ec.marshalOAccountingEntryEdge2ᚕᚖmazzaᚋentᚋgeneratedᚐAccountingEntryEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntryConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntryConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_AccountingEntryEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_AccountingEntryEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountingEntryEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntryConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *generated.AccountingEntryConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntryConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[int])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntryConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntryConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntryConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *generated.AccountingEntryConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntryConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntryConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntryConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntryEdge_node(ctx context.Context, field graphql.CollectedField, obj *generated.AccountingEntryEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntryEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.AccountingEntry)
	fc.Result = res
	return ec.marshalOAccountingEntry2ᚖmazzaᚋentᚋgeneratedᚐAccountingEntry(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntryEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntryEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AccountingEntry_id(ctx, field)
			case "createdat":
				return ec.fieldContext_AccountingEntry_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_AccountingEntry_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_AccountingEntry_deletedat(ctx, field)
			case "number":
				return ec.fieldContext_AccountingEntry_number(ctx, field)
			case "group":
				return ec.fieldContext_AccountingEntry_group(ctx, field)
			case "date":
				return ec.fieldContext_AccountingEntry_date(ctx, field)
			case "account":
				return ec.fieldContext_AccountingEntry_account(ctx, field)
			case "label":
				return ec.fieldContext_AccountingEntry_label(ctx, field)
			case "amount":
				return ec.fieldContext_AccountingEntry_amount(ctx, field)
			case "description":
				return ec.fieldContext_AccountingEntry_description(ctx, field)
			case "accounttype":
				return ec.fieldContext_AccountingEntry_accounttype(ctx, field)
			case "category":
				return ec.fieldContext_AccountingEntry_category(ctx, field)
			case "isdebit":
				return ec.fieldContext_AccountingEntry_isdebit(ctx, field)
			case "isreversal":
				return ec.fieldContext_AccountingEntry_isreversal(ctx, field)
			case "reversed":
				return ec.fieldContext_AccountingEntry_reversed(ctx, field)
			case "company":
				return ec.fieldContext_AccountingEntry_company(ctx, field)
			case "user":
				return ec.fieldContext_AccountingEntry_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountingEntry", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountingEntryEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *generated.AccountingEntryEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountingEntryEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[int])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountingEntryEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountingEntryEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AgingBucket_range(ctx context.Context, field graphql.CollectedField, obj *model.AgingBucket) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AgingBucket_range(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Range, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AgingBucket_range(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AgingBucket",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AgingBucket_totalAmount(ctx context.Context, field graphql.CollectedField, obj *model.AgingBucket) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AgingBucket_totalAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AgingBucket_totalAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AgingBucket",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AgingBucket_count(ctx context.Context, field graphql.CollectedField, obj *model.AgingBucket) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AgingBucket_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AgingBucket_count(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AgingBucket",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Assets_currentAssets(ctx context.Context, field graphql.CollectedField, obj *model.Assets) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Assets_currentAssets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentAssets, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ReportRowItem)
	fc.Result = res
	return ec.marshalNReportRowItem2ᚕᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐReportRowItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Assets_currentAssets(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Assets",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "account":
				return ec.fieldContext_ReportRowItem_account(ctx, field)
			case "label":
				return ec.fieldContext_ReportRowItem_label(ctx, field)
			case "value":
				return ec.fieldContext_ReportRowItem_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ReportRowItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Assets_totalCurrentAssets(ctx context.Context, field graphql.CollectedField, obj *model.Assets) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Assets_totalCurrentAssets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCurrentAssets, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Assets_totalCurrentAssets(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Assets",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Assets_fixedAssets(ctx context.Context, field graphql.CollectedField, obj *model.Assets) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Assets_fixedAssets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FixedAssets, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ReportRowItem)
	fc.Result = res
	return ec.marshalNReportRowItem2ᚕᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐReportRowItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Assets_fixedAssets(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Assets",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "account":
				return ec.fieldContext_ReportRowItem_account(ctx, field)
			case "label":
				return ec.fieldContext_ReportRowItem_label(ctx, field)
			case "value":
				return ec.fieldContext_ReportRowItem_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ReportRowItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Assets_totalFixedAssets(ctx context.Context, field graphql.CollectedField, obj *model.Assets) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Assets_totalFixedAssets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalFixedAssets, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Assets_totalFixedAssets(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Assets",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Assets_totalAssets(ctx context.Context, field graphql.CollectedField, obj *model.Assets) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Assets_totalAssets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalAssets, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Assets_totalAssets(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Assets",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetOuput_assets(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetOuput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetOuput_assets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Assets, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Assets)
	fc.Result = res
	return ec.marshalNAssets2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐAssets(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetOuput_assets(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetOuput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "currentAssets":
				return ec.fieldContext_Assets_currentAssets(ctx, field)
			case "totalCurrentAssets":
				return ec.fieldContext_Assets_totalCurrentAssets(ctx, field)
			case "fixedAssets":
				return ec.fieldContext_Assets_fixedAssets(ctx, field)
			case "totalFixedAssets":
				return ec.fieldContext_Assets_totalFixedAssets(ctx, field)
			case "totalAssets":
				return ec.fieldContext_Assets_totalAssets(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Assets", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetOuput_liabilities(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetOuput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetOuput_liabilities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Liabilities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Liabilities)
	fc.Result = res
	return ec.marshalNLiabilities2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐLiabilities(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetOuput_liabilities(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetOuput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "currentLiabilities":
				return ec.fieldContext_Liabilities_currentLiabilities(ctx, field)
			case "totalCurrentLiabilities":
				return ec.fieldContext_Liabilities_totalCurrentLiabilities(ctx, field)
			case "nonCurrentLiabilities":
				return ec.fieldContext_Liabilities_nonCurrentLiabilities(ctx, field)
			case "totalNonCurrentLiabilities":
				return ec.fieldContext_Liabilities_totalNonCurrentLiabilities(ctx, field)
			case "totalLiabilities":
				return ec.fieldContext_Liabilities_totalLiabilities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Liabilities", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetOuput_equity(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetOuput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetOuput_equity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Equity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Equity)
	fc.Result = res
	return ec.marshalNEquity2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐEquity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetOuput_equity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetOuput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "equity":
				return ec.fieldContext_Equity_equity(ctx, field)
			case "totalEquity":
				return ec.fieldContext_Equity_totalEquity(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Equity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetOuput_totalLiabilityAndEquity(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetOuput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetOuput_totalLiabilityAndEquity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalLiabilityAndEquity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetOuput_totalLiabilityAndEquity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetOuput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetOuput_period(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetOuput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetOuput_period(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Period, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Period)
	fc.Result = res
	return ec.marshalNPeriod2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetOuput_period(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetOuput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "start":
				return ec.fieldContext_Period_start(ctx, field)
			case "end":
				return ec.fieldContext_Period_end(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Period", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BalanceSheetOuput_isProvisional(ctx context.Context, field graphql.CollectedField, obj *model.BalanceSheetOuput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BalanceSheetOuput_isProvisional(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsProvisional, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BalanceSheetOuput_isProvisional(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BalanceSheetOuput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_id(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_createdat(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_createdat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_createdat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_updatedat(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_updatedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_updatedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_deletedat(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_deletedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_deletedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_address(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_address(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_basecurrency(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_basecurrency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BaseCurrency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_basecurrency(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_ceoname(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_ceoname(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CeoName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_ceoname(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_city(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_city(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_city(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_country(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_country(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_establishedat(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_establishedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EstablishedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_establishedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_description(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_email(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_industry(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_industry(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Industry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_industry(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_lastentrydate(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_lastentrydate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastEntryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_lastentrydate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_lastinvoicenumber(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_lastinvoicenumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastInvoiceNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_lastinvoicenumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_logo(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_logo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Logo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_logo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_name(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_numberofemployees(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_numberofemployees(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumberOfEmployees, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalNInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_numberofemployees(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_phone(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_phone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_phone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_sector(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_sector(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sector, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_sector(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_taxid(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_taxid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxId, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalNString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_taxid(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_vatrate(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_vatrate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VatRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_vatrate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_website(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_website(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Website, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_website(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_incompletesetup(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_incompletesetup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IncompleteSetup, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_incompletesetup(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_availableroles(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_availableroles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvailableRoles(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.UserRole)
	fc.Result = res
	return ec.marshalOUserRole2ᚕᚖmazzaᚋentᚋgeneratedᚐUserRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_availableroles(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserRole_id(ctx, field)
			case "role":
				return ec.fieldContext_UserRole_role(ctx, field)
			case "company":
				return ec.fieldContext_UserRole_company(ctx, field)
			case "user":
				return ec.fieldContext_UserRole_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserRole", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_accountingentries(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_accountingentries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountingEntries(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.AccountingEntry)
	fc.Result = res
	return ec.marshalOAccountingEntry2ᚕᚖmazzaᚋentᚋgeneratedᚐAccountingEntryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_accountingentries(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AccountingEntry_id(ctx, field)
			case "createdat":
				return ec.fieldContext_AccountingEntry_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_AccountingEntry_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_AccountingEntry_deletedat(ctx, field)
			case "number":
				return ec.fieldContext_AccountingEntry_number(ctx, field)
			case "group":
				return ec.fieldContext_AccountingEntry_group(ctx, field)
			case "date":
				return ec.fieldContext_AccountingEntry_date(ctx, field)
			case "account":
				return ec.fieldContext_AccountingEntry_account(ctx, field)
			case "label":
				return ec.fieldContext_AccountingEntry_label(ctx, field)
			case "amount":
				return ec.fieldContext_AccountingEntry_amount(ctx, field)
			case "description":
				return ec.fieldContext_AccountingEntry_description(ctx, field)
			case "accounttype":
				return ec.fieldContext_AccountingEntry_accounttype(ctx, field)
			case "category":
				return ec.fieldContext_AccountingEntry_category(ctx, field)
			case "isdebit":
				return ec.fieldContext_AccountingEntry_isdebit(ctx, field)
			case "isreversal":
				return ec.fieldContext_AccountingEntry_isreversal(ctx, field)
			case "reversed":
				return ec.fieldContext_AccountingEntry_reversed(ctx, field)
			case "company":
				return ec.fieldContext_AccountingEntry_company(ctx, field)
			case "user":
				return ec.fieldContext_AccountingEntry_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountingEntry", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_customers(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_customers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Customers(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Customer)
	fc.Result = res
	return ec.marshalOCustomer2ᚕᚖmazzaᚋentᚋgeneratedᚐCustomerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_customers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Customer_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Customer_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Customer_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Customer_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Customer_address(ctx, field)
			case "city":
				return ec.fieldContext_Customer_city(ctx, field)
			case "country":
				return ec.fieldContext_Customer_country(ctx, field)
			case "description":
				return ec.fieldContext_Customer_description(ctx, field)
			case "email":
				return ec.fieldContext_Customer_email(ctx, field)
			case "isdefault":
				return ec.fieldContext_Customer_isdefault(ctx, field)
			case "name":
				return ec.fieldContext_Customer_name(ctx, field)
			case "phone":
				return ec.fieldContext_Customer_phone(ctx, field)
			case "taxid":
				return ec.fieldContext_Customer_taxid(ctx, field)
			case "company":
				return ec.fieldContext_Customer_company(ctx, field)
			case "receivables":
				return ec.fieldContext_Customer_receivables(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Customer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_documents(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_documents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Documents(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.CompanyDocument)
	fc.Result = res
	return ec.marshalOCompanyDocument2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyDocumentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_documents(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CompanyDocument_id(ctx, field)
			case "createdat":
				return ec.fieldContext_CompanyDocument_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_CompanyDocument_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_CompanyDocument_deletedat(ctx, field)
			case "filename":
				return ec.fieldContext_CompanyDocument_filename(ctx, field)
			case "title":
				return ec.fieldContext_CompanyDocument_title(ctx, field)
			case "keywords":
				return ec.fieldContext_CompanyDocument_keywords(ctx, field)
			case "category":
				return ec.fieldContext_CompanyDocument_category(ctx, field)
			case "size":
				return ec.fieldContext_CompanyDocument_size(ctx, field)
			case "filetype":
				return ec.fieldContext_CompanyDocument_filetype(ctx, field)
			case "status":
				return ec.fieldContext_CompanyDocument_status(ctx, field)
			case "url":
				return ec.fieldContext_CompanyDocument_url(ctx, field)
			case "thumbnail":
				return ec.fieldContext_CompanyDocument_thumbnail(ctx, field)
			case "expirydate":
				return ec.fieldContext_CompanyDocument_expirydate(ctx, field)
			case "company":
				return ec.fieldContext_CompanyDocument_company(ctx, field)
			case "uploadedby":
				return ec.fieldContext_CompanyDocument_uploadedby(ctx, field)
			case "approvedby":
				return ec.fieldContext_CompanyDocument_approvedby(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompanyDocument", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_employees(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_employees(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Employees(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Employee)
	fc.Result = res
	return ec.marshalOEmployee2ᚕᚖmazzaᚋentᚋgeneratedᚐEmployeeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_employees(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Employee_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Employee_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Employee_deletedat(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "gender":
				return ec.fieldContext_Employee_gender(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "company":
				return ec.fieldContext_Employee_company(ctx, field)
			case "user":
				return ec.fieldContext_Employee_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_files(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_files(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Files(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.File)
	fc.Result = res
	return ec.marshalOFile2ᚕᚖmazzaᚋentᚋgeneratedᚐFileᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_files(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_File_id(ctx, field)
			case "createdat":
				return ec.fieldContext_File_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_File_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_File_deletedat(ctx, field)
			case "category":
				return ec.fieldContext_File_category(ctx, field)
			case "extension":
				return ec.fieldContext_File_extension(ctx, field)
			case "size":
				return ec.fieldContext_File_size(ctx, field)
			case "url":
				return ec.fieldContext_File_url(ctx, field)
			case "description":
				return ec.fieldContext_File_description(ctx, field)
			case "company":
				return ec.fieldContext_File_company(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type File", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_products(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_products(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Products(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Product)
	fc.Result = res
	return ec.marshalOProduct2ᚕᚖmazzaᚋentᚋgeneratedᚐProductᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_products(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Product_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Product_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Product_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Product_deletedat(ctx, field)
			case "stock":
				return ec.fieldContext_Product_stock(ctx, field)
			case "company":
				return ec.fieldContext_Product_company(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Product", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_projects(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_projects(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Projects(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Project)
	fc.Result = res
	return ec.marshalOProject2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_projects(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Project_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Project_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Project_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Project_deletedat(ctx, field)
			case "name":
				return ec.fieldContext_Project_name(ctx, field)
			case "description":
				return ec.fieldContext_Project_description(ctx, field)
			case "startdate":
				return ec.fieldContext_Project_startdate(ctx, field)
			case "enddate":
				return ec.fieldContext_Project_enddate(ctx, field)
			case "progress":
				return ec.fieldContext_Project_progress(ctx, field)
			case "status":
				return ec.fieldContext_Project_status(ctx, field)
			case "company":
				return ec.fieldContext_Project_company(ctx, field)
			case "createdby":
				return ec.fieldContext_Project_createdby(ctx, field)
			case "leader":
				return ec.fieldContext_Project_leader(ctx, field)
			case "tasks":
				return ec.fieldContext_Project_tasks(ctx, field)
			case "milestones":
				return ec.fieldContext_Project_milestones(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Project", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_payables(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_payables(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Payables(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Payable)
	fc.Result = res
	return ec.marshalOPayable2ᚕᚖmazzaᚋentᚋgeneratedᚐPayableᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_payables(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Payable_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Payable_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Payable_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Payable_deletedat(ctx, field)
			case "entrygroup":
				return ec.fieldContext_Payable_entrygroup(ctx, field)
			case "date":
				return ec.fieldContext_Payable_date(ctx, field)
			case "name":
				return ec.fieldContext_Payable_name(ctx, field)
			case "outstandingbalance":
				return ec.fieldContext_Payable_outstandingbalance(ctx, field)
			case "totaltransaction":
				return ec.fieldContext_Payable_totaltransaction(ctx, field)
			case "duedate":
				return ec.fieldContext_Payable_duedate(ctx, field)
			case "status":
				return ec.fieldContext_Payable_status(ctx, field)
			case "company":
				return ec.fieldContext_Payable_company(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Payable", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_receivables(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_receivables(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Receivables(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Receivable)
	fc.Result = res
	return ec.marshalOReceivable2ᚕᚖmazzaᚋentᚋgeneratedᚐReceivableᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_receivables(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Receivable_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Receivable_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Receivable_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Receivable_deletedat(ctx, field)
			case "entrygroup":
				return ec.fieldContext_Receivable_entrygroup(ctx, field)
			case "date":
				return ec.fieldContext_Receivable_date(ctx, field)
			case "name":
				return ec.fieldContext_Receivable_name(ctx, field)
			case "outstandingbalance":
				return ec.fieldContext_Receivable_outstandingbalance(ctx, field)
			case "totaltransaction":
				return ec.fieldContext_Receivable_totaltransaction(ctx, field)
			case "duedate":
				return ec.fieldContext_Receivable_duedate(ctx, field)
			case "status":
				return ec.fieldContext_Receivable_status(ctx, field)
			case "company":
				return ec.fieldContext_Receivable_company(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Receivable", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_suppliers(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_suppliers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Suppliers(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Supplier)
	fc.Result = res
	return ec.marshalOSupplier2ᚕᚖmazzaᚋentᚋgeneratedᚐSupplierᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_suppliers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Supplier_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Supplier_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Supplier_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Supplier_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Supplier_address(ctx, field)
			case "city":
				return ec.fieldContext_Supplier_city(ctx, field)
			case "country":
				return ec.fieldContext_Supplier_country(ctx, field)
			case "description":
				return ec.fieldContext_Supplier_description(ctx, field)
			case "email":
				return ec.fieldContext_Supplier_email(ctx, field)
			case "isdefault":
				return ec.fieldContext_Supplier_isdefault(ctx, field)
			case "name":
				return ec.fieldContext_Supplier_name(ctx, field)
			case "phone":
				return ec.fieldContext_Supplier_phone(ctx, field)
			case "taxid":
				return ec.fieldContext_Supplier_taxid(ctx, field)
			case "company":
				return ec.fieldContext_Supplier_company(ctx, field)
			case "payables":
				return ec.fieldContext_Supplier_payables(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Supplier", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_tokens(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_tokens(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tokens(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Token)
	fc.Result = res
	return ec.marshalOToken2ᚕᚖmazzaᚋentᚋgeneratedᚐTokenᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_tokens(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Token_id(ctx, field)
			case "expiry":
				return ec.fieldContext_Token_expiry(ctx, field)
			case "category":
				return ec.fieldContext_Token_category(ctx, field)
			case "token":
				return ec.fieldContext_Token_token(ctx, field)
			case "company":
				return ec.fieldContext_Token_company(ctx, field)
			case "user":
				return ec.fieldContext_Token_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Token", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_treasuries(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_treasuries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Treasuries(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Treasury)
	fc.Result = res
	return ec.marshalOTreasury2ᚕᚖmazzaᚋentᚋgeneratedᚐTreasuryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_treasuries(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Treasury_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Treasury_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Treasury_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Treasury_deletedat(ctx, field)
			case "balance":
				return ec.fieldContext_Treasury_balance(ctx, field)
			case "company":
				return ec.fieldContext_Treasury_company(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Treasury", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_workshifts(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_workshifts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkShifts(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Workshift)
	fc.Result = res
	return ec.marshalOWorkshift2ᚕᚖmazzaᚋentᚋgeneratedᚐWorkshiftᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_workshifts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Workshift_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Workshift_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Workshift_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Workshift_deletedat(ctx, field)
			case "approvedat":
				return ec.fieldContext_Workshift_approvedat(ctx, field)
			case "clockin":
				return ec.fieldContext_Workshift_clockin(ctx, field)
			case "clockout":
				return ec.fieldContext_Workshift_clockout(ctx, field)
			case "clockinlocation":
				return ec.fieldContext_Workshift_clockinlocation(ctx, field)
			case "clockoutlocation":
				return ec.fieldContext_Workshift_clockoutlocation(ctx, field)
			case "description":
				return ec.fieldContext_Workshift_description(ctx, field)
			case "note":
				return ec.fieldContext_Workshift_note(ctx, field)
			case "status":
				return ec.fieldContext_Workshift_status(ctx, field)
			case "company":
				return ec.fieldContext_Workshift_company(ctx, field)
			case "user":
				return ec.fieldContext_Workshift_user(ctx, field)
			case "approvedby":
				return ec.fieldContext_Workshift_approvedby(ctx, field)
			case "task":
				return ec.fieldContext_Workshift_task(ctx, field)
			case "editrequest":
				return ec.fieldContext_Workshift_editrequest(ctx, field)
			case "workshift":
				return ec.fieldContext_Workshift_workshift(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Workshift", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_users(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_users(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Users(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖmazzaᚋentᚋgeneratedᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_users(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdat":
				return ec.fieldContext_User_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_User_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_User_deletedat(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "birthdate":
				return ec.fieldContext_User_birthdate(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "notverified":
				return ec.fieldContext_User_notverified(ctx, field)
			case "accountingentries":
				return ec.fieldContext_User_accountingentries(ctx, field)
			case "company":
				return ec.fieldContext_User_company(ctx, field)
			case "assignedroles":
				return ec.fieldContext_User_assignedroles(ctx, field)
			case "subordinates":
				return ec.fieldContext_User_subordinates(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "employee":
				return ec.fieldContext_User_employee(ctx, field)
			case "createdprojects":
				return ec.fieldContext_User_createdprojects(ctx, field)
			case "leaderedprojects":
				return ec.fieldContext_User_leaderedprojects(ctx, field)
			case "assignedprojecttasks":
				return ec.fieldContext_User_assignedprojecttasks(ctx, field)
			case "participatedprojecttasks":
				return ec.fieldContext_User_participatedprojecttasks(ctx, field)
			case "createdtasks":
				return ec.fieldContext_User_createdtasks(ctx, field)
			case "tokens":
				return ec.fieldContext_User_tokens(ctx, field)
			case "approvedworkshifts":
				return ec.fieldContext_User_approvedworkshifts(ctx, field)
			case "workshifts":
				return ec.fieldContext_User_workshifts(ctx, field)
			case "uploadeddocuments":
				return ec.fieldContext_User_uploadeddocuments(ctx, field)
			case "approveddocuments":
				return ec.fieldContext_User_approveddocuments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_daughtercompanies(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_daughtercompanies(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DaughterCompanies(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Company)
	fc.Result = res
	return ec.marshalOCompany2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_daughtercompanies(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "industry":
				return ec.fieldContext_Company_industry(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "incompletesetup":
				return ec.fieldContext_Company_incompletesetup(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "documents":
				return ec.fieldContext_Company_documents(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "projects":
				return ec.fieldContext_Company_projects(ctx, field)
			case "payables":
				return ec.fieldContext_Company_payables(ctx, field)
			case "receivables":
				return ec.fieldContext_Company_receivables(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_parentcompany(ctx context.Context, field graphql.CollectedField, obj *generated.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_parentcompany(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentCompany(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.Company)
	fc.Result = res
	return ec.marshalOCompany2ᚖmazzaᚋentᚋgeneratedᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_parentcompany(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "industry":
				return ec.fieldContext_Company_industry(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "incompletesetup":
				return ec.fieldContext_Company_incompletesetup(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "documents":
				return ec.fieldContext_Company_documents(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "projects":
				return ec.fieldContext_Company_projects(ctx, field)
			case "payables":
				return ec.fieldContext_Company_payables(ctx, field)
			case "receivables":
				return ec.fieldContext_Company_receivables(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyDocument_id(ctx context.Context, field graphql.CollectedField, obj *generated.CompanyDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyDocument_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyDocument_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyDocument_createdat(ctx context.Context, field graphql.CollectedField, obj *generated.CompanyDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyDocument_createdat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyDocument_createdat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyDocument_updatedat(ctx context.Context, field graphql.CollectedField, obj *generated.CompanyDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyDocument_updatedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyDocument_updatedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyDocument_deletedat(ctx context.Context, field graphql.CollectedField, obj *generated.CompanyDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyDocument_deletedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyDocument_deletedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyDocument_filename(ctx context.Context, field graphql.CollectedField, obj *generated.CompanyDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyDocument_filename(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Filename, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyDocument_filename(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyDocument_title(ctx context.Context, field graphql.CollectedField, obj *generated.CompanyDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyDocument_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyDocument_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyDocument_keywords(ctx context.Context, field graphql.CollectedField, obj *generated.CompanyDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyDocument_keywords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keywords, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyDocument_keywords(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyDocument_category(ctx context.Context, field graphql.CollectedField, obj *generated.CompanyDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyDocument_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(companydocument.Category)
	fc.Result = res
	return ec.marshalNCompanyDocumentCategory2mazzaᚋentᚋgeneratedᚋcompanydocumentᚐCategory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyDocument_category(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CompanyDocumentCategory does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyDocument_size(ctx context.Context, field graphql.CollectedField, obj *generated.CompanyDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyDocument_size(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Size, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyDocument_size(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyDocument_filetype(ctx context.Context, field graphql.CollectedField, obj *generated.CompanyDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyDocument_filetype(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalNString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyDocument_filetype(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyDocument_status(ctx context.Context, field graphql.CollectedField, obj *generated.CompanyDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyDocument_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(companydocument.Status)
	fc.Result = res
	return ec.marshalNCompanyDocumentStatus2mazzaᚋentᚋgeneratedᚋcompanydocumentᚐStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyDocument_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CompanyDocumentStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyDocument_url(ctx context.Context, field graphql.CollectedField, obj *generated.CompanyDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyDocument_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyDocument_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyDocument_thumbnail(ctx context.Context, field graphql.CollectedField, obj *generated.CompanyDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyDocument_thumbnail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Thumbnail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyDocument_thumbnail(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyDocument_expirydate(ctx context.Context, field graphql.CollectedField, obj *generated.CompanyDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyDocument_expirydate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyDocument_expirydate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyDocument_company(ctx context.Context, field graphql.CollectedField, obj *generated.CompanyDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyDocument_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Company)
	fc.Result = res
	return ec.marshalNCompany2ᚖmazzaᚋentᚋgeneratedᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyDocument_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyDocument",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "industry":
				return ec.fieldContext_Company_industry(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "incompletesetup":
				return ec.fieldContext_Company_incompletesetup(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "documents":
				return ec.fieldContext_Company_documents(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "projects":
				return ec.fieldContext_Company_projects(ctx, field)
			case "payables":
				return ec.fieldContext_Company_payables(ctx, field)
			case "receivables":
				return ec.fieldContext_Company_receivables(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyDocument_uploadedby(ctx context.Context, field graphql.CollectedField, obj *generated.CompanyDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyDocument_uploadedby(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UploadedBy(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.User)
	fc.Result = res
	return ec.marshalOUser2ᚖmazzaᚋentᚋgeneratedᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyDocument_uploadedby(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyDocument",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdat":
				return ec.fieldContext_User_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_User_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_User_deletedat(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "birthdate":
				return ec.fieldContext_User_birthdate(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "notverified":
				return ec.fieldContext_User_notverified(ctx, field)
			case "accountingentries":
				return ec.fieldContext_User_accountingentries(ctx, field)
			case "company":
				return ec.fieldContext_User_company(ctx, field)
			case "assignedroles":
				return ec.fieldContext_User_assignedroles(ctx, field)
			case "subordinates":
				return ec.fieldContext_User_subordinates(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "employee":
				return ec.fieldContext_User_employee(ctx, field)
			case "createdprojects":
				return ec.fieldContext_User_createdprojects(ctx, field)
			case "leaderedprojects":
				return ec.fieldContext_User_leaderedprojects(ctx, field)
			case "assignedprojecttasks":
				return ec.fieldContext_User_assignedprojecttasks(ctx, field)
			case "participatedprojecttasks":
				return ec.fieldContext_User_participatedprojecttasks(ctx, field)
			case "createdtasks":
				return ec.fieldContext_User_createdtasks(ctx, field)
			case "tokens":
				return ec.fieldContext_User_tokens(ctx, field)
			case "approvedworkshifts":
				return ec.fieldContext_User_approvedworkshifts(ctx, field)
			case "workshifts":
				return ec.fieldContext_User_workshifts(ctx, field)
			case "uploadeddocuments":
				return ec.fieldContext_User_uploadeddocuments(ctx, field)
			case "approveddocuments":
				return ec.fieldContext_User_approveddocuments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyDocument_approvedby(ctx context.Context, field graphql.CollectedField, obj *generated.CompanyDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyDocument_approvedby(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApprovedBy(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.User)
	fc.Result = res
	return ec.marshalOUser2ᚖmazzaᚋentᚋgeneratedᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyDocument_approvedby(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyDocument",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdat":
				return ec.fieldContext_User_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_User_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_User_deletedat(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "birthdate":
				return ec.fieldContext_User_birthdate(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "notverified":
				return ec.fieldContext_User_notverified(ctx, field)
			case "accountingentries":
				return ec.fieldContext_User_accountingentries(ctx, field)
			case "company":
				return ec.fieldContext_User_company(ctx, field)
			case "assignedroles":
				return ec.fieldContext_User_assignedroles(ctx, field)
			case "subordinates":
				return ec.fieldContext_User_subordinates(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "employee":
				return ec.fieldContext_User_employee(ctx, field)
			case "createdprojects":
				return ec.fieldContext_User_createdprojects(ctx, field)
			case "leaderedprojects":
				return ec.fieldContext_User_leaderedprojects(ctx, field)
			case "assignedprojecttasks":
				return ec.fieldContext_User_assignedprojecttasks(ctx, field)
			case "participatedprojecttasks":
				return ec.fieldContext_User_participatedprojecttasks(ctx, field)
			case "createdtasks":
				return ec.fieldContext_User_createdtasks(ctx, field)
			case "tokens":
				return ec.fieldContext_User_tokens(ctx, field)
			case "approvedworkshifts":
				return ec.fieldContext_User_approvedworkshifts(ctx, field)
			case "workshifts":
				return ec.fieldContext_User_workshifts(ctx, field)
			case "uploadeddocuments":
				return ec.fieldContext_User_uploadeddocuments(ctx, field)
			case "approveddocuments":
				return ec.fieldContext_User_approveddocuments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyDocumentConnection_edges(ctx context.Context, field graphql.CollectedField, obj *generated.CompanyDocumentConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyDocumentConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.CompanyDocumentEdge)
	fc.Result = res
	return ec.marshalOCompanyDocumentEdge2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyDocumentEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyDocumentConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyDocumentConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_CompanyDocumentEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_CompanyDocumentEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompanyDocumentEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyDocumentConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *generated.CompanyDocumentConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyDocumentConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[int])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyDocumentConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyDocumentConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyDocumentConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *generated.CompanyDocumentConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyDocumentConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyDocumentConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyDocumentConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyDocumentEdge_node(ctx context.Context, field graphql.CollectedField, obj *generated.CompanyDocumentEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyDocumentEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.CompanyDocument)
	fc.Result = res
	return ec.marshalOCompanyDocument2ᚖmazzaᚋentᚋgeneratedᚐCompanyDocument(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyDocumentEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyDocumentEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CompanyDocument_id(ctx, field)
			case "createdat":
				return ec.fieldContext_CompanyDocument_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_CompanyDocument_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_CompanyDocument_deletedat(ctx, field)
			case "filename":
				return ec.fieldContext_CompanyDocument_filename(ctx, field)
			case "title":
				return ec.fieldContext_CompanyDocument_title(ctx, field)
			case "keywords":
				return ec.fieldContext_CompanyDocument_keywords(ctx, field)
			case "category":
				return ec.fieldContext_CompanyDocument_category(ctx, field)
			case "size":
				return ec.fieldContext_CompanyDocument_size(ctx, field)
			case "filetype":
				return ec.fieldContext_CompanyDocument_filetype(ctx, field)
			case "status":
				return ec.fieldContext_CompanyDocument_status(ctx, field)
			case "url":
				return ec.fieldContext_CompanyDocument_url(ctx, field)
			case "thumbnail":
				return ec.fieldContext_CompanyDocument_thumbnail(ctx, field)
			case "expirydate":
				return ec.fieldContext_CompanyDocument_expirydate(ctx, field)
			case "company":
				return ec.fieldContext_CompanyDocument_company(ctx, field)
			case "uploadedby":
				return ec.fieldContext_CompanyDocument_uploadedby(ctx, field)
			case "approvedby":
				return ec.fieldContext_CompanyDocument_approvedby(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompanyDocument", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyDocumentEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *generated.CompanyDocumentEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyDocumentEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[int])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyDocumentEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyDocumentEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_id(ctx context.Context, field graphql.CollectedField, obj *generated.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_createdat(ctx context.Context, field graphql.CollectedField, obj *generated.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_createdat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_createdat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_updatedat(ctx context.Context, field graphql.CollectedField, obj *generated.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_updatedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_updatedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_deletedat(ctx context.Context, field graphql.CollectedField, obj *generated.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_deletedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_deletedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_address(ctx context.Context, field graphql.CollectedField, obj *generated.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_address(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_city(ctx context.Context, field graphql.CollectedField, obj *generated.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_city(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_city(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_country(ctx context.Context, field graphql.CollectedField, obj *generated.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_country(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_description(ctx context.Context, field graphql.CollectedField, obj *generated.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_email(ctx context.Context, field graphql.CollectedField, obj *generated.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_isdefault(ctx context.Context, field graphql.CollectedField, obj *generated.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_isdefault(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDefault, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_isdefault(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_name(ctx context.Context, field graphql.CollectedField, obj *generated.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_phone(ctx context.Context, field graphql.CollectedField, obj *generated.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_phone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_phone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_taxid(ctx context.Context, field graphql.CollectedField, obj *generated.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_taxid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxId, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_taxid(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_company(ctx context.Context, field graphql.CollectedField, obj *generated.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.Company)
	fc.Result = res
	return ec.marshalOCompany2ᚖmazzaᚋentᚋgeneratedᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "industry":
				return ec.fieldContext_Company_industry(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "incompletesetup":
				return ec.fieldContext_Company_incompletesetup(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "documents":
				return ec.fieldContext_Company_documents(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "projects":
				return ec.fieldContext_Company_projects(ctx, field)
			case "payables":
				return ec.fieldContext_Company_payables(ctx, field)
			case "receivables":
				return ec.fieldContext_Company_receivables(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_receivables(ctx context.Context, field graphql.CollectedField, obj *generated.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_receivables(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Receivables(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Receivable)
	fc.Result = res
	return ec.marshalOReceivable2ᚕᚖmazzaᚋentᚋgeneratedᚐReceivableᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_receivables(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Receivable_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Receivable_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Receivable_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Receivable_deletedat(ctx, field)
			case "entrygroup":
				return ec.fieldContext_Receivable_entrygroup(ctx, field)
			case "date":
				return ec.fieldContext_Receivable_date(ctx, field)
			case "name":
				return ec.fieldContext_Receivable_name(ctx, field)
			case "outstandingbalance":
				return ec.fieldContext_Receivable_outstandingbalance(ctx, field)
			case "totaltransaction":
				return ec.fieldContext_Receivable_totaltransaction(ctx, field)
			case "duedate":
				return ec.fieldContext_Receivable_duedate(ctx, field)
			case "status":
				return ec.fieldContext_Receivable_status(ctx, field)
			case "company":
				return ec.fieldContext_Receivable_company(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Receivable", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerAggregationOutput_company(ctx context.Context, field graphql.CollectedField, obj *model.CustomerAggregationOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerAggregationOutput_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOID2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerAggregationOutput_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerAggregationOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerAggregationOutput_count(ctx context.Context, field graphql.CollectedField, obj *model.CustomerAggregationOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerAggregationOutput_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerAggregationOutput_count(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerAggregationOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DocumentCount_category(ctx context.Context, field graphql.CollectedField, obj *model.DocumentCount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DocumentCount_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(companydocument.Category)
	fc.Result = res
	return ec.marshalNCompanyDocumentCategory2mazzaᚋentᚋgeneratedᚋcompanydocumentᚐCategory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DocumentCount_category(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DocumentCount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CompanyDocumentCategory does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DocumentCount_count(ctx context.Context, field graphql.CollectedField, obj *model.DocumentCount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DocumentCount_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DocumentCount_count(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DocumentCount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_id(ctx context.Context, field graphql.CollectedField, obj *generated.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_createdat(ctx context.Context, field graphql.CollectedField, obj *generated.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_createdat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_createdat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_updatedat(ctx context.Context, field graphql.CollectedField, obj *generated.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_updatedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_updatedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_deletedat(ctx context.Context, field graphql.CollectedField, obj *generated.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_deletedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_deletedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_name(ctx context.Context, field graphql.CollectedField, obj *generated.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_gender(ctx context.Context, field graphql.CollectedField, obj *generated.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_gender(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(employee.Gender)
	fc.Result = res
	return ec.marshalNEmployeeGender2mazzaᚋentᚋgeneratedᚋemployeeᚐGender(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_gender(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type EmployeeGender does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_position(ctx context.Context, field graphql.CollectedField, obj *generated.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_position(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Position, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_position(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_email(ctx context.Context, field graphql.CollectedField, obj *generated.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_phone(ctx context.Context, field graphql.CollectedField, obj *generated.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_phone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_phone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_company(ctx context.Context, field graphql.CollectedField, obj *generated.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.Company)
	fc.Result = res
	return ec.marshalOCompany2ᚖmazzaᚋentᚋgeneratedᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "industry":
				return ec.fieldContext_Company_industry(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "incompletesetup":
				return ec.fieldContext_Company_incompletesetup(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "documents":
				return ec.fieldContext_Company_documents(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "projects":
				return ec.fieldContext_Company_projects(ctx, field)
			case "payables":
				return ec.fieldContext_Company_payables(ctx, field)
			case "receivables":
				return ec.fieldContext_Company_receivables(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_user(ctx context.Context, field graphql.CollectedField, obj *generated.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.User)
	fc.Result = res
	return ec.marshalOUser2ᚖmazzaᚋentᚋgeneratedᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_user(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdat":
				return ec.fieldContext_User_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_User_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_User_deletedat(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "birthdate":
				return ec.fieldContext_User_birthdate(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "notverified":
				return ec.fieldContext_User_notverified(ctx, field)
			case "accountingentries":
				return ec.fieldContext_User_accountingentries(ctx, field)
			case "company":
				return ec.fieldContext_User_company(ctx, field)
			case "assignedroles":
				return ec.fieldContext_User_assignedroles(ctx, field)
			case "subordinates":
				return ec.fieldContext_User_subordinates(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "employee":
				return ec.fieldContext_User_employee(ctx, field)
			case "createdprojects":
				return ec.fieldContext_User_createdprojects(ctx, field)
			case "leaderedprojects":
				return ec.fieldContext_User_leaderedprojects(ctx, field)
			case "assignedprojecttasks":
				return ec.fieldContext_User_assignedprojecttasks(ctx, field)
			case "participatedprojecttasks":
				return ec.fieldContext_User_participatedprojecttasks(ctx, field)
			case "createdtasks":
				return ec.fieldContext_User_createdtasks(ctx, field)
			case "tokens":
				return ec.fieldContext_User_tokens(ctx, field)
			case "approvedworkshifts":
				return ec.fieldContext_User_approvedworkshifts(ctx, field)
			case "workshifts":
				return ec.fieldContext_User_workshifts(ctx, field)
			case "uploadeddocuments":
				return ec.fieldContext_User_uploadeddocuments(ctx, field)
			case "approveddocuments":
				return ec.fieldContext_User_approveddocuments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Equity_equity(ctx context.Context, field graphql.CollectedField, obj *model.Equity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Equity_equity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Equity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ReportRowItem)
	fc.Result = res
	return ec.marshalNReportRowItem2ᚕᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐReportRowItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Equity_equity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Equity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "account":
				return ec.fieldContext_ReportRowItem_account(ctx, field)
			case "label":
				return ec.fieldContext_ReportRowItem_label(ctx, field)
			case "value":
				return ec.fieldContext_ReportRowItem_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ReportRowItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Equity_totalEquity(ctx context.Context, field graphql.CollectedField, obj *model.Equity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Equity_totalEquity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalEquity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Equity_totalEquity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Equity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExpensesBreakdownOutput_name(ctx context.Context, field graphql.CollectedField, obj *model.ExpensesBreakdownOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExpensesBreakdownOutput_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExpensesBreakdownOutput_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExpensesBreakdownOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExpensesBreakdownOutput_amount(ctx context.Context, field graphql.CollectedField, obj *model.ExpensesBreakdownOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExpensesBreakdownOutput_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExpensesBreakdownOutput_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExpensesBreakdownOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_id(ctx context.Context, field graphql.CollectedField, obj *generated.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_createdat(ctx context.Context, field graphql.CollectedField, obj *generated.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_createdat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_createdat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_updatedat(ctx context.Context, field graphql.CollectedField, obj *generated.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_updatedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_updatedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_deletedat(ctx context.Context, field graphql.CollectedField, obj *generated.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_deletedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_deletedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_category(ctx context.Context, field graphql.CollectedField, obj *generated.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(file.Category)
	fc.Result = res
	return ec.marshalNFileCategory2mazzaᚋentᚋgeneratedᚋfileᚐCategory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_category(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type FileCategory does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_extension(ctx context.Context, field graphql.CollectedField, obj *generated.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_extension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Extension, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_extension(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_size(ctx context.Context, field graphql.CollectedField, obj *generated.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_size(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Size, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_size(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_url(ctx context.Context, field graphql.CollectedField, obj *generated.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_description(ctx context.Context, field graphql.CollectedField, obj *generated.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_company(ctx context.Context, field graphql.CollectedField, obj *generated.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.Company)
	fc.Result = res
	return ec.marshalOCompany2ᚖmazzaᚋentᚋgeneratedᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "industry":
				return ec.fieldContext_Company_industry(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "incompletesetup":
				return ec.fieldContext_Company_incompletesetup(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "documents":
				return ec.fieldContext_Company_documents(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "projects":
				return ec.fieldContext_Company_projects(ctx, field)
			case "payables":
				return ec.fieldContext_Company_payables(ctx, field)
			case "receivables":
				return ec.fieldContext_Company_receivables(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FileConnection_edges(ctx context.Context, field graphql.CollectedField, obj *generated.FileConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FileConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.FileEdge)
	fc.Result = res
	return ec.marshalOFileEdge2ᚕᚖmazzaᚋentᚋgeneratedᚐFileEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FileConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FileConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_FileEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_FileEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FileEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FileConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *generated.FileConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FileConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[int])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FileConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FileConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FileConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *generated.FileConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FileConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FileConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FileConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FileDetailsOutput_message(ctx context.Context, field graphql.CollectedField, obj *model.FileDetailsOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FileDetailsOutput_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FileDetailsOutput_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FileDetailsOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FileDetailsOutput_file(ctx context.Context, field graphql.CollectedField, obj *model.FileDetailsOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FileDetailsOutput_file(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.File, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FileOutput)
	fc.Result = res
	return ec.marshalOFileOutput2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐFileOutput(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FileDetailsOutput_file(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FileDetailsOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "encoding":
				return ec.fieldContext_FileOutput_encoding(ctx, field)
			case "kind":
				return ec.fieldContext_FileOutput_kind(ctx, field)
			case "name":
				return ec.fieldContext_FileOutput_name(ctx, field)
			case "data":
				return ec.fieldContext_FileOutput_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FileOutput", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FileEdge_node(ctx context.Context, field graphql.CollectedField, obj *generated.FileEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FileEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.File)
	fc.Result = res
	return ec.marshalOFile2ᚖmazzaᚋentᚋgeneratedᚐFile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FileEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FileEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_File_id(ctx, field)
			case "createdat":
				return ec.fieldContext_File_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_File_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_File_deletedat(ctx, field)
			case "category":
				return ec.fieldContext_File_category(ctx, field)
			case "extension":
				return ec.fieldContext_File_extension(ctx, field)
			case "size":
				return ec.fieldContext_File_size(ctx, field)
			case "url":
				return ec.fieldContext_File_url(ctx, field)
			case "description":
				return ec.fieldContext_File_description(ctx, field)
			case "company":
				return ec.fieldContext_File_company(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type File", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FileEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *generated.FileEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FileEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[int])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FileEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FileEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FileOutput_encoding(ctx context.Context, field graphql.CollectedField, obj *model.FileOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FileOutput_encoding(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Encoding, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FileOutput_encoding(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FileOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FileOutput_kind(ctx context.Context, field graphql.CollectedField, obj *model.FileOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FileOutput_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FileOutput_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FileOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FileOutput_name(ctx context.Context, field graphql.CollectedField, obj *model.FileOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FileOutput_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FileOutput_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FileOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FileOutput_data(ctx context.Context, field graphql.CollectedField, obj *model.FileOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FileOutput_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FileOutput_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FileOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementOuput_revenues(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementOuput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementOuput_revenues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Revenues, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ReportRowItem)
	fc.Result = res
	return ec.marshalNReportRowItem2ᚕᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐReportRowItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementOuput_revenues(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementOuput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "account":
				return ec.fieldContext_ReportRowItem_account(ctx, field)
			case "label":
				return ec.fieldContext_ReportRowItem_label(ctx, field)
			case "value":
				return ec.fieldContext_ReportRowItem_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ReportRowItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementOuput_netRevenue(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementOuput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementOuput_netRevenue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NetRevenue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementOuput_netRevenue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementOuput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementOuput_expenses(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementOuput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementOuput_expenses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Expenses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ReportRowItem)
	fc.Result = res
	return ec.marshalNReportRowItem2ᚕᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐReportRowItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementOuput_expenses(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementOuput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "account":
				return ec.fieldContext_ReportRowItem_account(ctx, field)
			case "label":
				return ec.fieldContext_ReportRowItem_label(ctx, field)
			case "value":
				return ec.fieldContext_ReportRowItem_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ReportRowItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementOuput_totalExpenses(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementOuput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementOuput_totalExpenses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalExpenses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementOuput_totalExpenses(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementOuput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementOuput_earningsBeforeTax(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementOuput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementOuput_earningsBeforeTax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EarningsBeforeTax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementOuput_earningsBeforeTax(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementOuput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementOuput_taxExpense(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementOuput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementOuput_taxExpense(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxExpense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementOuput_taxExpense(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementOuput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementOuput_netIncome(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementOuput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementOuput_netIncome(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NetIncome, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementOuput_netIncome(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementOuput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementOuput_period(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementOuput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementOuput_period(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Period, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Period)
	fc.Result = res
	return ec.marshalNPeriod2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementOuput_period(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementOuput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "start":
				return ec.fieldContext_Period_start(ctx, field)
			case "end":
				return ec.fieldContext_Period_end(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Period", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncomeStatementOuput_isProvisional(ctx context.Context, field graphql.CollectedField, obj *model.IncomeStatementOuput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncomeStatementOuput_isProvisional(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsProvisional, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncomeStatementOuput_isProvisional(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncomeStatementOuput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoiceIssuanceOutput_message(ctx context.Context, field graphql.CollectedField, obj *model.InvoiceIssuanceOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoiceIssuanceOutput_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoiceIssuanceOutput_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoiceIssuanceOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoiceIssuanceOutput_fileUrl(ctx context.Context, field graphql.CollectedField, obj *model.InvoiceIssuanceOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoiceIssuanceOutput_fileUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoiceIssuanceOutput_fileUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoiceIssuanceOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Liabilities_currentLiabilities(ctx context.Context, field graphql.CollectedField, obj *model.Liabilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Liabilities_currentLiabilities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentLiabilities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ReportRowItem)
	fc.Result = res
	return ec.marshalNReportRowItem2ᚕᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐReportRowItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Liabilities_currentLiabilities(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Liabilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "account":
				return ec.fieldContext_ReportRowItem_account(ctx, field)
			case "label":
				return ec.fieldContext_ReportRowItem_label(ctx, field)
			case "value":
				return ec.fieldContext_ReportRowItem_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ReportRowItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Liabilities_totalCurrentLiabilities(ctx context.Context, field graphql.CollectedField, obj *model.Liabilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Liabilities_totalCurrentLiabilities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCurrentLiabilities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Liabilities_totalCurrentLiabilities(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Liabilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Liabilities_nonCurrentLiabilities(ctx context.Context, field graphql.CollectedField, obj *model.Liabilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Liabilities_nonCurrentLiabilities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NonCurrentLiabilities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ReportRowItem)
	fc.Result = res
	return ec.marshalNReportRowItem2ᚕᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐReportRowItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Liabilities_nonCurrentLiabilities(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Liabilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "account":
				return ec.fieldContext_ReportRowItem_account(ctx, field)
			case "label":
				return ec.fieldContext_ReportRowItem_label(ctx, field)
			case "value":
				return ec.fieldContext_ReportRowItem_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ReportRowItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Liabilities_totalNonCurrentLiabilities(ctx context.Context, field graphql.CollectedField, obj *model.Liabilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Liabilities_totalNonCurrentLiabilities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalNonCurrentLiabilities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Liabilities_totalNonCurrentLiabilities(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Liabilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Liabilities_totalLiabilities(ctx context.Context, field graphql.CollectedField, obj *model.Liabilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Liabilities_totalLiabilities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalLiabilities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Liabilities_totalLiabilities(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Liabilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LoginOutput_user(ctx context.Context, field graphql.CollectedField, obj *model.LoginOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LoginOutput_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.User)
	fc.Result = res
	return ec.marshalNUser2ᚖmazzaᚋentᚋgeneratedᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LoginOutput_user(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LoginOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdat":
				return ec.fieldContext_User_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_User_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_User_deletedat(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "birthdate":
				return ec.fieldContext_User_birthdate(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "notverified":
				return ec.fieldContext_User_notverified(ctx, field)
			case "accountingentries":
				return ec.fieldContext_User_accountingentries(ctx, field)
			case "company":
				return ec.fieldContext_User_company(ctx, field)
			case "assignedroles":
				return ec.fieldContext_User_assignedroles(ctx, field)
			case "subordinates":
				return ec.fieldContext_User_subordinates(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "employee":
				return ec.fieldContext_User_employee(ctx, field)
			case "createdprojects":
				return ec.fieldContext_User_createdprojects(ctx, field)
			case "leaderedprojects":
				return ec.fieldContext_User_leaderedprojects(ctx, field)
			case "assignedprojecttasks":
				return ec.fieldContext_User_assignedprojecttasks(ctx, field)
			case "participatedprojecttasks":
				return ec.fieldContext_User_participatedprojecttasks(ctx, field)
			case "createdtasks":
				return ec.fieldContext_User_createdtasks(ctx, field)
			case "tokens":
				return ec.fieldContext_User_tokens(ctx, field)
			case "approvedworkshifts":
				return ec.fieldContext_User_approvedworkshifts(ctx, field)
			case "workshifts":
				return ec.fieldContext_User_workshifts(ctx, field)
			case "uploadeddocuments":
				return ec.fieldContext_User_uploadeddocuments(ctx, field)
			case "approveddocuments":
				return ec.fieldContext_User_approveddocuments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LoginOutput_companyId(ctx context.Context, field graphql.CollectedField, obj *model.LoginOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LoginOutput_companyId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LoginOutput_companyId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LoginOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LoginOutput_companies(ctx context.Context, field graphql.CollectedField, obj *model.LoginOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LoginOutput_companies(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Companies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*generated.Company)
	fc.Result = res
	return ec.marshalNCompany2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LoginOutput_companies(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LoginOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "industry":
				return ec.fieldContext_Company_industry(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "incompletesetup":
				return ec.fieldContext_Company_incompletesetup(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "documents":
				return ec.fieldContext_Company_documents(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "projects":
				return ec.fieldContext_Company_projects(ctx, field)
			case "payables":
				return ec.fieldContext_Company_payables(ctx, field)
			case "receivables":
				return ec.fieldContext_Company_receivables(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LoginOutput_accessToken(ctx context.Context, field graphql.CollectedField, obj *model.LoginOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LoginOutput_accessToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccessToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LoginOutput_accessToken(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LoginOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LoginOutput_refreshToken(ctx context.Context, field graphql.CollectedField, obj *model.LoginOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LoginOutput_refreshToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RefreshToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LoginOutput_refreshToken(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LoginOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LoginOutput_ttl(ctx context.Context, field graphql.CollectedField, obj *model.LoginOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LoginOutput_ttl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TTL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LoginOutput_ttl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LoginOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_signup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_signup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Signup(rctx, fc.Args["input"].(model.SignupInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.LoginOutput)
	fc.Result = res
	return ec.marshalNLoginOutput2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐLoginOutput(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_signup(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user":
				return ec.fieldContext_LoginOutput_user(ctx, field)
			case "companyId":
				return ec.fieldContext_LoginOutput_companyId(ctx, field)
			case "companies":
				return ec.fieldContext_LoginOutput_companies(ctx, field)
			case "accessToken":
				return ec.fieldContext_LoginOutput_accessToken(ctx, field)
			case "refreshToken":
				return ec.fieldContext_LoginOutput_refreshToken(ctx, field)
			case "ttl":
				return ec.fieldContext_LoginOutput_ttl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LoginOutput", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_signup_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createCompany(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createCompany(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCompany(rctx, fc.Args["input"].(*generated.CreateCompanyInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.Company)
	fc.Result = res
	return ec.marshalOCompany2ᚖmazzaᚋentᚋgeneratedᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createCompany(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "industry":
				return ec.fieldContext_Company_industry(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "incompletesetup":
				return ec.fieldContext_Company_incompletesetup(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "documents":
				return ec.fieldContext_Company_documents(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "projects":
				return ec.fieldContext_Company_projects(ctx, field)
			case "payables":
				return ec.fieldContext_Company_payables(ctx, field)
			case "receivables":
				return ec.fieldContext_Company_receivables(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createCompany_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCompany(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCompany(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCompany(rctx, fc.Args["id"].(int), fc.Args["input"].(generated.UpdateCompanyInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Company)
	fc.Result = res
	return ec.marshalNCompany2ᚖmazzaᚋentᚋgeneratedᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCompany(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "industry":
				return ec.fieldContext_Company_industry(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "incompletesetup":
				return ec.fieldContext_Company_incompletesetup(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "documents":
				return ec.fieldContext_Company_documents(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "projects":
				return ec.fieldContext_Company_projects(ctx, field)
			case "payables":
				return ec.fieldContext_Company_payables(ctx, field)
			case "receivables":
				return ec.fieldContext_Company_receivables(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCompany_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_invitedUserSignup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_invitedUserSignup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InvitedUserSignup(rctx, fc.Args["input"].(model.InvitedUserSignupInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.User)
	fc.Result = res
	return ec.marshalNUser2ᚖmazzaᚋentᚋgeneratedᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_invitedUserSignup(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdat":
				return ec.fieldContext_User_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_User_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_User_deletedat(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "birthdate":
				return ec.fieldContext_User_birthdate(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "notverified":
				return ec.fieldContext_User_notverified(ctx, field)
			case "accountingentries":
				return ec.fieldContext_User_accountingentries(ctx, field)
			case "company":
				return ec.fieldContext_User_company(ctx, field)
			case "assignedroles":
				return ec.fieldContext_User_assignedroles(ctx, field)
			case "subordinates":
				return ec.fieldContext_User_subordinates(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "employee":
				return ec.fieldContext_User_employee(ctx, field)
			case "createdprojects":
				return ec.fieldContext_User_createdprojects(ctx, field)
			case "leaderedprojects":
				return ec.fieldContext_User_leaderedprojects(ctx, field)
			case "assignedprojecttasks":
				return ec.fieldContext_User_assignedprojecttasks(ctx, field)
			case "participatedprojecttasks":
				return ec.fieldContext_User_participatedprojecttasks(ctx, field)
			case "createdtasks":
				return ec.fieldContext_User_createdtasks(ctx, field)
			case "tokens":
				return ec.fieldContext_User_tokens(ctx, field)
			case "approvedworkshifts":
				return ec.fieldContext_User_approvedworkshifts(ctx, field)
			case "workshifts":
				return ec.fieldContext_User_workshifts(ctx, field)
			case "uploadeddocuments":
				return ec.fieldContext_User_uploadeddocuments(ctx, field)
			case "approveddocuments":
				return ec.fieldContext_User_approveddocuments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_invitedUserSignup_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateUser(rctx, fc.Args["input"].(generated.CreateUserInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.User)
	fc.Result = res
	return ec.marshalOUser2ᚖmazzaᚋentᚋgeneratedᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdat":
				return ec.fieldContext_User_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_User_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_User_deletedat(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "birthdate":
				return ec.fieldContext_User_birthdate(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "notverified":
				return ec.fieldContext_User_notverified(ctx, field)
			case "accountingentries":
				return ec.fieldContext_User_accountingentries(ctx, field)
			case "company":
				return ec.fieldContext_User_company(ctx, field)
			case "assignedroles":
				return ec.fieldContext_User_assignedroles(ctx, field)
			case "subordinates":
				return ec.fieldContext_User_subordinates(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "employee":
				return ec.fieldContext_User_employee(ctx, field)
			case "createdprojects":
				return ec.fieldContext_User_createdprojects(ctx, field)
			case "leaderedprojects":
				return ec.fieldContext_User_leaderedprojects(ctx, field)
			case "assignedprojecttasks":
				return ec.fieldContext_User_assignedprojecttasks(ctx, field)
			case "participatedprojecttasks":
				return ec.fieldContext_User_participatedprojecttasks(ctx, field)
			case "createdtasks":
				return ec.fieldContext_User_createdtasks(ctx, field)
			case "tokens":
				return ec.fieldContext_User_tokens(ctx, field)
			case "approvedworkshifts":
				return ec.fieldContext_User_approvedworkshifts(ctx, field)
			case "workshifts":
				return ec.fieldContext_User_workshifts(ctx, field)
			case "uploadeddocuments":
				return ec.fieldContext_User_uploadeddocuments(ctx, field)
			case "approveddocuments":
				return ec.fieldContext_User_approveddocuments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUser(rctx, fc.Args["id"].(int), fc.Args["input"].(generated.UpdateUserInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.User)
	fc.Result = res
	return ec.marshalNUser2ᚖmazzaᚋentᚋgeneratedᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdat":
				return ec.fieldContext_User_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_User_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_User_deletedat(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "birthdate":
				return ec.fieldContext_User_birthdate(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "notverified":
				return ec.fieldContext_User_notverified(ctx, field)
			case "accountingentries":
				return ec.fieldContext_User_accountingentries(ctx, field)
			case "company":
				return ec.fieldContext_User_company(ctx, field)
			case "assignedroles":
				return ec.fieldContext_User_assignedroles(ctx, field)
			case "subordinates":
				return ec.fieldContext_User_subordinates(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "employee":
				return ec.fieldContext_User_employee(ctx, field)
			case "createdprojects":
				return ec.fieldContext_User_createdprojects(ctx, field)
			case "leaderedprojects":
				return ec.fieldContext_User_leaderedprojects(ctx, field)
			case "assignedprojecttasks":
				return ec.fieldContext_User_assignedprojecttasks(ctx, field)
			case "participatedprojecttasks":
				return ec.fieldContext_User_participatedprojecttasks(ctx, field)
			case "createdtasks":
				return ec.fieldContext_User_createdtasks(ctx, field)
			case "tokens":
				return ec.fieldContext_User_tokens(ctx, field)
			case "approvedworkshifts":
				return ec.fieldContext_User_approvedworkshifts(ctx, field)
			case "workshifts":
				return ec.fieldContext_User_workshifts(ctx, field)
			case "uploadeddocuments":
				return ec.fieldContext_User_uploadeddocuments(ctx, field)
			case "approveddocuments":
				return ec.fieldContext_User_approveddocuments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_forgotPassword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_forgotPassword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ForgotPassword(rctx, fc.Args["username"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_forgotPassword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_forgotPassword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_resetPassword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_resetPassword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ResetPassword(rctx, fc.Args["input"].(model.ResetPasswordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_resetPassword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_resetPassword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_unsubscribe(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_unsubscribe(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Unsubscribe(rctx, fc.Args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_unsubscribe(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_unsubscribe_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createUserRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createUserRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateUserRole(rctx, fc.Args["input"].(generated.CreateUserRoleInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createUserRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createUserRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createCustomer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createCustomer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCustomer(rctx, fc.Args["input"].(generated.CreateCustomerInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.Customer)
	fc.Result = res
	return ec.marshalOCustomer2ᚖmazzaᚋentᚋgeneratedᚐCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createCustomer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Customer_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Customer_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Customer_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Customer_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Customer_address(ctx, field)
			case "city":
				return ec.fieldContext_Customer_city(ctx, field)
			case "country":
				return ec.fieldContext_Customer_country(ctx, field)
			case "description":
				return ec.fieldContext_Customer_description(ctx, field)
			case "email":
				return ec.fieldContext_Customer_email(ctx, field)
			case "isdefault":
				return ec.fieldContext_Customer_isdefault(ctx, field)
			case "name":
				return ec.fieldContext_Customer_name(ctx, field)
			case "phone":
				return ec.fieldContext_Customer_phone(ctx, field)
			case "taxid":
				return ec.fieldContext_Customer_taxid(ctx, field)
			case "company":
				return ec.fieldContext_Customer_company(ctx, field)
			case "receivables":
				return ec.fieldContext_Customer_receivables(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Customer", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createCustomer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCustomer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCustomer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCustomer(rctx, fc.Args["id"].(int), fc.Args["input"].(generated.UpdateCustomerInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Customer)
	fc.Result = res
	return ec.marshalNCustomer2ᚖmazzaᚋentᚋgeneratedᚐCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCustomer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Customer_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Customer_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Customer_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Customer_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Customer_address(ctx, field)
			case "city":
				return ec.fieldContext_Customer_city(ctx, field)
			case "country":
				return ec.fieldContext_Customer_country(ctx, field)
			case "description":
				return ec.fieldContext_Customer_description(ctx, field)
			case "email":
				return ec.fieldContext_Customer_email(ctx, field)
			case "isdefault":
				return ec.fieldContext_Customer_isdefault(ctx, field)
			case "name":
				return ec.fieldContext_Customer_name(ctx, field)
			case "phone":
				return ec.fieldContext_Customer_phone(ctx, field)
			case "taxid":
				return ec.fieldContext_Customer_taxid(ctx, field)
			case "company":
				return ec.fieldContext_Customer_company(ctx, field)
			case "receivables":
				return ec.fieldContext_Customer_receivables(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Customer", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCustomer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteCustomer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteCustomer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCustomer(rctx, fc.Args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteCustomer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteCustomer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createEmployee(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createEmployee(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateEmployee(rctx, fc.Args["input"].(generated.CreateEmployeeInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.Employee)
	fc.Result = res
	return ec.marshalOEmployee2ᚖmazzaᚋentᚋgeneratedᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createEmployee(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Employee_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Employee_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Employee_deletedat(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "gender":
				return ec.fieldContext_Employee_gender(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "company":
				return ec.fieldContext_Employee_company(ctx, field)
			case "user":
				return ec.fieldContext_Employee_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createEmployee_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateEmployee(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateEmployee(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEmployee(rctx, fc.Args["id"].(int), fc.Args["input"].(generated.UpdateEmployeeInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Employee)
	fc.Result = res
	return ec.marshalNEmployee2ᚖmazzaᚋentᚋgeneratedᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateEmployee(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Employee_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Employee_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Employee_deletedat(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "gender":
				return ec.fieldContext_Employee_gender(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "company":
				return ec.fieldContext_Employee_company(ctx, field)
			case "user":
				return ec.fieldContext_Employee_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateEmployee_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteEmployee(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteEmployee(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEmployee(rctx, fc.Args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteEmployee(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteEmployee_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateProduct(rctx, fc.Args["input"].(generated.CreateProductInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.Product)
	fc.Result = res
	return ec.marshalOProduct2ᚖmazzaᚋentᚋgeneratedᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Product_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Product_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Product_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Product_deletedat(ctx, field)
			case "stock":
				return ec.fieldContext_Product_stock(ctx, field)
			case "company":
				return ec.fieldContext_Product_company(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Product", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createProduct_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProduct(rctx, fc.Args["id"].(int), fc.Args["input"].(generated.UpdateProductInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Product)
	fc.Result = res
	return ec.marshalNProduct2ᚖmazzaᚋentᚋgeneratedᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Product_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Product_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Product_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Product_deletedat(ctx, field)
			case "stock":
				return ec.fieldContext_Product_stock(ctx, field)
			case "company":
				return ec.fieldContext_Product_company(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Product", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateProduct_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteProduct(rctx, fc.Args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteProduct_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createProject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateProject(rctx, fc.Args["input"].(generated.CreateProjectInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.Project)
	fc.Result = res
	return ec.marshalOProject2ᚖmazzaᚋentᚋgeneratedᚐProject(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createProject(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Project_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Project_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Project_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Project_deletedat(ctx, field)
			case "name":
				return ec.fieldContext_Project_name(ctx, field)
			case "description":
				return ec.fieldContext_Project_description(ctx, field)
			case "startdate":
				return ec.fieldContext_Project_startdate(ctx, field)
			case "enddate":
				return ec.fieldContext_Project_enddate(ctx, field)
			case "progress":
				return ec.fieldContext_Project_progress(ctx, field)
			case "status":
				return ec.fieldContext_Project_status(ctx, field)
			case "company":
				return ec.fieldContext_Project_company(ctx, field)
			case "createdby":
				return ec.fieldContext_Project_createdby(ctx, field)
			case "leader":
				return ec.fieldContext_Project_leader(ctx, field)
			case "tasks":
				return ec.fieldContext_Project_tasks(ctx, field)
			case "milestones":
				return ec.fieldContext_Project_milestones(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Project", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createProject_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateProject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProject(rctx, fc.Args["id"].(int), fc.Args["input"].(generated.UpdateProjectInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Project)
	fc.Result = res
	return ec.marshalNProject2ᚖmazzaᚋentᚋgeneratedᚐProject(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateProject(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Project_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Project_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Project_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Project_deletedat(ctx, field)
			case "name":
				return ec.fieldContext_Project_name(ctx, field)
			case "description":
				return ec.fieldContext_Project_description(ctx, field)
			case "startdate":
				return ec.fieldContext_Project_startdate(ctx, field)
			case "enddate":
				return ec.fieldContext_Project_enddate(ctx, field)
			case "progress":
				return ec.fieldContext_Project_progress(ctx, field)
			case "status":
				return ec.fieldContext_Project_status(ctx, field)
			case "company":
				return ec.fieldContext_Project_company(ctx, field)
			case "createdby":
				return ec.fieldContext_Project_createdby(ctx, field)
			case "leader":
				return ec.fieldContext_Project_leader(ctx, field)
			case "tasks":
				return ec.fieldContext_Project_tasks(ctx, field)
			case "milestones":
				return ec.fieldContext_Project_milestones(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Project", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateProject_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteProject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteProject(rctx, fc.Args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteProject(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteProject_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createProjectTask(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createProjectTask(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateProjectTask(rctx, fc.Args["input"].(generated.CreateProjectTaskInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.ProjectTask)
	fc.Result = res
	return ec.marshalOProjectTask2ᚖmazzaᚋentᚋgeneratedᚐProjectTask(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createProjectTask(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProjectTask_id(ctx, field)
			case "createdat":
				return ec.fieldContext_ProjectTask_createdat(ctx, field)
			case "name":
				return ec.fieldContext_ProjectTask_name(ctx, field)
			case "assigneename":
				return ec.fieldContext_ProjectTask_assigneename(ctx, field)
			case "location":
				return ec.fieldContext_ProjectTask_location(ctx, field)
			case "duedate":
				return ec.fieldContext_ProjectTask_duedate(ctx, field)
			case "startdate":
				return ec.fieldContext_ProjectTask_startdate(ctx, field)
			case "enddate":
				return ec.fieldContext_ProjectTask_enddate(ctx, field)
			case "description":
				return ec.fieldContext_ProjectTask_description(ctx, field)
			case "status":
				return ec.fieldContext_ProjectTask_status(ctx, field)
			case "project":
				return ec.fieldContext_ProjectTask_project(ctx, field)
			case "assignee":
				return ec.fieldContext_ProjectTask_assignee(ctx, field)
			case "participants":
				return ec.fieldContext_ProjectTask_participants(ctx, field)
			case "createdby":
				return ec.fieldContext_ProjectTask_createdby(ctx, field)
			case "workshifts":
				return ec.fieldContext_ProjectTask_workshifts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectTask", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createProjectTask_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateProjectTask(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateProjectTask(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProjectTask(rctx, fc.Args["id"].(int), fc.Args["input"].(generated.UpdateProjectTaskInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.ProjectTask)
	fc.Result = res
	return ec.marshalNProjectTask2ᚖmazzaᚋentᚋgeneratedᚐProjectTask(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateProjectTask(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProjectTask_id(ctx, field)
			case "createdat":
				return ec.fieldContext_ProjectTask_createdat(ctx, field)
			case "name":
				return ec.fieldContext_ProjectTask_name(ctx, field)
			case "assigneename":
				return ec.fieldContext_ProjectTask_assigneename(ctx, field)
			case "location":
				return ec.fieldContext_ProjectTask_location(ctx, field)
			case "duedate":
				return ec.fieldContext_ProjectTask_duedate(ctx, field)
			case "startdate":
				return ec.fieldContext_ProjectTask_startdate(ctx, field)
			case "enddate":
				return ec.fieldContext_ProjectTask_enddate(ctx, field)
			case "description":
				return ec.fieldContext_ProjectTask_description(ctx, field)
			case "status":
				return ec.fieldContext_ProjectTask_status(ctx, field)
			case "project":
				return ec.fieldContext_ProjectTask_project(ctx, field)
			case "assignee":
				return ec.fieldContext_ProjectTask_assignee(ctx, field)
			case "participants":
				return ec.fieldContext_ProjectTask_participants(ctx, field)
			case "createdby":
				return ec.fieldContext_ProjectTask_createdby(ctx, field)
			case "workshifts":
				return ec.fieldContext_ProjectTask_workshifts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectTask", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateProjectTask_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteProjectTask(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteProjectTask(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteProjectTask(rctx, fc.Args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteProjectTask(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteProjectTask_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createProjectMilestone(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createProjectMilestone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateProjectMilestone(rctx, fc.Args["input"].(generated.CreateProjectMilestoneInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.ProjectMilestone)
	fc.Result = res
	return ec.marshalOProjectMilestone2ᚖmazzaᚋentᚋgeneratedᚐProjectMilestone(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createProjectMilestone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProjectMilestone_id(ctx, field)
			case "name":
				return ec.fieldContext_ProjectMilestone_name(ctx, field)
			case "duedate":
				return ec.fieldContext_ProjectMilestone_duedate(ctx, field)
			case "project":
				return ec.fieldContext_ProjectMilestone_project(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectMilestone", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createProjectMilestone_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateProjectMilestone(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateProjectMilestone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProjectMilestone(rctx, fc.Args["id"].(int), fc.Args["input"].(generated.UpdateProjectMilestoneInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.ProjectMilestone)
	fc.Result = res
	return ec.marshalNProjectMilestone2ᚖmazzaᚋentᚋgeneratedᚐProjectMilestone(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateProjectMilestone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProjectMilestone_id(ctx, field)
			case "name":
				return ec.fieldContext_ProjectMilestone_name(ctx, field)
			case "duedate":
				return ec.fieldContext_ProjectMilestone_duedate(ctx, field)
			case "project":
				return ec.fieldContext_ProjectMilestone_project(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectMilestone", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateProjectMilestone_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteProjectMilestone(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteProjectMilestone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteProjectMilestone(rctx, fc.Args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteProjectMilestone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteProjectMilestone_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createSupplier(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createSupplier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateSupplier(rctx, fc.Args["input"].(generated.CreateSupplierInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.Supplier)
	fc.Result = res
	return ec.marshalOSupplier2ᚖmazzaᚋentᚋgeneratedᚐSupplier(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createSupplier(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Supplier_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Supplier_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Supplier_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Supplier_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Supplier_address(ctx, field)
			case "city":
				return ec.fieldContext_Supplier_city(ctx, field)
			case "country":
				return ec.fieldContext_Supplier_country(ctx, field)
			case "description":
				return ec.fieldContext_Supplier_description(ctx, field)
			case "email":
				return ec.fieldContext_Supplier_email(ctx, field)
			case "isdefault":
				return ec.fieldContext_Supplier_isdefault(ctx, field)
			case "name":
				return ec.fieldContext_Supplier_name(ctx, field)
			case "phone":
				return ec.fieldContext_Supplier_phone(ctx, field)
			case "taxid":
				return ec.fieldContext_Supplier_taxid(ctx, field)
			case "company":
				return ec.fieldContext_Supplier_company(ctx, field)
			case "payables":
				return ec.fieldContext_Supplier_payables(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Supplier", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createSupplier_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateSupplier(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateSupplier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSupplier(rctx, fc.Args["id"].(int), fc.Args["input"].(generated.UpdateSupplierInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Supplier)
	fc.Result = res
	return ec.marshalNSupplier2ᚖmazzaᚋentᚋgeneratedᚐSupplier(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateSupplier(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Supplier_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Supplier_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Supplier_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Supplier_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Supplier_address(ctx, field)
			case "city":
				return ec.fieldContext_Supplier_city(ctx, field)
			case "country":
				return ec.fieldContext_Supplier_country(ctx, field)
			case "description":
				return ec.fieldContext_Supplier_description(ctx, field)
			case "email":
				return ec.fieldContext_Supplier_email(ctx, field)
			case "isdefault":
				return ec.fieldContext_Supplier_isdefault(ctx, field)
			case "name":
				return ec.fieldContext_Supplier_name(ctx, field)
			case "phone":
				return ec.fieldContext_Supplier_phone(ctx, field)
			case "taxid":
				return ec.fieldContext_Supplier_taxid(ctx, field)
			case "company":
				return ec.fieldContext_Supplier_company(ctx, field)
			case "payables":
				return ec.fieldContext_Supplier_payables(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Supplier", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateSupplier_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteSupplier(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteSupplier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSupplier(rctx, fc.Args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteSupplier(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteSupplier_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createTreasury(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createTreasury(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateTreasury(rctx, fc.Args["input"].(generated.CreateTreasuryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.Treasury)
	fc.Result = res
	return ec.marshalOTreasury2ᚖmazzaᚋentᚋgeneratedᚐTreasury(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createTreasury(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Treasury_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Treasury_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Treasury_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Treasury_deletedat(ctx, field)
			case "balance":
				return ec.fieldContext_Treasury_balance(ctx, field)
			case "company":
				return ec.fieldContext_Treasury_company(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Treasury", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createTreasury_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateTreasury(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateTreasury(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateTreasury(rctx, fc.Args["id"].(int), fc.Args["input"].(generated.UpdateTreasuryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Treasury)
	fc.Result = res
	return ec.marshalNTreasury2ᚖmazzaᚋentᚋgeneratedᚐTreasury(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateTreasury(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Treasury_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Treasury_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Treasury_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Treasury_deletedat(ctx, field)
			case "balance":
				return ec.fieldContext_Treasury_balance(ctx, field)
			case "company":
				return ec.fieldContext_Treasury_company(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Treasury", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateTreasury_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteTreasury(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteTreasury(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteTreasury(rctx, fc.Args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteTreasury(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteTreasury_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createWorkShift(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createWorkShift(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateWorkShift(rctx, fc.Args["input"].(generated.CreateWorkshiftInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.Workshift)
	fc.Result = res
	return ec.marshalOWorkshift2ᚖmazzaᚋentᚋgeneratedᚐWorkshift(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createWorkShift(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Workshift_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Workshift_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Workshift_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Workshift_deletedat(ctx, field)
			case "approvedat":
				return ec.fieldContext_Workshift_approvedat(ctx, field)
			case "clockin":
				return ec.fieldContext_Workshift_clockin(ctx, field)
			case "clockout":
				return ec.fieldContext_Workshift_clockout(ctx, field)
			case "clockinlocation":
				return ec.fieldContext_Workshift_clockinlocation(ctx, field)
			case "clockoutlocation":
				return ec.fieldContext_Workshift_clockoutlocation(ctx, field)
			case "description":
				return ec.fieldContext_Workshift_description(ctx, field)
			case "note":
				return ec.fieldContext_Workshift_note(ctx, field)
			case "status":
				return ec.fieldContext_Workshift_status(ctx, field)
			case "company":
				return ec.fieldContext_Workshift_company(ctx, field)
			case "user":
				return ec.fieldContext_Workshift_user(ctx, field)
			case "approvedby":
				return ec.fieldContext_Workshift_approvedby(ctx, field)
			case "task":
				return ec.fieldContext_Workshift_task(ctx, field)
			case "editrequest":
				return ec.fieldContext_Workshift_editrequest(ctx, field)
			case "workshift":
				return ec.fieldContext_Workshift_workshift(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Workshift", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createWorkShift_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateWorkShift(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateWorkShift(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateWorkShift(rctx, fc.Args["id"].(int), fc.Args["input"].(generated.UpdateWorkshiftInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Workshift)
	fc.Result = res
	return ec.marshalNWorkshift2ᚖmazzaᚋentᚋgeneratedᚐWorkshift(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateWorkShift(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Workshift_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Workshift_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Workshift_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Workshift_deletedat(ctx, field)
			case "approvedat":
				return ec.fieldContext_Workshift_approvedat(ctx, field)
			case "clockin":
				return ec.fieldContext_Workshift_clockin(ctx, field)
			case "clockout":
				return ec.fieldContext_Workshift_clockout(ctx, field)
			case "clockinlocation":
				return ec.fieldContext_Workshift_clockinlocation(ctx, field)
			case "clockoutlocation":
				return ec.fieldContext_Workshift_clockoutlocation(ctx, field)
			case "description":
				return ec.fieldContext_Workshift_description(ctx, field)
			case "note":
				return ec.fieldContext_Workshift_note(ctx, field)
			case "status":
				return ec.fieldContext_Workshift_status(ctx, field)
			case "company":
				return ec.fieldContext_Workshift_company(ctx, field)
			case "user":
				return ec.fieldContext_Workshift_user(ctx, field)
			case "approvedby":
				return ec.fieldContext_Workshift_approvedby(ctx, field)
			case "task":
				return ec.fieldContext_Workshift_task(ctx, field)
			case "editrequest":
				return ec.fieldContext_Workshift_editrequest(ctx, field)
			case "workshift":
				return ec.fieldContext_Workshift_workshift(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Workshift", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateWorkShift_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteWorkShift(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteWorkShift(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteWorkShift(rctx, fc.Args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteWorkShift(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteWorkShift_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_issueSalesQuotation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_issueSalesQuotation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().IssueSalesQuotation(rctx, fc.Args["input"].(model.SalesQuotationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.InvoiceIssuanceOutput)
	fc.Result = res
	return ec.marshalNInvoiceIssuanceOutput2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐInvoiceIssuanceOutput(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_issueSalesQuotation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_InvoiceIssuanceOutput_message(ctx, field)
			case "fileUrl":
				return ec.fieldContext_InvoiceIssuanceOutput_fileUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InvoiceIssuanceOutput", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_issueSalesQuotation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_issueInvoice(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_issueInvoice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().IssueInvoice(rctx, fc.Args["input"].(model.InvoiceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.InvoiceIssuanceOutput)
	fc.Result = res
	return ec.marshalNInvoiceIssuanceOutput2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐInvoiceIssuanceOutput(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_issueInvoice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_InvoiceIssuanceOutput_message(ctx, field)
			case "fileUrl":
				return ec.fieldContext_InvoiceIssuanceOutput_fileUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InvoiceIssuanceOutput", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_issueInvoice_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_registerAccountingEntries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_registerAccountingEntries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RegisterAccountingEntries(rctx, fc.Args["input"].(model.BaseEntryRegistrationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_registerAccountingEntries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_registerAccountingEntries_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_initialSetup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_initialSetup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InitialSetup(rctx, fc.Args["input"].(model.InitialSetupInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_initialSetup(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_initialSetup_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_uploadDocument(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_uploadDocument(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UploadDocument(rctx, fc.Args["input"].(generated.CreateCompanyDocumentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.CompanyDocument)
	fc.Result = res
	return ec.marshalNCompanyDocument2ᚖmazzaᚋentᚋgeneratedᚐCompanyDocument(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_uploadDocument(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CompanyDocument_id(ctx, field)
			case "createdat":
				return ec.fieldContext_CompanyDocument_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_CompanyDocument_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_CompanyDocument_deletedat(ctx, field)
			case "filename":
				return ec.fieldContext_CompanyDocument_filename(ctx, field)
			case "title":
				return ec.fieldContext_CompanyDocument_title(ctx, field)
			case "keywords":
				return ec.fieldContext_CompanyDocument_keywords(ctx, field)
			case "category":
				return ec.fieldContext_CompanyDocument_category(ctx, field)
			case "size":
				return ec.fieldContext_CompanyDocument_size(ctx, field)
			case "filetype":
				return ec.fieldContext_CompanyDocument_filetype(ctx, field)
			case "status":
				return ec.fieldContext_CompanyDocument_status(ctx, field)
			case "url":
				return ec.fieldContext_CompanyDocument_url(ctx, field)
			case "thumbnail":
				return ec.fieldContext_CompanyDocument_thumbnail(ctx, field)
			case "expirydate":
				return ec.fieldContext_CompanyDocument_expirydate(ctx, field)
			case "company":
				return ec.fieldContext_CompanyDocument_company(ctx, field)
			case "uploadedby":
				return ec.fieldContext_CompanyDocument_uploadedby(ctx, field)
			case "approvedby":
				return ec.fieldContext_CompanyDocument_approvedby(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompanyDocument", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_uploadDocument_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateDocument(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateDocument(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDocument(rctx, fc.Args["id"].(int), fc.Args["input"].(generated.UpdateCompanyDocumentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.CompanyDocument)
	fc.Result = res
	return ec.marshalNCompanyDocument2ᚖmazzaᚋentᚋgeneratedᚐCompanyDocument(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateDocument(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CompanyDocument_id(ctx, field)
			case "createdat":
				return ec.fieldContext_CompanyDocument_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_CompanyDocument_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_CompanyDocument_deletedat(ctx, field)
			case "filename":
				return ec.fieldContext_CompanyDocument_filename(ctx, field)
			case "title":
				return ec.fieldContext_CompanyDocument_title(ctx, field)
			case "keywords":
				return ec.fieldContext_CompanyDocument_keywords(ctx, field)
			case "category":
				return ec.fieldContext_CompanyDocument_category(ctx, field)
			case "size":
				return ec.fieldContext_CompanyDocument_size(ctx, field)
			case "filetype":
				return ec.fieldContext_CompanyDocument_filetype(ctx, field)
			case "status":
				return ec.fieldContext_CompanyDocument_status(ctx, field)
			case "url":
				return ec.fieldContext_CompanyDocument_url(ctx, field)
			case "thumbnail":
				return ec.fieldContext_CompanyDocument_thumbnail(ctx, field)
			case "expirydate":
				return ec.fieldContext_CompanyDocument_expirydate(ctx, field)
			case "company":
				return ec.fieldContext_CompanyDocument_company(ctx, field)
			case "uploadedby":
				return ec.fieldContext_CompanyDocument_uploadedby(ctx, field)
			case "approvedby":
				return ec.fieldContext_CompanyDocument_approvedby(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompanyDocument", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateDocument_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteDocuments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteDocuments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDocuments(rctx, fc.Args["ids"].([]int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteDocuments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteDocuments_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *entgql.PageInfo[int]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasNextPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasNextPage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *entgql.PageInfo[int]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasPreviousPage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *entgql.PageInfo[int]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_startCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entgql.Cursor[int])
	fc.Result = res
	return ec.marshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_startCursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *entgql.PageInfo[int]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_endCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entgql.Cursor[int])
	fc.Result = res
	return ec.marshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_endCursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payable_id(ctx context.Context, field graphql.CollectedField, obj *generated.Payable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payable_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payable_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payable_createdat(ctx context.Context, field graphql.CollectedField, obj *generated.Payable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payable_createdat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payable_createdat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payable_updatedat(ctx context.Context, field graphql.CollectedField, obj *generated.Payable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payable_updatedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payable_updatedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payable_deletedat(ctx context.Context, field graphql.CollectedField, obj *generated.Payable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payable_deletedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payable_deletedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payable_entrygroup(ctx context.Context, field graphql.CollectedField, obj *generated.Payable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payable_entrygroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntryGroup, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payable_entrygroup(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payable_date(ctx context.Context, field graphql.CollectedField, obj *generated.Payable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payable_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payable_date(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payable_name(ctx context.Context, field graphql.CollectedField, obj *generated.Payable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payable_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payable_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payable_outstandingbalance(ctx context.Context, field graphql.CollectedField, obj *generated.Payable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payable_outstandingbalance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutstandingBalance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payable_outstandingbalance(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payable_totaltransaction(ctx context.Context, field graphql.CollectedField, obj *generated.Payable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payable_totaltransaction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalTransaction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payable_totaltransaction(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payable_duedate(ctx context.Context, field graphql.CollectedField, obj *generated.Payable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payable_duedate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DueDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payable_duedate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payable_status(ctx context.Context, field graphql.CollectedField, obj *generated.Payable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payable_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(payable.Status)
	fc.Result = res
	return ec.marshalNPayableStatus2mazzaᚋentᚋgeneratedᚋpayableᚐStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payable_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PayableStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payable_company(ctx context.Context, field graphql.CollectedField, obj *generated.Payable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payable_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.Company)
	fc.Result = res
	return ec.marshalOCompany2ᚖmazzaᚋentᚋgeneratedᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payable_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payable",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "industry":
				return ec.fieldContext_Company_industry(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "incompletesetup":
				return ec.fieldContext_Company_incompletesetup(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "documents":
				return ec.fieldContext_Company_documents(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "projects":
				return ec.fieldContext_Company_projects(ctx, field)
			case "payables":
				return ec.fieldContext_Company_payables(ctx, field)
			case "receivables":
				return ec.fieldContext_Company_receivables(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PayableConnection_edges(ctx context.Context, field graphql.CollectedField, obj *generated.PayableConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PayableConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.PayableEdge)
	fc.Result = res
	return ec.marshalOPayableEdge2ᚕᚖmazzaᚋentᚋgeneratedᚐPayableEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PayableConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PayableConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_PayableEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_PayableEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PayableEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PayableConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *generated.PayableConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PayableConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[int])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PayableConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PayableConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PayableConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *generated.PayableConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PayableConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PayableConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PayableConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PayableEdge_node(ctx context.Context, field graphql.CollectedField, obj *generated.PayableEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PayableEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.Payable)
	fc.Result = res
	return ec.marshalOPayable2ᚖmazzaᚋentᚋgeneratedᚐPayable(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PayableEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PayableEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Payable_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Payable_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Payable_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Payable_deletedat(ctx, field)
			case "entrygroup":
				return ec.fieldContext_Payable_entrygroup(ctx, field)
			case "date":
				return ec.fieldContext_Payable_date(ctx, field)
			case "name":
				return ec.fieldContext_Payable_name(ctx, field)
			case "outstandingbalance":
				return ec.fieldContext_Payable_outstandingbalance(ctx, field)
			case "totaltransaction":
				return ec.fieldContext_Payable_totaltransaction(ctx, field)
			case "duedate":
				return ec.fieldContext_Payable_duedate(ctx, field)
			case "status":
				return ec.fieldContext_Payable_status(ctx, field)
			case "company":
				return ec.fieldContext_Payable_company(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Payable", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PayableEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *generated.PayableEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PayableEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[int])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PayableEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PayableEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Period_start(ctx context.Context, field graphql.CollectedField, obj *model.Period) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Period_start(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Start, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Period_start(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Period",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Period_end(ctx context.Context, field graphql.CollectedField, obj *model.Period) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Period_end(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.End, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Period_end(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Period",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_id(ctx context.Context, field graphql.CollectedField, obj *generated.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_createdat(ctx context.Context, field graphql.CollectedField, obj *generated.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_createdat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_createdat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_updatedat(ctx context.Context, field graphql.CollectedField, obj *generated.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_updatedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_updatedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_deletedat(ctx context.Context, field graphql.CollectedField, obj *generated.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_deletedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_deletedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_stock(ctx context.Context, field graphql.CollectedField, obj *generated.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_stock(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stock, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_stock(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_company(ctx context.Context, field graphql.CollectedField, obj *generated.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.Company)
	fc.Result = res
	return ec.marshalOCompany2ᚖmazzaᚋentᚋgeneratedᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "industry":
				return ec.fieldContext_Company_industry(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "incompletesetup":
				return ec.fieldContext_Company_incompletesetup(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "documents":
				return ec.fieldContext_Company_documents(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "projects":
				return ec.fieldContext_Company_projects(ctx, field)
			case "payables":
				return ec.fieldContext_Company_payables(ctx, field)
			case "receivables":
				return ec.fieldContext_Company_receivables(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_id(ctx context.Context, field graphql.CollectedField, obj *generated.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_createdat(ctx context.Context, field graphql.CollectedField, obj *generated.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_createdat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_createdat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_updatedat(ctx context.Context, field graphql.CollectedField, obj *generated.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_updatedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_updatedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_deletedat(ctx context.Context, field graphql.CollectedField, obj *generated.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_deletedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_deletedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_name(ctx context.Context, field graphql.CollectedField, obj *generated.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_description(ctx context.Context, field graphql.CollectedField, obj *generated.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_startdate(ctx context.Context, field graphql.CollectedField, obj *generated.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_startdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_startdate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_enddate(ctx context.Context, field graphql.CollectedField, obj *generated.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_enddate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_enddate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_progress(ctx context.Context, field graphql.CollectedField, obj *generated.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_progress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Progress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_progress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_status(ctx context.Context, field graphql.CollectedField, obj *generated.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(project.Status)
	fc.Result = res
	return ec.marshalNProjectStatus2mazzaᚋentᚋgeneratedᚋprojectᚐStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ProjectStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_company(ctx context.Context, field graphql.CollectedField, obj *generated.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.Company)
	fc.Result = res
	return ec.marshalOCompany2ᚖmazzaᚋentᚋgeneratedᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "industry":
				return ec.fieldContext_Company_industry(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "incompletesetup":
				return ec.fieldContext_Company_incompletesetup(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "documents":
				return ec.fieldContext_Company_documents(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "projects":
				return ec.fieldContext_Company_projects(ctx, field)
			case "payables":
				return ec.fieldContext_Company_payables(ctx, field)
			case "receivables":
				return ec.fieldContext_Company_receivables(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_createdby(ctx context.Context, field graphql.CollectedField, obj *generated.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_createdby(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.User)
	fc.Result = res
	return ec.marshalOUser2ᚖmazzaᚋentᚋgeneratedᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_createdby(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdat":
				return ec.fieldContext_User_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_User_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_User_deletedat(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "birthdate":
				return ec.fieldContext_User_birthdate(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "notverified":
				return ec.fieldContext_User_notverified(ctx, field)
			case "accountingentries":
				return ec.fieldContext_User_accountingentries(ctx, field)
			case "company":
				return ec.fieldContext_User_company(ctx, field)
			case "assignedroles":
				return ec.fieldContext_User_assignedroles(ctx, field)
			case "subordinates":
				return ec.fieldContext_User_subordinates(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "employee":
				return ec.fieldContext_User_employee(ctx, field)
			case "createdprojects":
				return ec.fieldContext_User_createdprojects(ctx, field)
			case "leaderedprojects":
				return ec.fieldContext_User_leaderedprojects(ctx, field)
			case "assignedprojecttasks":
				return ec.fieldContext_User_assignedprojecttasks(ctx, field)
			case "participatedprojecttasks":
				return ec.fieldContext_User_participatedprojecttasks(ctx, field)
			case "createdtasks":
				return ec.fieldContext_User_createdtasks(ctx, field)
			case "tokens":
				return ec.fieldContext_User_tokens(ctx, field)
			case "approvedworkshifts":
				return ec.fieldContext_User_approvedworkshifts(ctx, field)
			case "workshifts":
				return ec.fieldContext_User_workshifts(ctx, field)
			case "uploadeddocuments":
				return ec.fieldContext_User_uploadeddocuments(ctx, field)
			case "approveddocuments":
				return ec.fieldContext_User_approveddocuments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_leader(ctx context.Context, field graphql.CollectedField, obj *generated.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_leader(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Leader(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.User)
	fc.Result = res
	return ec.marshalOUser2ᚖmazzaᚋentᚋgeneratedᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_leader(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdat":
				return ec.fieldContext_User_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_User_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_User_deletedat(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "birthdate":
				return ec.fieldContext_User_birthdate(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "notverified":
				return ec.fieldContext_User_notverified(ctx, field)
			case "accountingentries":
				return ec.fieldContext_User_accountingentries(ctx, field)
			case "company":
				return ec.fieldContext_User_company(ctx, field)
			case "assignedroles":
				return ec.fieldContext_User_assignedroles(ctx, field)
			case "subordinates":
				return ec.fieldContext_User_subordinates(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "employee":
				return ec.fieldContext_User_employee(ctx, field)
			case "createdprojects":
				return ec.fieldContext_User_createdprojects(ctx, field)
			case "leaderedprojects":
				return ec.fieldContext_User_leaderedprojects(ctx, field)
			case "assignedprojecttasks":
				return ec.fieldContext_User_assignedprojecttasks(ctx, field)
			case "participatedprojecttasks":
				return ec.fieldContext_User_participatedprojecttasks(ctx, field)
			case "createdtasks":
				return ec.fieldContext_User_createdtasks(ctx, field)
			case "tokens":
				return ec.fieldContext_User_tokens(ctx, field)
			case "approvedworkshifts":
				return ec.fieldContext_User_approvedworkshifts(ctx, field)
			case "workshifts":
				return ec.fieldContext_User_workshifts(ctx, field)
			case "uploadeddocuments":
				return ec.fieldContext_User_uploadeddocuments(ctx, field)
			case "approveddocuments":
				return ec.fieldContext_User_approveddocuments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_tasks(ctx context.Context, field graphql.CollectedField, obj *generated.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_tasks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tasks(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.ProjectTask)
	fc.Result = res
	return ec.marshalOProjectTask2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectTaskᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_tasks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProjectTask_id(ctx, field)
			case "createdat":
				return ec.fieldContext_ProjectTask_createdat(ctx, field)
			case "name":
				return ec.fieldContext_ProjectTask_name(ctx, field)
			case "assigneename":
				return ec.fieldContext_ProjectTask_assigneename(ctx, field)
			case "location":
				return ec.fieldContext_ProjectTask_location(ctx, field)
			case "duedate":
				return ec.fieldContext_ProjectTask_duedate(ctx, field)
			case "startdate":
				return ec.fieldContext_ProjectTask_startdate(ctx, field)
			case "enddate":
				return ec.fieldContext_ProjectTask_enddate(ctx, field)
			case "description":
				return ec.fieldContext_ProjectTask_description(ctx, field)
			case "status":
				return ec.fieldContext_ProjectTask_status(ctx, field)
			case "project":
				return ec.fieldContext_ProjectTask_project(ctx, field)
			case "assignee":
				return ec.fieldContext_ProjectTask_assignee(ctx, field)
			case "participants":
				return ec.fieldContext_ProjectTask_participants(ctx, field)
			case "createdby":
				return ec.fieldContext_ProjectTask_createdby(ctx, field)
			case "workshifts":
				return ec.fieldContext_ProjectTask_workshifts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectTask", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_milestones(ctx context.Context, field graphql.CollectedField, obj *generated.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_milestones(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Milestones(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.ProjectMilestone)
	fc.Result = res
	return ec.marshalOProjectMilestone2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectMilestoneᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_milestones(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProjectMilestone_id(ctx, field)
			case "name":
				return ec.fieldContext_ProjectMilestone_name(ctx, field)
			case "duedate":
				return ec.fieldContext_ProjectMilestone_duedate(ctx, field)
			case "project":
				return ec.fieldContext_ProjectMilestone_project(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectMilestone", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectConnection_edges(ctx context.Context, field graphql.CollectedField, obj *generated.ProjectConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.ProjectEdge)
	fc.Result = res
	return ec.marshalOProjectEdge2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_ProjectEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_ProjectEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *generated.ProjectConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[int])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *generated.ProjectConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectEdge_node(ctx context.Context, field graphql.CollectedField, obj *generated.ProjectEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.Project)
	fc.Result = res
	return ec.marshalOProject2ᚖmazzaᚋentᚋgeneratedᚐProject(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Project_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Project_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Project_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Project_deletedat(ctx, field)
			case "name":
				return ec.fieldContext_Project_name(ctx, field)
			case "description":
				return ec.fieldContext_Project_description(ctx, field)
			case "startdate":
				return ec.fieldContext_Project_startdate(ctx, field)
			case "enddate":
				return ec.fieldContext_Project_enddate(ctx, field)
			case "progress":
				return ec.fieldContext_Project_progress(ctx, field)
			case "status":
				return ec.fieldContext_Project_status(ctx, field)
			case "company":
				return ec.fieldContext_Project_company(ctx, field)
			case "createdby":
				return ec.fieldContext_Project_createdby(ctx, field)
			case "leader":
				return ec.fieldContext_Project_leader(ctx, field)
			case "tasks":
				return ec.fieldContext_Project_tasks(ctx, field)
			case "milestones":
				return ec.fieldContext_Project_milestones(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Project", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *generated.ProjectEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[int])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectMilestone_id(ctx context.Context, field graphql.CollectedField, obj *generated.ProjectMilestone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectMilestone_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectMilestone_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectMilestone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectMilestone_name(ctx context.Context, field graphql.CollectedField, obj *generated.ProjectMilestone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectMilestone_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectMilestone_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectMilestone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectMilestone_duedate(ctx context.Context, field graphql.CollectedField, obj *generated.ProjectMilestone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectMilestone_duedate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DueDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectMilestone_duedate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectMilestone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectMilestone_project(ctx context.Context, field graphql.CollectedField, obj *generated.ProjectMilestone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectMilestone_project(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Project(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Project)
	fc.Result = res
	return ec.marshalNProject2ᚖmazzaᚋentᚋgeneratedᚐProject(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectMilestone_project(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectMilestone",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Project_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Project_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Project_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Project_deletedat(ctx, field)
			case "name":
				return ec.fieldContext_Project_name(ctx, field)
			case "description":
				return ec.fieldContext_Project_description(ctx, field)
			case "startdate":
				return ec.fieldContext_Project_startdate(ctx, field)
			case "enddate":
				return ec.fieldContext_Project_enddate(ctx, field)
			case "progress":
				return ec.fieldContext_Project_progress(ctx, field)
			case "status":
				return ec.fieldContext_Project_status(ctx, field)
			case "company":
				return ec.fieldContext_Project_company(ctx, field)
			case "createdby":
				return ec.fieldContext_Project_createdby(ctx, field)
			case "leader":
				return ec.fieldContext_Project_leader(ctx, field)
			case "tasks":
				return ec.fieldContext_Project_tasks(ctx, field)
			case "milestones":
				return ec.fieldContext_Project_milestones(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Project", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectTask_id(ctx context.Context, field graphql.CollectedField, obj *generated.ProjectTask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectTask_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectTask_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectTask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectTask_createdat(ctx context.Context, field graphql.CollectedField, obj *generated.ProjectTask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectTask_createdat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectTask_createdat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectTask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectTask_name(ctx context.Context, field graphql.CollectedField, obj *generated.ProjectTask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectTask_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectTask_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectTask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectTask_assigneename(ctx context.Context, field graphql.CollectedField, obj *generated.ProjectTask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectTask_assigneename(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssigneeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectTask_assigneename(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectTask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectTask_location(ctx context.Context, field graphql.CollectedField, obj *generated.ProjectTask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectTask_location(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectTask_location(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectTask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectTask_duedate(ctx context.Context, field graphql.CollectedField, obj *generated.ProjectTask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectTask_duedate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DueDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectTask_duedate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectTask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectTask_startdate(ctx context.Context, field graphql.CollectedField, obj *generated.ProjectTask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectTask_startdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectTask_startdate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectTask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectTask_enddate(ctx context.Context, field graphql.CollectedField, obj *generated.ProjectTask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectTask_enddate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectTask_enddate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectTask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectTask_description(ctx context.Context, field graphql.CollectedField, obj *generated.ProjectTask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectTask_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectTask_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectTask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectTask_status(ctx context.Context, field graphql.CollectedField, obj *generated.ProjectTask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectTask_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(projecttask.Status)
	fc.Result = res
	return ec.marshalNProjectTaskStatus2mazzaᚋentᚋgeneratedᚋprojecttaskᚐStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectTask_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectTask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ProjectTaskStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectTask_project(ctx context.Context, field graphql.CollectedField, obj *generated.ProjectTask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectTask_project(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Project(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Project)
	fc.Result = res
	return ec.marshalNProject2ᚖmazzaᚋentᚋgeneratedᚐProject(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectTask_project(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectTask",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Project_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Project_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Project_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Project_deletedat(ctx, field)
			case "name":
				return ec.fieldContext_Project_name(ctx, field)
			case "description":
				return ec.fieldContext_Project_description(ctx, field)
			case "startdate":
				return ec.fieldContext_Project_startdate(ctx, field)
			case "enddate":
				return ec.fieldContext_Project_enddate(ctx, field)
			case "progress":
				return ec.fieldContext_Project_progress(ctx, field)
			case "status":
				return ec.fieldContext_Project_status(ctx, field)
			case "company":
				return ec.fieldContext_Project_company(ctx, field)
			case "createdby":
				return ec.fieldContext_Project_createdby(ctx, field)
			case "leader":
				return ec.fieldContext_Project_leader(ctx, field)
			case "tasks":
				return ec.fieldContext_Project_tasks(ctx, field)
			case "milestones":
				return ec.fieldContext_Project_milestones(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Project", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectTask_assignee(ctx context.Context, field graphql.CollectedField, obj *generated.ProjectTask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectTask_assignee(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Assignee(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.User)
	fc.Result = res
	return ec.marshalOUser2ᚖmazzaᚋentᚋgeneratedᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectTask_assignee(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectTask",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdat":
				return ec.fieldContext_User_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_User_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_User_deletedat(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "birthdate":
				return ec.fieldContext_User_birthdate(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "notverified":
				return ec.fieldContext_User_notverified(ctx, field)
			case "accountingentries":
				return ec.fieldContext_User_accountingentries(ctx, field)
			case "company":
				return ec.fieldContext_User_company(ctx, field)
			case "assignedroles":
				return ec.fieldContext_User_assignedroles(ctx, field)
			case "subordinates":
				return ec.fieldContext_User_subordinates(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "employee":
				return ec.fieldContext_User_employee(ctx, field)
			case "createdprojects":
				return ec.fieldContext_User_createdprojects(ctx, field)
			case "leaderedprojects":
				return ec.fieldContext_User_leaderedprojects(ctx, field)
			case "assignedprojecttasks":
				return ec.fieldContext_User_assignedprojecttasks(ctx, field)
			case "participatedprojecttasks":
				return ec.fieldContext_User_participatedprojecttasks(ctx, field)
			case "createdtasks":
				return ec.fieldContext_User_createdtasks(ctx, field)
			case "tokens":
				return ec.fieldContext_User_tokens(ctx, field)
			case "approvedworkshifts":
				return ec.fieldContext_User_approvedworkshifts(ctx, field)
			case "workshifts":
				return ec.fieldContext_User_workshifts(ctx, field)
			case "uploadeddocuments":
				return ec.fieldContext_User_uploadeddocuments(ctx, field)
			case "approveddocuments":
				return ec.fieldContext_User_approveddocuments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectTask_participants(ctx context.Context, field graphql.CollectedField, obj *generated.ProjectTask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectTask_participants(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Participants(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖmazzaᚋentᚋgeneratedᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectTask_participants(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectTask",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdat":
				return ec.fieldContext_User_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_User_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_User_deletedat(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "birthdate":
				return ec.fieldContext_User_birthdate(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "notverified":
				return ec.fieldContext_User_notverified(ctx, field)
			case "accountingentries":
				return ec.fieldContext_User_accountingentries(ctx, field)
			case "company":
				return ec.fieldContext_User_company(ctx, field)
			case "assignedroles":
				return ec.fieldContext_User_assignedroles(ctx, field)
			case "subordinates":
				return ec.fieldContext_User_subordinates(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "employee":
				return ec.fieldContext_User_employee(ctx, field)
			case "createdprojects":
				return ec.fieldContext_User_createdprojects(ctx, field)
			case "leaderedprojects":
				return ec.fieldContext_User_leaderedprojects(ctx, field)
			case "assignedprojecttasks":
				return ec.fieldContext_User_assignedprojecttasks(ctx, field)
			case "participatedprojecttasks":
				return ec.fieldContext_User_participatedprojecttasks(ctx, field)
			case "createdtasks":
				return ec.fieldContext_User_createdtasks(ctx, field)
			case "tokens":
				return ec.fieldContext_User_tokens(ctx, field)
			case "approvedworkshifts":
				return ec.fieldContext_User_approvedworkshifts(ctx, field)
			case "workshifts":
				return ec.fieldContext_User_workshifts(ctx, field)
			case "uploadeddocuments":
				return ec.fieldContext_User_uploadeddocuments(ctx, field)
			case "approveddocuments":
				return ec.fieldContext_User_approveddocuments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectTask_createdby(ctx context.Context, field graphql.CollectedField, obj *generated.ProjectTask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectTask_createdby(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.User)
	fc.Result = res
	return ec.marshalOUser2ᚖmazzaᚋentᚋgeneratedᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectTask_createdby(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectTask",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdat":
				return ec.fieldContext_User_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_User_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_User_deletedat(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "birthdate":
				return ec.fieldContext_User_birthdate(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "notverified":
				return ec.fieldContext_User_notverified(ctx, field)
			case "accountingentries":
				return ec.fieldContext_User_accountingentries(ctx, field)
			case "company":
				return ec.fieldContext_User_company(ctx, field)
			case "assignedroles":
				return ec.fieldContext_User_assignedroles(ctx, field)
			case "subordinates":
				return ec.fieldContext_User_subordinates(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "employee":
				return ec.fieldContext_User_employee(ctx, field)
			case "createdprojects":
				return ec.fieldContext_User_createdprojects(ctx, field)
			case "leaderedprojects":
				return ec.fieldContext_User_leaderedprojects(ctx, field)
			case "assignedprojecttasks":
				return ec.fieldContext_User_assignedprojecttasks(ctx, field)
			case "participatedprojecttasks":
				return ec.fieldContext_User_participatedprojecttasks(ctx, field)
			case "createdtasks":
				return ec.fieldContext_User_createdtasks(ctx, field)
			case "tokens":
				return ec.fieldContext_User_tokens(ctx, field)
			case "approvedworkshifts":
				return ec.fieldContext_User_approvedworkshifts(ctx, field)
			case "workshifts":
				return ec.fieldContext_User_workshifts(ctx, field)
			case "uploadeddocuments":
				return ec.fieldContext_User_uploadeddocuments(ctx, field)
			case "approveddocuments":
				return ec.fieldContext_User_approveddocuments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectTask_workshifts(ctx context.Context, field graphql.CollectedField, obj *generated.ProjectTask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectTask_workshifts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkShifts(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Workshift)
	fc.Result = res
	return ec.marshalOWorkshift2ᚕᚖmazzaᚋentᚋgeneratedᚐWorkshiftᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectTask_workshifts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectTask",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Workshift_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Workshift_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Workshift_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Workshift_deletedat(ctx, field)
			case "approvedat":
				return ec.fieldContext_Workshift_approvedat(ctx, field)
			case "clockin":
				return ec.fieldContext_Workshift_clockin(ctx, field)
			case "clockout":
				return ec.fieldContext_Workshift_clockout(ctx, field)
			case "clockinlocation":
				return ec.fieldContext_Workshift_clockinlocation(ctx, field)
			case "clockoutlocation":
				return ec.fieldContext_Workshift_clockoutlocation(ctx, field)
			case "description":
				return ec.fieldContext_Workshift_description(ctx, field)
			case "note":
				return ec.fieldContext_Workshift_note(ctx, field)
			case "status":
				return ec.fieldContext_Workshift_status(ctx, field)
			case "company":
				return ec.fieldContext_Workshift_company(ctx, field)
			case "user":
				return ec.fieldContext_Workshift_user(ctx, field)
			case "approvedby":
				return ec.fieldContext_Workshift_approvedby(ctx, field)
			case "task":
				return ec.fieldContext_Workshift_task(ctx, field)
			case "editrequest":
				return ec.fieldContext_Workshift_editrequest(ctx, field)
			case "workshift":
				return ec.fieldContext_Workshift_workshift(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Workshift", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectTaskConnection_edges(ctx context.Context, field graphql.CollectedField, obj *generated.ProjectTaskConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectTaskConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.ProjectTaskEdge)
	fc.Result = res
	return ec.marshalOProjectTaskEdge2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectTaskEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectTaskConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectTaskConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_ProjectTaskEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_ProjectTaskEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectTaskEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectTaskConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *generated.ProjectTaskConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectTaskConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[int])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectTaskConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectTaskConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectTaskConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *generated.ProjectTaskConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectTaskConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectTaskConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectTaskConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectTaskEdge_node(ctx context.Context, field graphql.CollectedField, obj *generated.ProjectTaskEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectTaskEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.ProjectTask)
	fc.Result = res
	return ec.marshalOProjectTask2ᚖmazzaᚋentᚋgeneratedᚐProjectTask(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectTaskEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectTaskEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProjectTask_id(ctx, field)
			case "createdat":
				return ec.fieldContext_ProjectTask_createdat(ctx, field)
			case "name":
				return ec.fieldContext_ProjectTask_name(ctx, field)
			case "assigneename":
				return ec.fieldContext_ProjectTask_assigneename(ctx, field)
			case "location":
				return ec.fieldContext_ProjectTask_location(ctx, field)
			case "duedate":
				return ec.fieldContext_ProjectTask_duedate(ctx, field)
			case "startdate":
				return ec.fieldContext_ProjectTask_startdate(ctx, field)
			case "enddate":
				return ec.fieldContext_ProjectTask_enddate(ctx, field)
			case "description":
				return ec.fieldContext_ProjectTask_description(ctx, field)
			case "status":
				return ec.fieldContext_ProjectTask_status(ctx, field)
			case "project":
				return ec.fieldContext_ProjectTask_project(ctx, field)
			case "assignee":
				return ec.fieldContext_ProjectTask_assignee(ctx, field)
			case "participants":
				return ec.fieldContext_ProjectTask_participants(ctx, field)
			case "createdby":
				return ec.fieldContext_ProjectTask_createdby(ctx, field)
			case "workshifts":
				return ec.fieldContext_ProjectTask_workshifts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectTask", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectTaskEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *generated.ProjectTaskEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectTaskEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[int])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectTaskEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectTaskEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_node(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Node(rctx, fc.Args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(generated.Noder)
	fc.Result = res
	return ec.marshalONode2mazzaᚋentᚋgeneratedᚐNoder(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_node_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_nodes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Nodes(rctx, fc.Args["ids"].([]int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]generated.Noder)
	fc.Result = res
	return ec.marshalNNode2ᚕmazzaᚋentᚋgeneratedᚐNoder(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_nodes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_nodes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_accountingEntries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_accountingEntries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AccountingEntries(rctx, fc.Args["after"].(*entgql.Cursor[int]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[int]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*generated.AccountingEntryOrder), fc.Args["where"].(*generated.AccountingEntryWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.AccountingEntryConnection)
	fc.Result = res
	return ec.marshalNAccountingEntryConnection2ᚖmazzaᚋentᚋgeneratedᚐAccountingEntryConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_accountingEntries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_AccountingEntryConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_AccountingEntryConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_AccountingEntryConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountingEntryConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_accountingEntries_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_companyDocuments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_companyDocuments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CompanyDocuments(rctx, fc.Args["after"].(*entgql.Cursor[int]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[int]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*generated.CompanyDocumentOrder), fc.Args["where"].(*generated.CompanyDocumentWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.CompanyDocumentConnection)
	fc.Result = res
	return ec.marshalNCompanyDocumentConnection2ᚖmazzaᚋentᚋgeneratedᚐCompanyDocumentConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_companyDocuments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CompanyDocumentConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_CompanyDocumentConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_CompanyDocumentConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompanyDocumentConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_companyDocuments_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_files(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_files(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Files(rctx, fc.Args["after"].(*entgql.Cursor[int]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[int]), fc.Args["last"].(*int), fc.Args["orderBy"].(*generated.FileOrder), fc.Args["where"].(*generated.FileWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.FileConnection)
	fc.Result = res
	return ec.marshalNFileConnection2ᚖmazzaᚋentᚋgeneratedᚐFileConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_files(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_FileConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_FileConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_FileConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FileConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_files_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_payables(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_payables(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Payables(rctx, fc.Args["after"].(*entgql.Cursor[int]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[int]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*generated.PayableOrder), fc.Args["where"].(*generated.PayableWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.PayableConnection)
	fc.Result = res
	return ec.marshalNPayableConnection2ᚖmazzaᚋentᚋgeneratedᚐPayableConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_payables(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_PayableConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_PayableConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_PayableConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PayableConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_payables_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_projects(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_projects(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Projects(rctx, fc.Args["after"].(*entgql.Cursor[int]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[int]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*generated.ProjectOrder), fc.Args["where"].(*generated.ProjectWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.ProjectConnection)
	fc.Result = res
	return ec.marshalNProjectConnection2ᚖmazzaᚋentᚋgeneratedᚐProjectConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_projects(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ProjectConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ProjectConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_ProjectConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_projects_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_projectTasks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_projectTasks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProjectTasks(rctx, fc.Args["after"].(*entgql.Cursor[int]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[int]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*generated.ProjectTaskOrder), fc.Args["where"].(*generated.ProjectTaskWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.ProjectTaskConnection)
	fc.Result = res
	return ec.marshalNProjectTaskConnection2ᚖmazzaᚋentᚋgeneratedᚐProjectTaskConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_projectTasks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ProjectTaskConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ProjectTaskConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_ProjectTaskConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectTaskConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_projectTasks_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_receivables(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_receivables(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Receivables(rctx, fc.Args["after"].(*entgql.Cursor[int]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[int]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*generated.ReceivableOrder), fc.Args["where"].(*generated.ReceivableWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.ReceivableConnection)
	fc.Result = res
	return ec.marshalNReceivableConnection2ᚖmazzaᚋentᚋgeneratedᚐReceivableConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_receivables(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ReceivableConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ReceivableConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_ReceivableConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ReceivableConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_receivables_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_tokens(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_tokens(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Tokens(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*generated.Token)
	fc.Result = res
	return ec.marshalNToken2ᚕᚖmazzaᚋentᚋgeneratedᚐTokenᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_tokens(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Token_id(ctx, field)
			case "expiry":
				return ec.fieldContext_Token_expiry(ctx, field)
			case "category":
				return ec.fieldContext_Token_category(ctx, field)
			case "token":
				return ec.fieldContext_Token_token(ctx, field)
			case "company":
				return ec.fieldContext_Token_company(ctx, field)
			case "user":
				return ec.fieldContext_Token_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Token", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_workshifts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_workshifts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Workshifts(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*generated.Workshift)
	fc.Result = res
	return ec.marshalNWorkshift2ᚕᚖmazzaᚋentᚋgeneratedᚐWorkshiftᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_workshifts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Workshift_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Workshift_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Workshift_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Workshift_deletedat(ctx, field)
			case "approvedat":
				return ec.fieldContext_Workshift_approvedat(ctx, field)
			case "clockin":
				return ec.fieldContext_Workshift_clockin(ctx, field)
			case "clockout":
				return ec.fieldContext_Workshift_clockout(ctx, field)
			case "clockinlocation":
				return ec.fieldContext_Workshift_clockinlocation(ctx, field)
			case "clockoutlocation":
				return ec.fieldContext_Workshift_clockoutlocation(ctx, field)
			case "description":
				return ec.fieldContext_Workshift_description(ctx, field)
			case "note":
				return ec.fieldContext_Workshift_note(ctx, field)
			case "status":
				return ec.fieldContext_Workshift_status(ctx, field)
			case "company":
				return ec.fieldContext_Workshift_company(ctx, field)
			case "user":
				return ec.fieldContext_Workshift_user(ctx, field)
			case "approvedby":
				return ec.fieldContext_Workshift_approvedby(ctx, field)
			case "task":
				return ec.fieldContext_Workshift_task(ctx, field)
			case "editrequest":
				return ec.fieldContext_Workshift_editrequest(ctx, field)
			case "workshift":
				return ec.fieldContext_Workshift_workshift(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Workshift", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_trialBalance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_trialBalance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TrialBalance(rctx, fc.Args["date"].(time.Time))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.TrialBalanceRowItem)
	fc.Result = res
	return ec.marshalNTrialBalanceRowItem2ᚕᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐTrialBalanceRowItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_trialBalance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "account":
				return ec.fieldContext_TrialBalanceRowItem_account(ctx, field)
			case "label":
				return ec.fieldContext_TrialBalanceRowItem_label(ctx, field)
			case "debit":
				return ec.fieldContext_TrialBalanceRowItem_debit(ctx, field)
			case "credit":
				return ec.fieldContext_TrialBalanceRowItem_credit(ctx, field)
			case "balance":
				return ec.fieldContext_TrialBalanceRowItem_balance(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrialBalanceRowItem", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_trialBalance_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_incomeStatement(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_incomeStatement(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().IncomeStatement(rctx, fc.Args["date"].(time.Time))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.IncomeStatementOuput)
	fc.Result = res
	return ec.marshalNIncomeStatementOuput2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐIncomeStatementOuput(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_incomeStatement(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "revenues":
				return ec.fieldContext_IncomeStatementOuput_revenues(ctx, field)
			case "netRevenue":
				return ec.fieldContext_IncomeStatementOuput_netRevenue(ctx, field)
			case "expenses":
				return ec.fieldContext_IncomeStatementOuput_expenses(ctx, field)
			case "totalExpenses":
				return ec.fieldContext_IncomeStatementOuput_totalExpenses(ctx, field)
			case "earningsBeforeTax":
				return ec.fieldContext_IncomeStatementOuput_earningsBeforeTax(ctx, field)
			case "taxExpense":
				return ec.fieldContext_IncomeStatementOuput_taxExpense(ctx, field)
			case "netIncome":
				return ec.fieldContext_IncomeStatementOuput_netIncome(ctx, field)
			case "period":
				return ec.fieldContext_IncomeStatementOuput_period(ctx, field)
			case "isProvisional":
				return ec.fieldContext_IncomeStatementOuput_isProvisional(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IncomeStatementOuput", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_incomeStatement_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_balanceSheet(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_balanceSheet(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BalanceSheet(rctx, fc.Args["date"].(time.Time))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BalanceSheetOuput)
	fc.Result = res
	return ec.marshalNBalanceSheetOuput2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐBalanceSheetOuput(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_balanceSheet(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "assets":
				return ec.fieldContext_BalanceSheetOuput_assets(ctx, field)
			case "liabilities":
				return ec.fieldContext_BalanceSheetOuput_liabilities(ctx, field)
			case "equity":
				return ec.fieldContext_BalanceSheetOuput_equity(ctx, field)
			case "totalLiabilityAndEquity":
				return ec.fieldContext_BalanceSheetOuput_totalLiabilityAndEquity(ctx, field)
			case "period":
				return ec.fieldContext_BalanceSheetOuput_period(ctx, field)
			case "isProvisional":
				return ec.fieldContext_BalanceSheetOuput_isProvisional(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BalanceSheetOuput", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_balanceSheet_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_downloadLedger(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_downloadLedger(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DownloadLedger(rctx, fc.Args["where"].(model.LedgerDownloadInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FileDetailsOutput)
	fc.Result = res
	return ec.marshalNFileDetailsOutput2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐFileDetailsOutput(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_downloadLedger(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_FileDetailsOutput_message(ctx, field)
			case "file":
				return ec.fieldContext_FileDetailsOutput_file(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FileDetailsOutput", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_downloadLedger_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_downloadTrialBalance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_downloadTrialBalance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DownloadTrialBalance(rctx, fc.Args["where"].(model.ReportInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FileDetailsOutput)
	fc.Result = res
	return ec.marshalNFileDetailsOutput2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐFileDetailsOutput(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_downloadTrialBalance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_FileDetailsOutput_message(ctx, field)
			case "file":
				return ec.fieldContext_FileDetailsOutput_file(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FileDetailsOutput", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_downloadTrialBalance_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_downloadIncomeStatement(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_downloadIncomeStatement(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DownloadIncomeStatement(rctx, fc.Args["where"].(model.ReportInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FileDetailsOutput)
	fc.Result = res
	return ec.marshalNFileDetailsOutput2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐFileDetailsOutput(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_downloadIncomeStatement(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_FileDetailsOutput_message(ctx, field)
			case "file":
				return ec.fieldContext_FileDetailsOutput_file(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FileDetailsOutput", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_downloadIncomeStatement_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_downloadBalanceSheet(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_downloadBalanceSheet(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DownloadBalanceSheet(rctx, fc.Args["where"].(model.ReportInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FileDetailsOutput)
	fc.Result = res
	return ec.marshalNFileDetailsOutput2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐFileDetailsOutput(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_downloadBalanceSheet(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_FileDetailsOutput_message(ctx, field)
			case "file":
				return ec.fieldContext_FileDetailsOutput_file(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FileDetailsOutput", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_downloadBalanceSheet_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_expensesBreakdown(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_expensesBreakdown(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ExpensesBreakdown(rctx, fc.Args["range"].(model.TimeRange))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ExpensesBreakdownOutput)
	fc.Result = res
	return ec.marshalNExpensesBreakdownOutput2ᚕᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐExpensesBreakdownOutputᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_expensesBreakdown(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_ExpensesBreakdownOutput_name(ctx, field)
			case "amount":
				return ec.fieldContext_ExpensesBreakdownOutput_amount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExpensesBreakdownOutput", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_expensesBreakdown_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_revenueTrend(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_revenueTrend(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RevenueTrend(rctx, fc.Args["range"].(model.TimeRange))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.RevenueTrendOutput)
	fc.Result = res
	return ec.marshalNRevenueTrendOutput2ᚕᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐRevenueTrendOutputᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_revenueTrend(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "date":
				return ec.fieldContext_RevenueTrendOutput_date(ctx, field)
			case "amount":
				return ec.fieldContext_RevenueTrendOutput_amount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RevenueTrendOutput", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_revenueTrend_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_verifyPasswordResetToken(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_verifyPasswordResetToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VerifyPasswordResetToken(rctx, fc.Args["token"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_verifyPasswordResetToken(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_verifyPasswordResetToken_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_companies(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_companies(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Companies(rctx, fc.Args["where"].(*generated.CompanyWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*generated.Company)
	fc.Result = res
	return ec.marshalNCompany2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_companies(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "industry":
				return ec.fieldContext_Company_industry(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "incompletesetup":
				return ec.fieldContext_Company_incompletesetup(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "documents":
				return ec.fieldContext_Company_documents(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "projects":
				return ec.fieldContext_Company_projects(ctx, field)
			case "payables":
				return ec.fieldContext_Company_payables(ctx, field)
			case "receivables":
				return ec.fieldContext_Company_receivables(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_companies_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_customers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_customers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Customers(rctx, fc.Args["where"].(*generated.CustomerWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*generated.Customer)
	fc.Result = res
	return ec.marshalNCustomer2ᚕᚖmazzaᚋentᚋgeneratedᚐCustomerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_customers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Customer_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Customer_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Customer_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Customer_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Customer_address(ctx, field)
			case "city":
				return ec.fieldContext_Customer_city(ctx, field)
			case "country":
				return ec.fieldContext_Customer_country(ctx, field)
			case "description":
				return ec.fieldContext_Customer_description(ctx, field)
			case "email":
				return ec.fieldContext_Customer_email(ctx, field)
			case "isdefault":
				return ec.fieldContext_Customer_isdefault(ctx, field)
			case "name":
				return ec.fieldContext_Customer_name(ctx, field)
			case "phone":
				return ec.fieldContext_Customer_phone(ctx, field)
			case "taxid":
				return ec.fieldContext_Customer_taxid(ctx, field)
			case "company":
				return ec.fieldContext_Customer_company(ctx, field)
			case "receivables":
				return ec.fieldContext_Customer_receivables(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Customer", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_customers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_aggregateCustomers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_aggregateCustomers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AggregateCustomers(rctx, fc.Args["where"].(*generated.CustomerWhereInput), fc.Args["groupBy"].([]model.CustomersGroupBy))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CustomerAggregationOutput)
	fc.Result = res
	return ec.marshalNCustomerAggregationOutput2ᚕᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐCustomerAggregationOutputᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_aggregateCustomers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "company":
				return ec.fieldContext_CustomerAggregationOutput_company(ctx, field)
			case "count":
				return ec.fieldContext_CustomerAggregationOutput_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerAggregationOutput", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_aggregateCustomers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_aggregateReceivables(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_aggregateReceivables(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AggregateReceivables(rctx, fc.Args["where"].(*generated.ReceivableWhereInput), fc.Args["groupBy"].([]model.ReceivablesGroupBy))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ReceivableAggregationOutput)
	fc.Result = res
	return ec.marshalNReceivableAggregationOutput2ᚕᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐReceivableAggregationOutputᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_aggregateReceivables(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "company":
				return ec.fieldContext_ReceivableAggregationOutput_company(ctx, field)
			case "count":
				return ec.fieldContext_ReceivableAggregationOutput_count(ctx, field)
			case "sum":
				return ec.fieldContext_ReceivableAggregationOutput_sum(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ReceivableAggregationOutput", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_aggregateReceivables_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_accountsReceivableAging(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_accountsReceivableAging(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AccountsReceivableAging(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AgingBucket)
	fc.Result = res
	return ec.marshalNAgingBucket2ᚕᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐAgingBucketᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_accountsReceivableAging(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "range":
				return ec.fieldContext_AgingBucket_range(ctx, field)
			case "totalAmount":
				return ec.fieldContext_AgingBucket_totalAmount(ctx, field)
			case "count":
				return ec.fieldContext_AgingBucket_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AgingBucket", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_accountsPayableAging(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_accountsPayableAging(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AccountsPayableAging(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AgingBucket)
	fc.Result = res
	return ec.marshalNAgingBucket2ᚕᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐAgingBucketᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_accountsPayableAging(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "range":
				return ec.fieldContext_AgingBucket_range(ctx, field)
			case "totalAmount":
				return ec.fieldContext_AgingBucket_totalAmount(ctx, field)
			case "count":
				return ec.fieldContext_AgingBucket_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AgingBucket", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_employees(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_employees(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Employees(rctx, fc.Args["where"].(*generated.EmployeeWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*generated.Employee)
	fc.Result = res
	return ec.marshalNEmployee2ᚕᚖmazzaᚋentᚋgeneratedᚐEmployeeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_employees(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Employee_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Employee_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Employee_deletedat(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "gender":
				return ec.fieldContext_Employee_gender(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "company":
				return ec.fieldContext_Employee_company(ctx, field)
			case "user":
				return ec.fieldContext_Employee_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_employees_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_products(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_products(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Products(rctx, fc.Args["where"].(*generated.ProductWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*generated.Product)
	fc.Result = res
	return ec.marshalNProduct2ᚕᚖmazzaᚋentᚋgeneratedᚐProductᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_products(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Product_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Product_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Product_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Product_deletedat(ctx, field)
			case "stock":
				return ec.fieldContext_Product_stock(ctx, field)
			case "company":
				return ec.fieldContext_Product_company(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Product", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_products_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_lowStock(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_lowStock(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().LowStock(rctx, fc.Args["where"].(*generated.ProductWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*generated.Product)
	fc.Result = res
	return ec.marshalNProduct2ᚕᚖmazzaᚋentᚋgeneratedᚐProductᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_lowStock(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Product_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Product_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Product_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Product_deletedat(ctx, field)
			case "stock":
				return ec.fieldContext_Product_stock(ctx, field)
			case "company":
				return ec.fieldContext_Product_company(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Product", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_lowStock_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_numberOfProducts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_numberOfProducts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NumberOfProducts(rctx, fc.Args["where"].(*generated.ProductWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_numberOfProducts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_numberOfProducts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_numberOfLowStock(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_numberOfLowStock(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NumberOfLowStock(rctx, fc.Args["where"].(*generated.ProductWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_numberOfLowStock(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_numberOfLowStock_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_numberOfOutOfStock(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_numberOfOutOfStock(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NumberOfOutOfStock(rctx, fc.Args["where"].(*generated.ProductWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_numberOfOutOfStock(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_numberOfOutOfStock_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_retrieveProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_retrieveProject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RetrieveProject(rctx, fc.Args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Project)
	fc.Result = res
	return ec.marshalNProject2ᚖmazzaᚋentᚋgeneratedᚐProject(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_retrieveProject(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Project_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Project_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Project_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Project_deletedat(ctx, field)
			case "name":
				return ec.fieldContext_Project_name(ctx, field)
			case "description":
				return ec.fieldContext_Project_description(ctx, field)
			case "startdate":
				return ec.fieldContext_Project_startdate(ctx, field)
			case "enddate":
				return ec.fieldContext_Project_enddate(ctx, field)
			case "progress":
				return ec.fieldContext_Project_progress(ctx, field)
			case "status":
				return ec.fieldContext_Project_status(ctx, field)
			case "company":
				return ec.fieldContext_Project_company(ctx, field)
			case "createdby":
				return ec.fieldContext_Project_createdby(ctx, field)
			case "leader":
				return ec.fieldContext_Project_leader(ctx, field)
			case "tasks":
				return ec.fieldContext_Project_tasks(ctx, field)
			case "milestones":
				return ec.fieldContext_Project_milestones(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Project", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_retrieveProject_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_retrieveProjectTask(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_retrieveProjectTask(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RetrieveProjectTask(rctx, fc.Args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.ProjectTask)
	fc.Result = res
	return ec.marshalNProjectTask2ᚖmazzaᚋentᚋgeneratedᚐProjectTask(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_retrieveProjectTask(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProjectTask_id(ctx, field)
			case "createdat":
				return ec.fieldContext_ProjectTask_createdat(ctx, field)
			case "name":
				return ec.fieldContext_ProjectTask_name(ctx, field)
			case "assigneename":
				return ec.fieldContext_ProjectTask_assigneename(ctx, field)
			case "location":
				return ec.fieldContext_ProjectTask_location(ctx, field)
			case "duedate":
				return ec.fieldContext_ProjectTask_duedate(ctx, field)
			case "startdate":
				return ec.fieldContext_ProjectTask_startdate(ctx, field)
			case "enddate":
				return ec.fieldContext_ProjectTask_enddate(ctx, field)
			case "description":
				return ec.fieldContext_ProjectTask_description(ctx, field)
			case "status":
				return ec.fieldContext_ProjectTask_status(ctx, field)
			case "project":
				return ec.fieldContext_ProjectTask_project(ctx, field)
			case "assignee":
				return ec.fieldContext_ProjectTask_assignee(ctx, field)
			case "participants":
				return ec.fieldContext_ProjectTask_participants(ctx, field)
			case "createdby":
				return ec.fieldContext_ProjectTask_createdby(ctx, field)
			case "workshifts":
				return ec.fieldContext_ProjectTask_workshifts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectTask", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_retrieveProjectTask_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_suppliers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_suppliers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Suppliers(rctx, fc.Args["where"].(*generated.SupplierWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*generated.Supplier)
	fc.Result = res
	return ec.marshalNSupplier2ᚕᚖmazzaᚋentᚋgeneratedᚐSupplierᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_suppliers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Supplier_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Supplier_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Supplier_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Supplier_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Supplier_address(ctx, field)
			case "city":
				return ec.fieldContext_Supplier_city(ctx, field)
			case "country":
				return ec.fieldContext_Supplier_country(ctx, field)
			case "description":
				return ec.fieldContext_Supplier_description(ctx, field)
			case "email":
				return ec.fieldContext_Supplier_email(ctx, field)
			case "isdefault":
				return ec.fieldContext_Supplier_isdefault(ctx, field)
			case "name":
				return ec.fieldContext_Supplier_name(ctx, field)
			case "phone":
				return ec.fieldContext_Supplier_phone(ctx, field)
			case "taxid":
				return ec.fieldContext_Supplier_taxid(ctx, field)
			case "company":
				return ec.fieldContext_Supplier_company(ctx, field)
			case "payables":
				return ec.fieldContext_Supplier_payables(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Supplier", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_suppliers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_treasuries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_treasuries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Treasuries(rctx, fc.Args["where"].(*generated.TreasuryWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*generated.Treasury)
	fc.Result = res
	return ec.marshalNTreasury2ᚕᚖmazzaᚋentᚋgeneratedᚐTreasuryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_treasuries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Treasury_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Treasury_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Treasury_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Treasury_deletedat(ctx, field)
			case "balance":
				return ec.fieldContext_Treasury_balance(ctx, field)
			case "company":
				return ec.fieldContext_Treasury_company(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Treasury", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_treasuries_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_aggregateTreasury(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_aggregateTreasury(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AggregateTreasury(rctx, fc.Args["where"].(*generated.TreasuryWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.TreasuryAggregatePayload)
	fc.Result = res
	return ec.marshalNTreasuryAggregatePayload2ᚕᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐTreasuryAggregatePayloadᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_aggregateTreasury(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "companyID":
				return ec.fieldContext_TreasuryAggregatePayload_companyID(ctx, field)
			case "count":
				return ec.fieldContext_TreasuryAggregatePayload_count(ctx, field)
			case "totalBalance":
				return ec.fieldContext_TreasuryAggregatePayload_totalBalance(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TreasuryAggregatePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_aggregateTreasury_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_users(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_users(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Users(rctx, fc.Args["where"].(*generated.UserWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*generated.User)
	fc.Result = res
	return ec.marshalNUser2ᚕᚖmazzaᚋentᚋgeneratedᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_users(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdat":
				return ec.fieldContext_User_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_User_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_User_deletedat(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "birthdate":
				return ec.fieldContext_User_birthdate(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "notverified":
				return ec.fieldContext_User_notverified(ctx, field)
			case "accountingentries":
				return ec.fieldContext_User_accountingentries(ctx, field)
			case "company":
				return ec.fieldContext_User_company(ctx, field)
			case "assignedroles":
				return ec.fieldContext_User_assignedroles(ctx, field)
			case "subordinates":
				return ec.fieldContext_User_subordinates(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "employee":
				return ec.fieldContext_User_employee(ctx, field)
			case "createdprojects":
				return ec.fieldContext_User_createdprojects(ctx, field)
			case "leaderedprojects":
				return ec.fieldContext_User_leaderedprojects(ctx, field)
			case "assignedprojecttasks":
				return ec.fieldContext_User_assignedprojecttasks(ctx, field)
			case "participatedprojecttasks":
				return ec.fieldContext_User_participatedprojecttasks(ctx, field)
			case "createdtasks":
				return ec.fieldContext_User_createdtasks(ctx, field)
			case "tokens":
				return ec.fieldContext_User_tokens(ctx, field)
			case "approvedworkshifts":
				return ec.fieldContext_User_approvedworkshifts(ctx, field)
			case "workshifts":
				return ec.fieldContext_User_workshifts(ctx, field)
			case "uploadeddocuments":
				return ec.fieldContext_User_uploadeddocuments(ctx, field)
			case "approveddocuments":
				return ec.fieldContext_User_approveddocuments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_users_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_userRoles(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_userRoles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UserRoles(rctx, fc.Args["where"].(*generated.UserRoleWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*generated.UserRole)
	fc.Result = res
	return ec.marshalNUserRole2ᚕᚖmazzaᚋentᚋgeneratedᚐUserRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_userRoles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserRole_id(ctx, field)
			case "role":
				return ec.fieldContext_UserRole_role(ctx, field)
			case "company":
				return ec.fieldContext_UserRole_company(ctx, field)
			case "user":
				return ec.fieldContext_UserRole_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserRole", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_userRoles_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_workShifts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_workShifts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().WorkShifts(rctx, fc.Args["where"].(*generated.WorkshiftWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*generated.Workshift)
	fc.Result = res
	return ec.marshalNWorkshift2ᚕᚖmazzaᚋentᚋgeneratedᚐWorkshiftᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_workShifts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Workshift_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Workshift_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Workshift_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Workshift_deletedat(ctx, field)
			case "approvedat":
				return ec.fieldContext_Workshift_approvedat(ctx, field)
			case "clockin":
				return ec.fieldContext_Workshift_clockin(ctx, field)
			case "clockout":
				return ec.fieldContext_Workshift_clockout(ctx, field)
			case "clockinlocation":
				return ec.fieldContext_Workshift_clockinlocation(ctx, field)
			case "clockoutlocation":
				return ec.fieldContext_Workshift_clockoutlocation(ctx, field)
			case "description":
				return ec.fieldContext_Workshift_description(ctx, field)
			case "note":
				return ec.fieldContext_Workshift_note(ctx, field)
			case "status":
				return ec.fieldContext_Workshift_status(ctx, field)
			case "company":
				return ec.fieldContext_Workshift_company(ctx, field)
			case "user":
				return ec.fieldContext_Workshift_user(ctx, field)
			case "approvedby":
				return ec.fieldContext_Workshift_approvedby(ctx, field)
			case "task":
				return ec.fieldContext_Workshift_task(ctx, field)
			case "editrequest":
				return ec.fieldContext_Workshift_editrequest(ctx, field)
			case "workshift":
				return ec.fieldContext_Workshift_workshift(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Workshift", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_workShifts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_aggregateWorkShift(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_aggregateWorkShift(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AggregateWorkShift(rctx, fc.Args["where"].(*generated.WorkshiftWhereInput), fc.Args["groupBy"].([]model.ShiftGroupBy))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.WorkShiftAggregationPayload)
	fc.Result = res
	return ec.marshalNWorkShiftAggregationPayload2ᚕᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐWorkShiftAggregationPayloadᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_aggregateWorkShift(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "date":
				return ec.fieldContext_WorkShiftAggregationPayload_date(ctx, field)
			case "count":
				return ec.fieldContext_WorkShiftAggregationPayload_count(ctx, field)
			case "durationInMinutes":
				return ec.fieldContext_WorkShiftAggregationPayload_durationInMinutes(ctx, field)
			case "pendingCount":
				return ec.fieldContext_WorkShiftAggregationPayload_pendingCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type WorkShiftAggregationPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_aggregateWorkShift_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_countDocuments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_countDocuments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CountDocuments(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DocumentCount)
	fc.Result = res
	return ec.marshalNDocumentCount2ᚕᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐDocumentCountᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_countDocuments(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "category":
				return ec.fieldContext_DocumentCount_category(ctx, field)
			case "count":
				return ec.fieldContext_DocumentCount_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DocumentCount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Receivable_id(ctx context.Context, field graphql.CollectedField, obj *generated.Receivable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Receivable_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Receivable_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Receivable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Receivable_createdat(ctx context.Context, field graphql.CollectedField, obj *generated.Receivable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Receivable_createdat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Receivable_createdat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Receivable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Receivable_updatedat(ctx context.Context, field graphql.CollectedField, obj *generated.Receivable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Receivable_updatedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Receivable_updatedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Receivable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Receivable_deletedat(ctx context.Context, field graphql.CollectedField, obj *generated.Receivable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Receivable_deletedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Receivable_deletedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Receivable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Receivable_entrygroup(ctx context.Context, field graphql.CollectedField, obj *generated.Receivable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Receivable_entrygroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntryGroup, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Receivable_entrygroup(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Receivable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Receivable_date(ctx context.Context, field graphql.CollectedField, obj *generated.Receivable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Receivable_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Receivable_date(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Receivable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Receivable_name(ctx context.Context, field graphql.CollectedField, obj *generated.Receivable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Receivable_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Receivable_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Receivable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Receivable_outstandingbalance(ctx context.Context, field graphql.CollectedField, obj *generated.Receivable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Receivable_outstandingbalance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutstandingBalance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Receivable_outstandingbalance(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Receivable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Receivable_totaltransaction(ctx context.Context, field graphql.CollectedField, obj *generated.Receivable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Receivable_totaltransaction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalTransaction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Receivable_totaltransaction(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Receivable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Receivable_duedate(ctx context.Context, field graphql.CollectedField, obj *generated.Receivable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Receivable_duedate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DueDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Receivable_duedate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Receivable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Receivable_status(ctx context.Context, field graphql.CollectedField, obj *generated.Receivable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Receivable_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(receivable.Status)
	fc.Result = res
	return ec.marshalNReceivableStatus2mazzaᚋentᚋgeneratedᚋreceivableᚐStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Receivable_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Receivable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ReceivableStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Receivable_company(ctx context.Context, field graphql.CollectedField, obj *generated.Receivable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Receivable_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.Company)
	fc.Result = res
	return ec.marshalOCompany2ᚖmazzaᚋentᚋgeneratedᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Receivable_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Receivable",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "industry":
				return ec.fieldContext_Company_industry(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "incompletesetup":
				return ec.fieldContext_Company_incompletesetup(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "documents":
				return ec.fieldContext_Company_documents(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "projects":
				return ec.fieldContext_Company_projects(ctx, field)
			case "payables":
				return ec.fieldContext_Company_payables(ctx, field)
			case "receivables":
				return ec.fieldContext_Company_receivables(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReceivableAggregationOutput_company(ctx context.Context, field graphql.CollectedField, obj *model.ReceivableAggregationOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReceivableAggregationOutput_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOID2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReceivableAggregationOutput_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReceivableAggregationOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReceivableAggregationOutput_count(ctx context.Context, field graphql.CollectedField, obj *model.ReceivableAggregationOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReceivableAggregationOutput_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReceivableAggregationOutput_count(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReceivableAggregationOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReceivableAggregationOutput_sum(ctx context.Context, field graphql.CollectedField, obj *model.ReceivableAggregationOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReceivableAggregationOutput_sum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReceivableAggregationOutput_sum(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReceivableAggregationOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReceivableConnection_edges(ctx context.Context, field graphql.CollectedField, obj *generated.ReceivableConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReceivableConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.ReceivableEdge)
	fc.Result = res
	return ec.marshalOReceivableEdge2ᚕᚖmazzaᚋentᚋgeneratedᚐReceivableEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReceivableConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReceivableConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_ReceivableEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_ReceivableEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ReceivableEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReceivableConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *generated.ReceivableConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReceivableConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[int])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReceivableConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReceivableConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReceivableConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *generated.ReceivableConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReceivableConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReceivableConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReceivableConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReceivableEdge_node(ctx context.Context, field graphql.CollectedField, obj *generated.ReceivableEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReceivableEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.Receivable)
	fc.Result = res
	return ec.marshalOReceivable2ᚖmazzaᚋentᚋgeneratedᚐReceivable(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReceivableEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReceivableEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Receivable_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Receivable_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Receivable_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Receivable_deletedat(ctx, field)
			case "entrygroup":
				return ec.fieldContext_Receivable_entrygroup(ctx, field)
			case "date":
				return ec.fieldContext_Receivable_date(ctx, field)
			case "name":
				return ec.fieldContext_Receivable_name(ctx, field)
			case "outstandingbalance":
				return ec.fieldContext_Receivable_outstandingbalance(ctx, field)
			case "totaltransaction":
				return ec.fieldContext_Receivable_totaltransaction(ctx, field)
			case "duedate":
				return ec.fieldContext_Receivable_duedate(ctx, field)
			case "status":
				return ec.fieldContext_Receivable_status(ctx, field)
			case "company":
				return ec.fieldContext_Receivable_company(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Receivable", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReceivableEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *generated.ReceivableEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReceivableEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[int])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReceivableEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReceivableEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReportRowItem_account(ctx context.Context, field graphql.CollectedField, obj *model.ReportRowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReportRowItem_account(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Account, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReportRowItem_account(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReportRowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReportRowItem_label(ctx context.Context, field graphql.CollectedField, obj *model.ReportRowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReportRowItem_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReportRowItem_label(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReportRowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReportRowItem_value(ctx context.Context, field graphql.CollectedField, obj *model.ReportRowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReportRowItem_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReportRowItem_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReportRowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RevenueTrendOutput_date(ctx context.Context, field graphql.CollectedField, obj *model.RevenueTrendOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RevenueTrendOutput_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RevenueTrendOutput_date(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RevenueTrendOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RevenueTrendOutput_amount(ctx context.Context, field graphql.CollectedField, obj *model.RevenueTrendOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RevenueTrendOutput_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RevenueTrendOutput_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RevenueTrendOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Supplier_id(ctx context.Context, field graphql.CollectedField, obj *generated.Supplier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Supplier_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Supplier_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Supplier_createdat(ctx context.Context, field graphql.CollectedField, obj *generated.Supplier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Supplier_createdat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Supplier_createdat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Supplier_updatedat(ctx context.Context, field graphql.CollectedField, obj *generated.Supplier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Supplier_updatedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Supplier_updatedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Supplier_deletedat(ctx context.Context, field graphql.CollectedField, obj *generated.Supplier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Supplier_deletedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Supplier_deletedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Supplier_address(ctx context.Context, field graphql.CollectedField, obj *generated.Supplier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Supplier_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Supplier_address(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Supplier_city(ctx context.Context, field graphql.CollectedField, obj *generated.Supplier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Supplier_city(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Supplier_city(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Supplier_country(ctx context.Context, field graphql.CollectedField, obj *generated.Supplier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Supplier_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Supplier_country(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Supplier_description(ctx context.Context, field graphql.CollectedField, obj *generated.Supplier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Supplier_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Supplier_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Supplier_email(ctx context.Context, field graphql.CollectedField, obj *generated.Supplier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Supplier_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Supplier_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Supplier_isdefault(ctx context.Context, field graphql.CollectedField, obj *generated.Supplier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Supplier_isdefault(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDefault, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Supplier_isdefault(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Supplier_name(ctx context.Context, field graphql.CollectedField, obj *generated.Supplier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Supplier_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Supplier_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Supplier_phone(ctx context.Context, field graphql.CollectedField, obj *generated.Supplier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Supplier_phone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Supplier_phone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Supplier_taxid(ctx context.Context, field graphql.CollectedField, obj *generated.Supplier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Supplier_taxid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxId, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Supplier_taxid(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Supplier_company(ctx context.Context, field graphql.CollectedField, obj *generated.Supplier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Supplier_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.Company)
	fc.Result = res
	return ec.marshalOCompany2ᚖmazzaᚋentᚋgeneratedᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Supplier_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "industry":
				return ec.fieldContext_Company_industry(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "incompletesetup":
				return ec.fieldContext_Company_incompletesetup(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "documents":
				return ec.fieldContext_Company_documents(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "projects":
				return ec.fieldContext_Company_projects(ctx, field)
			case "payables":
				return ec.fieldContext_Company_payables(ctx, field)
			case "receivables":
				return ec.fieldContext_Company_receivables(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Supplier_payables(ctx context.Context, field graphql.CollectedField, obj *generated.Supplier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Supplier_payables(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Payables(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Payable)
	fc.Result = res
	return ec.marshalOPayable2ᚕᚖmazzaᚋentᚋgeneratedᚐPayableᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Supplier_payables(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Payable_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Payable_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Payable_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Payable_deletedat(ctx, field)
			case "entrygroup":
				return ec.fieldContext_Payable_entrygroup(ctx, field)
			case "date":
				return ec.fieldContext_Payable_date(ctx, field)
			case "name":
				return ec.fieldContext_Payable_name(ctx, field)
			case "outstandingbalance":
				return ec.fieldContext_Payable_outstandingbalance(ctx, field)
			case "totaltransaction":
				return ec.fieldContext_Payable_totaltransaction(ctx, field)
			case "duedate":
				return ec.fieldContext_Payable_duedate(ctx, field)
			case "status":
				return ec.fieldContext_Payable_status(ctx, field)
			case "company":
				return ec.fieldContext_Payable_company(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Payable", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Token_id(ctx context.Context, field graphql.CollectedField, obj *generated.Token) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Token_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Token_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Token",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Token_expiry(ctx context.Context, field graphql.CollectedField, obj *generated.Token) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Token_expiry(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Expiry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Token_expiry(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Token",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Token_category(ctx context.Context, field graphql.CollectedField, obj *generated.Token) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Token_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(token.Category)
	fc.Result = res
	return ec.marshalNTokenCategory2mazzaᚋentᚋgeneratedᚋtokenᚐCategory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Token_category(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Token",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TokenCategory does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Token_token(ctx context.Context, field graphql.CollectedField, obj *generated.Token) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Token_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Token_token(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Token",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Token_company(ctx context.Context, field graphql.CollectedField, obj *generated.Token) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Token_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.Company)
	fc.Result = res
	return ec.marshalOCompany2ᚖmazzaᚋentᚋgeneratedᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Token_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Token",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "industry":
				return ec.fieldContext_Company_industry(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "incompletesetup":
				return ec.fieldContext_Company_incompletesetup(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "documents":
				return ec.fieldContext_Company_documents(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "projects":
				return ec.fieldContext_Company_projects(ctx, field)
			case "payables":
				return ec.fieldContext_Company_payables(ctx, field)
			case "receivables":
				return ec.fieldContext_Company_receivables(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Token_user(ctx context.Context, field graphql.CollectedField, obj *generated.Token) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Token_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.User)
	fc.Result = res
	return ec.marshalOUser2ᚖmazzaᚋentᚋgeneratedᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Token_user(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Token",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdat":
				return ec.fieldContext_User_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_User_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_User_deletedat(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "birthdate":
				return ec.fieldContext_User_birthdate(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "notverified":
				return ec.fieldContext_User_notverified(ctx, field)
			case "accountingentries":
				return ec.fieldContext_User_accountingentries(ctx, field)
			case "company":
				return ec.fieldContext_User_company(ctx, field)
			case "assignedroles":
				return ec.fieldContext_User_assignedroles(ctx, field)
			case "subordinates":
				return ec.fieldContext_User_subordinates(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "employee":
				return ec.fieldContext_User_employee(ctx, field)
			case "createdprojects":
				return ec.fieldContext_User_createdprojects(ctx, field)
			case "leaderedprojects":
				return ec.fieldContext_User_leaderedprojects(ctx, field)
			case "assignedprojecttasks":
				return ec.fieldContext_User_assignedprojecttasks(ctx, field)
			case "participatedprojecttasks":
				return ec.fieldContext_User_participatedprojecttasks(ctx, field)
			case "createdtasks":
				return ec.fieldContext_User_createdtasks(ctx, field)
			case "tokens":
				return ec.fieldContext_User_tokens(ctx, field)
			case "approvedworkshifts":
				return ec.fieldContext_User_approvedworkshifts(ctx, field)
			case "workshifts":
				return ec.fieldContext_User_workshifts(ctx, field)
			case "uploadeddocuments":
				return ec.fieldContext_User_uploadeddocuments(ctx, field)
			case "approveddocuments":
				return ec.fieldContext_User_approveddocuments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Treasury_id(ctx context.Context, field graphql.CollectedField, obj *generated.Treasury) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Treasury_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Treasury_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Treasury",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Treasury_createdat(ctx context.Context, field graphql.CollectedField, obj *generated.Treasury) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Treasury_createdat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Treasury_createdat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Treasury",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Treasury_updatedat(ctx context.Context, field graphql.CollectedField, obj *generated.Treasury) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Treasury_updatedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Treasury_updatedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Treasury",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Treasury_deletedat(ctx context.Context, field graphql.CollectedField, obj *generated.Treasury) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Treasury_deletedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Treasury_deletedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Treasury",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Treasury_balance(ctx context.Context, field graphql.CollectedField, obj *generated.Treasury) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Treasury_balance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Balance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Treasury_balance(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Treasury",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Treasury_company(ctx context.Context, field graphql.CollectedField, obj *generated.Treasury) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Treasury_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.Company)
	fc.Result = res
	return ec.marshalOCompany2ᚖmazzaᚋentᚋgeneratedᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Treasury_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Treasury",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "industry":
				return ec.fieldContext_Company_industry(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "incompletesetup":
				return ec.fieldContext_Company_incompletesetup(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "documents":
				return ec.fieldContext_Company_documents(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "projects":
				return ec.fieldContext_Company_projects(ctx, field)
			case "payables":
				return ec.fieldContext_Company_payables(ctx, field)
			case "receivables":
				return ec.fieldContext_Company_receivables(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TreasuryAggregatePayload_companyID(ctx context.Context, field graphql.CollectedField, obj *model.TreasuryAggregatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TreasuryAggregatePayload_companyID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TreasuryAggregatePayload_companyID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TreasuryAggregatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TreasuryAggregatePayload_count(ctx context.Context, field graphql.CollectedField, obj *model.TreasuryAggregatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TreasuryAggregatePayload_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TreasuryAggregatePayload_count(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TreasuryAggregatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TreasuryAggregatePayload_totalBalance(ctx context.Context, field graphql.CollectedField, obj *model.TreasuryAggregatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TreasuryAggregatePayload_totalBalance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalBalance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TreasuryAggregatePayload_totalBalance(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TreasuryAggregatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrialBalanceRowItem_account(ctx context.Context, field graphql.CollectedField, obj *model.TrialBalanceRowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrialBalanceRowItem_account(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Account, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrialBalanceRowItem_account(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrialBalanceRowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrialBalanceRowItem_label(ctx context.Context, field graphql.CollectedField, obj *model.TrialBalanceRowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrialBalanceRowItem_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrialBalanceRowItem_label(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrialBalanceRowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrialBalanceRowItem_debit(ctx context.Context, field graphql.CollectedField, obj *model.TrialBalanceRowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrialBalanceRowItem_debit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Debit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrialBalanceRowItem_debit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrialBalanceRowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrialBalanceRowItem_credit(ctx context.Context, field graphql.CollectedField, obj *model.TrialBalanceRowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrialBalanceRowItem_credit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Credit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrialBalanceRowItem_credit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrialBalanceRowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrialBalanceRowItem_balance(ctx context.Context, field graphql.CollectedField, obj *model.TrialBalanceRowItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrialBalanceRowItem_balance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Balance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrialBalanceRowItem_balance(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrialBalanceRowItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *generated.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_createdat(ctx context.Context, field graphql.CollectedField, obj *generated.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_createdat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_createdat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_updatedat(ctx context.Context, field graphql.CollectedField, obj *generated.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_updatedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_updatedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_deletedat(ctx context.Context, field graphql.CollectedField, obj *generated.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_deletedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_deletedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_email(ctx context.Context, field graphql.CollectedField, obj *generated.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_name(ctx context.Context, field graphql.CollectedField, obj *generated.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_phone(ctx context.Context, field graphql.CollectedField, obj *generated.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_phone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_phone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_birthdate(ctx context.Context, field graphql.CollectedField, obj *generated.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_birthdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Birthdate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_birthdate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_gender(ctx context.Context, field graphql.CollectedField, obj *generated.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_gender(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(user.Gender)
	fc.Result = res
	return ec.marshalNUserGender2mazzaᚋentᚋgeneratedᚋuserᚐGender(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_gender(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UserGender does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_disabled(ctx context.Context, field graphql.CollectedField, obj *generated.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_disabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Disabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_disabled(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_notverified(ctx context.Context, field graphql.CollectedField, obj *generated.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_notverified(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotVerified, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_notverified(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_accountingentries(ctx context.Context, field graphql.CollectedField, obj *generated.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_accountingentries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountingEntries(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.AccountingEntry)
	fc.Result = res
	return ec.marshalOAccountingEntry2ᚕᚖmazzaᚋentᚋgeneratedᚐAccountingEntryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_accountingentries(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AccountingEntry_id(ctx, field)
			case "createdat":
				return ec.fieldContext_AccountingEntry_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_AccountingEntry_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_AccountingEntry_deletedat(ctx, field)
			case "number":
				return ec.fieldContext_AccountingEntry_number(ctx, field)
			case "group":
				return ec.fieldContext_AccountingEntry_group(ctx, field)
			case "date":
				return ec.fieldContext_AccountingEntry_date(ctx, field)
			case "account":
				return ec.fieldContext_AccountingEntry_account(ctx, field)
			case "label":
				return ec.fieldContext_AccountingEntry_label(ctx, field)
			case "amount":
				return ec.fieldContext_AccountingEntry_amount(ctx, field)
			case "description":
				return ec.fieldContext_AccountingEntry_description(ctx, field)
			case "accounttype":
				return ec.fieldContext_AccountingEntry_accounttype(ctx, field)
			case "category":
				return ec.fieldContext_AccountingEntry_category(ctx, field)
			case "isdebit":
				return ec.fieldContext_AccountingEntry_isdebit(ctx, field)
			case "isreversal":
				return ec.fieldContext_AccountingEntry_isreversal(ctx, field)
			case "reversed":
				return ec.fieldContext_AccountingEntry_reversed(ctx, field)
			case "company":
				return ec.fieldContext_AccountingEntry_company(ctx, field)
			case "user":
				return ec.fieldContext_AccountingEntry_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountingEntry", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_company(ctx context.Context, field graphql.CollectedField, obj *generated.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*generated.Company)
	fc.Result = res
	return ec.marshalNCompany2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "industry":
				return ec.fieldContext_Company_industry(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "incompletesetup":
				return ec.fieldContext_Company_incompletesetup(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "documents":
				return ec.fieldContext_Company_documents(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "projects":
				return ec.fieldContext_Company_projects(ctx, field)
			case "payables":
				return ec.fieldContext_Company_payables(ctx, field)
			case "receivables":
				return ec.fieldContext_Company_receivables(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_assignedroles(ctx context.Context, field graphql.CollectedField, obj *generated.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_assignedroles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssignedRoles(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.UserRole)
	fc.Result = res
	return ec.marshalOUserRole2ᚕᚖmazzaᚋentᚋgeneratedᚐUserRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_assignedroles(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserRole_id(ctx, field)
			case "role":
				return ec.fieldContext_UserRole_role(ctx, field)
			case "company":
				return ec.fieldContext_UserRole_company(ctx, field)
			case "user":
				return ec.fieldContext_UserRole_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserRole", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_subordinates(ctx context.Context, field graphql.CollectedField, obj *generated.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_subordinates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subordinates(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖmazzaᚋentᚋgeneratedᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_subordinates(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdat":
				return ec.fieldContext_User_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_User_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_User_deletedat(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "birthdate":
				return ec.fieldContext_User_birthdate(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "notverified":
				return ec.fieldContext_User_notverified(ctx, field)
			case "accountingentries":
				return ec.fieldContext_User_accountingentries(ctx, field)
			case "company":
				return ec.fieldContext_User_company(ctx, field)
			case "assignedroles":
				return ec.fieldContext_User_assignedroles(ctx, field)
			case "subordinates":
				return ec.fieldContext_User_subordinates(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "employee":
				return ec.fieldContext_User_employee(ctx, field)
			case "createdprojects":
				return ec.fieldContext_User_createdprojects(ctx, field)
			case "leaderedprojects":
				return ec.fieldContext_User_leaderedprojects(ctx, field)
			case "assignedprojecttasks":
				return ec.fieldContext_User_assignedprojecttasks(ctx, field)
			case "participatedprojecttasks":
				return ec.fieldContext_User_participatedprojecttasks(ctx, field)
			case "createdtasks":
				return ec.fieldContext_User_createdtasks(ctx, field)
			case "tokens":
				return ec.fieldContext_User_tokens(ctx, field)
			case "approvedworkshifts":
				return ec.fieldContext_User_approvedworkshifts(ctx, field)
			case "workshifts":
				return ec.fieldContext_User_workshifts(ctx, field)
			case "uploadeddocuments":
				return ec.fieldContext_User_uploadeddocuments(ctx, field)
			case "approveddocuments":
				return ec.fieldContext_User_approveddocuments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_leader(ctx context.Context, field graphql.CollectedField, obj *generated.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_leader(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Leader(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.User)
	fc.Result = res
	return ec.marshalOUser2ᚖmazzaᚋentᚋgeneratedᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_leader(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdat":
				return ec.fieldContext_User_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_User_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_User_deletedat(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "birthdate":
				return ec.fieldContext_User_birthdate(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "notverified":
				return ec.fieldContext_User_notverified(ctx, field)
			case "accountingentries":
				return ec.fieldContext_User_accountingentries(ctx, field)
			case "company":
				return ec.fieldContext_User_company(ctx, field)
			case "assignedroles":
				return ec.fieldContext_User_assignedroles(ctx, field)
			case "subordinates":
				return ec.fieldContext_User_subordinates(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "employee":
				return ec.fieldContext_User_employee(ctx, field)
			case "createdprojects":
				return ec.fieldContext_User_createdprojects(ctx, field)
			case "leaderedprojects":
				return ec.fieldContext_User_leaderedprojects(ctx, field)
			case "assignedprojecttasks":
				return ec.fieldContext_User_assignedprojecttasks(ctx, field)
			case "participatedprojecttasks":
				return ec.fieldContext_User_participatedprojecttasks(ctx, field)
			case "createdtasks":
				return ec.fieldContext_User_createdtasks(ctx, field)
			case "tokens":
				return ec.fieldContext_User_tokens(ctx, field)
			case "approvedworkshifts":
				return ec.fieldContext_User_approvedworkshifts(ctx, field)
			case "workshifts":
				return ec.fieldContext_User_workshifts(ctx, field)
			case "uploadeddocuments":
				return ec.fieldContext_User_uploadeddocuments(ctx, field)
			case "approveddocuments":
				return ec.fieldContext_User_approveddocuments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_employee(ctx context.Context, field graphql.CollectedField, obj *generated.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_employee(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Employee(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.Employee)
	fc.Result = res
	return ec.marshalOEmployee2ᚖmazzaᚋentᚋgeneratedᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_employee(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Employee_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Employee_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Employee_deletedat(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "gender":
				return ec.fieldContext_Employee_gender(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "company":
				return ec.fieldContext_Employee_company(ctx, field)
			case "user":
				return ec.fieldContext_Employee_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_createdprojects(ctx context.Context, field graphql.CollectedField, obj *generated.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_createdprojects(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedProjects(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Project)
	fc.Result = res
	return ec.marshalOProject2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_createdprojects(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Project_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Project_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Project_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Project_deletedat(ctx, field)
			case "name":
				return ec.fieldContext_Project_name(ctx, field)
			case "description":
				return ec.fieldContext_Project_description(ctx, field)
			case "startdate":
				return ec.fieldContext_Project_startdate(ctx, field)
			case "enddate":
				return ec.fieldContext_Project_enddate(ctx, field)
			case "progress":
				return ec.fieldContext_Project_progress(ctx, field)
			case "status":
				return ec.fieldContext_Project_status(ctx, field)
			case "company":
				return ec.fieldContext_Project_company(ctx, field)
			case "createdby":
				return ec.fieldContext_Project_createdby(ctx, field)
			case "leader":
				return ec.fieldContext_Project_leader(ctx, field)
			case "tasks":
				return ec.fieldContext_Project_tasks(ctx, field)
			case "milestones":
				return ec.fieldContext_Project_milestones(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Project", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_leaderedprojects(ctx context.Context, field graphql.CollectedField, obj *generated.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_leaderedprojects(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LeaderedProjects(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Project)
	fc.Result = res
	return ec.marshalOProject2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_leaderedprojects(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Project_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Project_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Project_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Project_deletedat(ctx, field)
			case "name":
				return ec.fieldContext_Project_name(ctx, field)
			case "description":
				return ec.fieldContext_Project_description(ctx, field)
			case "startdate":
				return ec.fieldContext_Project_startdate(ctx, field)
			case "enddate":
				return ec.fieldContext_Project_enddate(ctx, field)
			case "progress":
				return ec.fieldContext_Project_progress(ctx, field)
			case "status":
				return ec.fieldContext_Project_status(ctx, field)
			case "company":
				return ec.fieldContext_Project_company(ctx, field)
			case "createdby":
				return ec.fieldContext_Project_createdby(ctx, field)
			case "leader":
				return ec.fieldContext_Project_leader(ctx, field)
			case "tasks":
				return ec.fieldContext_Project_tasks(ctx, field)
			case "milestones":
				return ec.fieldContext_Project_milestones(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Project", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_assignedprojecttasks(ctx context.Context, field graphql.CollectedField, obj *generated.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_assignedprojecttasks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssignedProjectTasks(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.ProjectTask)
	fc.Result = res
	return ec.marshalOProjectTask2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectTaskᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_assignedprojecttasks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProjectTask_id(ctx, field)
			case "createdat":
				return ec.fieldContext_ProjectTask_createdat(ctx, field)
			case "name":
				return ec.fieldContext_ProjectTask_name(ctx, field)
			case "assigneename":
				return ec.fieldContext_ProjectTask_assigneename(ctx, field)
			case "location":
				return ec.fieldContext_ProjectTask_location(ctx, field)
			case "duedate":
				return ec.fieldContext_ProjectTask_duedate(ctx, field)
			case "startdate":
				return ec.fieldContext_ProjectTask_startdate(ctx, field)
			case "enddate":
				return ec.fieldContext_ProjectTask_enddate(ctx, field)
			case "description":
				return ec.fieldContext_ProjectTask_description(ctx, field)
			case "status":
				return ec.fieldContext_ProjectTask_status(ctx, field)
			case "project":
				return ec.fieldContext_ProjectTask_project(ctx, field)
			case "assignee":
				return ec.fieldContext_ProjectTask_assignee(ctx, field)
			case "participants":
				return ec.fieldContext_ProjectTask_participants(ctx, field)
			case "createdby":
				return ec.fieldContext_ProjectTask_createdby(ctx, field)
			case "workshifts":
				return ec.fieldContext_ProjectTask_workshifts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectTask", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_participatedprojecttasks(ctx context.Context, field graphql.CollectedField, obj *generated.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_participatedprojecttasks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParticipatedProjectTasks(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.ProjectTask)
	fc.Result = res
	return ec.marshalOProjectTask2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectTaskᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_participatedprojecttasks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProjectTask_id(ctx, field)
			case "createdat":
				return ec.fieldContext_ProjectTask_createdat(ctx, field)
			case "name":
				return ec.fieldContext_ProjectTask_name(ctx, field)
			case "assigneename":
				return ec.fieldContext_ProjectTask_assigneename(ctx, field)
			case "location":
				return ec.fieldContext_ProjectTask_location(ctx, field)
			case "duedate":
				return ec.fieldContext_ProjectTask_duedate(ctx, field)
			case "startdate":
				return ec.fieldContext_ProjectTask_startdate(ctx, field)
			case "enddate":
				return ec.fieldContext_ProjectTask_enddate(ctx, field)
			case "description":
				return ec.fieldContext_ProjectTask_description(ctx, field)
			case "status":
				return ec.fieldContext_ProjectTask_status(ctx, field)
			case "project":
				return ec.fieldContext_ProjectTask_project(ctx, field)
			case "assignee":
				return ec.fieldContext_ProjectTask_assignee(ctx, field)
			case "participants":
				return ec.fieldContext_ProjectTask_participants(ctx, field)
			case "createdby":
				return ec.fieldContext_ProjectTask_createdby(ctx, field)
			case "workshifts":
				return ec.fieldContext_ProjectTask_workshifts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectTask", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_createdtasks(ctx context.Context, field graphql.CollectedField, obj *generated.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_createdtasks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedTasks(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.ProjectTask)
	fc.Result = res
	return ec.marshalOProjectTask2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectTaskᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_createdtasks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProjectTask_id(ctx, field)
			case "createdat":
				return ec.fieldContext_ProjectTask_createdat(ctx, field)
			case "name":
				return ec.fieldContext_ProjectTask_name(ctx, field)
			case "assigneename":
				return ec.fieldContext_ProjectTask_assigneename(ctx, field)
			case "location":
				return ec.fieldContext_ProjectTask_location(ctx, field)
			case "duedate":
				return ec.fieldContext_ProjectTask_duedate(ctx, field)
			case "startdate":
				return ec.fieldContext_ProjectTask_startdate(ctx, field)
			case "enddate":
				return ec.fieldContext_ProjectTask_enddate(ctx, field)
			case "description":
				return ec.fieldContext_ProjectTask_description(ctx, field)
			case "status":
				return ec.fieldContext_ProjectTask_status(ctx, field)
			case "project":
				return ec.fieldContext_ProjectTask_project(ctx, field)
			case "assignee":
				return ec.fieldContext_ProjectTask_assignee(ctx, field)
			case "participants":
				return ec.fieldContext_ProjectTask_participants(ctx, field)
			case "createdby":
				return ec.fieldContext_ProjectTask_createdby(ctx, field)
			case "workshifts":
				return ec.fieldContext_ProjectTask_workshifts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectTask", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_tokens(ctx context.Context, field graphql.CollectedField, obj *generated.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_tokens(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tokens(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Token)
	fc.Result = res
	return ec.marshalOToken2ᚕᚖmazzaᚋentᚋgeneratedᚐTokenᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_tokens(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Token_id(ctx, field)
			case "expiry":
				return ec.fieldContext_Token_expiry(ctx, field)
			case "category":
				return ec.fieldContext_Token_category(ctx, field)
			case "token":
				return ec.fieldContext_Token_token(ctx, field)
			case "company":
				return ec.fieldContext_Token_company(ctx, field)
			case "user":
				return ec.fieldContext_Token_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Token", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_approvedworkshifts(ctx context.Context, field graphql.CollectedField, obj *generated.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_approvedworkshifts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApprovedWorkShifts(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Workshift)
	fc.Result = res
	return ec.marshalOWorkshift2ᚕᚖmazzaᚋentᚋgeneratedᚐWorkshiftᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_approvedworkshifts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Workshift_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Workshift_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Workshift_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Workshift_deletedat(ctx, field)
			case "approvedat":
				return ec.fieldContext_Workshift_approvedat(ctx, field)
			case "clockin":
				return ec.fieldContext_Workshift_clockin(ctx, field)
			case "clockout":
				return ec.fieldContext_Workshift_clockout(ctx, field)
			case "clockinlocation":
				return ec.fieldContext_Workshift_clockinlocation(ctx, field)
			case "clockoutlocation":
				return ec.fieldContext_Workshift_clockoutlocation(ctx, field)
			case "description":
				return ec.fieldContext_Workshift_description(ctx, field)
			case "note":
				return ec.fieldContext_Workshift_note(ctx, field)
			case "status":
				return ec.fieldContext_Workshift_status(ctx, field)
			case "company":
				return ec.fieldContext_Workshift_company(ctx, field)
			case "user":
				return ec.fieldContext_Workshift_user(ctx, field)
			case "approvedby":
				return ec.fieldContext_Workshift_approvedby(ctx, field)
			case "task":
				return ec.fieldContext_Workshift_task(ctx, field)
			case "editrequest":
				return ec.fieldContext_Workshift_editrequest(ctx, field)
			case "workshift":
				return ec.fieldContext_Workshift_workshift(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Workshift", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_workshifts(ctx context.Context, field graphql.CollectedField, obj *generated.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_workshifts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkShifts(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Workshift)
	fc.Result = res
	return ec.marshalOWorkshift2ᚕᚖmazzaᚋentᚋgeneratedᚐWorkshiftᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_workshifts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Workshift_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Workshift_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Workshift_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Workshift_deletedat(ctx, field)
			case "approvedat":
				return ec.fieldContext_Workshift_approvedat(ctx, field)
			case "clockin":
				return ec.fieldContext_Workshift_clockin(ctx, field)
			case "clockout":
				return ec.fieldContext_Workshift_clockout(ctx, field)
			case "clockinlocation":
				return ec.fieldContext_Workshift_clockinlocation(ctx, field)
			case "clockoutlocation":
				return ec.fieldContext_Workshift_clockoutlocation(ctx, field)
			case "description":
				return ec.fieldContext_Workshift_description(ctx, field)
			case "note":
				return ec.fieldContext_Workshift_note(ctx, field)
			case "status":
				return ec.fieldContext_Workshift_status(ctx, field)
			case "company":
				return ec.fieldContext_Workshift_company(ctx, field)
			case "user":
				return ec.fieldContext_Workshift_user(ctx, field)
			case "approvedby":
				return ec.fieldContext_Workshift_approvedby(ctx, field)
			case "task":
				return ec.fieldContext_Workshift_task(ctx, field)
			case "editrequest":
				return ec.fieldContext_Workshift_editrequest(ctx, field)
			case "workshift":
				return ec.fieldContext_Workshift_workshift(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Workshift", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_uploadeddocuments(ctx context.Context, field graphql.CollectedField, obj *generated.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_uploadeddocuments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UploadedDocuments(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.CompanyDocument)
	fc.Result = res
	return ec.marshalOCompanyDocument2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyDocumentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_uploadeddocuments(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CompanyDocument_id(ctx, field)
			case "createdat":
				return ec.fieldContext_CompanyDocument_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_CompanyDocument_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_CompanyDocument_deletedat(ctx, field)
			case "filename":
				return ec.fieldContext_CompanyDocument_filename(ctx, field)
			case "title":
				return ec.fieldContext_CompanyDocument_title(ctx, field)
			case "keywords":
				return ec.fieldContext_CompanyDocument_keywords(ctx, field)
			case "category":
				return ec.fieldContext_CompanyDocument_category(ctx, field)
			case "size":
				return ec.fieldContext_CompanyDocument_size(ctx, field)
			case "filetype":
				return ec.fieldContext_CompanyDocument_filetype(ctx, field)
			case "status":
				return ec.fieldContext_CompanyDocument_status(ctx, field)
			case "url":
				return ec.fieldContext_CompanyDocument_url(ctx, field)
			case "thumbnail":
				return ec.fieldContext_CompanyDocument_thumbnail(ctx, field)
			case "expirydate":
				return ec.fieldContext_CompanyDocument_expirydate(ctx, field)
			case "company":
				return ec.fieldContext_CompanyDocument_company(ctx, field)
			case "uploadedby":
				return ec.fieldContext_CompanyDocument_uploadedby(ctx, field)
			case "approvedby":
				return ec.fieldContext_CompanyDocument_approvedby(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompanyDocument", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_approveddocuments(ctx context.Context, field graphql.CollectedField, obj *generated.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_approveddocuments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApprovedDocuments(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.CompanyDocument)
	fc.Result = res
	return ec.marshalOCompanyDocument2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyDocumentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_approveddocuments(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CompanyDocument_id(ctx, field)
			case "createdat":
				return ec.fieldContext_CompanyDocument_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_CompanyDocument_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_CompanyDocument_deletedat(ctx, field)
			case "filename":
				return ec.fieldContext_CompanyDocument_filename(ctx, field)
			case "title":
				return ec.fieldContext_CompanyDocument_title(ctx, field)
			case "keywords":
				return ec.fieldContext_CompanyDocument_keywords(ctx, field)
			case "category":
				return ec.fieldContext_CompanyDocument_category(ctx, field)
			case "size":
				return ec.fieldContext_CompanyDocument_size(ctx, field)
			case "filetype":
				return ec.fieldContext_CompanyDocument_filetype(ctx, field)
			case "status":
				return ec.fieldContext_CompanyDocument_status(ctx, field)
			case "url":
				return ec.fieldContext_CompanyDocument_url(ctx, field)
			case "thumbnail":
				return ec.fieldContext_CompanyDocument_thumbnail(ctx, field)
			case "expirydate":
				return ec.fieldContext_CompanyDocument_expirydate(ctx, field)
			case "company":
				return ec.fieldContext_CompanyDocument_company(ctx, field)
			case "uploadedby":
				return ec.fieldContext_CompanyDocument_uploadedby(ctx, field)
			case "approvedby":
				return ec.fieldContext_CompanyDocument_approvedby(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompanyDocument", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_id(ctx context.Context, field graphql.CollectedField, obj *generated.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_role(ctx context.Context, field graphql.CollectedField, obj *generated.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_role(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(userrole.Role)
	fc.Result = res
	return ec.marshalNUserRoleRole2mazzaᚋentᚋgeneratedᚋuserroleᚐRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_role(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UserRoleRole does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_company(ctx context.Context, field graphql.CollectedField, obj *generated.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.Company)
	fc.Result = res
	return ec.marshalOCompany2ᚖmazzaᚋentᚋgeneratedᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "industry":
				return ec.fieldContext_Company_industry(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "incompletesetup":
				return ec.fieldContext_Company_incompletesetup(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "documents":
				return ec.fieldContext_Company_documents(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "projects":
				return ec.fieldContext_Company_projects(ctx, field)
			case "payables":
				return ec.fieldContext_Company_payables(ctx, field)
			case "receivables":
				return ec.fieldContext_Company_receivables(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_user(ctx context.Context, field graphql.CollectedField, obj *generated.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖmazzaᚋentᚋgeneratedᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_user(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdat":
				return ec.fieldContext_User_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_User_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_User_deletedat(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "birthdate":
				return ec.fieldContext_User_birthdate(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "notverified":
				return ec.fieldContext_User_notverified(ctx, field)
			case "accountingentries":
				return ec.fieldContext_User_accountingentries(ctx, field)
			case "company":
				return ec.fieldContext_User_company(ctx, field)
			case "assignedroles":
				return ec.fieldContext_User_assignedroles(ctx, field)
			case "subordinates":
				return ec.fieldContext_User_subordinates(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "employee":
				return ec.fieldContext_User_employee(ctx, field)
			case "createdprojects":
				return ec.fieldContext_User_createdprojects(ctx, field)
			case "leaderedprojects":
				return ec.fieldContext_User_leaderedprojects(ctx, field)
			case "assignedprojecttasks":
				return ec.fieldContext_User_assignedprojecttasks(ctx, field)
			case "participatedprojecttasks":
				return ec.fieldContext_User_participatedprojecttasks(ctx, field)
			case "createdtasks":
				return ec.fieldContext_User_createdtasks(ctx, field)
			case "tokens":
				return ec.fieldContext_User_tokens(ctx, field)
			case "approvedworkshifts":
				return ec.fieldContext_User_approvedworkshifts(ctx, field)
			case "workshifts":
				return ec.fieldContext_User_workshifts(ctx, field)
			case "uploadeddocuments":
				return ec.fieldContext_User_uploadeddocuments(ctx, field)
			case "approveddocuments":
				return ec.fieldContext_User_approveddocuments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _WorkShiftAggregationPayload_date(ctx context.Context, field graphql.CollectedField, obj *model.WorkShiftAggregationPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WorkShiftAggregationPayload_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WorkShiftAggregationPayload_date(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WorkShiftAggregationPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WorkShiftAggregationPayload_count(ctx context.Context, field graphql.CollectedField, obj *model.WorkShiftAggregationPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WorkShiftAggregationPayload_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WorkShiftAggregationPayload_count(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WorkShiftAggregationPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WorkShiftAggregationPayload_durationInMinutes(ctx context.Context, field graphql.CollectedField, obj *model.WorkShiftAggregationPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WorkShiftAggregationPayload_durationInMinutes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DurationInMinutes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WorkShiftAggregationPayload_durationInMinutes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WorkShiftAggregationPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WorkShiftAggregationPayload_pendingCount(ctx context.Context, field graphql.CollectedField, obj *model.WorkShiftAggregationPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WorkShiftAggregationPayload_pendingCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PendingCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WorkShiftAggregationPayload_pendingCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WorkShiftAggregationPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_id(ctx context.Context, field graphql.CollectedField, obj *generated.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_createdat(ctx context.Context, field graphql.CollectedField, obj *generated.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_createdat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_createdat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_updatedat(ctx context.Context, field graphql.CollectedField, obj *generated.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_updatedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_updatedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_deletedat(ctx context.Context, field graphql.CollectedField, obj *generated.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_deletedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_deletedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_approvedat(ctx context.Context, field graphql.CollectedField, obj *generated.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_approvedat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApprovedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_approvedat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_clockin(ctx context.Context, field graphql.CollectedField, obj *generated.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_clockin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClockIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_clockin(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_clockout(ctx context.Context, field graphql.CollectedField, obj *generated.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_clockout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClockOut, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_clockout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_clockinlocation(ctx context.Context, field graphql.CollectedField, obj *generated.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_clockinlocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClockInLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_clockinlocation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_clockoutlocation(ctx context.Context, field graphql.CollectedField, obj *generated.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_clockoutlocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClockOutLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_clockoutlocation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_description(ctx context.Context, field graphql.CollectedField, obj *generated.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_note(ctx context.Context, field graphql.CollectedField, obj *generated.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_note(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_note(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_status(ctx context.Context, field graphql.CollectedField, obj *generated.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(workshift.Status)
	fc.Result = res
	return ec.marshalNWorkshiftStatus2mazzaᚋentᚋgeneratedᚋworkshiftᚐStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type WorkshiftStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_company(ctx context.Context, field graphql.CollectedField, obj *generated.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.Company)
	fc.Result = res
	return ec.marshalOCompany2ᚖmazzaᚋentᚋgeneratedᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Company_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Company_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Company_deletedat(ctx, field)
			case "address":
				return ec.fieldContext_Company_address(ctx, field)
			case "basecurrency":
				return ec.fieldContext_Company_basecurrency(ctx, field)
			case "ceoname":
				return ec.fieldContext_Company_ceoname(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "establishedat":
				return ec.fieldContext_Company_establishedat(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "email":
				return ec.fieldContext_Company_email(ctx, field)
			case "industry":
				return ec.fieldContext_Company_industry(ctx, field)
			case "lastentrydate":
				return ec.fieldContext_Company_lastentrydate(ctx, field)
			case "lastinvoicenumber":
				return ec.fieldContext_Company_lastinvoicenumber(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "numberofemployees":
				return ec.fieldContext_Company_numberofemployees(ctx, field)
			case "phone":
				return ec.fieldContext_Company_phone(ctx, field)
			case "sector":
				return ec.fieldContext_Company_sector(ctx, field)
			case "taxid":
				return ec.fieldContext_Company_taxid(ctx, field)
			case "vatrate":
				return ec.fieldContext_Company_vatrate(ctx, field)
			case "website":
				return ec.fieldContext_Company_website(ctx, field)
			case "incompletesetup":
				return ec.fieldContext_Company_incompletesetup(ctx, field)
			case "availableroles":
				return ec.fieldContext_Company_availableroles(ctx, field)
			case "accountingentries":
				return ec.fieldContext_Company_accountingentries(ctx, field)
			case "customers":
				return ec.fieldContext_Company_customers(ctx, field)
			case "documents":
				return ec.fieldContext_Company_documents(ctx, field)
			case "employees":
				return ec.fieldContext_Company_employees(ctx, field)
			case "files":
				return ec.fieldContext_Company_files(ctx, field)
			case "products":
				return ec.fieldContext_Company_products(ctx, field)
			case "projects":
				return ec.fieldContext_Company_projects(ctx, field)
			case "payables":
				return ec.fieldContext_Company_payables(ctx, field)
			case "receivables":
				return ec.fieldContext_Company_receivables(ctx, field)
			case "suppliers":
				return ec.fieldContext_Company_suppliers(ctx, field)
			case "tokens":
				return ec.fieldContext_Company_tokens(ctx, field)
			case "treasuries":
				return ec.fieldContext_Company_treasuries(ctx, field)
			case "workshifts":
				return ec.fieldContext_Company_workshifts(ctx, field)
			case "users":
				return ec.fieldContext_Company_users(ctx, field)
			case "daughtercompanies":
				return ec.fieldContext_Company_daughtercompanies(ctx, field)
			case "parentcompany":
				return ec.fieldContext_Company_parentcompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_user(ctx context.Context, field graphql.CollectedField, obj *generated.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.User)
	fc.Result = res
	return ec.marshalOUser2ᚖmazzaᚋentᚋgeneratedᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_user(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdat":
				return ec.fieldContext_User_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_User_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_User_deletedat(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "birthdate":
				return ec.fieldContext_User_birthdate(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "notverified":
				return ec.fieldContext_User_notverified(ctx, field)
			case "accountingentries":
				return ec.fieldContext_User_accountingentries(ctx, field)
			case "company":
				return ec.fieldContext_User_company(ctx, field)
			case "assignedroles":
				return ec.fieldContext_User_assignedroles(ctx, field)
			case "subordinates":
				return ec.fieldContext_User_subordinates(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "employee":
				return ec.fieldContext_User_employee(ctx, field)
			case "createdprojects":
				return ec.fieldContext_User_createdprojects(ctx, field)
			case "leaderedprojects":
				return ec.fieldContext_User_leaderedprojects(ctx, field)
			case "assignedprojecttasks":
				return ec.fieldContext_User_assignedprojecttasks(ctx, field)
			case "participatedprojecttasks":
				return ec.fieldContext_User_participatedprojecttasks(ctx, field)
			case "createdtasks":
				return ec.fieldContext_User_createdtasks(ctx, field)
			case "tokens":
				return ec.fieldContext_User_tokens(ctx, field)
			case "approvedworkshifts":
				return ec.fieldContext_User_approvedworkshifts(ctx, field)
			case "workshifts":
				return ec.fieldContext_User_workshifts(ctx, field)
			case "uploadeddocuments":
				return ec.fieldContext_User_uploadeddocuments(ctx, field)
			case "approveddocuments":
				return ec.fieldContext_User_approveddocuments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_approvedby(ctx context.Context, field graphql.CollectedField, obj *generated.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_approvedby(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApprovedBy(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.User)
	fc.Result = res
	return ec.marshalOUser2ᚖmazzaᚋentᚋgeneratedᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_approvedby(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdat":
				return ec.fieldContext_User_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_User_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_User_deletedat(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "birthdate":
				return ec.fieldContext_User_birthdate(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "notverified":
				return ec.fieldContext_User_notverified(ctx, field)
			case "accountingentries":
				return ec.fieldContext_User_accountingentries(ctx, field)
			case "company":
				return ec.fieldContext_User_company(ctx, field)
			case "assignedroles":
				return ec.fieldContext_User_assignedroles(ctx, field)
			case "subordinates":
				return ec.fieldContext_User_subordinates(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "employee":
				return ec.fieldContext_User_employee(ctx, field)
			case "createdprojects":
				return ec.fieldContext_User_createdprojects(ctx, field)
			case "leaderedprojects":
				return ec.fieldContext_User_leaderedprojects(ctx, field)
			case "assignedprojecttasks":
				return ec.fieldContext_User_assignedprojecttasks(ctx, field)
			case "participatedprojecttasks":
				return ec.fieldContext_User_participatedprojecttasks(ctx, field)
			case "createdtasks":
				return ec.fieldContext_User_createdtasks(ctx, field)
			case "tokens":
				return ec.fieldContext_User_tokens(ctx, field)
			case "approvedworkshifts":
				return ec.fieldContext_User_approvedworkshifts(ctx, field)
			case "workshifts":
				return ec.fieldContext_User_workshifts(ctx, field)
			case "uploadeddocuments":
				return ec.fieldContext_User_uploadeddocuments(ctx, field)
			case "approveddocuments":
				return ec.fieldContext_User_approveddocuments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_task(ctx context.Context, field graphql.CollectedField, obj *generated.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_task(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Task(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.ProjectTask)
	fc.Result = res
	return ec.marshalOProjectTask2ᚖmazzaᚋentᚋgeneratedᚐProjectTask(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_task(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProjectTask_id(ctx, field)
			case "createdat":
				return ec.fieldContext_ProjectTask_createdat(ctx, field)
			case "name":
				return ec.fieldContext_ProjectTask_name(ctx, field)
			case "assigneename":
				return ec.fieldContext_ProjectTask_assigneename(ctx, field)
			case "location":
				return ec.fieldContext_ProjectTask_location(ctx, field)
			case "duedate":
				return ec.fieldContext_ProjectTask_duedate(ctx, field)
			case "startdate":
				return ec.fieldContext_ProjectTask_startdate(ctx, field)
			case "enddate":
				return ec.fieldContext_ProjectTask_enddate(ctx, field)
			case "description":
				return ec.fieldContext_ProjectTask_description(ctx, field)
			case "status":
				return ec.fieldContext_ProjectTask_status(ctx, field)
			case "project":
				return ec.fieldContext_ProjectTask_project(ctx, field)
			case "assignee":
				return ec.fieldContext_ProjectTask_assignee(ctx, field)
			case "participants":
				return ec.fieldContext_ProjectTask_participants(ctx, field)
			case "createdby":
				return ec.fieldContext_ProjectTask_createdby(ctx, field)
			case "workshifts":
				return ec.fieldContext_ProjectTask_workshifts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectTask", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_editrequest(ctx context.Context, field graphql.CollectedField, obj *generated.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_editrequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EditRequest(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.Workshift)
	fc.Result = res
	return ec.marshalOWorkshift2ᚖmazzaᚋentᚋgeneratedᚐWorkshift(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_editrequest(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Workshift_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Workshift_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Workshift_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Workshift_deletedat(ctx, field)
			case "approvedat":
				return ec.fieldContext_Workshift_approvedat(ctx, field)
			case "clockin":
				return ec.fieldContext_Workshift_clockin(ctx, field)
			case "clockout":
				return ec.fieldContext_Workshift_clockout(ctx, field)
			case "clockinlocation":
				return ec.fieldContext_Workshift_clockinlocation(ctx, field)
			case "clockoutlocation":
				return ec.fieldContext_Workshift_clockoutlocation(ctx, field)
			case "description":
				return ec.fieldContext_Workshift_description(ctx, field)
			case "note":
				return ec.fieldContext_Workshift_note(ctx, field)
			case "status":
				return ec.fieldContext_Workshift_status(ctx, field)
			case "company":
				return ec.fieldContext_Workshift_company(ctx, field)
			case "user":
				return ec.fieldContext_Workshift_user(ctx, field)
			case "approvedby":
				return ec.fieldContext_Workshift_approvedby(ctx, field)
			case "task":
				return ec.fieldContext_Workshift_task(ctx, field)
			case "editrequest":
				return ec.fieldContext_Workshift_editrequest(ctx, field)
			case "workshift":
				return ec.fieldContext_Workshift_workshift(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Workshift", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workshift_workshift(ctx context.Context, field graphql.CollectedField, obj *generated.Workshift) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workshift_workshift(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkShift(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.Workshift)
	fc.Result = res
	return ec.marshalOWorkshift2ᚖmazzaᚋentᚋgeneratedᚐWorkshift(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workshift_workshift(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workshift",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Workshift_id(ctx, field)
			case "createdat":
				return ec.fieldContext_Workshift_createdat(ctx, field)
			case "updatedat":
				return ec.fieldContext_Workshift_updatedat(ctx, field)
			case "deletedat":
				return ec.fieldContext_Workshift_deletedat(ctx, field)
			case "approvedat":
				return ec.fieldContext_Workshift_approvedat(ctx, field)
			case "clockin":
				return ec.fieldContext_Workshift_clockin(ctx, field)
			case "clockout":
				return ec.fieldContext_Workshift_clockout(ctx, field)
			case "clockinlocation":
				return ec.fieldContext_Workshift_clockinlocation(ctx, field)
			case "clockoutlocation":
				return ec.fieldContext_Workshift_clockoutlocation(ctx, field)
			case "description":
				return ec.fieldContext_Workshift_description(ctx, field)
			case "note":
				return ec.fieldContext_Workshift_note(ctx, field)
			case "status":
				return ec.fieldContext_Workshift_status(ctx, field)
			case "company":
				return ec.fieldContext_Workshift_company(ctx, field)
			case "user":
				return ec.fieldContext_Workshift_user(ctx, field)
			case "approvedby":
				return ec.fieldContext_Workshift_approvedby(ctx, field)
			case "task":
				return ec.fieldContext_Workshift_task(ctx, field)
			case "editrequest":
				return ec.fieldContext_Workshift_editrequest(ctx, field)
			case "workshift":
				return ec.fieldContext_Workshift_workshift(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Workshift", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAccountingEntryOrder(ctx context.Context, obj interface{}) (generated.AccountingEntryOrder, error) {
	var it generated.AccountingEntryOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNAccountingEntryOrderField2ᚖmazzaᚋentᚋgeneratedᚐAccountingEntryOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAccountingEntryWhereInput(ctx context.Context, obj interface{}) (generated.AccountingEntryWhereInput, error) {
	var it generated.AccountingEntryWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdat", "createdatNEQ", "createdatIn", "createdatNotIn", "createdatGT", "createdatGTE", "createdatLT", "createdatLTE", "updatedat", "updatedatNEQ", "updatedatIn", "updatedatNotIn", "updatedatGT", "updatedatGTE", "updatedatLT", "updatedatLTE", "deletedat", "deletedatNEQ", "deletedatIn", "deletedatNotIn", "deletedatGT", "deletedatGTE", "deletedatLT", "deletedatLTE", "deletedatIsNil", "deletedatNotNil", "number", "numberNEQ", "numberIn", "numberNotIn", "numberGT", "numberGTE", "numberLT", "numberLTE", "group", "groupNEQ", "groupIn", "groupNotIn", "groupGT", "groupGTE", "groupLT", "groupLTE", "date", "dateNEQ", "dateIn", "dateNotIn", "dateGT", "dateGTE", "dateLT", "dateLTE", "account", "accountNEQ", "accountIn", "accountNotIn", "accountGT", "accountGTE", "accountLT", "accountLTE", "accountContains", "accountHasPrefix", "accountHasSuffix", "accountEqualFold", "accountContainsFold", "label", "labelNEQ", "labelIn", "labelNotIn", "labelGT", "labelGTE", "labelLT", "labelLTE", "labelContains", "labelHasPrefix", "labelHasSuffix", "labelEqualFold", "labelContainsFold", "amount", "amountNEQ", "amountIn", "amountNotIn", "amountGT", "amountGTE", "amountLT", "amountLTE", "description", "descriptionNEQ", "descriptionIn", "descriptionNotIn", "descriptionGT", "descriptionGTE", "descriptionLT", "descriptionLTE", "descriptionContains", "descriptionHasPrefix", "descriptionHasSuffix", "descriptionEqualFold", "descriptionContainsFold", "accounttype", "accounttypeNEQ", "accounttypeIn", "accounttypeNotIn", "category", "categoryNEQ", "categoryIn", "categoryNotIn", "categoryGT", "categoryGTE", "categoryLT", "categoryLTE", "categoryContains", "categoryHasPrefix", "categoryHasSuffix", "categoryEqualFold", "categoryContainsFold", "isdebit", "isdebitNEQ", "isreversal", "isreversalNEQ", "reversed", "reversedNEQ", "hasCompany", "hasCompanyWith", "hasUser", "hasUserWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOAccountingEntryWhereInput2ᚖmazzaᚋentᚋgeneratedᚐAccountingEntryWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOAccountingEntryWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐAccountingEntryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOAccountingEntryWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐAccountingEntryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "deletedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNEQ = data
		case "deletedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIn = data
		case "deletedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotIn = data
		case "deletedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGT = data
		case "deletedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGTE = data
		case "deletedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLT = data
		case "deletedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLTE = data
		case "deletedatIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIsNil = data
		case "deletedatNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotNil = data
		case "number":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("number"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Number = data
		case "numberNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numberNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumberNEQ = data
		case "numberIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numberIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumberIn = data
		case "numberNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numberNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumberNotIn = data
		case "numberGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numberGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumberGT = data
		case "numberGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numberGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumberGTE = data
		case "numberLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numberLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumberLT = data
		case "numberLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numberLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumberLTE = data
		case "group":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("group"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Group = data
		case "groupNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.GroupNEQ = data
		case "groupIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.GroupIn = data
		case "groupNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.GroupNotIn = data
		case "groupGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.GroupGT = data
		case "groupGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.GroupGTE = data
		case "groupLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.GroupLT = data
		case "groupLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.GroupLTE = data
		case "date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		case "dateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateNEQ = data
		case "dateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateIn = data
		case "dateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateNotIn = data
		case "dateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateGT = data
		case "dateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateGTE = data
		case "dateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateLT = data
		case "dateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateLTE = data
		case "account":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("account"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Account = data
		case "accountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountNEQ = data
		case "accountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountIn = data
		case "accountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountNotIn = data
		case "accountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountGT = data
		case "accountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountGTE = data
		case "accountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountLT = data
		case "accountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountLTE = data
		case "accountContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountContains = data
		case "accountHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountHasPrefix = data
		case "accountHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountHasSuffix = data
		case "accountEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountEqualFold = data
		case "accountContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountContainsFold = data
		case "label":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Label = data
		case "labelNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelNEQ = data
		case "labelIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelIn = data
		case "labelNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelNotIn = data
		case "labelGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelGT = data
		case "labelGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelGTE = data
		case "labelLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelLT = data
		case "labelLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelLTE = data
		case "labelContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelContains = data
		case "labelHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelHasPrefix = data
		case "labelHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelHasSuffix = data
		case "labelEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelEqualFold = data
		case "labelContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelContainsFold = data
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "amountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountNEQ = data
		case "amountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountIn = data
		case "amountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountNotIn = data
		case "amountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountGT = data
		case "amountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountGTE = data
		case "amountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountLT = data
		case "amountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountLTE = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "descriptionNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNEQ = data
		case "descriptionIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIn = data
		case "descriptionNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotIn = data
		case "descriptionGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGT = data
		case "descriptionGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGTE = data
		case "descriptionLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLT = data
		case "descriptionLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLTE = data
		case "descriptionContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContains = data
		case "descriptionHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasPrefix = data
		case "descriptionHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasSuffix = data
		case "descriptionEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionEqualFold = data
		case "descriptionContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContainsFold = data
		case "accounttype":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accounttype"))
			data, err := ec.unmarshalOAccountingEntryAccountType2ᚖmazzaᚋentᚋgeneratedᚋaccountingentryᚐAccountType(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountType = data
		case "accounttypeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accounttypeNEQ"))
			data, err := ec.unmarshalOAccountingEntryAccountType2ᚖmazzaᚋentᚋgeneratedᚋaccountingentryᚐAccountType(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountTypeNEQ = data
		case "accounttypeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accounttypeIn"))
			data, err := ec.unmarshalOAccountingEntryAccountType2ᚕmazzaᚋentᚋgeneratedᚋaccountingentryᚐAccountTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountTypeIn = data
		case "accounttypeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accounttypeNotIn"))
			data, err := ec.unmarshalOAccountingEntryAccountType2ᚕmazzaᚋentᚋgeneratedᚋaccountingentryᚐAccountTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountTypeNotIn = data
		case "category":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Category = data
		case "categoryNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryNEQ = data
		case "categoryIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryIn = data
		case "categoryNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryNotIn = data
		case "categoryGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryGT = data
		case "categoryGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryGTE = data
		case "categoryLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryLT = data
		case "categoryLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryLTE = data
		case "categoryContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryContains = data
		case "categoryHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryHasPrefix = data
		case "categoryHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryHasSuffix = data
		case "categoryEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryEqualFold = data
		case "categoryContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryContainsFold = data
		case "isdebit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdebit"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDebit = data
		case "isdebitNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdebitNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDebitNEQ = data
		case "isreversal":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isreversal"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsReversal = data
		case "isreversalNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isreversalNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsReversalNEQ = data
		case "reversed":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reversed"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Reversed = data
		case "reversedNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reversedNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReversedNEQ = data
		case "hasCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompany"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompany = data
		case "hasCompanyWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompanyWith"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompanyWith = data
		case "hasUser":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUser"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUser = data
		case "hasUserWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUserWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUserWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBaseEntryRegistrationInput(ctx context.Context, obj interface{}) (model.BaseEntryRegistrationInput, error) {
	var it model.BaseEntryRegistrationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"main", "counterpart", "attachment", "cashInput", "date", "description", "operationType", "payableInput", "productInput", "receivableInput", "totalTransactionValue"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "main":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("main"))
			data, err := ec.unmarshalNEntryItem2ᚕᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐEntryItemᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Main = data
		case "counterpart":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("counterpart"))
			data, err := ec.unmarshalNEntryItem2ᚕᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐEntryItemᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Counterpart = data
		case "attachment":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attachment"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Attachment = data
		case "cashInput":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cashInput"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CashInput = data
		case "date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "operationType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operationType"))
			data, err := ec.unmarshalNBaseOperationType2mazzaᚋmazzaᚋgeneratedᚋmodelᚐBaseOperationType(ctx, v)
			if err != nil {
				return it, err
			}
			it.OperationType = data
		case "payableInput":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payableInput"))
			data, err := ec.unmarshalOPayableInput2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐPayableInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.PayableInput = data
		case "productInput":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productInput"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductInput = data
		case "receivableInput":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receivableInput"))
			data, err := ec.unmarshalOReceivableInput2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐReceivableInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReceivableInput = data
		case "totalTransactionValue":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalTransactionValue"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransactionValue = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCompanyDocumentOrder(ctx context.Context, obj interface{}) (generated.CompanyDocumentOrder, error) {
	var it generated.CompanyDocumentOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNCompanyDocumentOrderField2ᚖmazzaᚋentᚋgeneratedᚐCompanyDocumentOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCompanyDocumentWhereInput(ctx context.Context, obj interface{}) (generated.CompanyDocumentWhereInput, error) {
	var it generated.CompanyDocumentWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdat", "createdatNEQ", "createdatIn", "createdatNotIn", "createdatGT", "createdatGTE", "createdatLT", "createdatLTE", "updatedat", "updatedatNEQ", "updatedatIn", "updatedatNotIn", "updatedatGT", "updatedatGTE", "updatedatLT", "updatedatLTE", "deletedat", "deletedatNEQ", "deletedatIn", "deletedatNotIn", "deletedatGT", "deletedatGTE", "deletedatLT", "deletedatLTE", "deletedatIsNil", "deletedatNotNil", "filename", "filenameNEQ", "filenameIn", "filenameNotIn", "filenameGT", "filenameGTE", "filenameLT", "filenameLTE", "filenameContains", "filenameHasPrefix", "filenameHasSuffix", "filenameEqualFold", "filenameContainsFold", "title", "titleNEQ", "titleIn", "titleNotIn", "titleGT", "titleGTE", "titleLT", "titleLTE", "titleContains", "titleHasPrefix", "titleHasSuffix", "titleEqualFold", "titleContainsFold", "keywords", "keywordsNEQ", "keywordsIn", "keywordsNotIn", "keywordsGT", "keywordsGTE", "keywordsLT", "keywordsLTE", "keywordsContains", "keywordsHasPrefix", "keywordsHasSuffix", "keywordsEqualFold", "keywordsContainsFold", "category", "categoryNEQ", "categoryIn", "categoryNotIn", "size", "sizeNEQ", "sizeIn", "sizeNotIn", "sizeGT", "sizeGTE", "sizeLT", "sizeLTE", "filetype", "filetypeNEQ", "filetypeIn", "filetypeNotIn", "filetypeGT", "filetypeGTE", "filetypeLT", "filetypeLTE", "filetypeContains", "filetypeHasPrefix", "filetypeHasSuffix", "filetypeEqualFold", "filetypeContainsFold", "status", "statusNEQ", "statusIn", "statusNotIn", "url", "urlNEQ", "urlIn", "urlNotIn", "urlGT", "urlGTE", "urlLT", "urlLTE", "urlContains", "urlHasPrefix", "urlHasSuffix", "urlEqualFold", "urlContainsFold", "thumbnail", "thumbnailNEQ", "thumbnailIn", "thumbnailNotIn", "thumbnailGT", "thumbnailGTE", "thumbnailLT", "thumbnailLTE", "thumbnailContains", "thumbnailHasPrefix", "thumbnailHasSuffix", "thumbnailIsNil", "thumbnailNotNil", "thumbnailEqualFold", "thumbnailContainsFold", "expirydate", "expirydateNEQ", "expirydateIn", "expirydateNotIn", "expirydateGT", "expirydateGTE", "expirydateLT", "expirydateLTE", "hasCompany", "hasCompanyWith", "hasUploadedBy", "hasUploadedByWith", "hasApprovedBy", "hasApprovedByWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOCompanyDocumentWhereInput2ᚖmazzaᚋentᚋgeneratedᚐCompanyDocumentWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOCompanyDocumentWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyDocumentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOCompanyDocumentWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyDocumentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "deletedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNEQ = data
		case "deletedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIn = data
		case "deletedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotIn = data
		case "deletedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGT = data
		case "deletedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGTE = data
		case "deletedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLT = data
		case "deletedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLTE = data
		case "deletedatIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIsNil = data
		case "deletedatNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotNil = data
		case "filename":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filename"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Filename = data
		case "filenameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filenameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FilenameNEQ = data
		case "filenameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filenameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FilenameIn = data
		case "filenameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filenameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FilenameNotIn = data
		case "filenameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filenameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FilenameGT = data
		case "filenameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filenameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FilenameGTE = data
		case "filenameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filenameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FilenameLT = data
		case "filenameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filenameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FilenameLTE = data
		case "filenameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filenameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FilenameContains = data
		case "filenameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filenameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FilenameHasPrefix = data
		case "filenameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filenameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FilenameHasSuffix = data
		case "filenameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filenameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FilenameEqualFold = data
		case "filenameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filenameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FilenameContainsFold = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "titleNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleNEQ = data
		case "titleIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleIn = data
		case "titleNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleNotIn = data
		case "titleGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleGT = data
		case "titleGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleGTE = data
		case "titleLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleLT = data
		case "titleLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleLTE = data
		case "titleContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleContains = data
		case "titleHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleHasPrefix = data
		case "titleHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleHasSuffix = data
		case "titleEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleEqualFold = data
		case "titleContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleContainsFold = data
		case "keywords":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keywords"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keywords = data
		case "keywordsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keywordsNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeywordsNEQ = data
		case "keywordsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keywordsIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeywordsIn = data
		case "keywordsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keywordsNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeywordsNotIn = data
		case "keywordsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keywordsGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeywordsGT = data
		case "keywordsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keywordsGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeywordsGTE = data
		case "keywordsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keywordsLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeywordsLT = data
		case "keywordsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keywordsLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeywordsLTE = data
		case "keywordsContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keywordsContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeywordsContains = data
		case "keywordsHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keywordsHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeywordsHasPrefix = data
		case "keywordsHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keywordsHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeywordsHasSuffix = data
		case "keywordsEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keywordsEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeywordsEqualFold = data
		case "keywordsContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keywordsContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeywordsContainsFold = data
		case "category":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			data, err := ec.unmarshalOCompanyDocumentCategory2ᚖmazzaᚋentᚋgeneratedᚋcompanydocumentᚐCategory(ctx, v)
			if err != nil {
				return it, err
			}
			it.Category = data
		case "categoryNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryNEQ"))
			data, err := ec.unmarshalOCompanyDocumentCategory2ᚖmazzaᚋentᚋgeneratedᚋcompanydocumentᚐCategory(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryNEQ = data
		case "categoryIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryIn"))
			data, err := ec.unmarshalOCompanyDocumentCategory2ᚕmazzaᚋentᚋgeneratedᚋcompanydocumentᚐCategoryᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryIn = data
		case "categoryNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryNotIn"))
			data, err := ec.unmarshalOCompanyDocumentCategory2ᚕmazzaᚋentᚋgeneratedᚋcompanydocumentᚐCategoryᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryNotIn = data
		case "size":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Size = data
		case "sizeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeNEQ = data
		case "sizeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeIn = data
		case "sizeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeNotIn = data
		case "sizeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeGT = data
		case "sizeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeGTE = data
		case "sizeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeLT = data
		case "sizeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeLTE = data
		case "filetype":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filetype"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileType = data
		case "filetypeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filetypeNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileTypeNEQ = data
		case "filetypeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filetypeIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileTypeIn = data
		case "filetypeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filetypeNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileTypeNotIn = data
		case "filetypeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filetypeGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileTypeGT = data
		case "filetypeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filetypeGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileTypeGTE = data
		case "filetypeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filetypeLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileTypeLT = data
		case "filetypeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filetypeLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileTypeLTE = data
		case "filetypeContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filetypeContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileTypeContains = data
		case "filetypeHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filetypeHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileTypeHasPrefix = data
		case "filetypeHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filetypeHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileTypeHasSuffix = data
		case "filetypeEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filetypeEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileTypeEqualFold = data
		case "filetypeContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filetypeContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileTypeContainsFold = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOCompanyDocumentStatus2ᚖmazzaᚋentᚋgeneratedᚋcompanydocumentᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "statusNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNEQ"))
			data, err := ec.unmarshalOCompanyDocumentStatus2ᚖmazzaᚋentᚋgeneratedᚋcompanydocumentᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNEQ = data
		case "statusIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusIn"))
			data, err := ec.unmarshalOCompanyDocumentStatus2ᚕmazzaᚋentᚋgeneratedᚋcompanydocumentᚐStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusIn = data
		case "statusNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNotIn"))
			data, err := ec.unmarshalOCompanyDocumentStatus2ᚕmazzaᚋentᚋgeneratedᚋcompanydocumentᚐStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNotIn = data
		case "url":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URL = data
		case "urlNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLNEQ = data
		case "urlIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLIn = data
		case "urlNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLNotIn = data
		case "urlGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLGT = data
		case "urlGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLGTE = data
		case "urlLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLLT = data
		case "urlLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLLTE = data
		case "urlContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLContains = data
		case "urlHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLHasPrefix = data
		case "urlHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLHasSuffix = data
		case "urlEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLEqualFold = data
		case "urlContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLContainsFold = data
		case "thumbnail":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("thumbnail"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Thumbnail = data
		case "thumbnailNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("thumbnailNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ThumbnailNEQ = data
		case "thumbnailIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("thumbnailIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ThumbnailIn = data
		case "thumbnailNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("thumbnailNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ThumbnailNotIn = data
		case "thumbnailGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("thumbnailGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ThumbnailGT = data
		case "thumbnailGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("thumbnailGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ThumbnailGTE = data
		case "thumbnailLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("thumbnailLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ThumbnailLT = data
		case "thumbnailLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("thumbnailLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ThumbnailLTE = data
		case "thumbnailContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("thumbnailContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ThumbnailContains = data
		case "thumbnailHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("thumbnailHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ThumbnailHasPrefix = data
		case "thumbnailHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("thumbnailHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ThumbnailHasSuffix = data
		case "thumbnailIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("thumbnailIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ThumbnailIsNil = data
		case "thumbnailNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("thumbnailNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ThumbnailNotNil = data
		case "thumbnailEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("thumbnailEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ThumbnailEqualFold = data
		case "thumbnailContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("thumbnailContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ThumbnailContainsFold = data
		case "expirydate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expirydate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiryDate = data
		case "expirydateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expirydateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiryDateNEQ = data
		case "expirydateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expirydateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiryDateIn = data
		case "expirydateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expirydateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiryDateNotIn = data
		case "expirydateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expirydateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiryDateGT = data
		case "expirydateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expirydateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiryDateGTE = data
		case "expirydateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expirydateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiryDateLT = data
		case "expirydateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expirydateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiryDateLTE = data
		case "hasCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompany"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompany = data
		case "hasCompanyWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompanyWith"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompanyWith = data
		case "hasUploadedBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUploadedBy"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUploadedBy = data
		case "hasUploadedByWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUploadedByWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUploadedByWith = data
		case "hasApprovedBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasApprovedBy"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasApprovedBy = data
		case "hasApprovedByWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasApprovedByWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasApprovedByWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCompanyInfoInput(ctx context.Context, obj interface{}) (model.CompanyInfoInput, error) {
	var it model.CompanyInfoInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"industry", "vatRate"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "industry":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Industry = data
		case "vatRate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vatRate"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VatRate = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCompanyOrder(ctx context.Context, obj interface{}) (generated.CompanyOrder, error) {
	var it generated.CompanyOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNCompanyOrderField2ᚖmazzaᚋentᚋgeneratedᚐCompanyOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCompanyWhereInput(ctx context.Context, obj interface{}) (generated.CompanyWhereInput, error) {
	var it generated.CompanyWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdat", "createdatNEQ", "createdatIn", "createdatNotIn", "createdatGT", "createdatGTE", "createdatLT", "createdatLTE", "updatedat", "updatedatNEQ", "updatedatIn", "updatedatNotIn", "updatedatGT", "updatedatGTE", "updatedatLT", "updatedatLTE", "deletedat", "deletedatNEQ", "deletedatIn", "deletedatNotIn", "deletedatGT", "deletedatGTE", "deletedatLT", "deletedatLTE", "deletedatIsNil", "deletedatNotNil", "address", "addressNEQ", "addressIn", "addressNotIn", "addressGT", "addressGTE", "addressLT", "addressLTE", "addressContains", "addressHasPrefix", "addressHasSuffix", "addressIsNil", "addressNotNil", "addressEqualFold", "addressContainsFold", "basecurrency", "basecurrencyNEQ", "basecurrencyIn", "basecurrencyNotIn", "basecurrencyGT", "basecurrencyGTE", "basecurrencyLT", "basecurrencyLTE", "basecurrencyContains", "basecurrencyHasPrefix", "basecurrencyHasSuffix", "basecurrencyEqualFold", "basecurrencyContainsFold", "ceoname", "ceonameNEQ", "ceonameIn", "ceonameNotIn", "ceonameGT", "ceonameGTE", "ceonameLT", "ceonameLTE", "ceonameContains", "ceonameHasPrefix", "ceonameHasSuffix", "ceonameIsNil", "ceonameNotNil", "ceonameEqualFold", "ceonameContainsFold", "city", "cityNEQ", "cityIn", "cityNotIn", "cityGT", "cityGTE", "cityLT", "cityLTE", "cityContains", "cityHasPrefix", "cityHasSuffix", "cityEqualFold", "cityContainsFold", "country", "countryNEQ", "countryIn", "countryNotIn", "countryGT", "countryGTE", "countryLT", "countryLTE", "countryContains", "countryHasPrefix", "countryHasSuffix", "countryEqualFold", "countryContainsFold", "establishedat", "establishedatNEQ", "establishedatIn", "establishedatNotIn", "establishedatGT", "establishedatGTE", "establishedatLT", "establishedatLTE", "description", "descriptionNEQ", "descriptionIn", "descriptionNotIn", "descriptionGT", "descriptionGTE", "descriptionLT", "descriptionLTE", "descriptionContains", "descriptionHasPrefix", "descriptionHasSuffix", "descriptionIsNil", "descriptionNotNil", "descriptionEqualFold", "descriptionContainsFold", "email", "emailNEQ", "emailIn", "emailNotIn", "emailGT", "emailGTE", "emailLT", "emailLTE", "emailContains", "emailHasPrefix", "emailHasSuffix", "emailIsNil", "emailNotNil", "emailEqualFold", "emailContainsFold", "industry", "industryNEQ", "industryIn", "industryNotIn", "industryGT", "industryGTE", "industryLT", "industryLTE", "industryContains", "industryHasPrefix", "industryHasSuffix", "industryIsNil", "industryNotNil", "industryEqualFold", "industryContainsFold", "lastentrydate", "lastentrydateNEQ", "lastentrydateIn", "lastentrydateNotIn", "lastentrydateGT", "lastentrydateGTE", "lastentrydateLT", "lastentrydateLTE", "lastinvoicenumber", "lastinvoicenumberNEQ", "lastinvoicenumberIn", "lastinvoicenumberNotIn", "lastinvoicenumberGT", "lastinvoicenumberGTE", "lastinvoicenumberLT", "lastinvoicenumberLTE", "lastinvoicenumberIsNil", "lastinvoicenumberNotNil", "logo", "logoNEQ", "logoIn", "logoNotIn", "logoGT", "logoGTE", "logoLT", "logoLTE", "logoContains", "logoHasPrefix", "logoHasSuffix", "logoIsNil", "logoNotNil", "logoEqualFold", "logoContainsFold", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "numberofemployees", "numberofemployeesNEQ", "numberofemployeesIn", "numberofemployeesNotIn", "numberofemployeesGT", "numberofemployeesGTE", "numberofemployeesLT", "numberofemployeesLTE", "phone", "phoneNEQ", "phoneIn", "phoneNotIn", "phoneGT", "phoneGTE", "phoneLT", "phoneLTE", "phoneContains", "phoneHasPrefix", "phoneHasSuffix", "phoneIsNil", "phoneNotNil", "phoneEqualFold", "phoneContainsFold", "sector", "sectorNEQ", "sectorIn", "sectorNotIn", "sectorGT", "sectorGTE", "sectorLT", "sectorLTE", "sectorContains", "sectorHasPrefix", "sectorHasSuffix", "sectorIsNil", "sectorNotNil", "sectorEqualFold", "sectorContainsFold", "taxid", "taxidNEQ", "taxidIn", "taxidNotIn", "taxidGT", "taxidGTE", "taxidLT", "taxidLTE", "taxidContains", "taxidHasPrefix", "taxidHasSuffix", "taxidEqualFold", "taxidContainsFold", "vatrate", "vatrateNEQ", "vatrateIn", "vatrateNotIn", "vatrateGT", "vatrateGTE", "vatrateLT", "vatrateLTE", "website", "websiteNEQ", "websiteIn", "websiteNotIn", "websiteGT", "websiteGTE", "websiteLT", "websiteLTE", "websiteContains", "websiteHasPrefix", "websiteHasSuffix", "websiteIsNil", "websiteNotNil", "websiteEqualFold", "websiteContainsFold", "incompletesetup", "incompletesetupNEQ", "incompletesetupIsNil", "incompletesetupNotNil", "hasAvailableRoles", "hasAvailableRolesWith", "hasAccountingEntries", "hasAccountingEntriesWith", "hasCustomers", "hasCustomersWith", "hasDocuments", "hasDocumentsWith", "hasEmployees", "hasEmployeesWith", "hasFiles", "hasFilesWith", "hasProducts", "hasProductsWith", "hasProjects", "hasProjectsWith", "hasPayables", "hasPayablesWith", "hasReceivables", "hasReceivablesWith", "hasSuppliers", "hasSuppliersWith", "hasTokens", "hasTokensWith", "hasTreasuries", "hasTreasuriesWith", "hasWorkShifts", "hasWorkShiftsWith", "hasUsers", "hasUsersWith", "hasDaughterCompanies", "hasDaughterCompaniesWith", "hasParentCompany", "hasParentCompanyWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚖmazzaᚋentᚋgeneratedᚐCompanyWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "deletedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNEQ = data
		case "deletedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIn = data
		case "deletedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotIn = data
		case "deletedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGT = data
		case "deletedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGTE = data
		case "deletedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLT = data
		case "deletedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLTE = data
		case "deletedatIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIsNil = data
		case "deletedatNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotNil = data
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "addressNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressNEQ = data
		case "addressIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressIn = data
		case "addressNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressNotIn = data
		case "addressGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressGT = data
		case "addressGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressGTE = data
		case "addressLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressLT = data
		case "addressLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressLTE = data
		case "addressContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressContains = data
		case "addressHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressHasPrefix = data
		case "addressHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressHasSuffix = data
		case "addressIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressIsNil = data
		case "addressNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressNotNil = data
		case "addressEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressEqualFold = data
		case "addressContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressContainsFold = data
		case "basecurrency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("basecurrency"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseCurrency = data
		case "basecurrencyNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("basecurrencyNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseCurrencyNEQ = data
		case "basecurrencyIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("basecurrencyIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseCurrencyIn = data
		case "basecurrencyNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("basecurrencyNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseCurrencyNotIn = data
		case "basecurrencyGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("basecurrencyGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseCurrencyGT = data
		case "basecurrencyGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("basecurrencyGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseCurrencyGTE = data
		case "basecurrencyLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("basecurrencyLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseCurrencyLT = data
		case "basecurrencyLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("basecurrencyLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseCurrencyLTE = data
		case "basecurrencyContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("basecurrencyContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseCurrencyContains = data
		case "basecurrencyHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("basecurrencyHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseCurrencyHasPrefix = data
		case "basecurrencyHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("basecurrencyHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseCurrencyHasSuffix = data
		case "basecurrencyEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("basecurrencyEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseCurrencyEqualFold = data
		case "basecurrencyContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("basecurrencyContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseCurrencyContainsFold = data
		case "ceoname":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceoname"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CeoName = data
		case "ceonameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceonameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CeoNameNEQ = data
		case "ceonameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceonameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CeoNameIn = data
		case "ceonameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceonameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CeoNameNotIn = data
		case "ceonameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceonameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CeoNameGT = data
		case "ceonameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceonameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CeoNameGTE = data
		case "ceonameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceonameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CeoNameLT = data
		case "ceonameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceonameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CeoNameLTE = data
		case "ceonameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceonameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CeoNameContains = data
		case "ceonameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceonameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CeoNameHasPrefix = data
		case "ceonameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceonameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CeoNameHasSuffix = data
		case "ceonameIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceonameIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CeoNameIsNil = data
		case "ceonameNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceonameNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CeoNameNotNil = data
		case "ceonameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceonameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CeoNameEqualFold = data
		case "ceonameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceonameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CeoNameContainsFold = data
		case "city":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.City = data
		case "cityNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityNEQ = data
		case "cityIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIn = data
		case "cityNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityNotIn = data
		case "cityGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityGT = data
		case "cityGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityGTE = data
		case "cityLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityLT = data
		case "cityLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityLTE = data
		case "cityContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityContains = data
		case "cityHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityHasPrefix = data
		case "cityHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityHasSuffix = data
		case "cityEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityEqualFold = data
		case "cityContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityContainsFold = data
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "countryNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryNEQ = data
		case "countryIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryIn = data
		case "countryNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryNotIn = data
		case "countryGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryGT = data
		case "countryGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryGTE = data
		case "countryLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryLT = data
		case "countryLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryLTE = data
		case "countryContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryContains = data
		case "countryHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryHasPrefix = data
		case "countryHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryHasSuffix = data
		case "countryEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryEqualFold = data
		case "countryContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryContainsFold = data
		case "establishedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("establishedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstablishedAt = data
		case "establishedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("establishedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstablishedAtNEQ = data
		case "establishedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("establishedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstablishedAtIn = data
		case "establishedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("establishedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstablishedAtNotIn = data
		case "establishedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("establishedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstablishedAtGT = data
		case "establishedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("establishedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstablishedAtGTE = data
		case "establishedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("establishedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstablishedAtLT = data
		case "establishedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("establishedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstablishedAtLTE = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "descriptionNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNEQ = data
		case "descriptionIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIn = data
		case "descriptionNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotIn = data
		case "descriptionGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGT = data
		case "descriptionGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGTE = data
		case "descriptionLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLT = data
		case "descriptionLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLTE = data
		case "descriptionContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContains = data
		case "descriptionHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasPrefix = data
		case "descriptionHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasSuffix = data
		case "descriptionIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIsNil = data
		case "descriptionNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotNil = data
		case "descriptionEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionEqualFold = data
		case "descriptionContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContainsFold = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "emailNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNEQ = data
		case "emailIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailIn = data
		case "emailNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNotIn = data
		case "emailGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailGT = data
		case "emailGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailGTE = data
		case "emailLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailLT = data
		case "emailLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailLTE = data
		case "emailContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailContains = data
		case "emailHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailHasPrefix = data
		case "emailHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailHasSuffix = data
		case "emailIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailIsNil = data
		case "emailNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNotNil = data
		case "emailEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailEqualFold = data
		case "emailContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailContainsFold = data
		case "industry":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Industry = data
		case "industryNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industryNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IndustryNEQ = data
		case "industryIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industryIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IndustryIn = data
		case "industryNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industryNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IndustryNotIn = data
		case "industryGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industryGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IndustryGT = data
		case "industryGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industryGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IndustryGTE = data
		case "industryLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industryLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IndustryLT = data
		case "industryLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industryLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IndustryLTE = data
		case "industryContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industryContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IndustryContains = data
		case "industryHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industryHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IndustryHasPrefix = data
		case "industryHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industryHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IndustryHasSuffix = data
		case "industryIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industryIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IndustryIsNil = data
		case "industryNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industryNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IndustryNotNil = data
		case "industryEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industryEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IndustryEqualFold = data
		case "industryContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industryContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IndustryContainsFold = data
		case "lastentrydate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastentrydate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEntryDate = data
		case "lastentrydateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastentrydateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEntryDateNEQ = data
		case "lastentrydateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastentrydateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEntryDateIn = data
		case "lastentrydateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastentrydateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEntryDateNotIn = data
		case "lastentrydateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastentrydateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEntryDateGT = data
		case "lastentrydateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastentrydateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEntryDateGTE = data
		case "lastentrydateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastentrydateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEntryDateLT = data
		case "lastentrydateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastentrydateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEntryDateLTE = data
		case "lastinvoicenumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastinvoicenumber"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastInvoiceNumber = data
		case "lastinvoicenumberNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastinvoicenumberNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastInvoiceNumberNEQ = data
		case "lastinvoicenumberIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastinvoicenumberIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastInvoiceNumberIn = data
		case "lastinvoicenumberNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastinvoicenumberNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastInvoiceNumberNotIn = data
		case "lastinvoicenumberGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastinvoicenumberGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastInvoiceNumberGT = data
		case "lastinvoicenumberGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastinvoicenumberGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastInvoiceNumberGTE = data
		case "lastinvoicenumberLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastinvoicenumberLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastInvoiceNumberLT = data
		case "lastinvoicenumberLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastinvoicenumberLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastInvoiceNumberLTE = data
		case "lastinvoicenumberIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastinvoicenumberIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastInvoiceNumberIsNil = data
		case "lastinvoicenumberNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastinvoicenumberNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastInvoiceNumberNotNil = data
		case "logo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logo"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Logo = data
		case "logoNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogoNEQ = data
		case "logoIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogoIn = data
		case "logoNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogoNotIn = data
		case "logoGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogoGT = data
		case "logoGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogoGTE = data
		case "logoLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogoLT = data
		case "logoLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogoLTE = data
		case "logoContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogoContains = data
		case "logoHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogoHasPrefix = data
		case "logoHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogoHasSuffix = data
		case "logoIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogoIsNil = data
		case "logoNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogoNotNil = data
		case "logoEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogoEqualFold = data
		case "logoContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogoContainsFold = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "numberofemployees":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numberofemployees"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumberOfEmployees = data
		case "numberofemployeesNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numberofemployeesNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumberOfEmployeesNEQ = data
		case "numberofemployeesIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numberofemployeesIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumberOfEmployeesIn = data
		case "numberofemployeesNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numberofemployeesNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumberOfEmployeesNotIn = data
		case "numberofemployeesGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numberofemployeesGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumberOfEmployeesGT = data
		case "numberofemployeesGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numberofemployeesGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumberOfEmployeesGTE = data
		case "numberofemployeesLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numberofemployeesLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumberOfEmployeesLT = data
		case "numberofemployeesLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numberofemployeesLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumberOfEmployeesLTE = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "phoneNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNEQ = data
		case "phoneIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneIn = data
		case "phoneNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNotIn = data
		case "phoneGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneGT = data
		case "phoneGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneGTE = data
		case "phoneLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneLT = data
		case "phoneLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneLTE = data
		case "phoneContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneContains = data
		case "phoneHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneHasPrefix = data
		case "phoneHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneHasSuffix = data
		case "phoneIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneIsNil = data
		case "phoneNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNotNil = data
		case "phoneEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneEqualFold = data
		case "phoneContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneContainsFold = data
		case "sector":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sector"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Sector = data
		case "sectorNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sectorNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SectorNEQ = data
		case "sectorIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sectorIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SectorIn = data
		case "sectorNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sectorNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SectorNotIn = data
		case "sectorGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sectorGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SectorGT = data
		case "sectorGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sectorGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SectorGTE = data
		case "sectorLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sectorLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SectorLT = data
		case "sectorLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sectorLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SectorLTE = data
		case "sectorContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sectorContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SectorContains = data
		case "sectorHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sectorHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SectorHasPrefix = data
		case "sectorHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sectorHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SectorHasSuffix = data
		case "sectorIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sectorIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SectorIsNil = data
		case "sectorNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sectorNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SectorNotNil = data
		case "sectorEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sectorEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SectorEqualFold = data
		case "sectorContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sectorContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SectorContainsFold = data
		case "taxid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxid"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxId = data
		case "taxidNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdNEQ = data
		case "taxidIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdIn = data
		case "taxidNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdNotIn = data
		case "taxidGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdGT = data
		case "taxidGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdGTE = data
		case "taxidLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdLT = data
		case "taxidLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdLTE = data
		case "taxidContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdContains = data
		case "taxidHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdHasPrefix = data
		case "taxidHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdHasSuffix = data
		case "taxidEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdEqualFold = data
		case "taxidContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdContainsFold = data
		case "vatrate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vatrate"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VatRate = data
		case "vatrateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vatrateNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VatRateNEQ = data
		case "vatrateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vatrateIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.VatRateIn = data
		case "vatrateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vatrateNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.VatRateNotIn = data
		case "vatrateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vatrateGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VatRateGT = data
		case "vatrateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vatrateGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VatRateGTE = data
		case "vatrateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vatrateLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VatRateLT = data
		case "vatrateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vatrateLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VatRateLTE = data
		case "website":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("website"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Website = data
		case "websiteNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteNEQ = data
		case "websiteIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteIn = data
		case "websiteNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteNotIn = data
		case "websiteGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteGT = data
		case "websiteGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteGTE = data
		case "websiteLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteLT = data
		case "websiteLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteLTE = data
		case "websiteContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteContains = data
		case "websiteHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteHasPrefix = data
		case "websiteHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteHasSuffix = data
		case "websiteIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteIsNil = data
		case "websiteNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteNotNil = data
		case "websiteEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteEqualFold = data
		case "websiteContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteContainsFold = data
		case "incompletesetup":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("incompletesetup"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IncompleteSetup = data
		case "incompletesetupNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("incompletesetupNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IncompleteSetupNEQ = data
		case "incompletesetupIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("incompletesetupIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IncompleteSetupIsNil = data
		case "incompletesetupNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("incompletesetupNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IncompleteSetupNotNil = data
		case "hasAvailableRoles":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAvailableRoles"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAvailableRoles = data
		case "hasAvailableRolesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAvailableRolesWith"))
			data, err := ec.unmarshalOUserRoleWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐUserRoleWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAvailableRolesWith = data
		case "hasAccountingEntries":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAccountingEntries"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAccountingEntries = data
		case "hasAccountingEntriesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAccountingEntriesWith"))
			data, err := ec.unmarshalOAccountingEntryWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐAccountingEntryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAccountingEntriesWith = data
		case "hasCustomers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCustomers"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCustomers = data
		case "hasCustomersWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCustomersWith"))
			data, err := ec.unmarshalOCustomerWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐCustomerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCustomersWith = data
		case "hasDocuments":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasDocuments"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasDocuments = data
		case "hasDocumentsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasDocumentsWith"))
			data, err := ec.unmarshalOCompanyDocumentWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyDocumentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasDocumentsWith = data
		case "hasEmployees":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEmployees"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEmployees = data
		case "hasEmployeesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEmployeesWith"))
			data, err := ec.unmarshalOEmployeeWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐEmployeeWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEmployeesWith = data
		case "hasFiles":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasFiles"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasFiles = data
		case "hasFilesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasFilesWith"))
			data, err := ec.unmarshalOFileWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐFileWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasFilesWith = data
		case "hasProducts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProducts"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProducts = data
		case "hasProductsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProductsWith"))
			data, err := ec.unmarshalOProductWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐProductWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProductsWith = data
		case "hasProjects":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProjects"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProjects = data
		case "hasProjectsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProjectsWith"))
			data, err := ec.unmarshalOProjectWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProjectsWith = data
		case "hasPayables":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPayables"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPayables = data
		case "hasPayablesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPayablesWith"))
			data, err := ec.unmarshalOPayableWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐPayableWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPayablesWith = data
		case "hasReceivables":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasReceivables"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasReceivables = data
		case "hasReceivablesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasReceivablesWith"))
			data, err := ec.unmarshalOReceivableWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐReceivableWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasReceivablesWith = data
		case "hasSuppliers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSuppliers"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSuppliers = data
		case "hasSuppliersWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSuppliersWith"))
			data, err := ec.unmarshalOSupplierWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐSupplierWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSuppliersWith = data
		case "hasTokens":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTokens"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTokens = data
		case "hasTokensWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTokensWith"))
			data, err := ec.unmarshalOTokenWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐTokenWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTokensWith = data
		case "hasTreasuries":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTreasuries"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTreasuries = data
		case "hasTreasuriesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTreasuriesWith"))
			data, err := ec.unmarshalOTreasuryWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐTreasuryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTreasuriesWith = data
		case "hasWorkShifts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasWorkShifts"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasWorkShifts = data
		case "hasWorkShiftsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasWorkShiftsWith"))
			data, err := ec.unmarshalOWorkshiftWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐWorkshiftWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasWorkShiftsWith = data
		case "hasUsers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUsers"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUsers = data
		case "hasUsersWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUsersWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUsersWith = data
		case "hasDaughterCompanies":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasDaughterCompanies"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasDaughterCompanies = data
		case "hasDaughterCompaniesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasDaughterCompaniesWith"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasDaughterCompaniesWith = data
		case "hasParentCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasParentCompany"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasParentCompany = data
		case "hasParentCompanyWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasParentCompanyWith"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasParentCompanyWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateAccountingEntryInput(ctx context.Context, obj interface{}) (generated.CreateAccountingEntryInput, error) {
	var it generated.CreateAccountingEntryInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"number", "group", "date", "account", "label", "amount", "description", "accounttype", "category", "isdebit", "isreversal", "reversed", "companyID", "userID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "number":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("number"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Number = data
		case "group":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("group"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Group = data
		case "date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		case "account":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("account"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Account = data
		case "label":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Label = data
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "accounttype":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accounttype"))
			data, err := ec.unmarshalNAccountingEntryAccountType2mazzaᚋentᚋgeneratedᚋaccountingentryᚐAccountType(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountType = data
		case "category":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Category = data
		case "isdebit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdebit"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDebit = data
		case "isreversal":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isreversal"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsReversal = data
		case "reversed":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reversed"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Reversed = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateCompanyDocumentInput(ctx context.Context, obj interface{}) (generated.CreateCompanyDocumentInput, error) {
	var it generated.CreateCompanyDocumentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"filename", "title", "keywords", "category", "size", "filetype", "url", "storageuri", "thumbnail", "expirydate"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "filename":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filename"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Filename = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "keywords":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keywords"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keywords = data
		case "category":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			data, err := ec.unmarshalNCompanyDocumentCategory2mazzaᚋentᚋgeneratedᚋcompanydocumentᚐCategory(ctx, v)
			if err != nil {
				return it, err
			}
			it.Category = data
		case "size":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Size = data
		case "filetype":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filetype"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileType = data
		case "url":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.URL = data
		case "storageuri":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("storageuri"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.StorageURI = data
		case "thumbnail":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("thumbnail"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Thumbnail = data
		case "expirydate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expirydate"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiryDate = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateCompanyInput(ctx context.Context, obj interface{}) (generated.CreateCompanyInput, error) {
	var it generated.CreateCompanyInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"address", "basecurrency", "ceoname", "city", "country", "establishedat", "description", "email", "industry", "lastentrydate", "lastinvoicenumber", "logo", "name", "numberofemployees", "phone", "sector", "taxid", "vatrate", "website", "incompletesetup", "availableroleIDs", "accountingentryIDs", "customerIDs", "documentIDs", "employeeIDs", "fileIDs", "productIDs", "projectIDs", "payableIDs", "receivableIDs", "supplierIDs", "tokenIDs", "treasuryIDs", "workshiftIDs", "userIDs", "daughtercompanyIDs", "parentcompanyID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "basecurrency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("basecurrency"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseCurrency = data
		case "ceoname":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceoname"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CeoName = data
		case "city":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.City = data
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "establishedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("establishedat"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstablishedAt = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "industry":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Industry = data
		case "lastentrydate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastentrydate"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEntryDate = data
		case "lastinvoicenumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastinvoicenumber"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastInvoiceNumber = data
		case "logo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logo"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Logo = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "numberofemployees":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numberofemployees"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumberOfEmployees = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "sector":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sector"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Sector = data
		case "taxid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxid"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxId = data
		case "vatrate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vatrate"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VatRate = data
		case "website":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("website"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Website = data
		case "incompletesetup":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("incompletesetup"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IncompleteSetup = data
		case "availableroleIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("availableroleIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AvailableRoleIDs = data
		case "accountingentryIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountingentryIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountingEntryIDs = data
		case "customerIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDs = data
		case "documentIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DocumentIDs = data
		case "employeeIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("employeeIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmployeeIDs = data
		case "fileIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileIDs = data
		case "productIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductIDs = data
		case "projectIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectIDs = data
		case "payableIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payableIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PayableIDs = data
		case "receivableIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receivableIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReceivableIDs = data
		case "supplierIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supplierIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SupplierIDs = data
		case "tokenIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenIDs = data
		case "treasuryIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("treasuryIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TreasuryIDs = data
		case "workshiftIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workshiftIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkShiftIDs = data
		case "userIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserIDs = data
		case "daughtercompanyIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("daughtercompanyIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DaughterCompanyIDs = data
		case "parentcompanyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentcompanyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParentCompanyID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateCustomerInput(ctx context.Context, obj interface{}) (generated.CreateCustomerInput, error) {
	var it generated.CreateCustomerInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"address", "city", "country", "description", "email", "isdefault", "name", "phone", "taxid", "companyID", "receivableIDs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "city":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.City = data
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "isdefault":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdefault"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDefault = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "taxid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxid"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxId = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "receivableIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receivableIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReceivableIDs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateEmployeeInput(ctx context.Context, obj interface{}) (generated.CreateEmployeeInput, error) {
	var it generated.CreateEmployeeInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "gender", "position", "email", "phone", "companyID", "userID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "gender":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			data, err := ec.unmarshalNEmployeeGender2mazzaᚋentᚋgeneratedᚋemployeeᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
			it.Gender = data
		case "position":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("position"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Position = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateFileInput(ctx context.Context, obj interface{}) (generated.CreateFileInput, error) {
	var it generated.CreateFileInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"category", "extension", "size", "uri", "url", "description", "companyID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "category":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			data, err := ec.unmarshalNFileCategory2mazzaᚋentᚋgeneratedᚋfileᚐCategory(ctx, v)
			if err != nil {
				return it, err
			}
			it.Category = data
		case "extension":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extension"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Extension = data
		case "size":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Size = data
		case "uri":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uri"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.URI = data
		case "url":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.URL = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreatePayableInput(ctx context.Context, obj interface{}) (generated.CreatePayableInput, error) {
	var it generated.CreatePayableInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"entrygroup", "date", "name", "outstandingbalance", "totaltransaction", "duedate", "status", "companyID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "entrygroup":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroup"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroup = data
		case "date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "outstandingbalance":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalance"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalance = data
		case "totaltransaction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransaction"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransaction = data
		case "duedate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedate"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDate = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalNPayableStatus2mazzaᚋentᚋgeneratedᚋpayableᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateProductInput(ctx context.Context, obj interface{}) (generated.CreateProductInput, error) {
	var it generated.CreateProductInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"stock", "companyID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "stock":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stock"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Stock = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateProjectInput(ctx context.Context, obj interface{}) (generated.CreateProjectInput, error) {
	var it generated.CreateProjectInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "startdate", "enddate", "progress", "status", "companyID", "createdbyID", "leaderID", "taskIDs", "milestoneIDs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "startdate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startdate"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDate = data
		case "enddate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enddate"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDate = data
		case "progress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progress"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Progress = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOProjectStatus2ᚖmazzaᚋentᚋgeneratedᚋprojectᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "createdbyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdbyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByID = data
		case "leaderID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderID = data
		case "taskIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taskIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaskIDs = data
		case "milestoneIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestoneIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestoneIDs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateProjectMilestoneInput(ctx context.Context, obj interface{}) (generated.CreateProjectMilestoneInput, error) {
	var it generated.CreateProjectMilestoneInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "duedate", "projectID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "duedate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedate"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDate = data
		case "projectID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectID"))
			data, err := ec.unmarshalNID2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateProjectTaskInput(ctx context.Context, obj interface{}) (generated.CreateProjectTaskInput, error) {
	var it generated.CreateProjectTaskInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdat", "name", "assigneename", "location", "duedate", "startdate", "enddate", "description", "status", "projectID", "assigneeID", "participantIDs", "createdbyID", "workshiftIDs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "assigneename":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assigneename"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AssigneeName = data
		case "location":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Location = data
		case "duedate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedate"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDate = data
		case "startdate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startdate"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDate = data
		case "enddate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enddate"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDate = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalNProjectTaskStatus2mazzaᚋentᚋgeneratedᚋprojecttaskᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "projectID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectID"))
			data, err := ec.unmarshalNID2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectID = data
		case "assigneeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assigneeID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.AssigneeID = data
		case "participantIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("participantIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParticipantIDs = data
		case "createdbyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdbyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByID = data
		case "workshiftIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workshiftIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkShiftIDs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateReceivableInput(ctx context.Context, obj interface{}) (generated.CreateReceivableInput, error) {
	var it generated.CreateReceivableInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"entrygroup", "date", "name", "outstandingbalance", "totaltransaction", "duedate", "status", "companyID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "entrygroup":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroup"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroup = data
		case "date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "outstandingbalance":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalance"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalance = data
		case "totaltransaction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransaction"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransaction = data
		case "duedate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedate"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDate = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalNReceivableStatus2mazzaᚋentᚋgeneratedᚋreceivableᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateSupplierInput(ctx context.Context, obj interface{}) (generated.CreateSupplierInput, error) {
	var it generated.CreateSupplierInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"address", "city", "country", "description", "email", "isdefault", "name", "phone", "taxid", "companyID", "payableIDs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "city":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.City = data
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "isdefault":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdefault"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDefault = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "taxid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxid"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxId = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "payableIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payableIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PayableIDs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateTreasuryInput(ctx context.Context, obj interface{}) (generated.CreateTreasuryInput, error) {
	var it generated.CreateTreasuryInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"balance", "companyID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "balance":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balance"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Balance = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateUserInput(ctx context.Context, obj interface{}) (generated.CreateUserInput, error) {
	var it generated.CreateUserInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"firebaseuid", "fcmtoken", "email", "name", "phone", "birthdate", "gender", "disabled", "notverified", "accountingentryIDs", "companyIDs", "assignedroleIDs", "subordinateIDs", "leaderID", "employeeID", "createdprojectIDs", "leaderedprojectIDs", "assignedprojecttaskIDs", "participatedprojecttaskIDs", "createdtaskIDs", "tokenIDs", "approvedworkshiftIDs", "workshiftIDs", "uploadeddocumentIDs", "approveddocumentIDs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "firebaseuid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firebaseuid"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirebaseUID = data
		case "fcmtoken":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fcmtoken"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FcmToken = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "birthdate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthdate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Birthdate = data
		case "gender":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			data, err := ec.unmarshalNUserGender2mazzaᚋentᚋgeneratedᚋuserᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
			it.Gender = data
		case "disabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Disabled = data
		case "notverified":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notverified"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotVerified = data
		case "accountingentryIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountingentryIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountingEntryIDs = data
		case "companyIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyIDs"))
			data, err := ec.unmarshalNID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyIDs = data
		case "assignedroleIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assignedroleIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AssignedRoleIDs = data
		case "subordinateIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subordinateIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SubordinateIDs = data
		case "leaderID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderID = data
		case "employeeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("employeeID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmployeeID = data
		case "createdprojectIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdprojectIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedProjectIDs = data
		case "leaderedprojectIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderedprojectIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderedProjectIDs = data
		case "assignedprojecttaskIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assignedprojecttaskIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AssignedProjectTaskIDs = data
		case "participatedprojecttaskIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("participatedprojecttaskIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParticipatedProjectTaskIDs = data
		case "createdtaskIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdtaskIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedTaskIDs = data
		case "tokenIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenIDs = data
		case "approvedworkshiftIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedworkshiftIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovedWorkShiftIDs = data
		case "workshiftIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workshiftIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkShiftIDs = data
		case "uploadeddocumentIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uploadeddocumentIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UploadedDocumentIDs = data
		case "approveddocumentIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approveddocumentIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovedDocumentIDs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateUserRoleInput(ctx context.Context, obj interface{}) (generated.CreateUserRoleInput, error) {
	var it generated.CreateUserRoleInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"role", "companyID", "userIDs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "role":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			data, err := ec.unmarshalNUserRoleRole2mazzaᚋentᚋgeneratedᚋuserroleᚐRole(ctx, v)
			if err != nil {
				return it, err
			}
			it.Role = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "userIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserIDs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateWorkshiftInput(ctx context.Context, obj interface{}) (generated.CreateWorkshiftInput, error) {
	var it generated.CreateWorkshiftInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"approvedat", "clockin", "clockout", "clockinlocation", "clockoutlocation", "description", "note", "status", "companyID", "userID", "approvedbyID", "taskID", "editrequestID", "workshiftID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "approvedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovedAt = data
		case "clockin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockin"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockIn = data
		case "clockout":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockout"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOut = data
		case "clockinlocation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinlocation"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInLocation = data
		case "clockoutlocation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutlocation"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLocation = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "note":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Note = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOWorkshiftStatus2ᚖmazzaᚋentᚋgeneratedᚋworkshiftᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "approvedbyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedbyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovedByID = data
		case "taskID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taskID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaskID = data
		case "editrequestID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("editrequestID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EditRequestID = data
		case "workshiftID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workshiftID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkShiftID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCustomerOrder(ctx context.Context, obj interface{}) (generated.CustomerOrder, error) {
	var it generated.CustomerOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNCustomerOrderField2ᚖmazzaᚋentᚋgeneratedᚐCustomerOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCustomerWhereInput(ctx context.Context, obj interface{}) (generated.CustomerWhereInput, error) {
	var it generated.CustomerWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdat", "createdatNEQ", "createdatIn", "createdatNotIn", "createdatGT", "createdatGTE", "createdatLT", "createdatLTE", "updatedat", "updatedatNEQ", "updatedatIn", "updatedatNotIn", "updatedatGT", "updatedatGTE", "updatedatLT", "updatedatLTE", "deletedat", "deletedatNEQ", "deletedatIn", "deletedatNotIn", "deletedatGT", "deletedatGTE", "deletedatLT", "deletedatLTE", "deletedatIsNil", "deletedatNotNil", "address", "addressNEQ", "addressIn", "addressNotIn", "addressGT", "addressGTE", "addressLT", "addressLTE", "addressContains", "addressHasPrefix", "addressHasSuffix", "addressEqualFold", "addressContainsFold", "city", "cityNEQ", "cityIn", "cityNotIn", "cityGT", "cityGTE", "cityLT", "cityLTE", "cityContains", "cityHasPrefix", "cityHasSuffix", "cityEqualFold", "cityContainsFold", "country", "countryNEQ", "countryIn", "countryNotIn", "countryGT", "countryGTE", "countryLT", "countryLTE", "countryContains", "countryHasPrefix", "countryHasSuffix", "countryEqualFold", "countryContainsFold", "description", "descriptionNEQ", "descriptionIn", "descriptionNotIn", "descriptionGT", "descriptionGTE", "descriptionLT", "descriptionLTE", "descriptionContains", "descriptionHasPrefix", "descriptionHasSuffix", "descriptionIsNil", "descriptionNotNil", "descriptionEqualFold", "descriptionContainsFold", "email", "emailNEQ", "emailIn", "emailNotIn", "emailGT", "emailGTE", "emailLT", "emailLTE", "emailContains", "emailHasPrefix", "emailHasSuffix", "emailIsNil", "emailNotNil", "emailEqualFold", "emailContainsFold", "isdefault", "isdefaultNEQ", "isdefaultIsNil", "isdefaultNotNil", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "phone", "phoneNEQ", "phoneIn", "phoneNotIn", "phoneGT", "phoneGTE", "phoneLT", "phoneLTE", "phoneContains", "phoneHasPrefix", "phoneHasSuffix", "phoneEqualFold", "phoneContainsFold", "taxid", "taxidNEQ", "taxidIn", "taxidNotIn", "taxidGT", "taxidGTE", "taxidLT", "taxidLTE", "taxidContains", "taxidHasPrefix", "taxidHasSuffix", "taxidEqualFold", "taxidContainsFold", "hasCompany", "hasCompanyWith", "hasReceivables", "hasReceivablesWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOCustomerWhereInput2ᚖmazzaᚋentᚋgeneratedᚐCustomerWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOCustomerWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐCustomerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOCustomerWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐCustomerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "deletedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNEQ = data
		case "deletedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIn = data
		case "deletedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotIn = data
		case "deletedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGT = data
		case "deletedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGTE = data
		case "deletedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLT = data
		case "deletedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLTE = data
		case "deletedatIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIsNil = data
		case "deletedatNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotNil = data
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "addressNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressNEQ = data
		case "addressIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressIn = data
		case "addressNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressNotIn = data
		case "addressGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressGT = data
		case "addressGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressGTE = data
		case "addressLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressLT = data
		case "addressLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressLTE = data
		case "addressContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressContains = data
		case "addressHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressHasPrefix = data
		case "addressHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressHasSuffix = data
		case "addressEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressEqualFold = data
		case "addressContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressContainsFold = data
		case "city":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.City = data
		case "cityNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityNEQ = data
		case "cityIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIn = data
		case "cityNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityNotIn = data
		case "cityGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityGT = data
		case "cityGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityGTE = data
		case "cityLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityLT = data
		case "cityLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityLTE = data
		case "cityContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityContains = data
		case "cityHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityHasPrefix = data
		case "cityHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityHasSuffix = data
		case "cityEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityEqualFold = data
		case "cityContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityContainsFold = data
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "countryNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryNEQ = data
		case "countryIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryIn = data
		case "countryNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryNotIn = data
		case "countryGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryGT = data
		case "countryGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryGTE = data
		case "countryLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryLT = data
		case "countryLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryLTE = data
		case "countryContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryContains = data
		case "countryHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryHasPrefix = data
		case "countryHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryHasSuffix = data
		case "countryEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryEqualFold = data
		case "countryContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryContainsFold = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "descriptionNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNEQ = data
		case "descriptionIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIn = data
		case "descriptionNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotIn = data
		case "descriptionGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGT = data
		case "descriptionGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGTE = data
		case "descriptionLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLT = data
		case "descriptionLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLTE = data
		case "descriptionContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContains = data
		case "descriptionHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasPrefix = data
		case "descriptionHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasSuffix = data
		case "descriptionIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIsNil = data
		case "descriptionNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotNil = data
		case "descriptionEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionEqualFold = data
		case "descriptionContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContainsFold = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "emailNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNEQ = data
		case "emailIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailIn = data
		case "emailNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNotIn = data
		case "emailGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailGT = data
		case "emailGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailGTE = data
		case "emailLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailLT = data
		case "emailLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailLTE = data
		case "emailContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailContains = data
		case "emailHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailHasPrefix = data
		case "emailHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailHasSuffix = data
		case "emailIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailIsNil = data
		case "emailNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNotNil = data
		case "emailEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailEqualFold = data
		case "emailContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailContainsFold = data
		case "isdefault":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdefault"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDefault = data
		case "isdefaultNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdefaultNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDefaultNEQ = data
		case "isdefaultIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdefaultIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDefaultIsNil = data
		case "isdefaultNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdefaultNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDefaultNotNil = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "phoneNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNEQ = data
		case "phoneIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneIn = data
		case "phoneNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNotIn = data
		case "phoneGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneGT = data
		case "phoneGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneGTE = data
		case "phoneLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneLT = data
		case "phoneLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneLTE = data
		case "phoneContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneContains = data
		case "phoneHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneHasPrefix = data
		case "phoneHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneHasSuffix = data
		case "phoneEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneEqualFold = data
		case "phoneContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneContainsFold = data
		case "taxid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxid"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxId = data
		case "taxidNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdNEQ = data
		case "taxidIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdIn = data
		case "taxidNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdNotIn = data
		case "taxidGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdGT = data
		case "taxidGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdGTE = data
		case "taxidLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdLT = data
		case "taxidLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdLTE = data
		case "taxidContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdContains = data
		case "taxidHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdHasPrefix = data
		case "taxidHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdHasSuffix = data
		case "taxidEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdEqualFold = data
		case "taxidContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdContainsFold = data
		case "hasCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompany"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompany = data
		case "hasCompanyWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompanyWith"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompanyWith = data
		case "hasReceivables":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasReceivables"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasReceivables = data
		case "hasReceivablesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasReceivablesWith"))
			data, err := ec.unmarshalOReceivableWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐReceivableWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasReceivablesWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEmployeeOrder(ctx context.Context, obj interface{}) (generated.EmployeeOrder, error) {
	var it generated.EmployeeOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNEmployeeOrderField2ᚖmazzaᚋentᚋgeneratedᚐEmployeeOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEmployeeWhereInput(ctx context.Context, obj interface{}) (generated.EmployeeWhereInput, error) {
	var it generated.EmployeeWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdat", "createdatNEQ", "createdatIn", "createdatNotIn", "createdatGT", "createdatGTE", "createdatLT", "createdatLTE", "updatedat", "updatedatNEQ", "updatedatIn", "updatedatNotIn", "updatedatGT", "updatedatGTE", "updatedatLT", "updatedatLTE", "deletedat", "deletedatNEQ", "deletedatIn", "deletedatNotIn", "deletedatGT", "deletedatGTE", "deletedatLT", "deletedatLTE", "deletedatIsNil", "deletedatNotNil", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "gender", "genderNEQ", "genderIn", "genderNotIn", "position", "positionNEQ", "positionIn", "positionNotIn", "positionGT", "positionGTE", "positionLT", "positionLTE", "positionContains", "positionHasPrefix", "positionHasSuffix", "positionIsNil", "positionNotNil", "positionEqualFold", "positionContainsFold", "email", "emailNEQ", "emailIn", "emailNotIn", "emailGT", "emailGTE", "emailLT", "emailLTE", "emailContains", "emailHasPrefix", "emailHasSuffix", "emailIsNil", "emailNotNil", "emailEqualFold", "emailContainsFold", "phone", "phoneNEQ", "phoneIn", "phoneNotIn", "phoneGT", "phoneGTE", "phoneLT", "phoneLTE", "phoneContains", "phoneHasPrefix", "phoneHasSuffix", "phoneEqualFold", "phoneContainsFold", "hasCompany", "hasCompanyWith", "hasUser", "hasUserWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOEmployeeWhereInput2ᚖmazzaᚋentᚋgeneratedᚐEmployeeWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOEmployeeWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐEmployeeWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOEmployeeWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐEmployeeWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "deletedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNEQ = data
		case "deletedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIn = data
		case "deletedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotIn = data
		case "deletedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGT = data
		case "deletedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGTE = data
		case "deletedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLT = data
		case "deletedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLTE = data
		case "deletedatIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIsNil = data
		case "deletedatNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotNil = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "gender":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			data, err := ec.unmarshalOEmployeeGender2ᚖmazzaᚋentᚋgeneratedᚋemployeeᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
			it.Gender = data
		case "genderNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("genderNEQ"))
			data, err := ec.unmarshalOEmployeeGender2ᚖmazzaᚋentᚋgeneratedᚋemployeeᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
			it.GenderNEQ = data
		case "genderIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("genderIn"))
			data, err := ec.unmarshalOEmployeeGender2ᚕmazzaᚋentᚋgeneratedᚋemployeeᚐGenderᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.GenderIn = data
		case "genderNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("genderNotIn"))
			data, err := ec.unmarshalOEmployeeGender2ᚕmazzaᚋentᚋgeneratedᚋemployeeᚐGenderᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.GenderNotIn = data
		case "position":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("position"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Position = data
		case "positionNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionNEQ = data
		case "positionIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionIn = data
		case "positionNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionNotIn = data
		case "positionGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionGT = data
		case "positionGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionGTE = data
		case "positionLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionLT = data
		case "positionLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionLTE = data
		case "positionContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionContains = data
		case "positionHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionHasPrefix = data
		case "positionHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionHasSuffix = data
		case "positionIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionIsNil = data
		case "positionNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionNotNil = data
		case "positionEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionEqualFold = data
		case "positionContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionContainsFold = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "emailNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNEQ = data
		case "emailIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailIn = data
		case "emailNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNotIn = data
		case "emailGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailGT = data
		case "emailGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailGTE = data
		case "emailLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailLT = data
		case "emailLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailLTE = data
		case "emailContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailContains = data
		case "emailHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailHasPrefix = data
		case "emailHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailHasSuffix = data
		case "emailIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailIsNil = data
		case "emailNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNotNil = data
		case "emailEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailEqualFold = data
		case "emailContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailContainsFold = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "phoneNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNEQ = data
		case "phoneIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneIn = data
		case "phoneNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNotIn = data
		case "phoneGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneGT = data
		case "phoneGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneGTE = data
		case "phoneLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneLT = data
		case "phoneLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneLTE = data
		case "phoneContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneContains = data
		case "phoneHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneHasPrefix = data
		case "phoneHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneHasSuffix = data
		case "phoneEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneEqualFold = data
		case "phoneContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneContainsFold = data
		case "hasCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompany"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompany = data
		case "hasCompanyWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompanyWith"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompanyWith = data
		case "hasUser":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUser"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUser = data
		case "hasUserWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUserWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUserWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEntryItem(ctx context.Context, obj interface{}) (model.EntryItem, error) {
	var it model.EntryItem
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"account", "accountType", "amount", "isDebit", "label", "category"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "account":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("account"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Account = data
		case "accountType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountType"))
			data, err := ec.unmarshalNAccountType2mazzaᚋentᚋgeneratedᚋaccountingentryᚐAccountType(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountType = data
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "isDebit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDebit"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDebit = data
		case "label":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Label = data
		case "category":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Category = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEntryProductInput(ctx context.Context, obj interface{}) (model.EntryProductInput, error) {
	var it model.EntryProductInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "amount", "quantity"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "quantity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quantity"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Quantity = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFileOrder(ctx context.Context, obj interface{}) (generated.FileOrder, error) {
	var it generated.FileOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNFileOrderField2ᚖmazzaᚋentᚋgeneratedᚐFileOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFileWhereInput(ctx context.Context, obj interface{}) (generated.FileWhereInput, error) {
	var it generated.FileWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdat", "createdatNEQ", "createdatIn", "createdatNotIn", "createdatGT", "createdatGTE", "createdatLT", "createdatLTE", "updatedat", "updatedatNEQ", "updatedatIn", "updatedatNotIn", "updatedatGT", "updatedatGTE", "updatedatLT", "updatedatLTE", "deletedat", "deletedatNEQ", "deletedatIn", "deletedatNotIn", "deletedatGT", "deletedatGTE", "deletedatLT", "deletedatLTE", "deletedatIsNil", "deletedatNotNil", "category", "categoryNEQ", "categoryIn", "categoryNotIn", "extension", "extensionNEQ", "extensionIn", "extensionNotIn", "extensionGT", "extensionGTE", "extensionLT", "extensionLTE", "extensionContains", "extensionHasPrefix", "extensionHasSuffix", "extensionEqualFold", "extensionContainsFold", "size", "sizeNEQ", "sizeIn", "sizeNotIn", "sizeGT", "sizeGTE", "sizeLT", "sizeLTE", "sizeContains", "sizeHasPrefix", "sizeHasSuffix", "sizeEqualFold", "sizeContainsFold", "url", "urlNEQ", "urlIn", "urlNotIn", "urlGT", "urlGTE", "urlLT", "urlLTE", "urlContains", "urlHasPrefix", "urlHasSuffix", "urlEqualFold", "urlContainsFold", "description", "descriptionNEQ", "descriptionIn", "descriptionNotIn", "descriptionGT", "descriptionGTE", "descriptionLT", "descriptionLTE", "descriptionContains", "descriptionHasPrefix", "descriptionHasSuffix", "descriptionEqualFold", "descriptionContainsFold", "hasCompany", "hasCompanyWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOFileWhereInput2ᚖmazzaᚋentᚋgeneratedᚐFileWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOFileWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐFileWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOFileWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐFileWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "deletedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNEQ = data
		case "deletedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIn = data
		case "deletedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotIn = data
		case "deletedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGT = data
		case "deletedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGTE = data
		case "deletedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLT = data
		case "deletedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLTE = data
		case "deletedatIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIsNil = data
		case "deletedatNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotNil = data
		case "category":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			data, err := ec.unmarshalOFileCategory2ᚖmazzaᚋentᚋgeneratedᚋfileᚐCategory(ctx, v)
			if err != nil {
				return it, err
			}
			it.Category = data
		case "categoryNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryNEQ"))
			data, err := ec.unmarshalOFileCategory2ᚖmazzaᚋentᚋgeneratedᚋfileᚐCategory(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryNEQ = data
		case "categoryIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryIn"))
			data, err := ec.unmarshalOFileCategory2ᚕmazzaᚋentᚋgeneratedᚋfileᚐCategoryᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryIn = data
		case "categoryNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryNotIn"))
			data, err := ec.unmarshalOFileCategory2ᚕmazzaᚋentᚋgeneratedᚋfileᚐCategoryᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryNotIn = data
		case "extension":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extension"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Extension = data
		case "extensionNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extensionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtensionNEQ = data
		case "extensionIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extensionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtensionIn = data
		case "extensionNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extensionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtensionNotIn = data
		case "extensionGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extensionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtensionGT = data
		case "extensionGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extensionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtensionGTE = data
		case "extensionLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extensionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtensionLT = data
		case "extensionLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extensionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtensionLTE = data
		case "extensionContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extensionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtensionContains = data
		case "extensionHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extensionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtensionHasPrefix = data
		case "extensionHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extensionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtensionHasSuffix = data
		case "extensionEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extensionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtensionEqualFold = data
		case "extensionContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extensionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtensionContainsFold = data
		case "size":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Size = data
		case "sizeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeNEQ = data
		case "sizeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeIn = data
		case "sizeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeNotIn = data
		case "sizeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeGT = data
		case "sizeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeGTE = data
		case "sizeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeLT = data
		case "sizeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeLTE = data
		case "sizeContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeContains = data
		case "sizeHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeHasPrefix = data
		case "sizeHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeHasSuffix = data
		case "sizeEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeEqualFold = data
		case "sizeContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeContainsFold = data
		case "url":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URL = data
		case "urlNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLNEQ = data
		case "urlIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLIn = data
		case "urlNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLNotIn = data
		case "urlGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLGT = data
		case "urlGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLGTE = data
		case "urlLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLLT = data
		case "urlLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLLTE = data
		case "urlContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLContains = data
		case "urlHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLHasPrefix = data
		case "urlHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLHasSuffix = data
		case "urlEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLEqualFold = data
		case "urlContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLContainsFold = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "descriptionNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNEQ = data
		case "descriptionIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIn = data
		case "descriptionNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotIn = data
		case "descriptionGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGT = data
		case "descriptionGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGTE = data
		case "descriptionLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLT = data
		case "descriptionLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLTE = data
		case "descriptionContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContains = data
		case "descriptionHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasPrefix = data
		case "descriptionHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasSuffix = data
		case "descriptionEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionEqualFold = data
		case "descriptionContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContainsFold = data
		case "hasCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompany"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompany = data
		case "hasCompanyWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompanyWith"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompanyWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInitialSetupInput(ctx context.Context, obj interface{}) (model.InitialSetupInput, error) {
	var it model.InitialSetupInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"accountingEntry", "companyInfo"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "accountingEntry":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountingEntry"))
			data, err := ec.unmarshalOBaseEntryRegistrationInput2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐBaseEntryRegistrationInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountingEntry = data
		case "companyInfo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyInfo"))
			data, err := ec.unmarshalNCompanyInfoInput2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐCompanyInfoInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyInfo = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInvoice(ctx context.Context, obj interface{}) (model.Invoice, error) {
	var it model.Invoice
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"date", "filename", "keywords", "number", "paymentDetails", "title", "issuerDetails", "customerDetails", "body", "totals"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		case "filename":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filename"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Filename = data
		case "keywords":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keywords"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keywords = data
		case "number":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("number"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Number = data
		case "paymentDetails":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentDetails"))
			data, err := ec.unmarshalNPaymentDetails2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐPaymentDetails(ctx, v)
			if err != nil {
				return it, err
			}
			it.PaymentDetails = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "issuerDetails":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("issuerDetails"))
			data, err := ec.unmarshalNInvoiceIssuer2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐInvoiceIssuer(ctx, v)
			if err != nil {
				return it, err
			}
			it.IssuerDetails = data
		case "customerDetails":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerDetails"))
			data, err := ec.unmarshalNInvoiceCustomer2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐInvoiceCustomer(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerDetails = data
		case "body":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("body"))
			data, err := ec.unmarshalNString2ᚕᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Body = data
		case "totals":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totals"))
			data, err := ec.unmarshalNInvoiceTotals2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐInvoiceTotals(ctx, v)
			if err != nil {
				return it, err
			}
			it.Totals = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInvoiceCustomer(ctx context.Context, obj interface{}) (model.InvoiceCustomer, error) {
	var it model.InvoiceCustomer
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "taxID", "address", "city", "country", "phone", "email"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "taxID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxID"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxID = data
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "city":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.City = data
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInvoiceInput(ctx context.Context, obj interface{}) (model.InvoiceInput, error) {
	var it model.InvoiceInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"accountingEntryData", "invoiceData"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "accountingEntryData":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountingEntryData"))
			data, err := ec.unmarshalNBaseEntryRegistrationInput2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐBaseEntryRegistrationInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountingEntryData = data
		case "invoiceData":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoiceData"))
			data, err := ec.unmarshalNInvoice2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐInvoice(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvoiceData = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInvoiceIssuer(ctx context.Context, obj interface{}) (model.InvoiceIssuer, error) {
	var it model.InvoiceIssuer
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "taxID", "address", "city", "country", "phone", "email"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "taxID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxID"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxID = data
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "city":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.City = data
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInvoiceTotals(ctx context.Context, obj interface{}) (model.InvoiceTotals, error) {
	var it model.InvoiceTotals
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"subtotal", "vatRate", "vat", "total"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "subtotal":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subtotal"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Subtotal = data
		case "vatRate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vatRate"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.VatRate = data
		case "vat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vat"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Vat = data
		case "total":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Total = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLedgerDownloadInput(ctx context.Context, obj interface{}) (model.LedgerDownloadInput, error) {
	var it model.LedgerDownloadInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"startDate", "endDate"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "startDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDate = data
		case "endDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDate = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLoginInput(ctx context.Context, obj interface{}) (model.LoginInput, error) {
	var it model.LoginInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"username", "password", "fcmToken"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		case "fcmToken":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fcmToken"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.FcmToken = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPayableInput(ctx context.Context, obj interface{}) (model.PayableInput, error) {
	var it model.PayableInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"amount", "name", "date", "dueDate"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		case "dueDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dueDate"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDate = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPayableOrder(ctx context.Context, obj interface{}) (generated.PayableOrder, error) {
	var it generated.PayableOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNPayableOrderField2ᚖmazzaᚋentᚋgeneratedᚐPayableOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPayableWhereInput(ctx context.Context, obj interface{}) (generated.PayableWhereInput, error) {
	var it generated.PayableWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdat", "createdatNEQ", "createdatIn", "createdatNotIn", "createdatGT", "createdatGTE", "createdatLT", "createdatLTE", "updatedat", "updatedatNEQ", "updatedatIn", "updatedatNotIn", "updatedatGT", "updatedatGTE", "updatedatLT", "updatedatLTE", "deletedat", "deletedatNEQ", "deletedatIn", "deletedatNotIn", "deletedatGT", "deletedatGTE", "deletedatLT", "deletedatLTE", "deletedatIsNil", "deletedatNotNil", "entrygroup", "entrygroupNEQ", "entrygroupIn", "entrygroupNotIn", "entrygroupGT", "entrygroupGTE", "entrygroupLT", "entrygroupLTE", "date", "dateNEQ", "dateIn", "dateNotIn", "dateGT", "dateGTE", "dateLT", "dateLTE", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "outstandingbalance", "outstandingbalanceNEQ", "outstandingbalanceIn", "outstandingbalanceNotIn", "outstandingbalanceGT", "outstandingbalanceGTE", "outstandingbalanceLT", "outstandingbalanceLTE", "totaltransaction", "totaltransactionNEQ", "totaltransactionIn", "totaltransactionNotIn", "totaltransactionGT", "totaltransactionGTE", "totaltransactionLT", "totaltransactionLTE", "duedate", "duedateNEQ", "duedateIn", "duedateNotIn", "duedateGT", "duedateGTE", "duedateLT", "duedateLTE", "status", "statusNEQ", "statusIn", "statusNotIn", "hasCompany", "hasCompanyWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOPayableWhereInput2ᚖmazzaᚋentᚋgeneratedᚐPayableWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOPayableWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐPayableWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOPayableWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐPayableWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "deletedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNEQ = data
		case "deletedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIn = data
		case "deletedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotIn = data
		case "deletedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGT = data
		case "deletedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGTE = data
		case "deletedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLT = data
		case "deletedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLTE = data
		case "deletedatIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIsNil = data
		case "deletedatNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotNil = data
		case "entrygroup":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroup"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroup = data
		case "entrygroupNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupNEQ = data
		case "entrygroupIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupIn = data
		case "entrygroupNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupNotIn = data
		case "entrygroupGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupGT = data
		case "entrygroupGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupGTE = data
		case "entrygroupLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupLT = data
		case "entrygroupLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupLTE = data
		case "date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		case "dateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateNEQ = data
		case "dateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateIn = data
		case "dateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateNotIn = data
		case "dateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateGT = data
		case "dateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateGTE = data
		case "dateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateLT = data
		case "dateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateLTE = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "outstandingbalance":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalance"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalance = data
		case "outstandingbalanceNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalanceNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalanceNEQ = data
		case "outstandingbalanceIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalanceIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalanceIn = data
		case "outstandingbalanceNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalanceNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalanceNotIn = data
		case "outstandingbalanceGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalanceGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalanceGT = data
		case "outstandingbalanceGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalanceGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalanceGTE = data
		case "outstandingbalanceLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalanceLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalanceLT = data
		case "outstandingbalanceLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalanceLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalanceLTE = data
		case "totaltransaction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransaction"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransaction = data
		case "totaltransactionNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransactionNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransactionNEQ = data
		case "totaltransactionIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransactionIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransactionIn = data
		case "totaltransactionNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransactionNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransactionNotIn = data
		case "totaltransactionGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransactionGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransactionGT = data
		case "totaltransactionGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransactionGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransactionGTE = data
		case "totaltransactionLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransactionLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransactionLT = data
		case "totaltransactionLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransactionLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransactionLTE = data
		case "duedate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDate = data
		case "duedateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDateNEQ = data
		case "duedateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDateIn = data
		case "duedateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDateNotIn = data
		case "duedateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDateGT = data
		case "duedateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDateGTE = data
		case "duedateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDateLT = data
		case "duedateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDateLTE = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOPayableStatus2ᚖmazzaᚋentᚋgeneratedᚋpayableᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "statusNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNEQ"))
			data, err := ec.unmarshalOPayableStatus2ᚖmazzaᚋentᚋgeneratedᚋpayableᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNEQ = data
		case "statusIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusIn"))
			data, err := ec.unmarshalOPayableStatus2ᚕmazzaᚋentᚋgeneratedᚋpayableᚐStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusIn = data
		case "statusNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNotIn"))
			data, err := ec.unmarshalOPayableStatus2ᚕmazzaᚋentᚋgeneratedᚋpayableᚐStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNotIn = data
		case "hasCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompany"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompany = data
		case "hasCompanyWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompanyWith"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompanyWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPaymentDetails(ctx context.Context, obj interface{}) (model.PaymentDetails, error) {
	var it model.PaymentDetails
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"bankName", "accountNumber", "iban", "dueDate"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "bankName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bankName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.BankName = data
		case "accountNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumber"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountNumber = data
		case "iban":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iban"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Iban = data
		case "dueDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dueDate"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDate = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProductOrder(ctx context.Context, obj interface{}) (generated.ProductOrder, error) {
	var it generated.ProductOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNProductOrderField2ᚖmazzaᚋentᚋgeneratedᚐProductOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProductWhereInput(ctx context.Context, obj interface{}) (generated.ProductWhereInput, error) {
	var it generated.ProductWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdat", "createdatNEQ", "createdatIn", "createdatNotIn", "createdatGT", "createdatGTE", "createdatLT", "createdatLTE", "updatedat", "updatedatNEQ", "updatedatIn", "updatedatNotIn", "updatedatGT", "updatedatGTE", "updatedatLT", "updatedatLTE", "deletedat", "deletedatNEQ", "deletedatIn", "deletedatNotIn", "deletedatGT", "deletedatGTE", "deletedatLT", "deletedatLTE", "deletedatIsNil", "deletedatNotNil", "stock", "stockNEQ", "stockIn", "stockNotIn", "stockGT", "stockGTE", "stockLT", "stockLTE", "hasCompany", "hasCompanyWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOProductWhereInput2ᚖmazzaᚋentᚋgeneratedᚐProductWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOProductWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐProductWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOProductWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐProductWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "deletedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNEQ = data
		case "deletedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIn = data
		case "deletedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotIn = data
		case "deletedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGT = data
		case "deletedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGTE = data
		case "deletedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLT = data
		case "deletedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLTE = data
		case "deletedatIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIsNil = data
		case "deletedatNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotNil = data
		case "stock":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stock"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Stock = data
		case "stockNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stockNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.StockNEQ = data
		case "stockIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stockIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StockIn = data
		case "stockNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stockNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StockNotIn = data
		case "stockGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stockGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.StockGT = data
		case "stockGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stockGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.StockGTE = data
		case "stockLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stockLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.StockLT = data
		case "stockLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stockLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.StockLTE = data
		case "hasCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompany"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompany = data
		case "hasCompanyWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompanyWith"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompanyWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectMilestoneWhereInput(ctx context.Context, obj interface{}) (generated.ProjectMilestoneWhereInput, error) {
	var it generated.ProjectMilestoneWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "duedate", "duedateNEQ", "duedateIn", "duedateNotIn", "duedateGT", "duedateGTE", "duedateLT", "duedateLTE", "hasProject", "hasProjectWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOProjectMilestoneWhereInput2ᚖmazzaᚋentᚋgeneratedᚐProjectMilestoneWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOProjectMilestoneWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectMilestoneWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOProjectMilestoneWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectMilestoneWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "duedate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDate = data
		case "duedateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDateNEQ = data
		case "duedateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDateIn = data
		case "duedateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDateNotIn = data
		case "duedateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDateGT = data
		case "duedateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDateGTE = data
		case "duedateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDateLT = data
		case "duedateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDateLTE = data
		case "hasProject":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProject"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProject = data
		case "hasProjectWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProjectWith"))
			data, err := ec.unmarshalOProjectWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProjectWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectOrder(ctx context.Context, obj interface{}) (generated.ProjectOrder, error) {
	var it generated.ProjectOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNProjectOrderField2ᚖmazzaᚋentᚋgeneratedᚐProjectOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectTaskOrder(ctx context.Context, obj interface{}) (generated.ProjectTaskOrder, error) {
	var it generated.ProjectTaskOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNProjectTaskOrderField2ᚖmazzaᚋentᚋgeneratedᚐProjectTaskOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectTaskWhereInput(ctx context.Context, obj interface{}) (generated.ProjectTaskWhereInput, error) {
	var it generated.ProjectTaskWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdat", "createdatNEQ", "createdatIn", "createdatNotIn", "createdatGT", "createdatGTE", "createdatLT", "createdatLTE", "createdatIsNil", "createdatNotNil", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "assigneename", "assigneenameNEQ", "assigneenameIn", "assigneenameNotIn", "assigneenameGT", "assigneenameGTE", "assigneenameLT", "assigneenameLTE", "assigneenameContains", "assigneenameHasPrefix", "assigneenameHasSuffix", "assigneenameEqualFold", "assigneenameContainsFold", "location", "locationNEQ", "locationIn", "locationNotIn", "locationGT", "locationGTE", "locationLT", "locationLTE", "locationContains", "locationHasPrefix", "locationHasSuffix", "locationIsNil", "locationNotNil", "locationEqualFold", "locationContainsFold", "duedate", "duedateNEQ", "duedateIn", "duedateNotIn", "duedateGT", "duedateGTE", "duedateLT", "duedateLTE", "startdate", "startdateNEQ", "startdateIn", "startdateNotIn", "startdateGT", "startdateGTE", "startdateLT", "startdateLTE", "enddate", "enddateNEQ", "enddateIn", "enddateNotIn", "enddateGT", "enddateGTE", "enddateLT", "enddateLTE", "description", "descriptionNEQ", "descriptionIn", "descriptionNotIn", "descriptionGT", "descriptionGTE", "descriptionLT", "descriptionLTE", "descriptionContains", "descriptionHasPrefix", "descriptionHasSuffix", "descriptionIsNil", "descriptionNotNil", "descriptionEqualFold", "descriptionContainsFold", "status", "statusNEQ", "statusIn", "statusNotIn", "hasProject", "hasProjectWith", "hasAssignee", "hasAssigneeWith", "hasParticipants", "hasParticipantsWith", "hasCreatedBy", "hasCreatedByWith", "hasWorkShifts", "hasWorkShiftsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOProjectTaskWhereInput2ᚖmazzaᚋentᚋgeneratedᚐProjectTaskWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOProjectTaskWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectTaskWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOProjectTaskWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectTaskWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "createdatIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIsNil = data
		case "createdatNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotNil = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "assigneename":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assigneename"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AssigneeName = data
		case "assigneenameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assigneenameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AssigneeNameNEQ = data
		case "assigneenameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assigneenameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AssigneeNameIn = data
		case "assigneenameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assigneenameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AssigneeNameNotIn = data
		case "assigneenameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assigneenameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AssigneeNameGT = data
		case "assigneenameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assigneenameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AssigneeNameGTE = data
		case "assigneenameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assigneenameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AssigneeNameLT = data
		case "assigneenameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assigneenameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AssigneeNameLTE = data
		case "assigneenameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assigneenameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AssigneeNameContains = data
		case "assigneenameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assigneenameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AssigneeNameHasPrefix = data
		case "assigneenameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assigneenameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AssigneeNameHasSuffix = data
		case "assigneenameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assigneenameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AssigneeNameEqualFold = data
		case "assigneenameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assigneenameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AssigneeNameContainsFold = data
		case "location":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Location = data
		case "locationNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationNEQ = data
		case "locationIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationIn = data
		case "locationNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationNotIn = data
		case "locationGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationGT = data
		case "locationGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationGTE = data
		case "locationLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationLT = data
		case "locationLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationLTE = data
		case "locationContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationContains = data
		case "locationHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationHasPrefix = data
		case "locationHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationHasSuffix = data
		case "locationIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationIsNil = data
		case "locationNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationNotNil = data
		case "locationEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationEqualFold = data
		case "locationContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationContainsFold = data
		case "duedate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDate = data
		case "duedateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDateNEQ = data
		case "duedateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDateIn = data
		case "duedateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDateNotIn = data
		case "duedateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDateGT = data
		case "duedateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDateGTE = data
		case "duedateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDateLT = data
		case "duedateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDateLTE = data
		case "startdate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startdate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDate = data
		case "startdateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startdateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDateNEQ = data
		case "startdateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startdateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDateIn = data
		case "startdateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startdateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDateNotIn = data
		case "startdateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startdateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDateGT = data
		case "startdateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startdateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDateGTE = data
		case "startdateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startdateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDateLT = data
		case "startdateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startdateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDateLTE = data
		case "enddate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enddate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDate = data
		case "enddateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enddateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDateNEQ = data
		case "enddateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enddateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDateIn = data
		case "enddateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enddateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDateNotIn = data
		case "enddateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enddateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDateGT = data
		case "enddateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enddateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDateGTE = data
		case "enddateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enddateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDateLT = data
		case "enddateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enddateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDateLTE = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "descriptionNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNEQ = data
		case "descriptionIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIn = data
		case "descriptionNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotIn = data
		case "descriptionGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGT = data
		case "descriptionGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGTE = data
		case "descriptionLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLT = data
		case "descriptionLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLTE = data
		case "descriptionContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContains = data
		case "descriptionHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasPrefix = data
		case "descriptionHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasSuffix = data
		case "descriptionIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIsNil = data
		case "descriptionNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotNil = data
		case "descriptionEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionEqualFold = data
		case "descriptionContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContainsFold = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOProjectTaskStatus2ᚖmazzaᚋentᚋgeneratedᚋprojecttaskᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "statusNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNEQ"))
			data, err := ec.unmarshalOProjectTaskStatus2ᚖmazzaᚋentᚋgeneratedᚋprojecttaskᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNEQ = data
		case "statusIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusIn"))
			data, err := ec.unmarshalOProjectTaskStatus2ᚕmazzaᚋentᚋgeneratedᚋprojecttaskᚐStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusIn = data
		case "statusNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNotIn"))
			data, err := ec.unmarshalOProjectTaskStatus2ᚕmazzaᚋentᚋgeneratedᚋprojecttaskᚐStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNotIn = data
		case "hasProject":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProject"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProject = data
		case "hasProjectWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProjectWith"))
			data, err := ec.unmarshalOProjectWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProjectWith = data
		case "hasAssignee":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAssignee"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAssignee = data
		case "hasAssigneeWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAssigneeWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAssigneeWith = data
		case "hasParticipants":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasParticipants"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasParticipants = data
		case "hasParticipantsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasParticipantsWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasParticipantsWith = data
		case "hasCreatedBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedBy"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedBy = data
		case "hasCreatedByWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedByWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedByWith = data
		case "hasWorkShifts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasWorkShifts"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasWorkShifts = data
		case "hasWorkShiftsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasWorkShiftsWith"))
			data, err := ec.unmarshalOWorkshiftWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐWorkshiftWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasWorkShiftsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectWhereInput(ctx context.Context, obj interface{}) (generated.ProjectWhereInput, error) {
	var it generated.ProjectWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdat", "createdatNEQ", "createdatIn", "createdatNotIn", "createdatGT", "createdatGTE", "createdatLT", "createdatLTE", "updatedat", "updatedatNEQ", "updatedatIn", "updatedatNotIn", "updatedatGT", "updatedatGTE", "updatedatLT", "updatedatLTE", "deletedat", "deletedatNEQ", "deletedatIn", "deletedatNotIn", "deletedatGT", "deletedatGTE", "deletedatLT", "deletedatLTE", "deletedatIsNil", "deletedatNotNil", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "description", "descriptionNEQ", "descriptionIn", "descriptionNotIn", "descriptionGT", "descriptionGTE", "descriptionLT", "descriptionLTE", "descriptionContains", "descriptionHasPrefix", "descriptionHasSuffix", "descriptionEqualFold", "descriptionContainsFold", "startdate", "startdateNEQ", "startdateIn", "startdateNotIn", "startdateGT", "startdateGTE", "startdateLT", "startdateLTE", "enddate", "enddateNEQ", "enddateIn", "enddateNotIn", "enddateGT", "enddateGTE", "enddateLT", "enddateLTE", "progress", "progressNEQ", "progressIn", "progressNotIn", "progressGT", "progressGTE", "progressLT", "progressLTE", "status", "statusNEQ", "statusIn", "statusNotIn", "hasCompany", "hasCompanyWith", "hasCreatedBy", "hasCreatedByWith", "hasLeader", "hasLeaderWith", "hasTasks", "hasTasksWith", "hasMilestones", "hasMilestonesWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOProjectWhereInput2ᚖmazzaᚋentᚋgeneratedᚐProjectWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOProjectWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOProjectWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "deletedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNEQ = data
		case "deletedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIn = data
		case "deletedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotIn = data
		case "deletedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGT = data
		case "deletedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGTE = data
		case "deletedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLT = data
		case "deletedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLTE = data
		case "deletedatIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIsNil = data
		case "deletedatNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotNil = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "descriptionNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNEQ = data
		case "descriptionIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIn = data
		case "descriptionNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotIn = data
		case "descriptionGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGT = data
		case "descriptionGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGTE = data
		case "descriptionLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLT = data
		case "descriptionLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLTE = data
		case "descriptionContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContains = data
		case "descriptionHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasPrefix = data
		case "descriptionHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasSuffix = data
		case "descriptionEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionEqualFold = data
		case "descriptionContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContainsFold = data
		case "startdate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startdate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDate = data
		case "startdateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startdateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDateNEQ = data
		case "startdateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startdateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDateIn = data
		case "startdateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startdateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDateNotIn = data
		case "startdateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startdateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDateGT = data
		case "startdateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startdateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDateGTE = data
		case "startdateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startdateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDateLT = data
		case "startdateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startdateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDateLTE = data
		case "enddate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enddate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDate = data
		case "enddateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enddateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDateNEQ = data
		case "enddateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enddateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDateIn = data
		case "enddateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enddateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDateNotIn = data
		case "enddateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enddateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDateGT = data
		case "enddateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enddateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDateGTE = data
		case "enddateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enddateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDateLT = data
		case "enddateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enddateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDateLTE = data
		case "progress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progress"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Progress = data
		case "progressNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressNEQ = data
		case "progressIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressIn = data
		case "progressNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressNotIn = data
		case "progressGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressGT = data
		case "progressGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressGTE = data
		case "progressLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressLT = data
		case "progressLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressLTE = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOProjectStatus2ᚖmazzaᚋentᚋgeneratedᚋprojectᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "statusNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNEQ"))
			data, err := ec.unmarshalOProjectStatus2ᚖmazzaᚋentᚋgeneratedᚋprojectᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNEQ = data
		case "statusIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusIn"))
			data, err := ec.unmarshalOProjectStatus2ᚕmazzaᚋentᚋgeneratedᚋprojectᚐStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusIn = data
		case "statusNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNotIn"))
			data, err := ec.unmarshalOProjectStatus2ᚕmazzaᚋentᚋgeneratedᚋprojectᚐStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNotIn = data
		case "hasCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompany"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompany = data
		case "hasCompanyWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompanyWith"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompanyWith = data
		case "hasCreatedBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedBy"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedBy = data
		case "hasCreatedByWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedByWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedByWith = data
		case "hasLeader":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasLeader"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasLeader = data
		case "hasLeaderWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasLeaderWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasLeaderWith = data
		case "hasTasks":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTasks"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTasks = data
		case "hasTasksWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTasksWith"))
			data, err := ec.unmarshalOProjectTaskWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectTaskWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTasksWith = data
		case "hasMilestones":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMilestones"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMilestones = data
		case "hasMilestonesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMilestonesWith"))
			data, err := ec.unmarshalOProjectMilestoneWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectMilestoneWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMilestonesWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReceivableInput(ctx context.Context, obj interface{}) (model.ReceivableInput, error) {
	var it model.ReceivableInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"amount", "name", "date", "dueDate"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		case "dueDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dueDate"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDate = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReceivableOrder(ctx context.Context, obj interface{}) (generated.ReceivableOrder, error) {
	var it generated.ReceivableOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNReceivableOrderField2ᚖmazzaᚋentᚋgeneratedᚐReceivableOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReceivableWhereInput(ctx context.Context, obj interface{}) (generated.ReceivableWhereInput, error) {
	var it generated.ReceivableWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdat", "createdatNEQ", "createdatIn", "createdatNotIn", "createdatGT", "createdatGTE", "createdatLT", "createdatLTE", "updatedat", "updatedatNEQ", "updatedatIn", "updatedatNotIn", "updatedatGT", "updatedatGTE", "updatedatLT", "updatedatLTE", "deletedat", "deletedatNEQ", "deletedatIn", "deletedatNotIn", "deletedatGT", "deletedatGTE", "deletedatLT", "deletedatLTE", "deletedatIsNil", "deletedatNotNil", "entrygroup", "entrygroupNEQ", "entrygroupIn", "entrygroupNotIn", "entrygroupGT", "entrygroupGTE", "entrygroupLT", "entrygroupLTE", "date", "dateNEQ", "dateIn", "dateNotIn", "dateGT", "dateGTE", "dateLT", "dateLTE", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "outstandingbalance", "outstandingbalanceNEQ", "outstandingbalanceIn", "outstandingbalanceNotIn", "outstandingbalanceGT", "outstandingbalanceGTE", "outstandingbalanceLT", "outstandingbalanceLTE", "totaltransaction", "totaltransactionNEQ", "totaltransactionIn", "totaltransactionNotIn", "totaltransactionGT", "totaltransactionGTE", "totaltransactionLT", "totaltransactionLTE", "duedate", "duedateNEQ", "duedateIn", "duedateNotIn", "duedateGT", "duedateGTE", "duedateLT", "duedateLTE", "status", "statusNEQ", "statusIn", "statusNotIn", "hasCompany", "hasCompanyWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOReceivableWhereInput2ᚖmazzaᚋentᚋgeneratedᚐReceivableWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOReceivableWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐReceivableWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOReceivableWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐReceivableWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "deletedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNEQ = data
		case "deletedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIn = data
		case "deletedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotIn = data
		case "deletedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGT = data
		case "deletedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGTE = data
		case "deletedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLT = data
		case "deletedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLTE = data
		case "deletedatIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIsNil = data
		case "deletedatNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotNil = data
		case "entrygroup":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroup"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroup = data
		case "entrygroupNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupNEQ = data
		case "entrygroupIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupIn = data
		case "entrygroupNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupNotIn = data
		case "entrygroupGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupGT = data
		case "entrygroupGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupGTE = data
		case "entrygroupLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupLT = data
		case "entrygroupLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroupLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroupLTE = data
		case "date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		case "dateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateNEQ = data
		case "dateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateIn = data
		case "dateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateNotIn = data
		case "dateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateGT = data
		case "dateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateGTE = data
		case "dateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateLT = data
		case "dateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateLTE = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "outstandingbalance":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalance"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalance = data
		case "outstandingbalanceNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalanceNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalanceNEQ = data
		case "outstandingbalanceIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalanceIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalanceIn = data
		case "outstandingbalanceNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalanceNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalanceNotIn = data
		case "outstandingbalanceGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalanceGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalanceGT = data
		case "outstandingbalanceGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalanceGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalanceGTE = data
		case "outstandingbalanceLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalanceLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalanceLT = data
		case "outstandingbalanceLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalanceLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalanceLTE = data
		case "totaltransaction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransaction"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransaction = data
		case "totaltransactionNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransactionNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransactionNEQ = data
		case "totaltransactionIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransactionIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransactionIn = data
		case "totaltransactionNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransactionNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransactionNotIn = data
		case "totaltransactionGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransactionGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransactionGT = data
		case "totaltransactionGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransactionGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransactionGTE = data
		case "totaltransactionLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransactionLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransactionLT = data
		case "totaltransactionLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransactionLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransactionLTE = data
		case "duedate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDate = data
		case "duedateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDateNEQ = data
		case "duedateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDateIn = data
		case "duedateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDateNotIn = data
		case "duedateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDateGT = data
		case "duedateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDateGTE = data
		case "duedateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDateLT = data
		case "duedateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDateLTE = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOReceivableStatus2ᚖmazzaᚋentᚋgeneratedᚋreceivableᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "statusNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNEQ"))
			data, err := ec.unmarshalOReceivableStatus2ᚖmazzaᚋentᚋgeneratedᚋreceivableᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNEQ = data
		case "statusIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusIn"))
			data, err := ec.unmarshalOReceivableStatus2ᚕmazzaᚋentᚋgeneratedᚋreceivableᚐStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusIn = data
		case "statusNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNotIn"))
			data, err := ec.unmarshalOReceivableStatus2ᚕmazzaᚋentᚋgeneratedᚋreceivableᚐStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNotIn = data
		case "hasCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompany"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompany = data
		case "hasCompanyWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompanyWith"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompanyWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReportInput(ctx context.Context, obj interface{}) (model.ReportInput, error) {
	var it model.ReportInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"companyID", "date"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputResetPasswordInput(ctx context.Context, obj interface{}) (model.ResetPasswordInput, error) {
	var it model.ResetPasswordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"token", "password"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "token":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Token = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSalesQuotationInput(ctx context.Context, obj interface{}) (model.SalesQuotationInput, error) {
	var it model.SalesQuotationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"invoiceData"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "invoiceData":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoiceData"))
			data, err := ec.unmarshalNInvoice2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐInvoice(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvoiceData = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSignupInput(ctx context.Context, obj interface{}) (model.SignupInput, error) {
	var it model.SignupInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"companyInput", "userInput"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "companyInput":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyInput"))
			data, err := ec.unmarshalNCreateCompanyInput2ᚖmazzaᚋentᚋgeneratedᚐCreateCompanyInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyInput = data
		case "userInput":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userInput"))
			data, err := ec.unmarshalNCreateUserInput2ᚖmazzaᚋentᚋgeneratedᚐCreateUserInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserInput = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSupplierOrder(ctx context.Context, obj interface{}) (generated.SupplierOrder, error) {
	var it generated.SupplierOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNSupplierOrderField2ᚖmazzaᚋentᚋgeneratedᚐSupplierOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSupplierWhereInput(ctx context.Context, obj interface{}) (generated.SupplierWhereInput, error) {
	var it generated.SupplierWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdat", "createdatNEQ", "createdatIn", "createdatNotIn", "createdatGT", "createdatGTE", "createdatLT", "createdatLTE", "updatedat", "updatedatNEQ", "updatedatIn", "updatedatNotIn", "updatedatGT", "updatedatGTE", "updatedatLT", "updatedatLTE", "deletedat", "deletedatNEQ", "deletedatIn", "deletedatNotIn", "deletedatGT", "deletedatGTE", "deletedatLT", "deletedatLTE", "deletedatIsNil", "deletedatNotNil", "address", "addressNEQ", "addressIn", "addressNotIn", "addressGT", "addressGTE", "addressLT", "addressLTE", "addressContains", "addressHasPrefix", "addressHasSuffix", "addressEqualFold", "addressContainsFold", "city", "cityNEQ", "cityIn", "cityNotIn", "cityGT", "cityGTE", "cityLT", "cityLTE", "cityContains", "cityHasPrefix", "cityHasSuffix", "cityEqualFold", "cityContainsFold", "country", "countryNEQ", "countryIn", "countryNotIn", "countryGT", "countryGTE", "countryLT", "countryLTE", "countryContains", "countryHasPrefix", "countryHasSuffix", "countryEqualFold", "countryContainsFold", "description", "descriptionNEQ", "descriptionIn", "descriptionNotIn", "descriptionGT", "descriptionGTE", "descriptionLT", "descriptionLTE", "descriptionContains", "descriptionHasPrefix", "descriptionHasSuffix", "descriptionEqualFold", "descriptionContainsFold", "email", "emailNEQ", "emailIn", "emailNotIn", "emailGT", "emailGTE", "emailLT", "emailLTE", "emailContains", "emailHasPrefix", "emailHasSuffix", "emailEqualFold", "emailContainsFold", "isdefault", "isdefaultNEQ", "isdefaultIsNil", "isdefaultNotNil", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "phone", "phoneNEQ", "phoneIn", "phoneNotIn", "phoneGT", "phoneGTE", "phoneLT", "phoneLTE", "phoneContains", "phoneHasPrefix", "phoneHasSuffix", "phoneEqualFold", "phoneContainsFold", "taxid", "taxidNEQ", "taxidIn", "taxidNotIn", "taxidGT", "taxidGTE", "taxidLT", "taxidLTE", "taxidContains", "taxidHasPrefix", "taxidHasSuffix", "taxidEqualFold", "taxidContainsFold", "hasCompany", "hasCompanyWith", "hasPayables", "hasPayablesWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOSupplierWhereInput2ᚖmazzaᚋentᚋgeneratedᚐSupplierWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOSupplierWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐSupplierWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOSupplierWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐSupplierWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "deletedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNEQ = data
		case "deletedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIn = data
		case "deletedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotIn = data
		case "deletedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGT = data
		case "deletedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGTE = data
		case "deletedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLT = data
		case "deletedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLTE = data
		case "deletedatIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIsNil = data
		case "deletedatNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotNil = data
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "addressNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressNEQ = data
		case "addressIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressIn = data
		case "addressNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressNotIn = data
		case "addressGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressGT = data
		case "addressGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressGTE = data
		case "addressLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressLT = data
		case "addressLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressLTE = data
		case "addressContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressContains = data
		case "addressHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressHasPrefix = data
		case "addressHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressHasSuffix = data
		case "addressEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressEqualFold = data
		case "addressContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressContainsFold = data
		case "city":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.City = data
		case "cityNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityNEQ = data
		case "cityIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIn = data
		case "cityNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityNotIn = data
		case "cityGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityGT = data
		case "cityGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityGTE = data
		case "cityLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityLT = data
		case "cityLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityLTE = data
		case "cityContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityContains = data
		case "cityHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityHasPrefix = data
		case "cityHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityHasSuffix = data
		case "cityEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityEqualFold = data
		case "cityContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityContainsFold = data
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "countryNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryNEQ = data
		case "countryIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryIn = data
		case "countryNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryNotIn = data
		case "countryGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryGT = data
		case "countryGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryGTE = data
		case "countryLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryLT = data
		case "countryLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryLTE = data
		case "countryContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryContains = data
		case "countryHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryHasPrefix = data
		case "countryHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryHasSuffix = data
		case "countryEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryEqualFold = data
		case "countryContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryContainsFold = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "descriptionNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNEQ = data
		case "descriptionIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIn = data
		case "descriptionNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotIn = data
		case "descriptionGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGT = data
		case "descriptionGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGTE = data
		case "descriptionLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLT = data
		case "descriptionLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLTE = data
		case "descriptionContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContains = data
		case "descriptionHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasPrefix = data
		case "descriptionHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasSuffix = data
		case "descriptionEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionEqualFold = data
		case "descriptionContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContainsFold = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "emailNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNEQ = data
		case "emailIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailIn = data
		case "emailNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNotIn = data
		case "emailGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailGT = data
		case "emailGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailGTE = data
		case "emailLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailLT = data
		case "emailLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailLTE = data
		case "emailContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailContains = data
		case "emailHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailHasPrefix = data
		case "emailHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailHasSuffix = data
		case "emailEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailEqualFold = data
		case "emailContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailContainsFold = data
		case "isdefault":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdefault"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDefault = data
		case "isdefaultNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdefaultNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDefaultNEQ = data
		case "isdefaultIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdefaultIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDefaultIsNil = data
		case "isdefaultNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdefaultNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDefaultNotNil = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "phoneNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNEQ = data
		case "phoneIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneIn = data
		case "phoneNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNotIn = data
		case "phoneGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneGT = data
		case "phoneGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneGTE = data
		case "phoneLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneLT = data
		case "phoneLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneLTE = data
		case "phoneContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneContains = data
		case "phoneHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneHasPrefix = data
		case "phoneHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneHasSuffix = data
		case "phoneEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneEqualFold = data
		case "phoneContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneContainsFold = data
		case "taxid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxid"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxId = data
		case "taxidNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdNEQ = data
		case "taxidIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdIn = data
		case "taxidNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdNotIn = data
		case "taxidGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdGT = data
		case "taxidGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdGTE = data
		case "taxidLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdLT = data
		case "taxidLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdLTE = data
		case "taxidContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdContains = data
		case "taxidHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdHasPrefix = data
		case "taxidHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdHasSuffix = data
		case "taxidEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdEqualFold = data
		case "taxidContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxidContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxIdContainsFold = data
		case "hasCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompany"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompany = data
		case "hasCompanyWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompanyWith"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompanyWith = data
		case "hasPayables":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPayables"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPayables = data
		case "hasPayablesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPayablesWith"))
			data, err := ec.unmarshalOPayableWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐPayableWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPayablesWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTokenWhereInput(ctx context.Context, obj interface{}) (generated.TokenWhereInput, error) {
	var it generated.TokenWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "expiry", "expiryNEQ", "expiryIn", "expiryNotIn", "expiryGT", "expiryGTE", "expiryLT", "expiryLTE", "category", "categoryNEQ", "categoryIn", "categoryNotIn", "token", "tokenNEQ", "tokenIn", "tokenNotIn", "tokenGT", "tokenGTE", "tokenLT", "tokenLTE", "tokenContains", "tokenHasPrefix", "tokenHasSuffix", "tokenEqualFold", "tokenContainsFold", "hasCompany", "hasCompanyWith", "hasUser", "hasUserWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOTokenWhereInput2ᚖmazzaᚋentᚋgeneratedᚐTokenWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOTokenWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐTokenWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOTokenWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐTokenWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "expiry":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiry"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Expiry = data
		case "expiryNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiryNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiryNEQ = data
		case "expiryIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiryIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiryIn = data
		case "expiryNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiryNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiryNotIn = data
		case "expiryGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiryGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiryGT = data
		case "expiryGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiryGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiryGTE = data
		case "expiryLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiryLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiryLT = data
		case "expiryLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiryLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiryLTE = data
		case "category":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			data, err := ec.unmarshalOTokenCategory2ᚖmazzaᚋentᚋgeneratedᚋtokenᚐCategory(ctx, v)
			if err != nil {
				return it, err
			}
			it.Category = data
		case "categoryNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryNEQ"))
			data, err := ec.unmarshalOTokenCategory2ᚖmazzaᚋentᚋgeneratedᚋtokenᚐCategory(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryNEQ = data
		case "categoryIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryIn"))
			data, err := ec.unmarshalOTokenCategory2ᚕmazzaᚋentᚋgeneratedᚋtokenᚐCategoryᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryIn = data
		case "categoryNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryNotIn"))
			data, err := ec.unmarshalOTokenCategory2ᚕmazzaᚋentᚋgeneratedᚋtokenᚐCategoryᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryNotIn = data
		case "token":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Token = data
		case "tokenNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenNEQ = data
		case "tokenIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenIn = data
		case "tokenNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenNotIn = data
		case "tokenGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenGT = data
		case "tokenGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenGTE = data
		case "tokenLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenLT = data
		case "tokenLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenLTE = data
		case "tokenContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenContains = data
		case "tokenHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenHasPrefix = data
		case "tokenHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenHasSuffix = data
		case "tokenEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenEqualFold = data
		case "tokenContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenContainsFold = data
		case "hasCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompany"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompany = data
		case "hasCompanyWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompanyWith"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompanyWith = data
		case "hasUser":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUser"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUser = data
		case "hasUserWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUserWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUserWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTreasuryOrder(ctx context.Context, obj interface{}) (generated.TreasuryOrder, error) {
	var it generated.TreasuryOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNTreasuryOrderField2ᚖmazzaᚋentᚋgeneratedᚐTreasuryOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTreasuryWhereInput(ctx context.Context, obj interface{}) (generated.TreasuryWhereInput, error) {
	var it generated.TreasuryWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdat", "createdatNEQ", "createdatIn", "createdatNotIn", "createdatGT", "createdatGTE", "createdatLT", "createdatLTE", "updatedat", "updatedatNEQ", "updatedatIn", "updatedatNotIn", "updatedatGT", "updatedatGTE", "updatedatLT", "updatedatLTE", "deletedat", "deletedatNEQ", "deletedatIn", "deletedatNotIn", "deletedatGT", "deletedatGTE", "deletedatLT", "deletedatLTE", "deletedatIsNil", "deletedatNotNil", "balance", "balanceNEQ", "balanceIn", "balanceNotIn", "balanceGT", "balanceGTE", "balanceLT", "balanceLTE", "hasCompany", "hasCompanyWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOTreasuryWhereInput2ᚖmazzaᚋentᚋgeneratedᚐTreasuryWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOTreasuryWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐTreasuryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOTreasuryWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐTreasuryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "deletedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNEQ = data
		case "deletedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIn = data
		case "deletedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotIn = data
		case "deletedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGT = data
		case "deletedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGTE = data
		case "deletedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLT = data
		case "deletedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLTE = data
		case "deletedatIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIsNil = data
		case "deletedatNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotNil = data
		case "balance":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balance"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Balance = data
		case "balanceNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BalanceNEQ = data
		case "balanceIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BalanceIn = data
		case "balanceNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BalanceNotIn = data
		case "balanceGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BalanceGT = data
		case "balanceGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BalanceGTE = data
		case "balanceLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BalanceLT = data
		case "balanceLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BalanceLTE = data
		case "hasCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompany"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompany = data
		case "hasCompanyWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompanyWith"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompanyWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateAccountingEntryInput(ctx context.Context, obj interface{}) (generated.UpdateAccountingEntryInput, error) {
	var it generated.UpdateAccountingEntryInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"number", "group", "date", "account", "label", "amount", "description", "accounttype", "category", "isdebit", "isreversal", "reversed", "companyID", "clearCompany", "userID", "clearUser"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "number":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("number"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Number = data
		case "group":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("group"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Group = data
		case "date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		case "account":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("account"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Account = data
		case "label":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Label = data
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "accounttype":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accounttype"))
			data, err := ec.unmarshalOAccountingEntryAccountType2ᚖmazzaᚋentᚋgeneratedᚋaccountingentryᚐAccountType(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountType = data
		case "category":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Category = data
		case "isdebit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdebit"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDebit = data
		case "isreversal":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isreversal"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsReversal = data
		case "reversed":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reversed"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Reversed = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "clearCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCompany"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCompany = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "clearUser":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearUser"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearUser = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCompanyDocumentInput(ctx context.Context, obj interface{}) (generated.UpdateCompanyDocumentInput, error) {
	var it generated.UpdateCompanyDocumentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"filename", "title", "keywords", "category", "size", "filetype", "status", "url", "storageuri", "thumbnail", "clearThumbnail", "expirydate", "companyID", "uploadedbyID", "clearUploadedBy", "approvedbyID", "clearApprovedBy"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "filename":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filename"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Filename = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "keywords":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keywords"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keywords = data
		case "category":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			data, err := ec.unmarshalOCompanyDocumentCategory2ᚖmazzaᚋentᚋgeneratedᚋcompanydocumentᚐCategory(ctx, v)
			if err != nil {
				return it, err
			}
			it.Category = data
		case "size":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Size = data
		case "filetype":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filetype"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileType = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOCompanyDocumentStatus2ᚖmazzaᚋentᚋgeneratedᚋcompanydocumentᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "url":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URL = data
		case "storageuri":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("storageuri"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StorageURI = data
		case "thumbnail":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("thumbnail"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Thumbnail = data
		case "clearThumbnail":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearThumbnail"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearThumbnail = data
		case "expirydate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expirydate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiryDate = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "uploadedbyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uploadedbyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.UploadedByID = data
		case "clearUploadedBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearUploadedBy"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearUploadedBy = data
		case "approvedbyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedbyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovedByID = data
		case "clearApprovedBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearApprovedBy"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearApprovedBy = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCompanyInput(ctx context.Context, obj interface{}) (generated.UpdateCompanyInput, error) {
	var it generated.UpdateCompanyInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"address", "clearAddress", "basecurrency", "ceoname", "clearCeoName", "city", "country", "establishedat", "description", "clearDescription", "email", "clearEmail", "industry", "clearIndustry", "lastentrydate", "lastinvoicenumber", "clearLastInvoiceNumber", "logo", "clearLogo", "name", "numberofemployees", "phone", "clearPhone", "sector", "clearSector", "taxid", "vatrate", "website", "clearWebsite", "incompletesetup", "clearIncompleteSetup", "addAvailableRoleIDs", "removeAvailableRoleIDs", "clearAvailableRoles", "addAccountingEntryIDs", "removeAccountingEntryIDs", "clearAccountingEntries", "addCustomerIDs", "removeCustomerIDs", "clearCustomers", "addDocumentIDs", "removeDocumentIDs", "clearDocuments", "addEmployeeIDs", "removeEmployeeIDs", "clearEmployees", "addFileIDs", "removeFileIDs", "clearFiles", "addProductIDs", "removeProductIDs", "clearProducts", "addProjectIDs", "removeProjectIDs", "clearProjects", "addPayableIDs", "removePayableIDs", "clearPayables", "addReceivableIDs", "removeReceivableIDs", "clearReceivables", "addSupplierIDs", "removeSupplierIDs", "clearSuppliers", "addTokenIDs", "removeTokenIDs", "clearTokens", "addTreasuryIDs", "removeTreasuryIDs", "clearTreasuries", "addWorkShiftIDs", "removeWorkShiftIDs", "clearWorkShifts", "addUserIDs", "removeUserIDs", "clearUsers", "addDaughterCompanyIDs", "removeDaughterCompanyIDs", "clearDaughterCompanies", "parentcompanyID", "clearParentCompany"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "clearAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearAddress"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearAddress = data
		case "basecurrency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("basecurrency"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseCurrency = data
		case "ceoname":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceoname"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CeoName = data
		case "clearCeoName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCeoName"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCeoName = data
		case "city":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.City = data
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "establishedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("establishedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstablishedAt = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "clearDescription":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDescription"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDescription = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "clearEmail":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearEmail"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearEmail = data
		case "industry":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Industry = data
		case "clearIndustry":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearIndustry"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearIndustry = data
		case "lastentrydate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastentrydate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEntryDate = data
		case "lastinvoicenumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastinvoicenumber"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastInvoiceNumber = data
		case "clearLastInvoiceNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearLastInvoiceNumber"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearLastInvoiceNumber = data
		case "logo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logo"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Logo = data
		case "clearLogo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearLogo"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearLogo = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "numberofemployees":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numberofemployees"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumberOfEmployees = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "clearPhone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearPhone"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearPhone = data
		case "sector":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sector"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Sector = data
		case "clearSector":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearSector"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearSector = data
		case "taxid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxid"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxId = data
		case "vatrate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vatrate"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VatRate = data
		case "website":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("website"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Website = data
		case "clearWebsite":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearWebsite"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearWebsite = data
		case "incompletesetup":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("incompletesetup"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IncompleteSetup = data
		case "clearIncompleteSetup":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearIncompleteSetup"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearIncompleteSetup = data
		case "addAvailableRoleIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addAvailableRoleIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddAvailableRoleIDs = data
		case "removeAvailableRoleIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeAvailableRoleIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveAvailableRoleIDs = data
		case "clearAvailableRoles":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearAvailableRoles"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearAvailableRoles = data
		case "addAccountingEntryIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addAccountingEntryIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddAccountingEntryIDs = data
		case "removeAccountingEntryIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeAccountingEntryIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveAccountingEntryIDs = data
		case "clearAccountingEntries":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearAccountingEntries"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearAccountingEntries = data
		case "addCustomerIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addCustomerIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddCustomerIDs = data
		case "removeCustomerIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeCustomerIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveCustomerIDs = data
		case "clearCustomers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCustomers"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCustomers = data
		case "addDocumentIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addDocumentIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddDocumentIDs = data
		case "removeDocumentIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeDocumentIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveDocumentIDs = data
		case "clearDocuments":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDocuments"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDocuments = data
		case "addEmployeeIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addEmployeeIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddEmployeeIDs = data
		case "removeEmployeeIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeEmployeeIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveEmployeeIDs = data
		case "clearEmployees":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearEmployees"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearEmployees = data
		case "addFileIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addFileIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddFileIDs = data
		case "removeFileIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeFileIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveFileIDs = data
		case "clearFiles":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearFiles"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearFiles = data
		case "addProductIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addProductIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddProductIDs = data
		case "removeProductIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeProductIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveProductIDs = data
		case "clearProducts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearProducts"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearProducts = data
		case "addProjectIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addProjectIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddProjectIDs = data
		case "removeProjectIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeProjectIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveProjectIDs = data
		case "clearProjects":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearProjects"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearProjects = data
		case "addPayableIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addPayableIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddPayableIDs = data
		case "removePayableIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removePayableIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemovePayableIDs = data
		case "clearPayables":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearPayables"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearPayables = data
		case "addReceivableIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addReceivableIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddReceivableIDs = data
		case "removeReceivableIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeReceivableIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveReceivableIDs = data
		case "clearReceivables":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearReceivables"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearReceivables = data
		case "addSupplierIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addSupplierIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddSupplierIDs = data
		case "removeSupplierIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeSupplierIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveSupplierIDs = data
		case "clearSuppliers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearSuppliers"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearSuppliers = data
		case "addTokenIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addTokenIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddTokenIDs = data
		case "removeTokenIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeTokenIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveTokenIDs = data
		case "clearTokens":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearTokens"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearTokens = data
		case "addTreasuryIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addTreasuryIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddTreasuryIDs = data
		case "removeTreasuryIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeTreasuryIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveTreasuryIDs = data
		case "clearTreasuries":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearTreasuries"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearTreasuries = data
		case "addWorkShiftIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addWorkShiftIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddWorkShiftIDs = data
		case "removeWorkShiftIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeWorkShiftIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveWorkShiftIDs = data
		case "clearWorkShifts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearWorkShifts"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearWorkShifts = data
		case "addUserIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addUserIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddUserIDs = data
		case "removeUserIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeUserIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveUserIDs = data
		case "clearUsers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearUsers"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearUsers = data
		case "addDaughterCompanyIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addDaughterCompanyIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddDaughterCompanyIDs = data
		case "removeDaughterCompanyIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeDaughterCompanyIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveDaughterCompanyIDs = data
		case "clearDaughterCompanies":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDaughterCompanies"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDaughterCompanies = data
		case "parentcompanyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentcompanyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParentCompanyID = data
		case "clearParentCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearParentCompany"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearParentCompany = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCustomerInput(ctx context.Context, obj interface{}) (generated.UpdateCustomerInput, error) {
	var it generated.UpdateCustomerInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"address", "city", "country", "description", "clearDescription", "email", "clearEmail", "isdefault", "clearIsDefault", "name", "phone", "taxid", "companyID", "clearCompany", "addReceivableIDs", "removeReceivableIDs", "clearReceivables"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "city":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.City = data
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "clearDescription":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDescription"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDescription = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "clearEmail":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearEmail"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearEmail = data
		case "isdefault":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdefault"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDefault = data
		case "clearIsDefault":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearIsDefault"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearIsDefault = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "taxid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxid"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxId = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "clearCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCompany"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCompany = data
		case "addReceivableIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addReceivableIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddReceivableIDs = data
		case "removeReceivableIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeReceivableIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveReceivableIDs = data
		case "clearReceivables":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearReceivables"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearReceivables = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateEmployeeInput(ctx context.Context, obj interface{}) (generated.UpdateEmployeeInput, error) {
	var it generated.UpdateEmployeeInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "gender", "position", "clearPosition", "email", "clearEmail", "phone", "companyID", "clearCompany", "userID", "clearUser"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "gender":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			data, err := ec.unmarshalOEmployeeGender2ᚖmazzaᚋentᚋgeneratedᚋemployeeᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
			it.Gender = data
		case "position":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("position"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Position = data
		case "clearPosition":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearPosition"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearPosition = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "clearEmail":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearEmail"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearEmail = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "clearCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCompany"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCompany = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "clearUser":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearUser"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearUser = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateFileInput(ctx context.Context, obj interface{}) (generated.UpdateFileInput, error) {
	var it generated.UpdateFileInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"category", "extension", "size", "uri", "url", "description", "companyID", "clearCompany"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "category":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			data, err := ec.unmarshalOFileCategory2ᚖmazzaᚋentᚋgeneratedᚋfileᚐCategory(ctx, v)
			if err != nil {
				return it, err
			}
			it.Category = data
		case "extension":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extension"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Extension = data
		case "size":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Size = data
		case "uri":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uri"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URI = data
		case "url":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URL = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "clearCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCompany"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCompany = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePayableInput(ctx context.Context, obj interface{}) (generated.UpdatePayableInput, error) {
	var it generated.UpdatePayableInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"entrygroup", "date", "name", "outstandingbalance", "totaltransaction", "duedate", "status", "companyID", "clearCompany"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "entrygroup":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroup"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroup = data
		case "date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "outstandingbalance":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalance"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalance = data
		case "totaltransaction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransaction"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransaction = data
		case "duedate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDate = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOPayableStatus2ᚖmazzaᚋentᚋgeneratedᚋpayableᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "clearCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCompany"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCompany = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProductInput(ctx context.Context, obj interface{}) (generated.UpdateProductInput, error) {
	var it generated.UpdateProductInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"stock", "companyID", "clearCompany"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "stock":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stock"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Stock = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "clearCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCompany"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCompany = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProjectInput(ctx context.Context, obj interface{}) (generated.UpdateProjectInput, error) {
	var it generated.UpdateProjectInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "startdate", "enddate", "progress", "status", "companyID", "clearCompany", "createdbyID", "clearCreatedBy", "leaderID", "clearLeader", "addTaskIDs", "removeTaskIDs", "clearTasks", "addMilestoneIDs", "removeMilestoneIDs", "clearMilestones"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "startdate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startdate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDate = data
		case "enddate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enddate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDate = data
		case "progress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progress"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Progress = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOProjectStatus2ᚖmazzaᚋentᚋgeneratedᚋprojectᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "clearCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCompany"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCompany = data
		case "createdbyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdbyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByID = data
		case "clearCreatedBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCreatedBy"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCreatedBy = data
		case "leaderID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderID = data
		case "clearLeader":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearLeader"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearLeader = data
		case "addTaskIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addTaskIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddTaskIDs = data
		case "removeTaskIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeTaskIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveTaskIDs = data
		case "clearTasks":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearTasks"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearTasks = data
		case "addMilestoneIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addMilestoneIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddMilestoneIDs = data
		case "removeMilestoneIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeMilestoneIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveMilestoneIDs = data
		case "clearMilestones":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearMilestones"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearMilestones = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProjectMilestoneInput(ctx context.Context, obj interface{}) (generated.UpdateProjectMilestoneInput, error) {
	var it generated.UpdateProjectMilestoneInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "duedate", "projectID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "duedate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDate = data
		case "projectID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProjectTaskInput(ctx context.Context, obj interface{}) (generated.UpdateProjectTaskInput, error) {
	var it generated.UpdateProjectTaskInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "assigneename", "location", "clearLocation", "duedate", "startdate", "enddate", "description", "clearDescription", "status", "projectID", "assigneeID", "clearAssignee", "addParticipantIDs", "removeParticipantIDs", "clearParticipants", "addWorkShiftIDs", "removeWorkShiftIDs", "clearWorkShifts"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "assigneename":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assigneename"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AssigneeName = data
		case "location":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Location = data
		case "clearLocation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearLocation"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearLocation = data
		case "duedate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDate = data
		case "startdate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startdate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDate = data
		case "enddate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enddate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDate = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "clearDescription":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDescription"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDescription = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOProjectTaskStatus2ᚖmazzaᚋentᚋgeneratedᚋprojecttaskᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "projectID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectID = data
		case "assigneeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assigneeID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.AssigneeID = data
		case "clearAssignee":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearAssignee"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearAssignee = data
		case "addParticipantIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addParticipantIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddParticipantIDs = data
		case "removeParticipantIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeParticipantIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveParticipantIDs = data
		case "clearParticipants":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearParticipants"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearParticipants = data
		case "addWorkShiftIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addWorkShiftIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddWorkShiftIDs = data
		case "removeWorkShiftIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeWorkShiftIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveWorkShiftIDs = data
		case "clearWorkShifts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearWorkShifts"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearWorkShifts = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateReceivableInput(ctx context.Context, obj interface{}) (generated.UpdateReceivableInput, error) {
	var it generated.UpdateReceivableInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"entrygroup", "date", "name", "outstandingbalance", "totaltransaction", "duedate", "status", "companyID", "clearCompany"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "entrygroup":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrygroup"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntryGroup = data
		case "date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "outstandingbalance":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outstandingbalance"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutstandingBalance = data
		case "totaltransaction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totaltransaction"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTransaction = data
		case "duedate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duedate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDate = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOReceivableStatus2ᚖmazzaᚋentᚋgeneratedᚋreceivableᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "clearCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCompany"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCompany = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateSupplierInput(ctx context.Context, obj interface{}) (generated.UpdateSupplierInput, error) {
	var it generated.UpdateSupplierInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"address", "city", "country", "description", "email", "isdefault", "clearIsDefault", "name", "phone", "taxid", "companyID", "clearCompany", "addPayableIDs", "removePayableIDs", "clearPayables"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "city":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.City = data
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "isdefault":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isdefault"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDefault = data
		case "clearIsDefault":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearIsDefault"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearIsDefault = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "taxid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxid"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxId = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "clearCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCompany"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCompany = data
		case "addPayableIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addPayableIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddPayableIDs = data
		case "removePayableIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removePayableIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemovePayableIDs = data
		case "clearPayables":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearPayables"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearPayables = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTreasuryInput(ctx context.Context, obj interface{}) (generated.UpdateTreasuryInput, error) {
	var it generated.UpdateTreasuryInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"balance", "companyID", "clearCompany"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "balance":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balance"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Balance = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "clearCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCompany"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCompany = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateUserInput(ctx context.Context, obj interface{}) (generated.UpdateUserInput, error) {
	var it generated.UpdateUserInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"firebaseuid", "fcmtoken", "clearFcmToken", "email", "clearEmail", "name", "phone", "clearPhone", "birthdate", "clearBirthdate", "gender", "disabled", "clearDisabled", "notverified", "clearNotVerified", "addAccountingEntryIDs", "removeAccountingEntryIDs", "clearAccountingEntries", "addCompanyIDs", "removeCompanyIDs", "addAssignedRoleIDs", "removeAssignedRoleIDs", "clearAssignedRoles", "addSubordinateIDs", "removeSubordinateIDs", "clearSubordinates", "leaderID", "clearLeader", "employeeID", "clearEmployee", "addCreatedProjectIDs", "removeCreatedProjectIDs", "clearCreatedProjects", "addLeaderedProjectIDs", "removeLeaderedProjectIDs", "clearLeaderedProjects", "addAssignedProjectTaskIDs", "removeAssignedProjectTaskIDs", "clearAssignedProjectTasks", "addParticipatedProjectTaskIDs", "removeParticipatedProjectTaskIDs", "clearParticipatedProjectTasks", "addTokenIDs", "removeTokenIDs", "clearTokens", "addApprovedWorkShiftIDs", "removeApprovedWorkShiftIDs", "clearApprovedWorkShifts", "addWorkShiftIDs", "removeWorkShiftIDs", "clearWorkShifts", "addUploadedDocumentIDs", "removeUploadedDocumentIDs", "clearUploadedDocuments", "addApprovedDocumentIDs", "removeApprovedDocumentIDs", "clearApprovedDocuments"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "firebaseuid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firebaseuid"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirebaseUID = data
		case "fcmtoken":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fcmtoken"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FcmToken = data
		case "clearFcmToken":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearFcmToken"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearFcmToken = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "clearEmail":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearEmail"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearEmail = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "clearPhone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearPhone"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearPhone = data
		case "birthdate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthdate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Birthdate = data
		case "clearBirthdate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearBirthdate"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearBirthdate = data
		case "gender":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			data, err := ec.unmarshalOUserGender2ᚖmazzaᚋentᚋgeneratedᚋuserᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
			it.Gender = data
		case "disabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Disabled = data
		case "clearDisabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDisabled"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDisabled = data
		case "notverified":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notverified"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotVerified = data
		case "clearNotVerified":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearNotVerified"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearNotVerified = data
		case "addAccountingEntryIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addAccountingEntryIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddAccountingEntryIDs = data
		case "removeAccountingEntryIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeAccountingEntryIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveAccountingEntryIDs = data
		case "clearAccountingEntries":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearAccountingEntries"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearAccountingEntries = data
		case "addCompanyIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addCompanyIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddCompanyIDs = data
		case "removeCompanyIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeCompanyIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveCompanyIDs = data
		case "addAssignedRoleIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addAssignedRoleIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddAssignedRoleIDs = data
		case "removeAssignedRoleIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeAssignedRoleIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveAssignedRoleIDs = data
		case "clearAssignedRoles":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearAssignedRoles"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearAssignedRoles = data
		case "addSubordinateIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addSubordinateIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddSubordinateIDs = data
		case "removeSubordinateIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeSubordinateIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveSubordinateIDs = data
		case "clearSubordinates":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearSubordinates"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearSubordinates = data
		case "leaderID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderID = data
		case "clearLeader":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearLeader"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearLeader = data
		case "employeeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("employeeID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmployeeID = data
		case "clearEmployee":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearEmployee"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearEmployee = data
		case "addCreatedProjectIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addCreatedProjectIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddCreatedProjectIDs = data
		case "removeCreatedProjectIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeCreatedProjectIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveCreatedProjectIDs = data
		case "clearCreatedProjects":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCreatedProjects"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCreatedProjects = data
		case "addLeaderedProjectIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addLeaderedProjectIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddLeaderedProjectIDs = data
		case "removeLeaderedProjectIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeLeaderedProjectIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveLeaderedProjectIDs = data
		case "clearLeaderedProjects":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearLeaderedProjects"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearLeaderedProjects = data
		case "addAssignedProjectTaskIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addAssignedProjectTaskIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddAssignedProjectTaskIDs = data
		case "removeAssignedProjectTaskIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeAssignedProjectTaskIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveAssignedProjectTaskIDs = data
		case "clearAssignedProjectTasks":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearAssignedProjectTasks"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearAssignedProjectTasks = data
		case "addParticipatedProjectTaskIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addParticipatedProjectTaskIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddParticipatedProjectTaskIDs = data
		case "removeParticipatedProjectTaskIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeParticipatedProjectTaskIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveParticipatedProjectTaskIDs = data
		case "clearParticipatedProjectTasks":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearParticipatedProjectTasks"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearParticipatedProjectTasks = data
		case "addTokenIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addTokenIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddTokenIDs = data
		case "removeTokenIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeTokenIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveTokenIDs = data
		case "clearTokens":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearTokens"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearTokens = data
		case "addApprovedWorkShiftIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addApprovedWorkShiftIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddApprovedWorkShiftIDs = data
		case "removeApprovedWorkShiftIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeApprovedWorkShiftIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveApprovedWorkShiftIDs = data
		case "clearApprovedWorkShifts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearApprovedWorkShifts"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearApprovedWorkShifts = data
		case "addWorkShiftIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addWorkShiftIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddWorkShiftIDs = data
		case "removeWorkShiftIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeWorkShiftIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveWorkShiftIDs = data
		case "clearWorkShifts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearWorkShifts"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearWorkShifts = data
		case "addUploadedDocumentIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addUploadedDocumentIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddUploadedDocumentIDs = data
		case "removeUploadedDocumentIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeUploadedDocumentIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveUploadedDocumentIDs = data
		case "clearUploadedDocuments":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearUploadedDocuments"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearUploadedDocuments = data
		case "addApprovedDocumentIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addApprovedDocumentIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddApprovedDocumentIDs = data
		case "removeApprovedDocumentIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeApprovedDocumentIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveApprovedDocumentIDs = data
		case "clearApprovedDocuments":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearApprovedDocuments"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearApprovedDocuments = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateUserRoleInput(ctx context.Context, obj interface{}) (generated.UpdateUserRoleInput, error) {
	var it generated.UpdateUserRoleInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"role", "companyID", "clearCompany", "addUserIDs", "removeUserIDs", "clearUser"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "role":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			data, err := ec.unmarshalOUserRoleRole2ᚖmazzaᚋentᚋgeneratedᚋuserroleᚐRole(ctx, v)
			if err != nil {
				return it, err
			}
			it.Role = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "clearCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCompany"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCompany = data
		case "addUserIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addUserIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddUserIDs = data
		case "removeUserIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeUserIDs"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveUserIDs = data
		case "clearUser":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearUser"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearUser = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateWorkshiftInput(ctx context.Context, obj interface{}) (generated.UpdateWorkshiftInput, error) {
	var it generated.UpdateWorkshiftInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"approvedat", "clearApprovedAt", "clockin", "clockout", "clearClockOut", "clockinlocation", "clockoutlocation", "clearClockOutLocation", "description", "clearDescription", "note", "clearNote", "status", "companyID", "clearCompany", "userID", "clearUser", "approvedbyID", "clearApprovedBy", "taskID", "clearTask", "editrequestID", "clearEditRequest", "workshiftID", "clearWorkShift"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "approvedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovedAt = data
		case "clearApprovedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearApprovedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearApprovedAt = data
		case "clockin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockin"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockIn = data
		case "clockout":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockout"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOut = data
		case "clearClockOut":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearClockOut"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearClockOut = data
		case "clockinlocation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinlocation"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInLocation = data
		case "clockoutlocation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutlocation"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLocation = data
		case "clearClockOutLocation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearClockOutLocation"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearClockOutLocation = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "clearDescription":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDescription"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDescription = data
		case "note":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Note = data
		case "clearNote":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearNote"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearNote = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOWorkshiftStatus2ᚖmazzaᚋentᚋgeneratedᚋworkshiftᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "clearCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCompany"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCompany = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "clearUser":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearUser"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearUser = data
		case "approvedbyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedbyID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovedByID = data
		case "clearApprovedBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearApprovedBy"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearApprovedBy = data
		case "taskID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taskID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaskID = data
		case "clearTask":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearTask"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearTask = data
		case "editrequestID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("editrequestID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EditRequestID = data
		case "clearEditRequest":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearEditRequest"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearEditRequest = data
		case "workshiftID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workshiftID"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkShiftID = data
		case "clearWorkShift":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearWorkShift"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearWorkShift = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserOrder(ctx context.Context, obj interface{}) (generated.UserOrder, error) {
	var it generated.UserOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNUserOrderField2ᚖmazzaᚋentᚋgeneratedᚐUserOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserRoleOrder(ctx context.Context, obj interface{}) (generated.UserRoleOrder, error) {
	var it generated.UserRoleOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNUserRoleOrderField2ᚖmazzaᚋentᚋgeneratedᚐUserRoleOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserRoleWhereInput(ctx context.Context, obj interface{}) (generated.UserRoleWhereInput, error) {
	var it generated.UserRoleWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "role", "roleNEQ", "roleIn", "roleNotIn", "hasCompany", "hasCompanyWith", "hasUser", "hasUserWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOUserRoleWhereInput2ᚖmazzaᚋentᚋgeneratedᚐUserRoleWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOUserRoleWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐUserRoleWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOUserRoleWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐUserRoleWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "role":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			data, err := ec.unmarshalOUserRoleRole2ᚖmazzaᚋentᚋgeneratedᚋuserroleᚐRole(ctx, v)
			if err != nil {
				return it, err
			}
			it.Role = data
		case "roleNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleNEQ"))
			data, err := ec.unmarshalOUserRoleRole2ᚖmazzaᚋentᚋgeneratedᚋuserroleᚐRole(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoleNEQ = data
		case "roleIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleIn"))
			data, err := ec.unmarshalOUserRoleRole2ᚕmazzaᚋentᚋgeneratedᚋuserroleᚐRoleᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoleIn = data
		case "roleNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleNotIn"))
			data, err := ec.unmarshalOUserRoleRole2ᚕmazzaᚋentᚋgeneratedᚋuserroleᚐRoleᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoleNotIn = data
		case "hasCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompany"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompany = data
		case "hasCompanyWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompanyWith"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompanyWith = data
		case "hasUser":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUser"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUser = data
		case "hasUserWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUserWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUserWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserWhereInput(ctx context.Context, obj interface{}) (generated.UserWhereInput, error) {
	var it generated.UserWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdat", "createdatNEQ", "createdatIn", "createdatNotIn", "createdatGT", "createdatGTE", "createdatLT", "createdatLTE", "updatedat", "updatedatNEQ", "updatedatIn", "updatedatNotIn", "updatedatGT", "updatedatGTE", "updatedatLT", "updatedatLTE", "deletedat", "deletedatNEQ", "deletedatIn", "deletedatNotIn", "deletedatGT", "deletedatGTE", "deletedatLT", "deletedatLTE", "deletedatIsNil", "deletedatNotNil", "email", "emailNEQ", "emailIn", "emailNotIn", "emailGT", "emailGTE", "emailLT", "emailLTE", "emailContains", "emailHasPrefix", "emailHasSuffix", "emailIsNil", "emailNotNil", "emailEqualFold", "emailContainsFold", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "phone", "phoneNEQ", "phoneIn", "phoneNotIn", "phoneGT", "phoneGTE", "phoneLT", "phoneLTE", "phoneContains", "phoneHasPrefix", "phoneHasSuffix", "phoneIsNil", "phoneNotNil", "phoneEqualFold", "phoneContainsFold", "birthdate", "birthdateNEQ", "birthdateIn", "birthdateNotIn", "birthdateGT", "birthdateGTE", "birthdateLT", "birthdateLTE", "birthdateIsNil", "birthdateNotNil", "gender", "genderNEQ", "genderIn", "genderNotIn", "disabled", "disabledNEQ", "disabledIsNil", "disabledNotNil", "notverified", "notverifiedNEQ", "notverifiedIsNil", "notverifiedNotNil", "hasAccountingEntries", "hasAccountingEntriesWith", "hasCompany", "hasCompanyWith", "hasAssignedRoles", "hasAssignedRolesWith", "hasSubordinates", "hasSubordinatesWith", "hasLeader", "hasLeaderWith", "hasEmployee", "hasEmployeeWith", "hasCreatedProjects", "hasCreatedProjectsWith", "hasLeaderedProjects", "hasLeaderedProjectsWith", "hasAssignedProjectTasks", "hasAssignedProjectTasksWith", "hasParticipatedProjectTasks", "hasParticipatedProjectTasksWith", "hasCreatedTasks", "hasCreatedTasksWith", "hasTokens", "hasTokensWith", "hasApprovedWorkShifts", "hasApprovedWorkShiftsWith", "hasWorkShifts", "hasWorkShiftsWith", "hasUploadedDocuments", "hasUploadedDocumentsWith", "hasApprovedDocuments", "hasApprovedDocumentsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOUserWhereInput2ᚖmazzaᚋentᚋgeneratedᚐUserWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "deletedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNEQ = data
		case "deletedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIn = data
		case "deletedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotIn = data
		case "deletedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGT = data
		case "deletedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGTE = data
		case "deletedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLT = data
		case "deletedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLTE = data
		case "deletedatIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIsNil = data
		case "deletedatNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotNil = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "emailNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNEQ = data
		case "emailIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailIn = data
		case "emailNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNotIn = data
		case "emailGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailGT = data
		case "emailGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailGTE = data
		case "emailLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailLT = data
		case "emailLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailLTE = data
		case "emailContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailContains = data
		case "emailHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailHasPrefix = data
		case "emailHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailHasSuffix = data
		case "emailIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailIsNil = data
		case "emailNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNotNil = data
		case "emailEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailEqualFold = data
		case "emailContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailContainsFold = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "phoneNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNEQ = data
		case "phoneIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneIn = data
		case "phoneNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNotIn = data
		case "phoneGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneGT = data
		case "phoneGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneGTE = data
		case "phoneLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneLT = data
		case "phoneLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneLTE = data
		case "phoneContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneContains = data
		case "phoneHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneHasPrefix = data
		case "phoneHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneHasSuffix = data
		case "phoneIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneIsNil = data
		case "phoneNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNotNil = data
		case "phoneEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneEqualFold = data
		case "phoneContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneContainsFold = data
		case "birthdate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthdate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Birthdate = data
		case "birthdateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthdateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.BirthdateNEQ = data
		case "birthdateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthdateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BirthdateIn = data
		case "birthdateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthdateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BirthdateNotIn = data
		case "birthdateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthdateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.BirthdateGT = data
		case "birthdateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthdateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.BirthdateGTE = data
		case "birthdateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthdateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.BirthdateLT = data
		case "birthdateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthdateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.BirthdateLTE = data
		case "birthdateIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthdateIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BirthdateIsNil = data
		case "birthdateNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthdateNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BirthdateNotNil = data
		case "gender":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			data, err := ec.unmarshalOUserGender2ᚖmazzaᚋentᚋgeneratedᚋuserᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
			it.Gender = data
		case "genderNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("genderNEQ"))
			data, err := ec.unmarshalOUserGender2ᚖmazzaᚋentᚋgeneratedᚋuserᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
			it.GenderNEQ = data
		case "genderIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("genderIn"))
			data, err := ec.unmarshalOUserGender2ᚕmazzaᚋentᚋgeneratedᚋuserᚐGenderᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.GenderIn = data
		case "genderNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("genderNotIn"))
			data, err := ec.unmarshalOUserGender2ᚕmazzaᚋentᚋgeneratedᚋuserᚐGenderᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.GenderNotIn = data
		case "disabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Disabled = data
		case "disabledNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disabledNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DisabledNEQ = data
		case "disabledIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disabledIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DisabledIsNil = data
		case "disabledNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disabledNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DisabledNotNil = data
		case "notverified":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notverified"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotVerified = data
		case "notverifiedNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notverifiedNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotVerifiedNEQ = data
		case "notverifiedIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notverifiedIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotVerifiedIsNil = data
		case "notverifiedNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notverifiedNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotVerifiedNotNil = data
		case "hasAccountingEntries":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAccountingEntries"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAccountingEntries = data
		case "hasAccountingEntriesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAccountingEntriesWith"))
			data, err := ec.unmarshalOAccountingEntryWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐAccountingEntryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAccountingEntriesWith = data
		case "hasCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompany"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompany = data
		case "hasCompanyWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompanyWith"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompanyWith = data
		case "hasAssignedRoles":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAssignedRoles"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAssignedRoles = data
		case "hasAssignedRolesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAssignedRolesWith"))
			data, err := ec.unmarshalOUserRoleWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐUserRoleWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAssignedRolesWith = data
		case "hasSubordinates":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSubordinates"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSubordinates = data
		case "hasSubordinatesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSubordinatesWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSubordinatesWith = data
		case "hasLeader":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasLeader"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasLeader = data
		case "hasLeaderWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasLeaderWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasLeaderWith = data
		case "hasEmployee":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEmployee"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEmployee = data
		case "hasEmployeeWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEmployeeWith"))
			data, err := ec.unmarshalOEmployeeWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐEmployeeWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEmployeeWith = data
		case "hasCreatedProjects":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedProjects"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedProjects = data
		case "hasCreatedProjectsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedProjectsWith"))
			data, err := ec.unmarshalOProjectWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedProjectsWith = data
		case "hasLeaderedProjects":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasLeaderedProjects"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasLeaderedProjects = data
		case "hasLeaderedProjectsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasLeaderedProjectsWith"))
			data, err := ec.unmarshalOProjectWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasLeaderedProjectsWith = data
		case "hasAssignedProjectTasks":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAssignedProjectTasks"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAssignedProjectTasks = data
		case "hasAssignedProjectTasksWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAssignedProjectTasksWith"))
			data, err := ec.unmarshalOProjectTaskWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectTaskWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAssignedProjectTasksWith = data
		case "hasParticipatedProjectTasks":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasParticipatedProjectTasks"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasParticipatedProjectTasks = data
		case "hasParticipatedProjectTasksWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasParticipatedProjectTasksWith"))
			data, err := ec.unmarshalOProjectTaskWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectTaskWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasParticipatedProjectTasksWith = data
		case "hasCreatedTasks":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedTasks"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedTasks = data
		case "hasCreatedTasksWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedTasksWith"))
			data, err := ec.unmarshalOProjectTaskWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectTaskWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedTasksWith = data
		case "hasTokens":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTokens"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTokens = data
		case "hasTokensWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTokensWith"))
			data, err := ec.unmarshalOTokenWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐTokenWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTokensWith = data
		case "hasApprovedWorkShifts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasApprovedWorkShifts"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasApprovedWorkShifts = data
		case "hasApprovedWorkShiftsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasApprovedWorkShiftsWith"))
			data, err := ec.unmarshalOWorkshiftWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐWorkshiftWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasApprovedWorkShiftsWith = data
		case "hasWorkShifts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasWorkShifts"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasWorkShifts = data
		case "hasWorkShiftsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasWorkShiftsWith"))
			data, err := ec.unmarshalOWorkshiftWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐWorkshiftWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasWorkShiftsWith = data
		case "hasUploadedDocuments":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUploadedDocuments"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUploadedDocuments = data
		case "hasUploadedDocumentsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUploadedDocumentsWith"))
			data, err := ec.unmarshalOCompanyDocumentWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyDocumentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUploadedDocumentsWith = data
		case "hasApprovedDocuments":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasApprovedDocuments"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasApprovedDocuments = data
		case "hasApprovedDocumentsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasApprovedDocumentsWith"))
			data, err := ec.unmarshalOCompanyDocumentWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyDocumentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasApprovedDocumentsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputWorkshiftOrder(ctx context.Context, obj interface{}) (generated.WorkshiftOrder, error) {
	var it generated.WorkshiftOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNWorkshiftOrderField2ᚖmazzaᚋentᚋgeneratedᚐWorkshiftOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputWorkshiftWhereInput(ctx context.Context, obj interface{}) (generated.WorkshiftWhereInput, error) {
	var it generated.WorkshiftWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdat", "createdatNEQ", "createdatIn", "createdatNotIn", "createdatGT", "createdatGTE", "createdatLT", "createdatLTE", "updatedat", "updatedatNEQ", "updatedatIn", "updatedatNotIn", "updatedatGT", "updatedatGTE", "updatedatLT", "updatedatLTE", "deletedat", "deletedatNEQ", "deletedatIn", "deletedatNotIn", "deletedatGT", "deletedatGTE", "deletedatLT", "deletedatLTE", "deletedatIsNil", "deletedatNotNil", "approvedat", "approvedatNEQ", "approvedatIn", "approvedatNotIn", "approvedatGT", "approvedatGTE", "approvedatLT", "approvedatLTE", "approvedatIsNil", "approvedatNotNil", "clockin", "clockinNEQ", "clockinIn", "clockinNotIn", "clockinGT", "clockinGTE", "clockinLT", "clockinLTE", "clockout", "clockoutNEQ", "clockoutIn", "clockoutNotIn", "clockoutGT", "clockoutGTE", "clockoutLT", "clockoutLTE", "clockoutIsNil", "clockoutNotNil", "clockinlocation", "clockinlocationNEQ", "clockinlocationIn", "clockinlocationNotIn", "clockinlocationGT", "clockinlocationGTE", "clockinlocationLT", "clockinlocationLTE", "clockinlocationContains", "clockinlocationHasPrefix", "clockinlocationHasSuffix", "clockinlocationEqualFold", "clockinlocationContainsFold", "clockoutlocation", "clockoutlocationNEQ", "clockoutlocationIn", "clockoutlocationNotIn", "clockoutlocationGT", "clockoutlocationGTE", "clockoutlocationLT", "clockoutlocationLTE", "clockoutlocationContains", "clockoutlocationHasPrefix", "clockoutlocationHasSuffix", "clockoutlocationIsNil", "clockoutlocationNotNil", "clockoutlocationEqualFold", "clockoutlocationContainsFold", "description", "descriptionNEQ", "descriptionIn", "descriptionNotIn", "descriptionGT", "descriptionGTE", "descriptionLT", "descriptionLTE", "descriptionContains", "descriptionHasPrefix", "descriptionHasSuffix", "descriptionIsNil", "descriptionNotNil", "descriptionEqualFold", "descriptionContainsFold", "note", "noteNEQ", "noteIn", "noteNotIn", "noteGT", "noteGTE", "noteLT", "noteLTE", "noteContains", "noteHasPrefix", "noteHasSuffix", "noteIsNil", "noteNotNil", "noteEqualFold", "noteContainsFold", "status", "statusNEQ", "statusIn", "statusNotIn", "hasCompany", "hasCompanyWith", "hasUser", "hasUserWith", "hasApprovedBy", "hasApprovedByWith", "hasTask", "hasTaskWith", "hasEditRequest", "hasEditRequestWith", "hasWorkShift", "hasWorkShiftWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOWorkshiftWhereInput2ᚖmazzaᚋentᚋgeneratedᚐWorkshiftWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOWorkshiftWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐWorkshiftWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOWorkshiftWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐWorkshiftWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "deletedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "deletedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNEQ = data
		case "deletedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIn = data
		case "deletedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotIn = data
		case "deletedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGT = data
		case "deletedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGTE = data
		case "deletedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLT = data
		case "deletedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLTE = data
		case "deletedatIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIsNil = data
		case "deletedatNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedatNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotNil = data
		case "approvedat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedat"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovedAt = data
		case "approvedatNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedatNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovedAtNEQ = data
		case "approvedatIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedatIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovedAtIn = data
		case "approvedatNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedatNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovedAtNotIn = data
		case "approvedatGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedatGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovedAtGT = data
		case "approvedatGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedatGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovedAtGTE = data
		case "approvedatLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedatLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovedAtLT = data
		case "approvedatLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedatLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovedAtLTE = data
		case "approvedatIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedatIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovedAtIsNil = data
		case "approvedatNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedatNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovedAtNotNil = data
		case "clockin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockin"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockIn = data
		case "clockinNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInNEQ = data
		case "clockinIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInIn = data
		case "clockinNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInNotIn = data
		case "clockinGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInGT = data
		case "clockinGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInGTE = data
		case "clockinLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInLT = data
		case "clockinLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInLTE = data
		case "clockout":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockout"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOut = data
		case "clockoutNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutNEQ = data
		case "clockoutIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutIn = data
		case "clockoutNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutNotIn = data
		case "clockoutGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutGT = data
		case "clockoutGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutGTE = data
		case "clockoutLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLT = data
		case "clockoutLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLTE = data
		case "clockoutIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutIsNil = data
		case "clockoutNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutNotNil = data
		case "clockinlocation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinlocation"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInLocation = data
		case "clockinlocationNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinlocationNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInLocationNEQ = data
		case "clockinlocationIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinlocationIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInLocationIn = data
		case "clockinlocationNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinlocationNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInLocationNotIn = data
		case "clockinlocationGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinlocationGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInLocationGT = data
		case "clockinlocationGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinlocationGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInLocationGTE = data
		case "clockinlocationLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinlocationLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInLocationLT = data
		case "clockinlocationLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinlocationLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInLocationLTE = data
		case "clockinlocationContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinlocationContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInLocationContains = data
		case "clockinlocationHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinlocationHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInLocationHasPrefix = data
		case "clockinlocationHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinlocationHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInLocationHasSuffix = data
		case "clockinlocationEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinlocationEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInLocationEqualFold = data
		case "clockinlocationContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockinlocationContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockInLocationContainsFold = data
		case "clockoutlocation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutlocation"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLocation = data
		case "clockoutlocationNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutlocationNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLocationNEQ = data
		case "clockoutlocationIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutlocationIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLocationIn = data
		case "clockoutlocationNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutlocationNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLocationNotIn = data
		case "clockoutlocationGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutlocationGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLocationGT = data
		case "clockoutlocationGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutlocationGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLocationGTE = data
		case "clockoutlocationLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutlocationLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLocationLT = data
		case "clockoutlocationLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutlocationLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLocationLTE = data
		case "clockoutlocationContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutlocationContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLocationContains = data
		case "clockoutlocationHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutlocationHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLocationHasPrefix = data
		case "clockoutlocationHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutlocationHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLocationHasSuffix = data
		case "clockoutlocationIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutlocationIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLocationIsNil = data
		case "clockoutlocationNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutlocationNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLocationNotNil = data
		case "clockoutlocationEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutlocationEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLocationEqualFold = data
		case "clockoutlocationContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clockoutlocationContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClockOutLocationContainsFold = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "descriptionNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNEQ = data
		case "descriptionIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIn = data
		case "descriptionNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotIn = data
		case "descriptionGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGT = data
		case "descriptionGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGTE = data
		case "descriptionLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLT = data
		case "descriptionLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLTE = data
		case "descriptionContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContains = data
		case "descriptionHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasPrefix = data
		case "descriptionHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasSuffix = data
		case "descriptionIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIsNil = data
		case "descriptionNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotNil = data
		case "descriptionEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionEqualFold = data
		case "descriptionContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContainsFold = data
		case "note":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Note = data
		case "noteNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteNEQ = data
		case "noteIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteIn = data
		case "noteNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteNotIn = data
		case "noteGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteGT = data
		case "noteGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteGTE = data
		case "noteLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteLT = data
		case "noteLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteLTE = data
		case "noteContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteContains = data
		case "noteHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteHasPrefix = data
		case "noteHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteHasSuffix = data
		case "noteIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteIsNil = data
		case "noteNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteNotNil = data
		case "noteEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteEqualFold = data
		case "noteContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteContainsFold = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOWorkshiftStatus2ᚖmazzaᚋentᚋgeneratedᚋworkshiftᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "statusNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNEQ"))
			data, err := ec.unmarshalOWorkshiftStatus2ᚖmazzaᚋentᚋgeneratedᚋworkshiftᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNEQ = data
		case "statusIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusIn"))
			data, err := ec.unmarshalOWorkshiftStatus2ᚕmazzaᚋentᚋgeneratedᚋworkshiftᚐStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusIn = data
		case "statusNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNotIn"))
			data, err := ec.unmarshalOWorkshiftStatus2ᚕmazzaᚋentᚋgeneratedᚋworkshiftᚐStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNotIn = data
		case "hasCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompany"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompany = data
		case "hasCompanyWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompanyWith"))
			data, err := ec.unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompanyWith = data
		case "hasUser":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUser"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUser = data
		case "hasUserWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUserWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUserWith = data
		case "hasApprovedBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasApprovedBy"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasApprovedBy = data
		case "hasApprovedByWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasApprovedByWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasApprovedByWith = data
		case "hasTask":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTask"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTask = data
		case "hasTaskWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTaskWith"))
			data, err := ec.unmarshalOProjectTaskWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectTaskWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTaskWith = data
		case "hasEditRequest":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEditRequest"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEditRequest = data
		case "hasEditRequestWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEditRequestWith"))
			data, err := ec.unmarshalOWorkshiftWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐWorkshiftWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEditRequestWith = data
		case "hasWorkShift":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasWorkShift"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasWorkShift = data
		case "hasWorkShiftWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasWorkShiftWith"))
			data, err := ec.unmarshalOWorkshiftWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐWorkshiftWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasWorkShiftWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputinvitedUserSignupInput(ctx context.Context, obj interface{}) (model.InvitedUserSignupInput, error) {
	var it model.InvitedUserSignupInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"userInput", "invitationToken"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "userInput":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userInput"))
			data, err := ec.unmarshalNCreateUserInput2ᚖmazzaᚋentᚋgeneratedᚐCreateUserInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserInput = data
		case "invitationToken":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invitationToken"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvitationToken = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj generated.Noder) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case *generated.AccountingEntry:
		if len(graphql.CollectFields(ec.OperationContext, sel, []string{"Noder", "AccountingEntry"})) == 0 {
			return graphql.Empty{}
		}
		if obj == nil {
			return graphql.Null
		}
		return ec._AccountingEntry(ctx, sel, obj)
	case *generated.Company:
		if len(graphql.CollectFields(ec.OperationContext, sel, []string{"Noder", "Company"})) == 0 {
			return graphql.Empty{}
		}
		if obj == nil {
			return graphql.Null
		}
		return ec._Company(ctx, sel, obj)
	case *generated.CompanyDocument:
		if len(graphql.CollectFields(ec.OperationContext, sel, []string{"Noder", "CompanyDocument"})) == 0 {
			return graphql.Empty{}
		}
		if obj == nil {
			return graphql.Null
		}
		return ec._CompanyDocument(ctx, sel, obj)
	case *generated.Customer:
		if len(graphql.CollectFields(ec.OperationContext, sel, []string{"Noder", "Customer"})) == 0 {
			return graphql.Empty{}
		}
		if obj == nil {
			return graphql.Null
		}
		return ec._Customer(ctx, sel, obj)
	case *generated.Employee:
		if len(graphql.CollectFields(ec.OperationContext, sel, []string{"Noder", "Employee"})) == 0 {
			return graphql.Empty{}
		}
		if obj == nil {
			return graphql.Null
		}
		return ec._Employee(ctx, sel, obj)
	case *generated.File:
		if len(graphql.CollectFields(ec.OperationContext, sel, []string{"Noder", "File"})) == 0 {
			return graphql.Empty{}
		}
		if obj == nil {
			return graphql.Null
		}
		return ec._File(ctx, sel, obj)
	case *generated.Payable:
		if len(graphql.CollectFields(ec.OperationContext, sel, []string{"Noder", "Payable"})) == 0 {
			return graphql.Empty{}
		}
		if obj == nil {
			return graphql.Null
		}
		return ec._Payable(ctx, sel, obj)
	case *generated.Product:
		if len(graphql.CollectFields(ec.OperationContext, sel, []string{"Noder", "Product"})) == 0 {
			return graphql.Empty{}
		}
		if obj == nil {
			return graphql.Null
		}
		return ec._Product(ctx, sel, obj)
	case *generated.Project:
		if len(graphql.CollectFields(ec.OperationContext, sel, []string{"Noder", "Project"})) == 0 {
			return graphql.Empty{}
		}
		if obj == nil {
			return graphql.Null
		}
		return ec._Project(ctx, sel, obj)
	case *generated.ProjectMilestone:
		if len(graphql.CollectFields(ec.OperationContext, sel, []string{"Noder", "ProjectMilestone"})) == 0 {
			return graphql.Empty{}
		}
		if obj == nil {
			return graphql.Null
		}
		return ec._ProjectMilestone(ctx, sel, obj)
	case *generated.ProjectTask:
		if len(graphql.CollectFields(ec.OperationContext, sel, []string{"Noder", "ProjectTask"})) == 0 {
			return graphql.Empty{}
		}
		if obj == nil {
			return graphql.Null
		}
		return ec._ProjectTask(ctx, sel, obj)
	case *generated.Receivable:
		if len(graphql.CollectFields(ec.OperationContext, sel, []string{"Noder", "Receivable"})) == 0 {
			return graphql.Empty{}
		}
		if obj == nil {
			return graphql.Null
		}
		return ec._Receivable(ctx, sel, obj)
	case *generated.Supplier:
		if len(graphql.CollectFields(ec.OperationContext, sel, []string{"Noder", "Supplier"})) == 0 {
			return graphql.Empty{}
		}
		if obj == nil {
			return graphql.Null
		}
		return ec._Supplier(ctx, sel, obj)
	case *generated.Token:
		if len(graphql.CollectFields(ec.OperationContext, sel, []string{"Noder", "Token"})) == 0 {
			return graphql.Empty{}
		}
		if obj == nil {
			return graphql.Null
		}
		return ec._Token(ctx, sel, obj)
	case *generated.Treasury:
		if len(graphql.CollectFields(ec.OperationContext, sel, []string{"Noder", "Treasury"})) == 0 {
			return graphql.Empty{}
		}
		if obj == nil {
			return graphql.Null
		}
		return ec._Treasury(ctx, sel, obj)
	case *generated.User:
		if len(graphql.CollectFields(ec.OperationContext, sel, []string{"Noder", "User"})) == 0 {
			return graphql.Empty{}
		}
		if obj == nil {
			return graphql.Null
		}
		return ec._User(ctx, sel, obj)
	case *generated.UserRole:
		if len(graphql.CollectFields(ec.OperationContext, sel, []string{"Noder", "UserRole"})) == 0 {
			return graphql.Empty{}
		}
		if obj == nil {
			return graphql.Null
		}
		return ec._UserRole(ctx, sel, obj)
	case *generated.Workshift:
		if len(graphql.CollectFields(ec.OperationContext, sel, []string{"Noder", "Workshift"})) == 0 {
			return graphql.Empty{}
		}
		if obj == nil {
			return graphql.Null
		}
		return ec._Workshift(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var accountingEntryImplementors = []string{"AccountingEntry", "Node"}

func (ec *executionContext) _AccountingEntry(ctx context.Context, sel ast.SelectionSet, obj *generated.AccountingEntry) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountingEntryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountingEntry")
		case "id":
			out.Values[i] = ec._AccountingEntry_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdat":
			out.Values[i] = ec._AccountingEntry_createdat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedat":
			out.Values[i] = ec._AccountingEntry_updatedat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deletedat":
			out.Values[i] = ec._AccountingEntry_deletedat(ctx, field, obj)
		case "number":
			out.Values[i] = ec._AccountingEntry_number(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "group":
			out.Values[i] = ec._AccountingEntry_group(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "date":
			out.Values[i] = ec._AccountingEntry_date(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "account":
			out.Values[i] = ec._AccountingEntry_account(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "label":
			out.Values[i] = ec._AccountingEntry_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "amount":
			out.Values[i] = ec._AccountingEntry_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "description":
			out.Values[i] = ec._AccountingEntry_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "accounttype":
			out.Values[i] = ec._AccountingEntry_accounttype(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "category":
			out.Values[i] = ec._AccountingEntry_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "isdebit":
			out.Values[i] = ec._AccountingEntry_isdebit(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "isreversal":
			out.Values[i] = ec._AccountingEntry_isreversal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "reversed":
			out.Values[i] = ec._AccountingEntry_reversed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "company":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AccountingEntry_company(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "user":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AccountingEntry_user(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var accountingEntryConnectionImplementors = []string{"AccountingEntryConnection"}

func (ec *executionContext) _AccountingEntryConnection(ctx context.Context, sel ast.SelectionSet, obj *generated.AccountingEntryConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountingEntryConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountingEntryConnection")
		case "edges":
			out.Values[i] = ec._AccountingEntryConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._AccountingEntryConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._AccountingEntryConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var accountingEntryEdgeImplementors = []string{"AccountingEntryEdge"}

func (ec *executionContext) _AccountingEntryEdge(ctx context.Context, sel ast.SelectionSet, obj *generated.AccountingEntryEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountingEntryEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountingEntryEdge")
		case "node":
			out.Values[i] = ec._AccountingEntryEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._AccountingEntryEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var agingBucketImplementors = []string{"AgingBucket"}

func (ec *executionContext) _AgingBucket(ctx context.Context, sel ast.SelectionSet, obj *model.AgingBucket) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, agingBucketImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AgingBucket")
		case "range":
			out.Values[i] = ec._AgingBucket_range(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalAmount":
			out.Values[i] = ec._AgingBucket_totalAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "count":
			out.Values[i] = ec._AgingBucket_count(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var assetsImplementors = []string{"Assets"}

func (ec *executionContext) _Assets(ctx context.Context, sel ast.SelectionSet, obj *model.Assets) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, assetsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Assets")
		case "currentAssets":
			out.Values[i] = ec._Assets_currentAssets(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCurrentAssets":
			out.Values[i] = ec._Assets_totalCurrentAssets(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fixedAssets":
			out.Values[i] = ec._Assets_fixedAssets(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalFixedAssets":
			out.Values[i] = ec._Assets_totalFixedAssets(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalAssets":
			out.Values[i] = ec._Assets_totalAssets(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var balanceSheetOuputImplementors = []string{"BalanceSheetOuput"}

func (ec *executionContext) _BalanceSheetOuput(ctx context.Context, sel ast.SelectionSet, obj *model.BalanceSheetOuput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, balanceSheetOuputImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BalanceSheetOuput")
		case "assets":
			out.Values[i] = ec._BalanceSheetOuput_assets(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "liabilities":
			out.Values[i] = ec._BalanceSheetOuput_liabilities(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "equity":
			out.Values[i] = ec._BalanceSheetOuput_equity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalLiabilityAndEquity":
			out.Values[i] = ec._BalanceSheetOuput_totalLiabilityAndEquity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "period":
			out.Values[i] = ec._BalanceSheetOuput_period(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isProvisional":
			out.Values[i] = ec._BalanceSheetOuput_isProvisional(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var companyImplementors = []string{"Company", "Node"}

func (ec *executionContext) _Company(ctx context.Context, sel ast.SelectionSet, obj *generated.Company) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, companyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Company")
		case "id":
			out.Values[i] = ec._Company_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdat":
			out.Values[i] = ec._Company_createdat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedat":
			out.Values[i] = ec._Company_updatedat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deletedat":
			out.Values[i] = ec._Company_deletedat(ctx, field, obj)
		case "address":
			out.Values[i] = ec._Company_address(ctx, field, obj)
		case "basecurrency":
			out.Values[i] = ec._Company_basecurrency(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "ceoname":
			out.Values[i] = ec._Company_ceoname(ctx, field, obj)
		case "city":
			out.Values[i] = ec._Company_city(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "country":
			out.Values[i] = ec._Company_country(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "establishedat":
			out.Values[i] = ec._Company_establishedat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "description":
			out.Values[i] = ec._Company_description(ctx, field, obj)
		case "email":
			out.Values[i] = ec._Company_email(ctx, field, obj)
		case "industry":
			out.Values[i] = ec._Company_industry(ctx, field, obj)
		case "lastentrydate":
			out.Values[i] = ec._Company_lastentrydate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastinvoicenumber":
			out.Values[i] = ec._Company_lastinvoicenumber(ctx, field, obj)
		case "logo":
			out.Values[i] = ec._Company_logo(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Company_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "numberofemployees":
			out.Values[i] = ec._Company_numberofemployees(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "phone":
			out.Values[i] = ec._Company_phone(ctx, field, obj)
		case "sector":
			out.Values[i] = ec._Company_sector(ctx, field, obj)
		case "taxid":
			out.Values[i] = ec._Company_taxid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "vatrate":
			out.Values[i] = ec._Company_vatrate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "website":
			out.Values[i] = ec._Company_website(ctx, field, obj)
		case "incompletesetup":
			out.Values[i] = ec._Company_incompletesetup(ctx, field, obj)
		case "availableroles":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_availableroles(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "accountingentries":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_accountingentries(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "customers":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_customers(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "documents":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_documents(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "employees":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_employees(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "files":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_files(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "products":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_products(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "projects":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_projects(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "payables":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_payables(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "receivables":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_receivables(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "suppliers":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_suppliers(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "tokens":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_tokens(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "treasuries":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_treasuries(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "workshifts":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_workshifts(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "users":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_users(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "daughtercompanies":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_daughtercompanies(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "parentcompany":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_parentcompany(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var companyDocumentImplementors = []string{"CompanyDocument", "Node"}

func (ec *executionContext) _CompanyDocument(ctx context.Context, sel ast.SelectionSet, obj *generated.CompanyDocument) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, companyDocumentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompanyDocument")
		case "id":
			out.Values[i] = ec._CompanyDocument_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdat":
			out.Values[i] = ec._CompanyDocument_createdat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedat":
			out.Values[i] = ec._CompanyDocument_updatedat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deletedat":
			out.Values[i] = ec._CompanyDocument_deletedat(ctx, field, obj)
		case "filename":
			out.Values[i] = ec._CompanyDocument_filename(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "title":
			out.Values[i] = ec._CompanyDocument_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "keywords":
			out.Values[i] = ec._CompanyDocument_keywords(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "category":
			out.Values[i] = ec._CompanyDocument_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "size":
			out.Values[i] = ec._CompanyDocument_size(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "filetype":
			out.Values[i] = ec._CompanyDocument_filetype(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			out.Values[i] = ec._CompanyDocument_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "url":
			out.Values[i] = ec._CompanyDocument_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "thumbnail":
			out.Values[i] = ec._CompanyDocument_thumbnail(ctx, field, obj)
		case "expirydate":
			out.Values[i] = ec._CompanyDocument_expirydate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "company":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CompanyDocument_company(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "uploadedby":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CompanyDocument_uploadedby(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "approvedby":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CompanyDocument_approvedby(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var companyDocumentConnectionImplementors = []string{"CompanyDocumentConnection"}

func (ec *executionContext) _CompanyDocumentConnection(ctx context.Context, sel ast.SelectionSet, obj *generated.CompanyDocumentConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, companyDocumentConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompanyDocumentConnection")
		case "edges":
			out.Values[i] = ec._CompanyDocumentConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._CompanyDocumentConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._CompanyDocumentConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var companyDocumentEdgeImplementors = []string{"CompanyDocumentEdge"}

func (ec *executionContext) _CompanyDocumentEdge(ctx context.Context, sel ast.SelectionSet, obj *generated.CompanyDocumentEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, companyDocumentEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompanyDocumentEdge")
		case "node":
			out.Values[i] = ec._CompanyDocumentEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._CompanyDocumentEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var customerImplementors = []string{"Customer", "Node"}

func (ec *executionContext) _Customer(ctx context.Context, sel ast.SelectionSet, obj *generated.Customer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Customer")
		case "id":
			out.Values[i] = ec._Customer_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdat":
			out.Values[i] = ec._Customer_createdat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedat":
			out.Values[i] = ec._Customer_updatedat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deletedat":
			out.Values[i] = ec._Customer_deletedat(ctx, field, obj)
		case "address":
			out.Values[i] = ec._Customer_address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "city":
			out.Values[i] = ec._Customer_city(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "country":
			out.Values[i] = ec._Customer_country(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "description":
			out.Values[i] = ec._Customer_description(ctx, field, obj)
		case "email":
			out.Values[i] = ec._Customer_email(ctx, field, obj)
		case "isdefault":
			out.Values[i] = ec._Customer_isdefault(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Customer_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "phone":
			out.Values[i] = ec._Customer_phone(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "taxid":
			out.Values[i] = ec._Customer_taxid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "company":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Customer_company(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "receivables":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Customer_receivables(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var customerAggregationOutputImplementors = []string{"CustomerAggregationOutput"}

func (ec *executionContext) _CustomerAggregationOutput(ctx context.Context, sel ast.SelectionSet, obj *model.CustomerAggregationOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerAggregationOutputImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerAggregationOutput")
		case "company":
			out.Values[i] = ec._CustomerAggregationOutput_company(ctx, field, obj)
		case "count":
			out.Values[i] = ec._CustomerAggregationOutput_count(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var documentCountImplementors = []string{"DocumentCount"}

func (ec *executionContext) _DocumentCount(ctx context.Context, sel ast.SelectionSet, obj *model.DocumentCount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, documentCountImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DocumentCount")
		case "category":
			out.Values[i] = ec._DocumentCount_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "count":
			out.Values[i] = ec._DocumentCount_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var employeeImplementors = []string{"Employee", "Node"}

func (ec *executionContext) _Employee(ctx context.Context, sel ast.SelectionSet, obj *generated.Employee) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, employeeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Employee")
		case "id":
			out.Values[i] = ec._Employee_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdat":
			out.Values[i] = ec._Employee_createdat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedat":
			out.Values[i] = ec._Employee_updatedat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deletedat":
			out.Values[i] = ec._Employee_deletedat(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Employee_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "gender":
			out.Values[i] = ec._Employee_gender(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "position":
			out.Values[i] = ec._Employee_position(ctx, field, obj)
		case "email":
			out.Values[i] = ec._Employee_email(ctx, field, obj)
		case "phone":
			out.Values[i] = ec._Employee_phone(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "company":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Employee_company(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "user":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Employee_user(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var equityImplementors = []string{"Equity"}

func (ec *executionContext) _Equity(ctx context.Context, sel ast.SelectionSet, obj *model.Equity) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, equityImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Equity")
		case "equity":
			out.Values[i] = ec._Equity_equity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalEquity":
			out.Values[i] = ec._Equity_totalEquity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var expensesBreakdownOutputImplementors = []string{"ExpensesBreakdownOutput"}

func (ec *executionContext) _ExpensesBreakdownOutput(ctx context.Context, sel ast.SelectionSet, obj *model.ExpensesBreakdownOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, expensesBreakdownOutputImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ExpensesBreakdownOutput")
		case "name":
			out.Values[i] = ec._ExpensesBreakdownOutput_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "amount":
			out.Values[i] = ec._ExpensesBreakdownOutput_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var fileImplementors = []string{"File", "Node"}

func (ec *executionContext) _File(ctx context.Context, sel ast.SelectionSet, obj *generated.File) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fileImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("File")
		case "id":
			out.Values[i] = ec._File_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdat":
			out.Values[i] = ec._File_createdat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedat":
			out.Values[i] = ec._File_updatedat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deletedat":
			out.Values[i] = ec._File_deletedat(ctx, field, obj)
		case "category":
			out.Values[i] = ec._File_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "extension":
			out.Values[i] = ec._File_extension(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "size":
			out.Values[i] = ec._File_size(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "url":
			out.Values[i] = ec._File_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "description":
			out.Values[i] = ec._File_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "company":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._File_company(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var fileConnectionImplementors = []string{"FileConnection"}

func (ec *executionContext) _FileConnection(ctx context.Context, sel ast.SelectionSet, obj *generated.FileConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fileConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FileConnection")
		case "edges":
			out.Values[i] = ec._FileConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._FileConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._FileConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var fileDetailsOutputImplementors = []string{"FileDetailsOutput"}

func (ec *executionContext) _FileDetailsOutput(ctx context.Context, sel ast.SelectionSet, obj *model.FileDetailsOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fileDetailsOutputImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FileDetailsOutput")
		case "message":
			out.Values[i] = ec._FileDetailsOutput_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "file":
			out.Values[i] = ec._FileDetailsOutput_file(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var fileEdgeImplementors = []string{"FileEdge"}

func (ec *executionContext) _FileEdge(ctx context.Context, sel ast.SelectionSet, obj *generated.FileEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fileEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FileEdge")
		case "node":
			out.Values[i] = ec._FileEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._FileEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var fileOutputImplementors = []string{"FileOutput"}

func (ec *executionContext) _FileOutput(ctx context.Context, sel ast.SelectionSet, obj *model.FileOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fileOutputImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FileOutput")
		case "encoding":
			out.Values[i] = ec._FileOutput_encoding(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "kind":
			out.Values[i] = ec._FileOutput_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._FileOutput_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._FileOutput_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var incomeStatementOuputImplementors = []string{"IncomeStatementOuput"}

func (ec *executionContext) _IncomeStatementOuput(ctx context.Context, sel ast.SelectionSet, obj *model.IncomeStatementOuput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, incomeStatementOuputImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IncomeStatementOuput")
		case "revenues":
			out.Values[i] = ec._IncomeStatementOuput_revenues(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "netRevenue":
			out.Values[i] = ec._IncomeStatementOuput_netRevenue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "expenses":
			out.Values[i] = ec._IncomeStatementOuput_expenses(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalExpenses":
			out.Values[i] = ec._IncomeStatementOuput_totalExpenses(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "earningsBeforeTax":
			out.Values[i] = ec._IncomeStatementOuput_earningsBeforeTax(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "taxExpense":
			out.Values[i] = ec._IncomeStatementOuput_taxExpense(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "netIncome":
			out.Values[i] = ec._IncomeStatementOuput_netIncome(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "period":
			out.Values[i] = ec._IncomeStatementOuput_period(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isProvisional":
			out.Values[i] = ec._IncomeStatementOuput_isProvisional(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var invoiceIssuanceOutputImplementors = []string{"InvoiceIssuanceOutput"}

func (ec *executionContext) _InvoiceIssuanceOutput(ctx context.Context, sel ast.SelectionSet, obj *model.InvoiceIssuanceOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, invoiceIssuanceOutputImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InvoiceIssuanceOutput")
		case "message":
			out.Values[i] = ec._InvoiceIssuanceOutput_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fileUrl":
			out.Values[i] = ec._InvoiceIssuanceOutput_fileUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var liabilitiesImplementors = []string{"Liabilities"}

func (ec *executionContext) _Liabilities(ctx context.Context, sel ast.SelectionSet, obj *model.Liabilities) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, liabilitiesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Liabilities")
		case "currentLiabilities":
			out.Values[i] = ec._Liabilities_currentLiabilities(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCurrentLiabilities":
			out.Values[i] = ec._Liabilities_totalCurrentLiabilities(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nonCurrentLiabilities":
			out.Values[i] = ec._Liabilities_nonCurrentLiabilities(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalNonCurrentLiabilities":
			out.Values[i] = ec._Liabilities_totalNonCurrentLiabilities(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalLiabilities":
			out.Values[i] = ec._Liabilities_totalLiabilities(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var loginOutputImplementors = []string{"LoginOutput"}

func (ec *executionContext) _LoginOutput(ctx context.Context, sel ast.SelectionSet, obj *model.LoginOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, loginOutputImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LoginOutput")
		case "user":
			out.Values[i] = ec._LoginOutput_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "companyId":
			out.Values[i] = ec._LoginOutput_companyId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "companies":
			out.Values[i] = ec._LoginOutput_companies(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "accessToken":
			out.Values[i] = ec._LoginOutput_accessToken(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "refreshToken":
			out.Values[i] = ec._LoginOutput_refreshToken(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "ttl":
			out.Values[i] = ec._LoginOutput_ttl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "signup":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_signup(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createCompany":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createCompany(ctx, field)
			})
		case "updateCompany":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCompany(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "invitedUserSignup":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_invitedUserSignup(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createUser(ctx, field)
			})
		case "updateUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "forgotPassword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_forgotPassword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "resetPassword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_resetPassword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "unsubscribe":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_unsubscribe(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createUserRole":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createUserRole(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createCustomer":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createCustomer(ctx, field)
			})
		case "updateCustomer":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCustomer(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteCustomer":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteCustomer(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createEmployee":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createEmployee(ctx, field)
			})
		case "updateEmployee":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateEmployee(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteEmployee":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteEmployee(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createProduct":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createProduct(ctx, field)
			})
		case "updateProduct":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateProduct(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteProduct":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteProduct(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createProject":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createProject(ctx, field)
			})
		case "updateProject":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateProject(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteProject":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteProject(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createProjectTask":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createProjectTask(ctx, field)
			})
		case "updateProjectTask":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateProjectTask(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteProjectTask":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteProjectTask(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createProjectMilestone":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createProjectMilestone(ctx, field)
			})
		case "updateProjectMilestone":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateProjectMilestone(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteProjectMilestone":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteProjectMilestone(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createSupplier":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createSupplier(ctx, field)
			})
		case "updateSupplier":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateSupplier(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteSupplier":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteSupplier(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createTreasury":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTreasury(ctx, field)
			})
		case "updateTreasury":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTreasury(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteTreasury":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteTreasury(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createWorkShift":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createWorkShift(ctx, field)
			})
		case "updateWorkShift":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateWorkShift(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteWorkShift":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteWorkShift(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "issueSalesQuotation":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_issueSalesQuotation(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "issueInvoice":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_issueInvoice(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "registerAccountingEntries":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_registerAccountingEntries(ctx, field)
			})
		case "initialSetup":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_initialSetup(ctx, field)
			})
		case "uploadDocument":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_uploadDocument(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateDocument":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateDocument(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteDocuments":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteDocuments(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *entgql.PageInfo[int]) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "hasNextPage":
			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hasPreviousPage":
			out.Values[i] = ec._PageInfo_hasPreviousPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "startCursor":
			out.Values[i] = ec._PageInfo_startCursor(ctx, field, obj)
		case "endCursor":
			out.Values[i] = ec._PageInfo_endCursor(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var payableImplementors = []string{"Payable", "Node"}

func (ec *executionContext) _Payable(ctx context.Context, sel ast.SelectionSet, obj *generated.Payable) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, payableImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Payable")
		case "id":
			out.Values[i] = ec._Payable_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdat":
			out.Values[i] = ec._Payable_createdat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedat":
			out.Values[i] = ec._Payable_updatedat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deletedat":
			out.Values[i] = ec._Payable_deletedat(ctx, field, obj)
		case "entrygroup":
			out.Values[i] = ec._Payable_entrygroup(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "date":
			out.Values[i] = ec._Payable_date(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Payable_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "outstandingbalance":
			out.Values[i] = ec._Payable_outstandingbalance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "totaltransaction":
			out.Values[i] = ec._Payable_totaltransaction(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "duedate":
			out.Values[i] = ec._Payable_duedate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			out.Values[i] = ec._Payable_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "company":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Payable_company(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var payableConnectionImplementors = []string{"PayableConnection"}

func (ec *executionContext) _PayableConnection(ctx context.Context, sel ast.SelectionSet, obj *generated.PayableConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, payableConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PayableConnection")
		case "edges":
			out.Values[i] = ec._PayableConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._PayableConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._PayableConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var payableEdgeImplementors = []string{"PayableEdge"}

func (ec *executionContext) _PayableEdge(ctx context.Context, sel ast.SelectionSet, obj *generated.PayableEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, payableEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PayableEdge")
		case "node":
			out.Values[i] = ec._PayableEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._PayableEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var periodImplementors = []string{"Period"}

func (ec *executionContext) _Period(ctx context.Context, sel ast.SelectionSet, obj *model.Period) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, periodImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Period")
		case "start":
			out.Values[i] = ec._Period_start(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "end":
			out.Values[i] = ec._Period_end(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var productImplementors = []string{"Product", "Node"}

func (ec *executionContext) _Product(ctx context.Context, sel ast.SelectionSet, obj *generated.Product) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Product")
		case "id":
			out.Values[i] = ec._Product_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdat":
			out.Values[i] = ec._Product_createdat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedat":
			out.Values[i] = ec._Product_updatedat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deletedat":
			out.Values[i] = ec._Product_deletedat(ctx, field, obj)
		case "stock":
			out.Values[i] = ec._Product_stock(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "company":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_company(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var projectImplementors = []string{"Project", "Node"}

func (ec *executionContext) _Project(ctx context.Context, sel ast.SelectionSet, obj *generated.Project) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Project")
		case "id":
			out.Values[i] = ec._Project_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdat":
			out.Values[i] = ec._Project_createdat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedat":
			out.Values[i] = ec._Project_updatedat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deletedat":
			out.Values[i] = ec._Project_deletedat(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Project_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "description":
			out.Values[i] = ec._Project_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "startdate":
			out.Values[i] = ec._Project_startdate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "enddate":
			out.Values[i] = ec._Project_enddate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "progress":
			out.Values[i] = ec._Project_progress(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			out.Values[i] = ec._Project_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "company":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Project_company(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdby":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Project_createdby(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "leader":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Project_leader(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "tasks":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Project_tasks(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "milestones":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Project_milestones(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var projectConnectionImplementors = []string{"ProjectConnection"}

func (ec *executionContext) _ProjectConnection(ctx context.Context, sel ast.SelectionSet, obj *generated.ProjectConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectConnection")
		case "edges":
			out.Values[i] = ec._ProjectConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._ProjectConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._ProjectConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var projectEdgeImplementors = []string{"ProjectEdge"}

func (ec *executionContext) _ProjectEdge(ctx context.Context, sel ast.SelectionSet, obj *generated.ProjectEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectEdge")
		case "node":
			out.Values[i] = ec._ProjectEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._ProjectEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var projectMilestoneImplementors = []string{"ProjectMilestone", "Node"}

func (ec *executionContext) _ProjectMilestone(ctx context.Context, sel ast.SelectionSet, obj *generated.ProjectMilestone) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectMilestoneImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectMilestone")
		case "id":
			out.Values[i] = ec._ProjectMilestone_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._ProjectMilestone_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "duedate":
			out.Values[i] = ec._ProjectMilestone_duedate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "project":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ProjectMilestone_project(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var projectTaskImplementors = []string{"ProjectTask", "Node"}

func (ec *executionContext) _ProjectTask(ctx context.Context, sel ast.SelectionSet, obj *generated.ProjectTask) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectTaskImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectTask")
		case "id":
			out.Values[i] = ec._ProjectTask_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdat":
			out.Values[i] = ec._ProjectTask_createdat(ctx, field, obj)
		case "name":
			out.Values[i] = ec._ProjectTask_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "assigneename":
			out.Values[i] = ec._ProjectTask_assigneename(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "location":
			out.Values[i] = ec._ProjectTask_location(ctx, field, obj)
		case "duedate":
			out.Values[i] = ec._ProjectTask_duedate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "startdate":
			out.Values[i] = ec._ProjectTask_startdate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "enddate":
			out.Values[i] = ec._ProjectTask_enddate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "description":
			out.Values[i] = ec._ProjectTask_description(ctx, field, obj)
		case "status":
			out.Values[i] = ec._ProjectTask_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "project":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ProjectTask_project(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "assignee":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ProjectTask_assignee(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "participants":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ProjectTask_participants(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdby":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ProjectTask_createdby(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "workshifts":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ProjectTask_workshifts(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var projectTaskConnectionImplementors = []string{"ProjectTaskConnection"}

func (ec *executionContext) _ProjectTaskConnection(ctx context.Context, sel ast.SelectionSet, obj *generated.ProjectTaskConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectTaskConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectTaskConnection")
		case "edges":
			out.Values[i] = ec._ProjectTaskConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._ProjectTaskConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._ProjectTaskConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var projectTaskEdgeImplementors = []string{"ProjectTaskEdge"}

func (ec *executionContext) _ProjectTaskEdge(ctx context.Context, sel ast.SelectionSet, obj *generated.ProjectTaskEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectTaskEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectTaskEdge")
		case "node":
			out.Values[i] = ec._ProjectTaskEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._ProjectTaskEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "node":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_node(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "nodes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_nodes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "accountingEntries":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_accountingEntries(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "companyDocuments":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_companyDocuments(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "files":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_files(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "payables":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_payables(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "projects":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_projects(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "projectTasks":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_projectTasks(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "receivables":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_receivables(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "tokens":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tokens(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "workshifts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_workshifts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "trialBalance":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_trialBalance(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "incomeStatement":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_incomeStatement(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "balanceSheet":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_balanceSheet(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "downloadLedger":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_downloadLedger(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "downloadTrialBalance":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_downloadTrialBalance(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "downloadIncomeStatement":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_downloadIncomeStatement(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "downloadBalanceSheet":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_downloadBalanceSheet(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "expensesBreakdown":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_expensesBreakdown(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "revenueTrend":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_revenueTrend(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "verifyPasswordResetToken":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_verifyPasswordResetToken(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "companies":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_companies(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "customers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_customers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "aggregateCustomers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_aggregateCustomers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "aggregateReceivables":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_aggregateReceivables(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "accountsReceivableAging":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_accountsReceivableAging(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "accountsPayableAging":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_accountsPayableAging(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "employees":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_employees(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "products":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_products(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "lowStock":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_lowStock(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "numberOfProducts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_numberOfProducts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "numberOfLowStock":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_numberOfLowStock(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "numberOfOutOfStock":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_numberOfOutOfStock(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "retrieveProject":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_retrieveProject(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "retrieveProjectTask":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_retrieveProjectTask(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "suppliers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_suppliers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "treasuries":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_treasuries(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "aggregateTreasury":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_aggregateTreasury(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "users":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_users(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "userRoles":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_userRoles(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "workShifts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_workShifts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "aggregateWorkShift":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_aggregateWorkShift(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "countDocuments":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_countDocuments(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var receivableImplementors = []string{"Receivable", "Node"}

func (ec *executionContext) _Receivable(ctx context.Context, sel ast.SelectionSet, obj *generated.Receivable) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, receivableImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Receivable")
		case "id":
			out.Values[i] = ec._Receivable_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdat":
			out.Values[i] = ec._Receivable_createdat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedat":
			out.Values[i] = ec._Receivable_updatedat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deletedat":
			out.Values[i] = ec._Receivable_deletedat(ctx, field, obj)
		case "entrygroup":
			out.Values[i] = ec._Receivable_entrygroup(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "date":
			out.Values[i] = ec._Receivable_date(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Receivable_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "outstandingbalance":
			out.Values[i] = ec._Receivable_outstandingbalance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "totaltransaction":
			out.Values[i] = ec._Receivable_totaltransaction(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "duedate":
			out.Values[i] = ec._Receivable_duedate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			out.Values[i] = ec._Receivable_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "company":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Receivable_company(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var receivableAggregationOutputImplementors = []string{"ReceivableAggregationOutput"}

func (ec *executionContext) _ReceivableAggregationOutput(ctx context.Context, sel ast.SelectionSet, obj *model.ReceivableAggregationOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, receivableAggregationOutputImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReceivableAggregationOutput")
		case "company":
			out.Values[i] = ec._ReceivableAggregationOutput_company(ctx, field, obj)
		case "count":
			out.Values[i] = ec._ReceivableAggregationOutput_count(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._ReceivableAggregationOutput_sum(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var receivableConnectionImplementors = []string{"ReceivableConnection"}

func (ec *executionContext) _ReceivableConnection(ctx context.Context, sel ast.SelectionSet, obj *generated.ReceivableConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, receivableConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReceivableConnection")
		case "edges":
			out.Values[i] = ec._ReceivableConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._ReceivableConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._ReceivableConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var receivableEdgeImplementors = []string{"ReceivableEdge"}

func (ec *executionContext) _ReceivableEdge(ctx context.Context, sel ast.SelectionSet, obj *generated.ReceivableEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, receivableEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReceivableEdge")
		case "node":
			out.Values[i] = ec._ReceivableEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._ReceivableEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var reportRowItemImplementors = []string{"ReportRowItem"}

func (ec *executionContext) _ReportRowItem(ctx context.Context, sel ast.SelectionSet, obj *model.ReportRowItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, reportRowItemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReportRowItem")
		case "account":
			out.Values[i] = ec._ReportRowItem_account(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "label":
			out.Values[i] = ec._ReportRowItem_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._ReportRowItem_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var revenueTrendOutputImplementors = []string{"RevenueTrendOutput"}

func (ec *executionContext) _RevenueTrendOutput(ctx context.Context, sel ast.SelectionSet, obj *model.RevenueTrendOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, revenueTrendOutputImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RevenueTrendOutput")
		case "date":
			out.Values[i] = ec._RevenueTrendOutput_date(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "amount":
			out.Values[i] = ec._RevenueTrendOutput_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var supplierImplementors = []string{"Supplier", "Node"}

func (ec *executionContext) _Supplier(ctx context.Context, sel ast.SelectionSet, obj *generated.Supplier) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, supplierImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Supplier")
		case "id":
			out.Values[i] = ec._Supplier_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdat":
			out.Values[i] = ec._Supplier_createdat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedat":
			out.Values[i] = ec._Supplier_updatedat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deletedat":
			out.Values[i] = ec._Supplier_deletedat(ctx, field, obj)
		case "address":
			out.Values[i] = ec._Supplier_address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "city":
			out.Values[i] = ec._Supplier_city(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "country":
			out.Values[i] = ec._Supplier_country(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "description":
			out.Values[i] = ec._Supplier_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "email":
			out.Values[i] = ec._Supplier_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "isdefault":
			out.Values[i] = ec._Supplier_isdefault(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Supplier_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "phone":
			out.Values[i] = ec._Supplier_phone(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "taxid":
			out.Values[i] = ec._Supplier_taxid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "company":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Supplier_company(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "payables":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Supplier_payables(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tokenImplementors = []string{"Token", "Node"}

func (ec *executionContext) _Token(ctx context.Context, sel ast.SelectionSet, obj *generated.Token) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tokenImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Token")
		case "id":
			out.Values[i] = ec._Token_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "expiry":
			out.Values[i] = ec._Token_expiry(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "category":
			out.Values[i] = ec._Token_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "token":
			out.Values[i] = ec._Token_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "company":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Token_company(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "user":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Token_user(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var treasuryImplementors = []string{"Treasury", "Node"}

func (ec *executionContext) _Treasury(ctx context.Context, sel ast.SelectionSet, obj *generated.Treasury) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, treasuryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Treasury")
		case "id":
			out.Values[i] = ec._Treasury_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdat":
			out.Values[i] = ec._Treasury_createdat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedat":
			out.Values[i] = ec._Treasury_updatedat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deletedat":
			out.Values[i] = ec._Treasury_deletedat(ctx, field, obj)
		case "balance":
			out.Values[i] = ec._Treasury_balance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "company":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Treasury_company(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var treasuryAggregatePayloadImplementors = []string{"TreasuryAggregatePayload"}

func (ec *executionContext) _TreasuryAggregatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TreasuryAggregatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, treasuryAggregatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TreasuryAggregatePayload")
		case "companyID":
			out.Values[i] = ec._TreasuryAggregatePayload_companyID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "count":
			out.Values[i] = ec._TreasuryAggregatePayload_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalBalance":
			out.Values[i] = ec._TreasuryAggregatePayload_totalBalance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var trialBalanceRowItemImplementors = []string{"TrialBalanceRowItem"}

func (ec *executionContext) _TrialBalanceRowItem(ctx context.Context, sel ast.SelectionSet, obj *model.TrialBalanceRowItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trialBalanceRowItemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrialBalanceRowItem")
		case "account":
			out.Values[i] = ec._TrialBalanceRowItem_account(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "label":
			out.Values[i] = ec._TrialBalanceRowItem_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "debit":
			out.Values[i] = ec._TrialBalanceRowItem_debit(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "credit":
			out.Values[i] = ec._TrialBalanceRowItem_credit(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "balance":
			out.Values[i] = ec._TrialBalanceRowItem_balance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userImplementors = []string{"User", "Node"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *generated.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			out.Values[i] = ec._User_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdat":
			out.Values[i] = ec._User_createdat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedat":
			out.Values[i] = ec._User_updatedat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deletedat":
			out.Values[i] = ec._User_deletedat(ctx, field, obj)
		case "email":
			out.Values[i] = ec._User_email(ctx, field, obj)
		case "name":
			out.Values[i] = ec._User_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "phone":
			out.Values[i] = ec._User_phone(ctx, field, obj)
		case "birthdate":
			out.Values[i] = ec._User_birthdate(ctx, field, obj)
		case "gender":
			out.Values[i] = ec._User_gender(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "disabled":
			out.Values[i] = ec._User_disabled(ctx, field, obj)
		case "notverified":
			out.Values[i] = ec._User_notverified(ctx, field, obj)
		case "accountingentries":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_accountingentries(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "company":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_company(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "assignedroles":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_assignedroles(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "subordinates":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_subordinates(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "leader":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_leader(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "employee":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_employee(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdprojects":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_createdprojects(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "leaderedprojects":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_leaderedprojects(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "assignedprojecttasks":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_assignedprojecttasks(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "participatedprojecttasks":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_participatedprojecttasks(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdtasks":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_createdtasks(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "tokens":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_tokens(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "approvedworkshifts":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_approvedworkshifts(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "workshifts":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_workshifts(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "uploadeddocuments":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_uploadeddocuments(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "approveddocuments":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_approveddocuments(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userRoleImplementors = []string{"UserRole", "Node"}

func (ec *executionContext) _UserRole(ctx context.Context, sel ast.SelectionSet, obj *generated.UserRole) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userRoleImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserRole")
		case "id":
			out.Values[i] = ec._UserRole_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "role":
			out.Values[i] = ec._UserRole_role(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "company":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserRole_company(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "user":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserRole_user(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var workShiftAggregationPayloadImplementors = []string{"WorkShiftAggregationPayload"}

func (ec *executionContext) _WorkShiftAggregationPayload(ctx context.Context, sel ast.SelectionSet, obj *model.WorkShiftAggregationPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, workShiftAggregationPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("WorkShiftAggregationPayload")
		case "date":
			out.Values[i] = ec._WorkShiftAggregationPayload_date(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "count":
			out.Values[i] = ec._WorkShiftAggregationPayload_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "durationInMinutes":
			out.Values[i] = ec._WorkShiftAggregationPayload_durationInMinutes(ctx, field, obj)
		case "pendingCount":
			out.Values[i] = ec._WorkShiftAggregationPayload_pendingCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var workshiftImplementors = []string{"Workshift", "Node"}

func (ec *executionContext) _Workshift(ctx context.Context, sel ast.SelectionSet, obj *generated.Workshift) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, workshiftImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Workshift")
		case "id":
			out.Values[i] = ec._Workshift_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdat":
			out.Values[i] = ec._Workshift_createdat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedat":
			out.Values[i] = ec._Workshift_updatedat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deletedat":
			out.Values[i] = ec._Workshift_deletedat(ctx, field, obj)
		case "approvedat":
			out.Values[i] = ec._Workshift_approvedat(ctx, field, obj)
		case "clockin":
			out.Values[i] = ec._Workshift_clockin(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "clockout":
			out.Values[i] = ec._Workshift_clockout(ctx, field, obj)
		case "clockinlocation":
			out.Values[i] = ec._Workshift_clockinlocation(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "clockoutlocation":
			out.Values[i] = ec._Workshift_clockoutlocation(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Workshift_description(ctx, field, obj)
		case "note":
			out.Values[i] = ec._Workshift_note(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Workshift_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "company":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Workshift_company(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "user":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Workshift_user(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "approvedby":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Workshift_approvedby(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "task":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Workshift_task(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "editrequest":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Workshift_editrequest(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "workshift":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Workshift_workshift(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNAccountType2mazzaᚋentᚋgeneratedᚋaccountingentryᚐAccountType(ctx context.Context, v interface{}) (accountingentry.AccountType, error) {
	var res accountingentry.AccountType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAccountType2mazzaᚋentᚋgeneratedᚋaccountingentryᚐAccountType(ctx context.Context, sel ast.SelectionSet, v accountingentry.AccountType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNAccountingEntry2ᚖmazzaᚋentᚋgeneratedᚐAccountingEntry(ctx context.Context, sel ast.SelectionSet, v *generated.AccountingEntry) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AccountingEntry(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAccountingEntryAccountType2mazzaᚋentᚋgeneratedᚋaccountingentryᚐAccountType(ctx context.Context, v interface{}) (accountingentry.AccountType, error) {
	var res accountingentry.AccountType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAccountingEntryAccountType2mazzaᚋentᚋgeneratedᚋaccountingentryᚐAccountType(ctx context.Context, sel ast.SelectionSet, v accountingentry.AccountType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNAccountingEntryConnection2mazzaᚋentᚋgeneratedᚐAccountingEntryConnection(ctx context.Context, sel ast.SelectionSet, v generated.AccountingEntryConnection) graphql.Marshaler {
	return ec._AccountingEntryConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNAccountingEntryConnection2ᚖmazzaᚋentᚋgeneratedᚐAccountingEntryConnection(ctx context.Context, sel ast.SelectionSet, v *generated.AccountingEntryConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AccountingEntryConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAccountingEntryOrder2ᚖmazzaᚋentᚋgeneratedᚐAccountingEntryOrder(ctx context.Context, v interface{}) (*generated.AccountingEntryOrder, error) {
	res, err := ec.unmarshalInputAccountingEntryOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAccountingEntryOrderField2ᚖmazzaᚋentᚋgeneratedᚐAccountingEntryOrderField(ctx context.Context, v interface{}) (*generated.AccountingEntryOrderField, error) {
	var res = new(generated.AccountingEntryOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAccountingEntryOrderField2ᚖmazzaᚋentᚋgeneratedᚐAccountingEntryOrderField(ctx context.Context, sel ast.SelectionSet, v *generated.AccountingEntryOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNAccountingEntryWhereInput2ᚖmazzaᚋentᚋgeneratedᚐAccountingEntryWhereInput(ctx context.Context, v interface{}) (*generated.AccountingEntryWhereInput, error) {
	res, err := ec.unmarshalInputAccountingEntryWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAgingBucket2ᚕᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐAgingBucketᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.AgingBucket) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAgingBucket2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐAgingBucket(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAgingBucket2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐAgingBucket(ctx context.Context, sel ast.SelectionSet, v *model.AgingBucket) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AgingBucket(ctx, sel, v)
}

func (ec *executionContext) marshalNAssets2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐAssets(ctx context.Context, sel ast.SelectionSet, v *model.Assets) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Assets(ctx, sel, v)
}

func (ec *executionContext) marshalNBalanceSheetOuput2mazzaᚋmazzaᚋgeneratedᚋmodelᚐBalanceSheetOuput(ctx context.Context, sel ast.SelectionSet, v model.BalanceSheetOuput) graphql.Marshaler {
	return ec._BalanceSheetOuput(ctx, sel, &v)
}

func (ec *executionContext) marshalNBalanceSheetOuput2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐBalanceSheetOuput(ctx context.Context, sel ast.SelectionSet, v *model.BalanceSheetOuput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._BalanceSheetOuput(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBaseEntryRegistrationInput2mazzaᚋmazzaᚋgeneratedᚋmodelᚐBaseEntryRegistrationInput(ctx context.Context, v interface{}) (model.BaseEntryRegistrationInput, error) {
	res, err := ec.unmarshalInputBaseEntryRegistrationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBaseEntryRegistrationInput2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐBaseEntryRegistrationInput(ctx context.Context, v interface{}) (*model.BaseEntryRegistrationInput, error) {
	res, err := ec.unmarshalInputBaseEntryRegistrationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBaseOperationType2mazzaᚋmazzaᚋgeneratedᚋmodelᚐBaseOperationType(ctx context.Context, v interface{}) (model.BaseOperationType, error) {
	var res model.BaseOperationType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBaseOperationType2mazzaᚋmazzaᚋgeneratedᚋmodelᚐBaseOperationType(ctx context.Context, sel ast.SelectionSet, v model.BaseOperationType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNCompany2mazzaᚋentᚋgeneratedᚐCompany(ctx context.Context, sel ast.SelectionSet, v generated.Company) graphql.Marshaler {
	return ec._Company(ctx, sel, &v)
}

func (ec *executionContext) marshalNCompany2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyᚄ(ctx context.Context, sel ast.SelectionSet, v []*generated.Company) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCompany2ᚖmazzaᚋentᚋgeneratedᚐCompany(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCompany2ᚖmazzaᚋentᚋgeneratedᚐCompany(ctx context.Context, sel ast.SelectionSet, v *generated.Company) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Company(ctx, sel, v)
}

func (ec *executionContext) marshalNCompanyDocument2mazzaᚋentᚋgeneratedᚐCompanyDocument(ctx context.Context, sel ast.SelectionSet, v generated.CompanyDocument) graphql.Marshaler {
	return ec._CompanyDocument(ctx, sel, &v)
}

func (ec *executionContext) marshalNCompanyDocument2ᚖmazzaᚋentᚋgeneratedᚐCompanyDocument(ctx context.Context, sel ast.SelectionSet, v *generated.CompanyDocument) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CompanyDocument(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCompanyDocumentCategory2mazzaᚋentᚋgeneratedᚋcompanydocumentᚐCategory(ctx context.Context, v interface{}) (companydocument.Category, error) {
	var res companydocument.Category
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCompanyDocumentCategory2mazzaᚋentᚋgeneratedᚋcompanydocumentᚐCategory(ctx context.Context, sel ast.SelectionSet, v companydocument.Category) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNCompanyDocumentConnection2mazzaᚋentᚋgeneratedᚐCompanyDocumentConnection(ctx context.Context, sel ast.SelectionSet, v generated.CompanyDocumentConnection) graphql.Marshaler {
	return ec._CompanyDocumentConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNCompanyDocumentConnection2ᚖmazzaᚋentᚋgeneratedᚐCompanyDocumentConnection(ctx context.Context, sel ast.SelectionSet, v *generated.CompanyDocumentConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CompanyDocumentConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCompanyDocumentOrder2ᚖmazzaᚋentᚋgeneratedᚐCompanyDocumentOrder(ctx context.Context, v interface{}) (*generated.CompanyDocumentOrder, error) {
	res, err := ec.unmarshalInputCompanyDocumentOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCompanyDocumentOrderField2ᚖmazzaᚋentᚋgeneratedᚐCompanyDocumentOrderField(ctx context.Context, v interface{}) (*generated.CompanyDocumentOrderField, error) {
	var res = new(generated.CompanyDocumentOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCompanyDocumentOrderField2ᚖmazzaᚋentᚋgeneratedᚐCompanyDocumentOrderField(ctx context.Context, sel ast.SelectionSet, v *generated.CompanyDocumentOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNCompanyDocumentStatus2mazzaᚋentᚋgeneratedᚋcompanydocumentᚐStatus(ctx context.Context, v interface{}) (companydocument.Status, error) {
	var res companydocument.Status
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCompanyDocumentStatus2mazzaᚋentᚋgeneratedᚋcompanydocumentᚐStatus(ctx context.Context, sel ast.SelectionSet, v companydocument.Status) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCompanyDocumentWhereInput2ᚖmazzaᚋentᚋgeneratedᚐCompanyDocumentWhereInput(ctx context.Context, v interface{}) (*generated.CompanyDocumentWhereInput, error) {
	res, err := ec.unmarshalInputCompanyDocumentWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCompanyInfoInput2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐCompanyInfoInput(ctx context.Context, v interface{}) (*model.CompanyInfoInput, error) {
	res, err := ec.unmarshalInputCompanyInfoInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCompanyOrderField2ᚖmazzaᚋentᚋgeneratedᚐCompanyOrderField(ctx context.Context, v interface{}) (*generated.CompanyOrderField, error) {
	var res = new(generated.CompanyOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCompanyOrderField2ᚖmazzaᚋentᚋgeneratedᚐCompanyOrderField(ctx context.Context, sel ast.SelectionSet, v *generated.CompanyOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNCompanyWhereInput2ᚖmazzaᚋentᚋgeneratedᚐCompanyWhereInput(ctx context.Context, v interface{}) (*generated.CompanyWhereInput, error) {
	res, err := ec.unmarshalInputCompanyWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateCompanyDocumentInput2mazzaᚋentᚋgeneratedᚐCreateCompanyDocumentInput(ctx context.Context, v interface{}) (generated.CreateCompanyDocumentInput, error) {
	res, err := ec.unmarshalInputCreateCompanyDocumentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateCompanyInput2ᚖmazzaᚋentᚋgeneratedᚐCreateCompanyInput(ctx context.Context, v interface{}) (*generated.CreateCompanyInput, error) {
	res, err := ec.unmarshalInputCreateCompanyInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateCustomerInput2mazzaᚋentᚋgeneratedᚐCreateCustomerInput(ctx context.Context, v interface{}) (generated.CreateCustomerInput, error) {
	res, err := ec.unmarshalInputCreateCustomerInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateEmployeeInput2mazzaᚋentᚋgeneratedᚐCreateEmployeeInput(ctx context.Context, v interface{}) (generated.CreateEmployeeInput, error) {
	res, err := ec.unmarshalInputCreateEmployeeInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateProductInput2mazzaᚋentᚋgeneratedᚐCreateProductInput(ctx context.Context, v interface{}) (generated.CreateProductInput, error) {
	res, err := ec.unmarshalInputCreateProductInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateProjectInput2mazzaᚋentᚋgeneratedᚐCreateProjectInput(ctx context.Context, v interface{}) (generated.CreateProjectInput, error) {
	res, err := ec.unmarshalInputCreateProjectInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateProjectMilestoneInput2mazzaᚋentᚋgeneratedᚐCreateProjectMilestoneInput(ctx context.Context, v interface{}) (generated.CreateProjectMilestoneInput, error) {
	res, err := ec.unmarshalInputCreateProjectMilestoneInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateProjectTaskInput2mazzaᚋentᚋgeneratedᚐCreateProjectTaskInput(ctx context.Context, v interface{}) (generated.CreateProjectTaskInput, error) {
	res, err := ec.unmarshalInputCreateProjectTaskInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateSupplierInput2mazzaᚋentᚋgeneratedᚐCreateSupplierInput(ctx context.Context, v interface{}) (generated.CreateSupplierInput, error) {
	res, err := ec.unmarshalInputCreateSupplierInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateTreasuryInput2mazzaᚋentᚋgeneratedᚐCreateTreasuryInput(ctx context.Context, v interface{}) (generated.CreateTreasuryInput, error) {
	res, err := ec.unmarshalInputCreateTreasuryInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateUserInput2mazzaᚋentᚋgeneratedᚐCreateUserInput(ctx context.Context, v interface{}) (generated.CreateUserInput, error) {
	res, err := ec.unmarshalInputCreateUserInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateUserInput2ᚖmazzaᚋentᚋgeneratedᚐCreateUserInput(ctx context.Context, v interface{}) (*generated.CreateUserInput, error) {
	res, err := ec.unmarshalInputCreateUserInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateUserRoleInput2mazzaᚋentᚋgeneratedᚐCreateUserRoleInput(ctx context.Context, v interface{}) (generated.CreateUserRoleInput, error) {
	res, err := ec.unmarshalInputCreateUserRoleInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateWorkshiftInput2mazzaᚋentᚋgeneratedᚐCreateWorkshiftInput(ctx context.Context, v interface{}) (generated.CreateWorkshiftInput, error) {
	res, err := ec.unmarshalInputCreateWorkshiftInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx context.Context, v interface{}) (entgql.Cursor[int], error) {
	var res entgql.Cursor[int]
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx context.Context, sel ast.SelectionSet, v entgql.Cursor[int]) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNCustomer2mazzaᚋentᚋgeneratedᚐCustomer(ctx context.Context, sel ast.SelectionSet, v generated.Customer) graphql.Marshaler {
	return ec._Customer(ctx, sel, &v)
}

func (ec *executionContext) marshalNCustomer2ᚕᚖmazzaᚋentᚋgeneratedᚐCustomerᚄ(ctx context.Context, sel ast.SelectionSet, v []*generated.Customer) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCustomer2ᚖmazzaᚋentᚋgeneratedᚐCustomer(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCustomer2ᚖmazzaᚋentᚋgeneratedᚐCustomer(ctx context.Context, sel ast.SelectionSet, v *generated.Customer) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Customer(ctx, sel, v)
}

func (ec *executionContext) marshalNCustomerAggregationOutput2ᚕᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐCustomerAggregationOutputᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CustomerAggregationOutput) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCustomerAggregationOutput2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐCustomerAggregationOutput(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCustomerAggregationOutput2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐCustomerAggregationOutput(ctx context.Context, sel ast.SelectionSet, v *model.CustomerAggregationOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CustomerAggregationOutput(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCustomerOrderField2ᚖmazzaᚋentᚋgeneratedᚐCustomerOrderField(ctx context.Context, v interface{}) (*generated.CustomerOrderField, error) {
	var res = new(generated.CustomerOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCustomerOrderField2ᚖmazzaᚋentᚋgeneratedᚐCustomerOrderField(ctx context.Context, sel ast.SelectionSet, v *generated.CustomerOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNCustomerWhereInput2ᚖmazzaᚋentᚋgeneratedᚐCustomerWhereInput(ctx context.Context, v interface{}) (*generated.CustomerWhereInput, error) {
	res, err := ec.unmarshalInputCustomerWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCustomersGroupBy2mazzaᚋmazzaᚋgeneratedᚋmodelᚐCustomersGroupBy(ctx context.Context, v interface{}) (model.CustomersGroupBy, error) {
	var res model.CustomersGroupBy
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCustomersGroupBy2mazzaᚋmazzaᚋgeneratedᚋmodelᚐCustomersGroupBy(ctx context.Context, sel ast.SelectionSet, v model.CustomersGroupBy) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNDocumentCount2ᚕᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐDocumentCountᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.DocumentCount) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDocumentCount2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐDocumentCount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDocumentCount2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐDocumentCount(ctx context.Context, sel ast.SelectionSet, v *model.DocumentCount) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DocumentCount(ctx, sel, v)
}

func (ec *executionContext) marshalNEmployee2mazzaᚋentᚋgeneratedᚐEmployee(ctx context.Context, sel ast.SelectionSet, v generated.Employee) graphql.Marshaler {
	return ec._Employee(ctx, sel, &v)
}

func (ec *executionContext) marshalNEmployee2ᚕᚖmazzaᚋentᚋgeneratedᚐEmployeeᚄ(ctx context.Context, sel ast.SelectionSet, v []*generated.Employee) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEmployee2ᚖmazzaᚋentᚋgeneratedᚐEmployee(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNEmployee2ᚖmazzaᚋentᚋgeneratedᚐEmployee(ctx context.Context, sel ast.SelectionSet, v *generated.Employee) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Employee(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEmployeeGender2mazzaᚋentᚋgeneratedᚋemployeeᚐGender(ctx context.Context, v interface{}) (employee.Gender, error) {
	var res employee.Gender
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEmployeeGender2mazzaᚋentᚋgeneratedᚋemployeeᚐGender(ctx context.Context, sel ast.SelectionSet, v employee.Gender) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNEmployeeOrderField2ᚖmazzaᚋentᚋgeneratedᚐEmployeeOrderField(ctx context.Context, v interface{}) (*generated.EmployeeOrderField, error) {
	var res = new(generated.EmployeeOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEmployeeOrderField2ᚖmazzaᚋentᚋgeneratedᚐEmployeeOrderField(ctx context.Context, sel ast.SelectionSet, v *generated.EmployeeOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNEmployeeWhereInput2ᚖmazzaᚋentᚋgeneratedᚐEmployeeWhereInput(ctx context.Context, v interface{}) (*generated.EmployeeWhereInput, error) {
	res, err := ec.unmarshalInputEmployeeWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEntryItem2ᚕᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐEntryItemᚄ(ctx context.Context, v interface{}) ([]*model.EntryItem, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.EntryItem, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEntryItem2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐEntryItem(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNEntryItem2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐEntryItem(ctx context.Context, v interface{}) (*model.EntryItem, error) {
	res, err := ec.unmarshalInputEntryItem(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEquity2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐEquity(ctx context.Context, sel ast.SelectionSet, v *model.Equity) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Equity(ctx, sel, v)
}

func (ec *executionContext) marshalNExpensesBreakdownOutput2ᚕᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐExpensesBreakdownOutputᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ExpensesBreakdownOutput) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNExpensesBreakdownOutput2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐExpensesBreakdownOutput(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNExpensesBreakdownOutput2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐExpensesBreakdownOutput(ctx context.Context, sel ast.SelectionSet, v *model.ExpensesBreakdownOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ExpensesBreakdownOutput(ctx, sel, v)
}

func (ec *executionContext) marshalNFile2ᚖmazzaᚋentᚋgeneratedᚐFile(ctx context.Context, sel ast.SelectionSet, v *generated.File) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._File(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFileCategory2mazzaᚋentᚋgeneratedᚋfileᚐCategory(ctx context.Context, v interface{}) (file.Category, error) {
	var res file.Category
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFileCategory2mazzaᚋentᚋgeneratedᚋfileᚐCategory(ctx context.Context, sel ast.SelectionSet, v file.Category) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNFileConnection2mazzaᚋentᚋgeneratedᚐFileConnection(ctx context.Context, sel ast.SelectionSet, v generated.FileConnection) graphql.Marshaler {
	return ec._FileConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNFileConnection2ᚖmazzaᚋentᚋgeneratedᚐFileConnection(ctx context.Context, sel ast.SelectionSet, v *generated.FileConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._FileConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNFileDetailsOutput2mazzaᚋmazzaᚋgeneratedᚋmodelᚐFileDetailsOutput(ctx context.Context, sel ast.SelectionSet, v model.FileDetailsOutput) graphql.Marshaler {
	return ec._FileDetailsOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNFileDetailsOutput2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐFileDetailsOutput(ctx context.Context, sel ast.SelectionSet, v *model.FileDetailsOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._FileDetailsOutput(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFileOrderField2ᚖmazzaᚋentᚋgeneratedᚐFileOrderField(ctx context.Context, v interface{}) (*generated.FileOrderField, error) {
	var res = new(generated.FileOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFileOrderField2ᚖmazzaᚋentᚋgeneratedᚐFileOrderField(ctx context.Context, sel ast.SelectionSet, v *generated.FileOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNFileWhereInput2ᚖmazzaᚋentᚋgeneratedᚐFileWhereInput(ctx context.Context, v interface{}) (*generated.FileWhereInput, error) {
	res, err := ec.unmarshalInputFileWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloatContext(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalNID2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalIntID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalIntID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2int(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNIncomeStatementOuput2mazzaᚋmazzaᚋgeneratedᚋmodelᚐIncomeStatementOuput(ctx context.Context, sel ast.SelectionSet, v model.IncomeStatementOuput) graphql.Marshaler {
	return ec._IncomeStatementOuput(ctx, sel, &v)
}

func (ec *executionContext) marshalNIncomeStatementOuput2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐIncomeStatementOuput(ctx context.Context, sel ast.SelectionSet, v *model.IncomeStatementOuput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._IncomeStatementOuput(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInitialSetupInput2mazzaᚋmazzaᚋgeneratedᚋmodelᚐInitialSetupInput(ctx context.Context, v interface{}) (model.InitialSetupInput, error) {
	res, err := ec.unmarshalInputInitialSetupInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int32(ctx context.Context, v interface{}) (int32, error) {
	res, err := graphql.UnmarshalInt32(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int32(ctx context.Context, sel ast.SelectionSet, v int32) graphql.Marshaler {
	res := graphql.MarshalInt32(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInvoice2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐInvoice(ctx context.Context, v interface{}) (*model.Invoice, error) {
	res, err := ec.unmarshalInputInvoice(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInvoiceCustomer2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐInvoiceCustomer(ctx context.Context, v interface{}) (*model.InvoiceCustomer, error) {
	res, err := ec.unmarshalInputInvoiceCustomer(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInvoiceInput2mazzaᚋmazzaᚋgeneratedᚋmodelᚐInvoiceInput(ctx context.Context, v interface{}) (model.InvoiceInput, error) {
	res, err := ec.unmarshalInputInvoiceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInvoiceIssuanceOutput2mazzaᚋmazzaᚋgeneratedᚋmodelᚐInvoiceIssuanceOutput(ctx context.Context, sel ast.SelectionSet, v model.InvoiceIssuanceOutput) graphql.Marshaler {
	return ec._InvoiceIssuanceOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNInvoiceIssuanceOutput2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐInvoiceIssuanceOutput(ctx context.Context, sel ast.SelectionSet, v *model.InvoiceIssuanceOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._InvoiceIssuanceOutput(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInvoiceIssuer2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐInvoiceIssuer(ctx context.Context, v interface{}) (*model.InvoiceIssuer, error) {
	res, err := ec.unmarshalInputInvoiceIssuer(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInvoiceTotals2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐInvoiceTotals(ctx context.Context, v interface{}) (*model.InvoiceTotals, error) {
	res, err := ec.unmarshalInputInvoiceTotals(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLedgerDownloadInput2mazzaᚋmazzaᚋgeneratedᚋmodelᚐLedgerDownloadInput(ctx context.Context, v interface{}) (model.LedgerDownloadInput, error) {
	res, err := ec.unmarshalInputLedgerDownloadInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLiabilities2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐLiabilities(ctx context.Context, sel ast.SelectionSet, v *model.Liabilities) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Liabilities(ctx, sel, v)
}

func (ec *executionContext) marshalNLoginOutput2mazzaᚋmazzaᚋgeneratedᚋmodelᚐLoginOutput(ctx context.Context, sel ast.SelectionSet, v model.LoginOutput) graphql.Marshaler {
	return ec._LoginOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNLoginOutput2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐLoginOutput(ctx context.Context, sel ast.SelectionSet, v *model.LoginOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LoginOutput(ctx, sel, v)
}

func (ec *executionContext) marshalNNode2ᚕmazzaᚋentᚋgeneratedᚐNoder(ctx context.Context, sel ast.SelectionSet, v []generated.Noder) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalONode2mazzaᚋentᚋgeneratedᚐNoder(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx context.Context, v interface{}) (entgql.OrderDirection, error) {
	var res entgql.OrderDirection
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx context.Context, sel ast.SelectionSet, v entgql.OrderDirection) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v entgql.PageInfo[int]) graphql.Marshaler {
	return ec._PageInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNPayable2ᚖmazzaᚋentᚋgeneratedᚐPayable(ctx context.Context, sel ast.SelectionSet, v *generated.Payable) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Payable(ctx, sel, v)
}

func (ec *executionContext) marshalNPayableConnection2mazzaᚋentᚋgeneratedᚐPayableConnection(ctx context.Context, sel ast.SelectionSet, v generated.PayableConnection) graphql.Marshaler {
	return ec._PayableConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNPayableConnection2ᚖmazzaᚋentᚋgeneratedᚐPayableConnection(ctx context.Context, sel ast.SelectionSet, v *generated.PayableConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PayableConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPayableOrder2ᚖmazzaᚋentᚋgeneratedᚐPayableOrder(ctx context.Context, v interface{}) (*generated.PayableOrder, error) {
	res, err := ec.unmarshalInputPayableOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPayableOrderField2ᚖmazzaᚋentᚋgeneratedᚐPayableOrderField(ctx context.Context, v interface{}) (*generated.PayableOrderField, error) {
	var res = new(generated.PayableOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPayableOrderField2ᚖmazzaᚋentᚋgeneratedᚐPayableOrderField(ctx context.Context, sel ast.SelectionSet, v *generated.PayableOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNPayableStatus2mazzaᚋentᚋgeneratedᚋpayableᚐStatus(ctx context.Context, v interface{}) (payable.Status, error) {
	var res payable.Status
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPayableStatus2mazzaᚋentᚋgeneratedᚋpayableᚐStatus(ctx context.Context, sel ast.SelectionSet, v payable.Status) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPayableWhereInput2ᚖmazzaᚋentᚋgeneratedᚐPayableWhereInput(ctx context.Context, v interface{}) (*generated.PayableWhereInput, error) {
	res, err := ec.unmarshalInputPayableWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPaymentDetails2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐPaymentDetails(ctx context.Context, v interface{}) (*model.PaymentDetails, error) {
	res, err := ec.unmarshalInputPaymentDetails(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPeriod2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐPeriod(ctx context.Context, sel ast.SelectionSet, v *model.Period) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Period(ctx, sel, v)
}

func (ec *executionContext) marshalNProduct2mazzaᚋentᚋgeneratedᚐProduct(ctx context.Context, sel ast.SelectionSet, v generated.Product) graphql.Marshaler {
	return ec._Product(ctx, sel, &v)
}

func (ec *executionContext) marshalNProduct2ᚕᚖmazzaᚋentᚋgeneratedᚐProductᚄ(ctx context.Context, sel ast.SelectionSet, v []*generated.Product) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProduct2ᚖmazzaᚋentᚋgeneratedᚐProduct(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNProduct2ᚖmazzaᚋentᚋgeneratedᚐProduct(ctx context.Context, sel ast.SelectionSet, v *generated.Product) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Product(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProductOrderField2ᚖmazzaᚋentᚋgeneratedᚐProductOrderField(ctx context.Context, v interface{}) (*generated.ProductOrderField, error) {
	var res = new(generated.ProductOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProductOrderField2ᚖmazzaᚋentᚋgeneratedᚐProductOrderField(ctx context.Context, sel ast.SelectionSet, v *generated.ProductOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNProductWhereInput2ᚖmazzaᚋentᚋgeneratedᚐProductWhereInput(ctx context.Context, v interface{}) (*generated.ProductWhereInput, error) {
	res, err := ec.unmarshalInputProductWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProject2mazzaᚋentᚋgeneratedᚐProject(ctx context.Context, sel ast.SelectionSet, v generated.Project) graphql.Marshaler {
	return ec._Project(ctx, sel, &v)
}

func (ec *executionContext) marshalNProject2ᚖmazzaᚋentᚋgeneratedᚐProject(ctx context.Context, sel ast.SelectionSet, v *generated.Project) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Project(ctx, sel, v)
}

func (ec *executionContext) marshalNProjectConnection2mazzaᚋentᚋgeneratedᚐProjectConnection(ctx context.Context, sel ast.SelectionSet, v generated.ProjectConnection) graphql.Marshaler {
	return ec._ProjectConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNProjectConnection2ᚖmazzaᚋentᚋgeneratedᚐProjectConnection(ctx context.Context, sel ast.SelectionSet, v *generated.ProjectConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProjectConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNProjectMilestone2mazzaᚋentᚋgeneratedᚐProjectMilestone(ctx context.Context, sel ast.SelectionSet, v generated.ProjectMilestone) graphql.Marshaler {
	return ec._ProjectMilestone(ctx, sel, &v)
}

func (ec *executionContext) marshalNProjectMilestone2ᚖmazzaᚋentᚋgeneratedᚐProjectMilestone(ctx context.Context, sel ast.SelectionSet, v *generated.ProjectMilestone) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProjectMilestone(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProjectMilestoneWhereInput2ᚖmazzaᚋentᚋgeneratedᚐProjectMilestoneWhereInput(ctx context.Context, v interface{}) (*generated.ProjectMilestoneWhereInput, error) {
	res, err := ec.unmarshalInputProjectMilestoneWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNProjectOrder2ᚖmazzaᚋentᚋgeneratedᚐProjectOrder(ctx context.Context, v interface{}) (*generated.ProjectOrder, error) {
	res, err := ec.unmarshalInputProjectOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNProjectOrderField2ᚖmazzaᚋentᚋgeneratedᚐProjectOrderField(ctx context.Context, v interface{}) (*generated.ProjectOrderField, error) {
	var res = new(generated.ProjectOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProjectOrderField2ᚖmazzaᚋentᚋgeneratedᚐProjectOrderField(ctx context.Context, sel ast.SelectionSet, v *generated.ProjectOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNProjectStatus2mazzaᚋentᚋgeneratedᚋprojectᚐStatus(ctx context.Context, v interface{}) (project.Status, error) {
	var res project.Status
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProjectStatus2mazzaᚋentᚋgeneratedᚋprojectᚐStatus(ctx context.Context, sel ast.SelectionSet, v project.Status) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNProjectTask2mazzaᚋentᚋgeneratedᚐProjectTask(ctx context.Context, sel ast.SelectionSet, v generated.ProjectTask) graphql.Marshaler {
	return ec._ProjectTask(ctx, sel, &v)
}

func (ec *executionContext) marshalNProjectTask2ᚖmazzaᚋentᚋgeneratedᚐProjectTask(ctx context.Context, sel ast.SelectionSet, v *generated.ProjectTask) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProjectTask(ctx, sel, v)
}

func (ec *executionContext) marshalNProjectTaskConnection2mazzaᚋentᚋgeneratedᚐProjectTaskConnection(ctx context.Context, sel ast.SelectionSet, v generated.ProjectTaskConnection) graphql.Marshaler {
	return ec._ProjectTaskConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNProjectTaskConnection2ᚖmazzaᚋentᚋgeneratedᚐProjectTaskConnection(ctx context.Context, sel ast.SelectionSet, v *generated.ProjectTaskConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProjectTaskConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProjectTaskOrder2ᚖmazzaᚋentᚋgeneratedᚐProjectTaskOrder(ctx context.Context, v interface{}) (*generated.ProjectTaskOrder, error) {
	res, err := ec.unmarshalInputProjectTaskOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNProjectTaskOrderField2ᚖmazzaᚋentᚋgeneratedᚐProjectTaskOrderField(ctx context.Context, v interface{}) (*generated.ProjectTaskOrderField, error) {
	var res = new(generated.ProjectTaskOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProjectTaskOrderField2ᚖmazzaᚋentᚋgeneratedᚐProjectTaskOrderField(ctx context.Context, sel ast.SelectionSet, v *generated.ProjectTaskOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNProjectTaskStatus2mazzaᚋentᚋgeneratedᚋprojecttaskᚐStatus(ctx context.Context, v interface{}) (projecttask.Status, error) {
	var res projecttask.Status
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProjectTaskStatus2mazzaᚋentᚋgeneratedᚋprojecttaskᚐStatus(ctx context.Context, sel ast.SelectionSet, v projecttask.Status) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNProjectTaskWhereInput2ᚖmazzaᚋentᚋgeneratedᚐProjectTaskWhereInput(ctx context.Context, v interface{}) (*generated.ProjectTaskWhereInput, error) {
	res, err := ec.unmarshalInputProjectTaskWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNProjectWhereInput2ᚖmazzaᚋentᚋgeneratedᚐProjectWhereInput(ctx context.Context, v interface{}) (*generated.ProjectWhereInput, error) {
	res, err := ec.unmarshalInputProjectWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNReceivable2ᚖmazzaᚋentᚋgeneratedᚐReceivable(ctx context.Context, sel ast.SelectionSet, v *generated.Receivable) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Receivable(ctx, sel, v)
}

func (ec *executionContext) marshalNReceivableAggregationOutput2ᚕᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐReceivableAggregationOutputᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ReceivableAggregationOutput) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNReceivableAggregationOutput2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐReceivableAggregationOutput(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNReceivableAggregationOutput2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐReceivableAggregationOutput(ctx context.Context, sel ast.SelectionSet, v *model.ReceivableAggregationOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ReceivableAggregationOutput(ctx, sel, v)
}

func (ec *executionContext) marshalNReceivableConnection2mazzaᚋentᚋgeneratedᚐReceivableConnection(ctx context.Context, sel ast.SelectionSet, v generated.ReceivableConnection) graphql.Marshaler {
	return ec._ReceivableConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNReceivableConnection2ᚖmazzaᚋentᚋgeneratedᚐReceivableConnection(ctx context.Context, sel ast.SelectionSet, v *generated.ReceivableConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ReceivableConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNReceivableOrder2ᚖmazzaᚋentᚋgeneratedᚐReceivableOrder(ctx context.Context, v interface{}) (*generated.ReceivableOrder, error) {
	res, err := ec.unmarshalInputReceivableOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNReceivableOrderField2ᚖmazzaᚋentᚋgeneratedᚐReceivableOrderField(ctx context.Context, v interface{}) (*generated.ReceivableOrderField, error) {
	var res = new(generated.ReceivableOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNReceivableOrderField2ᚖmazzaᚋentᚋgeneratedᚐReceivableOrderField(ctx context.Context, sel ast.SelectionSet, v *generated.ReceivableOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNReceivableStatus2mazzaᚋentᚋgeneratedᚋreceivableᚐStatus(ctx context.Context, v interface{}) (receivable.Status, error) {
	var res receivable.Status
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNReceivableStatus2mazzaᚋentᚋgeneratedᚋreceivableᚐStatus(ctx context.Context, sel ast.SelectionSet, v receivable.Status) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNReceivableWhereInput2ᚖmazzaᚋentᚋgeneratedᚐReceivableWhereInput(ctx context.Context, v interface{}) (*generated.ReceivableWhereInput, error) {
	res, err := ec.unmarshalInputReceivableWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNReceivablesGroupBy2mazzaᚋmazzaᚋgeneratedᚋmodelᚐReceivablesGroupBy(ctx context.Context, v interface{}) (model.ReceivablesGroupBy, error) {
	var res model.ReceivablesGroupBy
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNReceivablesGroupBy2mazzaᚋmazzaᚋgeneratedᚋmodelᚐReceivablesGroupBy(ctx context.Context, sel ast.SelectionSet, v model.ReceivablesGroupBy) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNReportInput2mazzaᚋmazzaᚋgeneratedᚋmodelᚐReportInput(ctx context.Context, v interface{}) (model.ReportInput, error) {
	res, err := ec.unmarshalInputReportInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNReportRowItem2ᚕᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐReportRowItem(ctx context.Context, sel ast.SelectionSet, v []*model.ReportRowItem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOReportRowItem2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐReportRowItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalNResetPasswordInput2mazzaᚋmazzaᚋgeneratedᚋmodelᚐResetPasswordInput(ctx context.Context, v interface{}) (model.ResetPasswordInput, error) {
	res, err := ec.unmarshalInputResetPasswordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRevenueTrendOutput2ᚕᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐRevenueTrendOutputᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.RevenueTrendOutput) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRevenueTrendOutput2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐRevenueTrendOutput(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNRevenueTrendOutput2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐRevenueTrendOutput(ctx context.Context, sel ast.SelectionSet, v *model.RevenueTrendOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RevenueTrendOutput(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSalesQuotationInput2mazzaᚋmazzaᚋgeneratedᚋmodelᚐSalesQuotationInput(ctx context.Context, v interface{}) (model.SalesQuotationInput, error) {
	res, err := ec.unmarshalInputSalesQuotationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNShiftGroupBy2mazzaᚋmazzaᚋgeneratedᚋmodelᚐShiftGroupBy(ctx context.Context, v interface{}) (model.ShiftGroupBy, error) {
	var res model.ShiftGroupBy
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNShiftGroupBy2mazzaᚋmazzaᚋgeneratedᚋmodelᚐShiftGroupBy(ctx context.Context, sel ast.SelectionSet, v model.ShiftGroupBy) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNShiftGroupBy2ᚕmazzaᚋmazzaᚋgeneratedᚋmodelᚐShiftGroupByᚄ(ctx context.Context, v interface{}) ([]model.ShiftGroupBy, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ShiftGroupBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNShiftGroupBy2mazzaᚋmazzaᚋgeneratedᚋmodelᚐShiftGroupBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNShiftGroupBy2ᚕmazzaᚋmazzaᚋgeneratedᚋmodelᚐShiftGroupByᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ShiftGroupBy) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNShiftGroupBy2mazzaᚋmazzaᚋgeneratedᚋmodelᚐShiftGroupBy(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNSignupInput2mazzaᚋmazzaᚋgeneratedᚋmodelᚐSignupInput(ctx context.Context, v interface{}) (model.SignupInput, error) {
	res, err := ec.unmarshalInputSignupInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNString2ᚕᚕstringᚄ(ctx context.Context, v interface{}) ([][]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([][]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2ᚕstringᚄ(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v [][]string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2ᚕstringᚄ(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNSupplier2mazzaᚋentᚋgeneratedᚐSupplier(ctx context.Context, sel ast.SelectionSet, v generated.Supplier) graphql.Marshaler {
	return ec._Supplier(ctx, sel, &v)
}

func (ec *executionContext) marshalNSupplier2ᚕᚖmazzaᚋentᚋgeneratedᚐSupplierᚄ(ctx context.Context, sel ast.SelectionSet, v []*generated.Supplier) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSupplier2ᚖmazzaᚋentᚋgeneratedᚐSupplier(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSupplier2ᚖmazzaᚋentᚋgeneratedᚐSupplier(ctx context.Context, sel ast.SelectionSet, v *generated.Supplier) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Supplier(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSupplierOrderField2ᚖmazzaᚋentᚋgeneratedᚐSupplierOrderField(ctx context.Context, v interface{}) (*generated.SupplierOrderField, error) {
	var res = new(generated.SupplierOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSupplierOrderField2ᚖmazzaᚋentᚋgeneratedᚐSupplierOrderField(ctx context.Context, sel ast.SelectionSet, v *generated.SupplierOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNSupplierWhereInput2ᚖmazzaᚋentᚋgeneratedᚐSupplierWhereInput(ctx context.Context, v interface{}) (*generated.SupplierWhereInput, error) {
	res, err := ec.unmarshalInputSupplierWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTimeRange2mazzaᚋmazzaᚋgeneratedᚋmodelᚐTimeRange(ctx context.Context, v interface{}) (model.TimeRange, error) {
	var res model.TimeRange
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimeRange2mazzaᚋmazzaᚋgeneratedᚋmodelᚐTimeRange(ctx context.Context, sel ast.SelectionSet, v model.TimeRange) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNToken2ᚕᚖmazzaᚋentᚋgeneratedᚐTokenᚄ(ctx context.Context, sel ast.SelectionSet, v []*generated.Token) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNToken2ᚖmazzaᚋentᚋgeneratedᚐToken(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNToken2ᚖmazzaᚋentᚋgeneratedᚐToken(ctx context.Context, sel ast.SelectionSet, v *generated.Token) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Token(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTokenCategory2mazzaᚋentᚋgeneratedᚋtokenᚐCategory(ctx context.Context, v interface{}) (token.Category, error) {
	var res token.Category
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTokenCategory2mazzaᚋentᚋgeneratedᚋtokenᚐCategory(ctx context.Context, sel ast.SelectionSet, v token.Category) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNTokenWhereInput2ᚖmazzaᚋentᚋgeneratedᚐTokenWhereInput(ctx context.Context, v interface{}) (*generated.TokenWhereInput, error) {
	res, err := ec.unmarshalInputTokenWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTreasury2mazzaᚋentᚋgeneratedᚐTreasury(ctx context.Context, sel ast.SelectionSet, v generated.Treasury) graphql.Marshaler {
	return ec._Treasury(ctx, sel, &v)
}

func (ec *executionContext) marshalNTreasury2ᚕᚖmazzaᚋentᚋgeneratedᚐTreasuryᚄ(ctx context.Context, sel ast.SelectionSet, v []*generated.Treasury) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTreasury2ᚖmazzaᚋentᚋgeneratedᚐTreasury(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTreasury2ᚖmazzaᚋentᚋgeneratedᚐTreasury(ctx context.Context, sel ast.SelectionSet, v *generated.Treasury) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Treasury(ctx, sel, v)
}

func (ec *executionContext) marshalNTreasuryAggregatePayload2ᚕᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐTreasuryAggregatePayloadᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TreasuryAggregatePayload) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTreasuryAggregatePayload2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐTreasuryAggregatePayload(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTreasuryAggregatePayload2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐTreasuryAggregatePayload(ctx context.Context, sel ast.SelectionSet, v *model.TreasuryAggregatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TreasuryAggregatePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTreasuryOrderField2ᚖmazzaᚋentᚋgeneratedᚐTreasuryOrderField(ctx context.Context, v interface{}) (*generated.TreasuryOrderField, error) {
	var res = new(generated.TreasuryOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTreasuryOrderField2ᚖmazzaᚋentᚋgeneratedᚐTreasuryOrderField(ctx context.Context, sel ast.SelectionSet, v *generated.TreasuryOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNTreasuryWhereInput2ᚖmazzaᚋentᚋgeneratedᚐTreasuryWhereInput(ctx context.Context, v interface{}) (*generated.TreasuryWhereInput, error) {
	res, err := ec.unmarshalInputTreasuryWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTrialBalanceRowItem2ᚕᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐTrialBalanceRowItem(ctx context.Context, sel ast.SelectionSet, v []*model.TrialBalanceRowItem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTrialBalanceRowItem2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐTrialBalanceRowItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalNUpdateCompanyDocumentInput2mazzaᚋentᚋgeneratedᚐUpdateCompanyDocumentInput(ctx context.Context, v interface{}) (generated.UpdateCompanyDocumentInput, error) {
	res, err := ec.unmarshalInputUpdateCompanyDocumentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateCompanyInput2mazzaᚋentᚋgeneratedᚐUpdateCompanyInput(ctx context.Context, v interface{}) (generated.UpdateCompanyInput, error) {
	res, err := ec.unmarshalInputUpdateCompanyInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateCustomerInput2mazzaᚋentᚋgeneratedᚐUpdateCustomerInput(ctx context.Context, v interface{}) (generated.UpdateCustomerInput, error) {
	res, err := ec.unmarshalInputUpdateCustomerInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateEmployeeInput2mazzaᚋentᚋgeneratedᚐUpdateEmployeeInput(ctx context.Context, v interface{}) (generated.UpdateEmployeeInput, error) {
	res, err := ec.unmarshalInputUpdateEmployeeInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateProductInput2mazzaᚋentᚋgeneratedᚐUpdateProductInput(ctx context.Context, v interface{}) (generated.UpdateProductInput, error) {
	res, err := ec.unmarshalInputUpdateProductInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateProjectInput2mazzaᚋentᚋgeneratedᚐUpdateProjectInput(ctx context.Context, v interface{}) (generated.UpdateProjectInput, error) {
	res, err := ec.unmarshalInputUpdateProjectInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateProjectMilestoneInput2mazzaᚋentᚋgeneratedᚐUpdateProjectMilestoneInput(ctx context.Context, v interface{}) (generated.UpdateProjectMilestoneInput, error) {
	res, err := ec.unmarshalInputUpdateProjectMilestoneInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateProjectTaskInput2mazzaᚋentᚋgeneratedᚐUpdateProjectTaskInput(ctx context.Context, v interface{}) (generated.UpdateProjectTaskInput, error) {
	res, err := ec.unmarshalInputUpdateProjectTaskInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateSupplierInput2mazzaᚋentᚋgeneratedᚐUpdateSupplierInput(ctx context.Context, v interface{}) (generated.UpdateSupplierInput, error) {
	res, err := ec.unmarshalInputUpdateSupplierInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateTreasuryInput2mazzaᚋentᚋgeneratedᚐUpdateTreasuryInput(ctx context.Context, v interface{}) (generated.UpdateTreasuryInput, error) {
	res, err := ec.unmarshalInputUpdateTreasuryInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateUserInput2mazzaᚋentᚋgeneratedᚐUpdateUserInput(ctx context.Context, v interface{}) (generated.UpdateUserInput, error) {
	res, err := ec.unmarshalInputUpdateUserInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateWorkshiftInput2mazzaᚋentᚋgeneratedᚐUpdateWorkshiftInput(ctx context.Context, v interface{}) (generated.UpdateWorkshiftInput, error) {
	res, err := ec.unmarshalInputUpdateWorkshiftInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUser2mazzaᚋentᚋgeneratedᚐUser(ctx context.Context, sel ast.SelectionSet, v generated.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚕᚖmazzaᚋentᚋgeneratedᚐUserᚄ(ctx context.Context, sel ast.SelectionSet, v []*generated.User) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUser2ᚖmazzaᚋentᚋgeneratedᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUser2ᚖmazzaᚋentᚋgeneratedᚐUser(ctx context.Context, sel ast.SelectionSet, v *generated.User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserGender2mazzaᚋentᚋgeneratedᚋuserᚐGender(ctx context.Context, v interface{}) (user.Gender, error) {
	var res user.Gender
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserGender2mazzaᚋentᚋgeneratedᚋuserᚐGender(ctx context.Context, sel ast.SelectionSet, v user.Gender) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNUserOrderField2ᚖmazzaᚋentᚋgeneratedᚐUserOrderField(ctx context.Context, v interface{}) (*generated.UserOrderField, error) {
	var res = new(generated.UserOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserOrderField2ᚖmazzaᚋentᚋgeneratedᚐUserOrderField(ctx context.Context, sel ast.SelectionSet, v *generated.UserOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalNUserRole2ᚕᚖmazzaᚋentᚋgeneratedᚐUserRoleᚄ(ctx context.Context, sel ast.SelectionSet, v []*generated.UserRole) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserRole2ᚖmazzaᚋentᚋgeneratedᚐUserRole(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUserRole2ᚖmazzaᚋentᚋgeneratedᚐUserRole(ctx context.Context, sel ast.SelectionSet, v *generated.UserRole) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserRole(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserRoleOrderField2ᚖmazzaᚋentᚋgeneratedᚐUserRoleOrderField(ctx context.Context, v interface{}) (*generated.UserRoleOrderField, error) {
	var res = new(generated.UserRoleOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserRoleOrderField2ᚖmazzaᚋentᚋgeneratedᚐUserRoleOrderField(ctx context.Context, sel ast.SelectionSet, v *generated.UserRoleOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNUserRoleRole2mazzaᚋentᚋgeneratedᚋuserroleᚐRole(ctx context.Context, v interface{}) (userrole.Role, error) {
	var res userrole.Role
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserRoleRole2mazzaᚋentᚋgeneratedᚋuserroleᚐRole(ctx context.Context, sel ast.SelectionSet, v userrole.Role) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNUserRoleWhereInput2ᚖmazzaᚋentᚋgeneratedᚐUserRoleWhereInput(ctx context.Context, v interface{}) (*generated.UserRoleWhereInput, error) {
	res, err := ec.unmarshalInputUserRoleWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserWhereInput2ᚖmazzaᚋentᚋgeneratedᚐUserWhereInput(ctx context.Context, v interface{}) (*generated.UserWhereInput, error) {
	res, err := ec.unmarshalInputUserWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNWorkShiftAggregationPayload2ᚕᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐWorkShiftAggregationPayloadᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.WorkShiftAggregationPayload) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWorkShiftAggregationPayload2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐWorkShiftAggregationPayload(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNWorkShiftAggregationPayload2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐWorkShiftAggregationPayload(ctx context.Context, sel ast.SelectionSet, v *model.WorkShiftAggregationPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._WorkShiftAggregationPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNWorkshift2mazzaᚋentᚋgeneratedᚐWorkshift(ctx context.Context, sel ast.SelectionSet, v generated.Workshift) graphql.Marshaler {
	return ec._Workshift(ctx, sel, &v)
}

func (ec *executionContext) marshalNWorkshift2ᚕᚖmazzaᚋentᚋgeneratedᚐWorkshiftᚄ(ctx context.Context, sel ast.SelectionSet, v []*generated.Workshift) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWorkshift2ᚖmazzaᚋentᚋgeneratedᚐWorkshift(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNWorkshift2ᚖmazzaᚋentᚋgeneratedᚐWorkshift(ctx context.Context, sel ast.SelectionSet, v *generated.Workshift) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Workshift(ctx, sel, v)
}

func (ec *executionContext) unmarshalNWorkshiftOrderField2ᚖmazzaᚋentᚋgeneratedᚐWorkshiftOrderField(ctx context.Context, v interface{}) (*generated.WorkshiftOrderField, error) {
	var res = new(generated.WorkshiftOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNWorkshiftOrderField2ᚖmazzaᚋentᚋgeneratedᚐWorkshiftOrderField(ctx context.Context, sel ast.SelectionSet, v *generated.WorkshiftOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNWorkshiftStatus2mazzaᚋentᚋgeneratedᚋworkshiftᚐStatus(ctx context.Context, v interface{}) (workshift.Status, error) {
	var res workshift.Status
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNWorkshiftStatus2mazzaᚋentᚋgeneratedᚋworkshiftᚐStatus(ctx context.Context, sel ast.SelectionSet, v workshift.Status) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNWorkshiftWhereInput2ᚖmazzaᚋentᚋgeneratedᚐWorkshiftWhereInput(ctx context.Context, v interface{}) (*generated.WorkshiftWhereInput, error) {
	res, err := ec.unmarshalInputWorkshiftWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNinvitedUserSignupInput2mazzaᚋmazzaᚋgeneratedᚋmodelᚐInvitedUserSignupInput(ctx context.Context, v interface{}) (model.InvitedUserSignupInput, error) {
	res, err := ec.unmarshalInputinvitedUserSignupInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAccountingEntry2ᚕᚖmazzaᚋentᚋgeneratedᚐAccountingEntryᚄ(ctx context.Context, sel ast.SelectionSet, v []*generated.AccountingEntry) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAccountingEntry2ᚖmazzaᚋentᚋgeneratedᚐAccountingEntry(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOAccountingEntry2ᚖmazzaᚋentᚋgeneratedᚐAccountingEntry(ctx context.Context, sel ast.SelectionSet, v *generated.AccountingEntry) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AccountingEntry(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAccountingEntryAccountType2ᚕmazzaᚋentᚋgeneratedᚋaccountingentryᚐAccountTypeᚄ(ctx context.Context, v interface{}) ([]accountingentry.AccountType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]accountingentry.AccountType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAccountingEntryAccountType2mazzaᚋentᚋgeneratedᚋaccountingentryᚐAccountType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOAccountingEntryAccountType2ᚕmazzaᚋentᚋgeneratedᚋaccountingentryᚐAccountTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []accountingentry.AccountType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAccountingEntryAccountType2mazzaᚋentᚋgeneratedᚋaccountingentryᚐAccountType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOAccountingEntryAccountType2ᚖmazzaᚋentᚋgeneratedᚋaccountingentryᚐAccountType(ctx context.Context, v interface{}) (*accountingentry.AccountType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(accountingentry.AccountType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAccountingEntryAccountType2ᚖmazzaᚋentᚋgeneratedᚋaccountingentryᚐAccountType(ctx context.Context, sel ast.SelectionSet, v *accountingentry.AccountType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOAccountingEntryEdge2ᚕᚖmazzaᚋentᚋgeneratedᚐAccountingEntryEdge(ctx context.Context, sel ast.SelectionSet, v []*generated.AccountingEntryEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAccountingEntryEdge2ᚖmazzaᚋentᚋgeneratedᚐAccountingEntryEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOAccountingEntryEdge2ᚖmazzaᚋentᚋgeneratedᚐAccountingEntryEdge(ctx context.Context, sel ast.SelectionSet, v *generated.AccountingEntryEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AccountingEntryEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAccountingEntryOrder2ᚕᚖmazzaᚋentᚋgeneratedᚐAccountingEntryOrderᚄ(ctx context.Context, v interface{}) ([]*generated.AccountingEntryOrder, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*generated.AccountingEntryOrder, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAccountingEntryOrder2ᚖmazzaᚋentᚋgeneratedᚐAccountingEntryOrder(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOAccountingEntryWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐAccountingEntryWhereInputᚄ(ctx context.Context, v interface{}) ([]*generated.AccountingEntryWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*generated.AccountingEntryWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAccountingEntryWhereInput2ᚖmazzaᚋentᚋgeneratedᚐAccountingEntryWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOAccountingEntryWhereInput2ᚖmazzaᚋentᚋgeneratedᚐAccountingEntryWhereInput(ctx context.Context, v interface{}) (*generated.AccountingEntryWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAccountingEntryWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBaseEntryRegistrationInput2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐBaseEntryRegistrationInput(ctx context.Context, v interface{}) (*model.BaseEntryRegistrationInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBaseEntryRegistrationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOCompany2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyᚄ(ctx context.Context, sel ast.SelectionSet, v []*generated.Company) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCompany2ᚖmazzaᚋentᚋgeneratedᚐCompany(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCompany2ᚖmazzaᚋentᚋgeneratedᚐCompany(ctx context.Context, sel ast.SelectionSet, v *generated.Company) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Company(ctx, sel, v)
}

func (ec *executionContext) marshalOCompanyDocument2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyDocumentᚄ(ctx context.Context, sel ast.SelectionSet, v []*generated.CompanyDocument) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCompanyDocument2ᚖmazzaᚋentᚋgeneratedᚐCompanyDocument(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCompanyDocument2ᚖmazzaᚋentᚋgeneratedᚐCompanyDocument(ctx context.Context, sel ast.SelectionSet, v *generated.CompanyDocument) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CompanyDocument(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCompanyDocumentCategory2ᚕmazzaᚋentᚋgeneratedᚋcompanydocumentᚐCategoryᚄ(ctx context.Context, v interface{}) ([]companydocument.Category, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]companydocument.Category, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCompanyDocumentCategory2mazzaᚋentᚋgeneratedᚋcompanydocumentᚐCategory(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCompanyDocumentCategory2ᚕmazzaᚋentᚋgeneratedᚋcompanydocumentᚐCategoryᚄ(ctx context.Context, sel ast.SelectionSet, v []companydocument.Category) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCompanyDocumentCategory2mazzaᚋentᚋgeneratedᚋcompanydocumentᚐCategory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOCompanyDocumentCategory2ᚖmazzaᚋentᚋgeneratedᚋcompanydocumentᚐCategory(ctx context.Context, v interface{}) (*companydocument.Category, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(companydocument.Category)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCompanyDocumentCategory2ᚖmazzaᚋentᚋgeneratedᚋcompanydocumentᚐCategory(ctx context.Context, sel ast.SelectionSet, v *companydocument.Category) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOCompanyDocumentEdge2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyDocumentEdge(ctx context.Context, sel ast.SelectionSet, v []*generated.CompanyDocumentEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCompanyDocumentEdge2ᚖmazzaᚋentᚋgeneratedᚐCompanyDocumentEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCompanyDocumentEdge2ᚖmazzaᚋentᚋgeneratedᚐCompanyDocumentEdge(ctx context.Context, sel ast.SelectionSet, v *generated.CompanyDocumentEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CompanyDocumentEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCompanyDocumentOrder2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyDocumentOrderᚄ(ctx context.Context, v interface{}) ([]*generated.CompanyDocumentOrder, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*generated.CompanyDocumentOrder, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCompanyDocumentOrder2ᚖmazzaᚋentᚋgeneratedᚐCompanyDocumentOrder(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCompanyDocumentStatus2ᚕmazzaᚋentᚋgeneratedᚋcompanydocumentᚐStatusᚄ(ctx context.Context, v interface{}) ([]companydocument.Status, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]companydocument.Status, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCompanyDocumentStatus2mazzaᚋentᚋgeneratedᚋcompanydocumentᚐStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCompanyDocumentStatus2ᚕmazzaᚋentᚋgeneratedᚋcompanydocumentᚐStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []companydocument.Status) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCompanyDocumentStatus2mazzaᚋentᚋgeneratedᚋcompanydocumentᚐStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOCompanyDocumentStatus2ᚖmazzaᚋentᚋgeneratedᚋcompanydocumentᚐStatus(ctx context.Context, v interface{}) (*companydocument.Status, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(companydocument.Status)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCompanyDocumentStatus2ᚖmazzaᚋentᚋgeneratedᚋcompanydocumentᚐStatus(ctx context.Context, sel ast.SelectionSet, v *companydocument.Status) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOCompanyDocumentWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyDocumentWhereInputᚄ(ctx context.Context, v interface{}) ([]*generated.CompanyDocumentWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*generated.CompanyDocumentWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCompanyDocumentWhereInput2ᚖmazzaᚋentᚋgeneratedᚐCompanyDocumentWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCompanyDocumentWhereInput2ᚖmazzaᚋentᚋgeneratedᚐCompanyDocumentWhereInput(ctx context.Context, v interface{}) (*generated.CompanyDocumentWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCompanyDocumentWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCompanyWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐCompanyWhereInputᚄ(ctx context.Context, v interface{}) ([]*generated.CompanyWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*generated.CompanyWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCompanyWhereInput2ᚖmazzaᚋentᚋgeneratedᚐCompanyWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCompanyWhereInput2ᚖmazzaᚋentᚋgeneratedᚐCompanyWhereInput(ctx context.Context, v interface{}) (*generated.CompanyWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCompanyWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCreateCompanyInput2ᚖmazzaᚋentᚋgeneratedᚐCreateCompanyInput(ctx context.Context, v interface{}) (*generated.CreateCompanyInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCreateCompanyInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx context.Context, v interface{}) (*entgql.Cursor[int], error) {
	if v == nil {
		return nil, nil
	}
	var res = new(entgql.Cursor[int])
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx context.Context, sel ast.SelectionSet, v *entgql.Cursor[int]) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOCustomer2ᚕᚖmazzaᚋentᚋgeneratedᚐCustomerᚄ(ctx context.Context, sel ast.SelectionSet, v []*generated.Customer) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCustomer2ᚖmazzaᚋentᚋgeneratedᚐCustomer(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCustomer2ᚖmazzaᚋentᚋgeneratedᚐCustomer(ctx context.Context, sel ast.SelectionSet, v *generated.Customer) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Customer(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCustomerWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐCustomerWhereInputᚄ(ctx context.Context, v interface{}) ([]*generated.CustomerWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*generated.CustomerWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCustomerWhereInput2ᚖmazzaᚋentᚋgeneratedᚐCustomerWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCustomerWhereInput2ᚖmazzaᚋentᚋgeneratedᚐCustomerWhereInput(ctx context.Context, v interface{}) (*generated.CustomerWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCustomerWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCustomersGroupBy2ᚕmazzaᚋmazzaᚋgeneratedᚋmodelᚐCustomersGroupByᚄ(ctx context.Context, v interface{}) ([]model.CustomersGroupBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.CustomersGroupBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCustomersGroupBy2mazzaᚋmazzaᚋgeneratedᚋmodelᚐCustomersGroupBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCustomersGroupBy2ᚕmazzaᚋmazzaᚋgeneratedᚋmodelᚐCustomersGroupByᚄ(ctx context.Context, sel ast.SelectionSet, v []model.CustomersGroupBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCustomersGroupBy2mazzaᚋmazzaᚋgeneratedᚋmodelᚐCustomersGroupBy(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOEmployee2ᚕᚖmazzaᚋentᚋgeneratedᚐEmployeeᚄ(ctx context.Context, sel ast.SelectionSet, v []*generated.Employee) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEmployee2ᚖmazzaᚋentᚋgeneratedᚐEmployee(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOEmployee2ᚖmazzaᚋentᚋgeneratedᚐEmployee(ctx context.Context, sel ast.SelectionSet, v *generated.Employee) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Employee(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEmployeeGender2ᚕmazzaᚋentᚋgeneratedᚋemployeeᚐGenderᚄ(ctx context.Context, v interface{}) ([]employee.Gender, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]employee.Gender, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEmployeeGender2mazzaᚋentᚋgeneratedᚋemployeeᚐGender(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOEmployeeGender2ᚕmazzaᚋentᚋgeneratedᚋemployeeᚐGenderᚄ(ctx context.Context, sel ast.SelectionSet, v []employee.Gender) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEmployeeGender2mazzaᚋentᚋgeneratedᚋemployeeᚐGender(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOEmployeeGender2ᚖmazzaᚋentᚋgeneratedᚋemployeeᚐGender(ctx context.Context, v interface{}) (*employee.Gender, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(employee.Gender)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEmployeeGender2ᚖmazzaᚋentᚋgeneratedᚋemployeeᚐGender(ctx context.Context, sel ast.SelectionSet, v *employee.Gender) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOEmployeeWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐEmployeeWhereInputᚄ(ctx context.Context, v interface{}) ([]*generated.EmployeeWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*generated.EmployeeWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEmployeeWhereInput2ᚖmazzaᚋentᚋgeneratedᚐEmployeeWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEmployeeWhereInput2ᚖmazzaᚋentᚋgeneratedᚐEmployeeWhereInput(ctx context.Context, v interface{}) (*generated.EmployeeWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEmployeeWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFile2ᚕᚖmazzaᚋentᚋgeneratedᚐFileᚄ(ctx context.Context, sel ast.SelectionSet, v []*generated.File) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFile2ᚖmazzaᚋentᚋgeneratedᚐFile(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOFile2ᚖmazzaᚋentᚋgeneratedᚐFile(ctx context.Context, sel ast.SelectionSet, v *generated.File) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._File(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFileCategory2ᚕmazzaᚋentᚋgeneratedᚋfileᚐCategoryᚄ(ctx context.Context, v interface{}) ([]file.Category, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]file.Category, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFileCategory2mazzaᚋentᚋgeneratedᚋfileᚐCategory(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFileCategory2ᚕmazzaᚋentᚋgeneratedᚋfileᚐCategoryᚄ(ctx context.Context, sel ast.SelectionSet, v []file.Category) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFileCategory2mazzaᚋentᚋgeneratedᚋfileᚐCategory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOFileCategory2ᚖmazzaᚋentᚋgeneratedᚋfileᚐCategory(ctx context.Context, v interface{}) (*file.Category, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(file.Category)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFileCategory2ᚖmazzaᚋentᚋgeneratedᚋfileᚐCategory(ctx context.Context, sel ast.SelectionSet, v *file.Category) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOFileEdge2ᚕᚖmazzaᚋentᚋgeneratedᚐFileEdge(ctx context.Context, sel ast.SelectionSet, v []*generated.FileEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFileEdge2ᚖmazzaᚋentᚋgeneratedᚐFileEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFileEdge2ᚖmazzaᚋentᚋgeneratedᚐFileEdge(ctx context.Context, sel ast.SelectionSet, v *generated.FileEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FileEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFileOrder2ᚖmazzaᚋentᚋgeneratedᚐFileOrder(ctx context.Context, v interface{}) (*generated.FileOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFileOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFileOutput2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐFileOutput(ctx context.Context, sel ast.SelectionSet, v *model.FileOutput) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FileOutput(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFileWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐFileWhereInputᚄ(ctx context.Context, v interface{}) ([]*generated.FileWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*generated.FileWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFileWhereInput2ᚖmazzaᚋentᚋgeneratedᚐFileWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFileWhereInput2ᚖmazzaᚋentᚋgeneratedᚐFileWhereInput(ctx context.Context, v interface{}) (*generated.FileWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFileWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFloat2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFloat2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNFloat2float64(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalOID2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2int(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalIntID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalIntID(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2int32(ctx context.Context, v interface{}) (int32, error) {
	res, err := graphql.UnmarshalInt32(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2int32(ctx context.Context, sel ast.SelectionSet, v int32) graphql.Marshaler {
	res := graphql.MarshalInt32(v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚕint32ᚄ(ctx context.Context, v interface{}) ([]int32, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]int32, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int32(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕint32ᚄ(ctx context.Context, sel ast.SelectionSet, v []int32) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int32(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint32(ctx context.Context, v interface{}) (*int32, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt32(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint32(ctx context.Context, sel ast.SelectionSet, v *int32) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt32(*v)
	return res
}

func (ec *executionContext) marshalONode2mazzaᚋentᚋgeneratedᚐNoder(ctx context.Context, sel ast.SelectionSet, v generated.Noder) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Node(ctx, sel, v)
}

func (ec *executionContext) marshalOPayable2ᚕᚖmazzaᚋentᚋgeneratedᚐPayableᚄ(ctx context.Context, sel ast.SelectionSet, v []*generated.Payable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPayable2ᚖmazzaᚋentᚋgeneratedᚐPayable(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOPayable2ᚖmazzaᚋentᚋgeneratedᚐPayable(ctx context.Context, sel ast.SelectionSet, v *generated.Payable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Payable(ctx, sel, v)
}

func (ec *executionContext) marshalOPayableEdge2ᚕᚖmazzaᚋentᚋgeneratedᚐPayableEdge(ctx context.Context, sel ast.SelectionSet, v []*generated.PayableEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPayableEdge2ᚖmazzaᚋentᚋgeneratedᚐPayableEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOPayableEdge2ᚖmazzaᚋentᚋgeneratedᚐPayableEdge(ctx context.Context, sel ast.SelectionSet, v *generated.PayableEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PayableEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPayableInput2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐPayableInput(ctx context.Context, v interface{}) (*model.PayableInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPayableInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPayableOrder2ᚕᚖmazzaᚋentᚋgeneratedᚐPayableOrderᚄ(ctx context.Context, v interface{}) ([]*generated.PayableOrder, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*generated.PayableOrder, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPayableOrder2ᚖmazzaᚋentᚋgeneratedᚐPayableOrder(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPayableStatus2ᚕmazzaᚋentᚋgeneratedᚋpayableᚐStatusᚄ(ctx context.Context, v interface{}) ([]payable.Status, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]payable.Status, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPayableStatus2mazzaᚋentᚋgeneratedᚋpayableᚐStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPayableStatus2ᚕmazzaᚋentᚋgeneratedᚋpayableᚐStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []payable.Status) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPayableStatus2mazzaᚋentᚋgeneratedᚋpayableᚐStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOPayableStatus2ᚖmazzaᚋentᚋgeneratedᚋpayableᚐStatus(ctx context.Context, v interface{}) (*payable.Status, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(payable.Status)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPayableStatus2ᚖmazzaᚋentᚋgeneratedᚋpayableᚐStatus(ctx context.Context, sel ast.SelectionSet, v *payable.Status) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPayableWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐPayableWhereInputᚄ(ctx context.Context, v interface{}) ([]*generated.PayableWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*generated.PayableWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPayableWhereInput2ᚖmazzaᚋentᚋgeneratedᚐPayableWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPayableWhereInput2ᚖmazzaᚋentᚋgeneratedᚐPayableWhereInput(ctx context.Context, v interface{}) (*generated.PayableWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPayableWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProduct2ᚕᚖmazzaᚋentᚋgeneratedᚐProductᚄ(ctx context.Context, sel ast.SelectionSet, v []*generated.Product) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProduct2ᚖmazzaᚋentᚋgeneratedᚐProduct(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOProduct2ᚖmazzaᚋentᚋgeneratedᚐProduct(ctx context.Context, sel ast.SelectionSet, v *generated.Product) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Product(ctx, sel, v)
}

func (ec *executionContext) unmarshalOProductWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐProductWhereInputᚄ(ctx context.Context, v interface{}) ([]*generated.ProductWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*generated.ProductWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProductWhereInput2ᚖmazzaᚋentᚋgeneratedᚐProductWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOProductWhereInput2ᚖmazzaᚋentᚋgeneratedᚐProductWhereInput(ctx context.Context, v interface{}) (*generated.ProductWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProductWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProject2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectᚄ(ctx context.Context, sel ast.SelectionSet, v []*generated.Project) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProject2ᚖmazzaᚋentᚋgeneratedᚐProject(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOProject2ᚖmazzaᚋentᚋgeneratedᚐProject(ctx context.Context, sel ast.SelectionSet, v *generated.Project) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Project(ctx, sel, v)
}

func (ec *executionContext) marshalOProjectEdge2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectEdge(ctx context.Context, sel ast.SelectionSet, v []*generated.ProjectEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProjectEdge2ᚖmazzaᚋentᚋgeneratedᚐProjectEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOProjectEdge2ᚖmazzaᚋentᚋgeneratedᚐProjectEdge(ctx context.Context, sel ast.SelectionSet, v *generated.ProjectEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProjectEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOProjectMilestone2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectMilestoneᚄ(ctx context.Context, sel ast.SelectionSet, v []*generated.ProjectMilestone) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProjectMilestone2ᚖmazzaᚋentᚋgeneratedᚐProjectMilestone(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOProjectMilestone2ᚖmazzaᚋentᚋgeneratedᚐProjectMilestone(ctx context.Context, sel ast.SelectionSet, v *generated.ProjectMilestone) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProjectMilestone(ctx, sel, v)
}

func (ec *executionContext) unmarshalOProjectMilestoneWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectMilestoneWhereInputᚄ(ctx context.Context, v interface{}) ([]*generated.ProjectMilestoneWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*generated.ProjectMilestoneWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProjectMilestoneWhereInput2ᚖmazzaᚋentᚋgeneratedᚐProjectMilestoneWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOProjectMilestoneWhereInput2ᚖmazzaᚋentᚋgeneratedᚐProjectMilestoneWhereInput(ctx context.Context, v interface{}) (*generated.ProjectMilestoneWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProjectMilestoneWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOProjectOrder2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectOrderᚄ(ctx context.Context, v interface{}) ([]*generated.ProjectOrder, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*generated.ProjectOrder, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProjectOrder2ᚖmazzaᚋentᚋgeneratedᚐProjectOrder(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOProjectStatus2ᚕmazzaᚋentᚋgeneratedᚋprojectᚐStatusᚄ(ctx context.Context, v interface{}) ([]project.Status, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]project.Status, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProjectStatus2mazzaᚋentᚋgeneratedᚋprojectᚐStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOProjectStatus2ᚕmazzaᚋentᚋgeneratedᚋprojectᚐStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []project.Status) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProjectStatus2mazzaᚋentᚋgeneratedᚋprojectᚐStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOProjectStatus2ᚖmazzaᚋentᚋgeneratedᚋprojectᚐStatus(ctx context.Context, v interface{}) (*project.Status, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(project.Status)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProjectStatus2ᚖmazzaᚋentᚋgeneratedᚋprojectᚐStatus(ctx context.Context, sel ast.SelectionSet, v *project.Status) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOProjectTask2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectTaskᚄ(ctx context.Context, sel ast.SelectionSet, v []*generated.ProjectTask) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProjectTask2ᚖmazzaᚋentᚋgeneratedᚐProjectTask(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOProjectTask2ᚖmazzaᚋentᚋgeneratedᚐProjectTask(ctx context.Context, sel ast.SelectionSet, v *generated.ProjectTask) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProjectTask(ctx, sel, v)
}

func (ec *executionContext) marshalOProjectTaskEdge2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectTaskEdge(ctx context.Context, sel ast.SelectionSet, v []*generated.ProjectTaskEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProjectTaskEdge2ᚖmazzaᚋentᚋgeneratedᚐProjectTaskEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOProjectTaskEdge2ᚖmazzaᚋentᚋgeneratedᚐProjectTaskEdge(ctx context.Context, sel ast.SelectionSet, v *generated.ProjectTaskEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProjectTaskEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOProjectTaskOrder2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectTaskOrderᚄ(ctx context.Context, v interface{}) ([]*generated.ProjectTaskOrder, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*generated.ProjectTaskOrder, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProjectTaskOrder2ᚖmazzaᚋentᚋgeneratedᚐProjectTaskOrder(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOProjectTaskStatus2ᚕmazzaᚋentᚋgeneratedᚋprojecttaskᚐStatusᚄ(ctx context.Context, v interface{}) ([]projecttask.Status, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]projecttask.Status, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProjectTaskStatus2mazzaᚋentᚋgeneratedᚋprojecttaskᚐStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOProjectTaskStatus2ᚕmazzaᚋentᚋgeneratedᚋprojecttaskᚐStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []projecttask.Status) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProjectTaskStatus2mazzaᚋentᚋgeneratedᚋprojecttaskᚐStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOProjectTaskStatus2ᚖmazzaᚋentᚋgeneratedᚋprojecttaskᚐStatus(ctx context.Context, v interface{}) (*projecttask.Status, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(projecttask.Status)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProjectTaskStatus2ᚖmazzaᚋentᚋgeneratedᚋprojecttaskᚐStatus(ctx context.Context, sel ast.SelectionSet, v *projecttask.Status) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOProjectTaskWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectTaskWhereInputᚄ(ctx context.Context, v interface{}) ([]*generated.ProjectTaskWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*generated.ProjectTaskWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProjectTaskWhereInput2ᚖmazzaᚋentᚋgeneratedᚐProjectTaskWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOProjectTaskWhereInput2ᚖmazzaᚋentᚋgeneratedᚐProjectTaskWhereInput(ctx context.Context, v interface{}) (*generated.ProjectTaskWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProjectTaskWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOProjectWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐProjectWhereInputᚄ(ctx context.Context, v interface{}) ([]*generated.ProjectWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*generated.ProjectWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProjectWhereInput2ᚖmazzaᚋentᚋgeneratedᚐProjectWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOProjectWhereInput2ᚖmazzaᚋentᚋgeneratedᚐProjectWhereInput(ctx context.Context, v interface{}) (*generated.ProjectWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProjectWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOReceivable2ᚕᚖmazzaᚋentᚋgeneratedᚐReceivableᚄ(ctx context.Context, sel ast.SelectionSet, v []*generated.Receivable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNReceivable2ᚖmazzaᚋentᚋgeneratedᚐReceivable(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOReceivable2ᚖmazzaᚋentᚋgeneratedᚐReceivable(ctx context.Context, sel ast.SelectionSet, v *generated.Receivable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Receivable(ctx, sel, v)
}

func (ec *executionContext) marshalOReceivableEdge2ᚕᚖmazzaᚋentᚋgeneratedᚐReceivableEdge(ctx context.Context, sel ast.SelectionSet, v []*generated.ReceivableEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOReceivableEdge2ᚖmazzaᚋentᚋgeneratedᚐReceivableEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOReceivableEdge2ᚖmazzaᚋentᚋgeneratedᚐReceivableEdge(ctx context.Context, sel ast.SelectionSet, v *generated.ReceivableEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ReceivableEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOReceivableInput2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐReceivableInput(ctx context.Context, v interface{}) (*model.ReceivableInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputReceivableInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOReceivableOrder2ᚕᚖmazzaᚋentᚋgeneratedᚐReceivableOrderᚄ(ctx context.Context, v interface{}) ([]*generated.ReceivableOrder, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*generated.ReceivableOrder, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNReceivableOrder2ᚖmazzaᚋentᚋgeneratedᚐReceivableOrder(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOReceivableStatus2ᚕmazzaᚋentᚋgeneratedᚋreceivableᚐStatusᚄ(ctx context.Context, v interface{}) ([]receivable.Status, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]receivable.Status, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNReceivableStatus2mazzaᚋentᚋgeneratedᚋreceivableᚐStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOReceivableStatus2ᚕmazzaᚋentᚋgeneratedᚋreceivableᚐStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []receivable.Status) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNReceivableStatus2mazzaᚋentᚋgeneratedᚋreceivableᚐStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOReceivableStatus2ᚖmazzaᚋentᚋgeneratedᚋreceivableᚐStatus(ctx context.Context, v interface{}) (*receivable.Status, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(receivable.Status)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOReceivableStatus2ᚖmazzaᚋentᚋgeneratedᚋreceivableᚐStatus(ctx context.Context, sel ast.SelectionSet, v *receivable.Status) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOReceivableWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐReceivableWhereInputᚄ(ctx context.Context, v interface{}) ([]*generated.ReceivableWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*generated.ReceivableWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNReceivableWhereInput2ᚖmazzaᚋentᚋgeneratedᚐReceivableWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOReceivableWhereInput2ᚖmazzaᚋentᚋgeneratedᚐReceivableWhereInput(ctx context.Context, v interface{}) (*generated.ReceivableWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputReceivableWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOReceivablesGroupBy2ᚕmazzaᚋmazzaᚋgeneratedᚋmodelᚐReceivablesGroupByᚄ(ctx context.Context, v interface{}) ([]model.ReceivablesGroupBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ReceivablesGroupBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNReceivablesGroupBy2mazzaᚋmazzaᚋgeneratedᚋmodelᚐReceivablesGroupBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOReceivablesGroupBy2ᚕmazzaᚋmazzaᚋgeneratedᚋmodelᚐReceivablesGroupByᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ReceivablesGroupBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNReceivablesGroupBy2mazzaᚋmazzaᚋgeneratedᚋmodelᚐReceivablesGroupBy(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOReportRowItem2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐReportRowItem(ctx context.Context, sel ast.SelectionSet, v *model.ReportRowItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ReportRowItem(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	return res
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOSupplier2ᚕᚖmazzaᚋentᚋgeneratedᚐSupplierᚄ(ctx context.Context, sel ast.SelectionSet, v []*generated.Supplier) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSupplier2ᚖmazzaᚋentᚋgeneratedᚐSupplier(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOSupplier2ᚖmazzaᚋentᚋgeneratedᚐSupplier(ctx context.Context, sel ast.SelectionSet, v *generated.Supplier) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Supplier(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSupplierWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐSupplierWhereInputᚄ(ctx context.Context, v interface{}) ([]*generated.SupplierWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*generated.SupplierWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSupplierWhereInput2ᚖmazzaᚋentᚋgeneratedᚐSupplierWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSupplierWhereInput2ᚖmazzaᚋentᚋgeneratedᚐSupplierWhereInput(ctx context.Context, v interface{}) (*generated.SupplierWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSupplierWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	return res
}

func (ec *executionContext) unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTime2timeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTime2ᚕtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNTime2timeᚐTime(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) marshalOToken2ᚕᚖmazzaᚋentᚋgeneratedᚐTokenᚄ(ctx context.Context, sel ast.SelectionSet, v []*generated.Token) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNToken2ᚖmazzaᚋentᚋgeneratedᚐToken(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOTokenCategory2ᚕmazzaᚋentᚋgeneratedᚋtokenᚐCategoryᚄ(ctx context.Context, v interface{}) ([]token.Category, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]token.Category, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTokenCategory2mazzaᚋentᚋgeneratedᚋtokenᚐCategory(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTokenCategory2ᚕmazzaᚋentᚋgeneratedᚋtokenᚐCategoryᚄ(ctx context.Context, sel ast.SelectionSet, v []token.Category) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTokenCategory2mazzaᚋentᚋgeneratedᚋtokenᚐCategory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOTokenCategory2ᚖmazzaᚋentᚋgeneratedᚋtokenᚐCategory(ctx context.Context, v interface{}) (*token.Category, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(token.Category)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTokenCategory2ᚖmazzaᚋentᚋgeneratedᚋtokenᚐCategory(ctx context.Context, sel ast.SelectionSet, v *token.Category) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOTokenWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐTokenWhereInputᚄ(ctx context.Context, v interface{}) ([]*generated.TokenWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*generated.TokenWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTokenWhereInput2ᚖmazzaᚋentᚋgeneratedᚐTokenWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTokenWhereInput2ᚖmazzaᚋentᚋgeneratedᚐTokenWhereInput(ctx context.Context, v interface{}) (*generated.TokenWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTokenWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTreasury2ᚕᚖmazzaᚋentᚋgeneratedᚐTreasuryᚄ(ctx context.Context, sel ast.SelectionSet, v []*generated.Treasury) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTreasury2ᚖmazzaᚋentᚋgeneratedᚐTreasury(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOTreasury2ᚖmazzaᚋentᚋgeneratedᚐTreasury(ctx context.Context, sel ast.SelectionSet, v *generated.Treasury) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Treasury(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTreasuryWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐTreasuryWhereInputᚄ(ctx context.Context, v interface{}) ([]*generated.TreasuryWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*generated.TreasuryWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTreasuryWhereInput2ᚖmazzaᚋentᚋgeneratedᚐTreasuryWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTreasuryWhereInput2ᚖmazzaᚋentᚋgeneratedᚐTreasuryWhereInput(ctx context.Context, v interface{}) (*generated.TreasuryWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTreasuryWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTrialBalanceRowItem2ᚖmazzaᚋmazzaᚋgeneratedᚋmodelᚐTrialBalanceRowItem(ctx context.Context, sel ast.SelectionSet, v *model.TrialBalanceRowItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TrialBalanceRowItem(ctx, sel, v)
}

func (ec *executionContext) marshalOUser2ᚕᚖmazzaᚋentᚋgeneratedᚐUserᚄ(ctx context.Context, sel ast.SelectionSet, v []*generated.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUser2ᚖmazzaᚋentᚋgeneratedᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOUser2ᚖmazzaᚋentᚋgeneratedᚐUser(ctx context.Context, sel ast.SelectionSet, v *generated.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserGender2ᚕmazzaᚋentᚋgeneratedᚋuserᚐGenderᚄ(ctx context.Context, v interface{}) ([]user.Gender, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]user.Gender, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUserGender2mazzaᚋentᚋgeneratedᚋuserᚐGender(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOUserGender2ᚕmazzaᚋentᚋgeneratedᚋuserᚐGenderᚄ(ctx context.Context, sel ast.SelectionSet, v []user.Gender) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserGender2mazzaᚋentᚋgeneratedᚋuserᚐGender(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOUserGender2ᚖmazzaᚋentᚋgeneratedᚋuserᚐGender(ctx context.Context, v interface{}) (*user.Gender, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(user.Gender)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserGender2ᚖmazzaᚋentᚋgeneratedᚋuserᚐGender(ctx context.Context, sel ast.SelectionSet, v *user.Gender) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOUserRole2ᚕᚖmazzaᚋentᚋgeneratedᚐUserRoleᚄ(ctx context.Context, sel ast.SelectionSet, v []*generated.UserRole) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserRole2ᚖmazzaᚋentᚋgeneratedᚐUserRole(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOUserRoleRole2ᚕmazzaᚋentᚋgeneratedᚋuserroleᚐRoleᚄ(ctx context.Context, v interface{}) ([]userrole.Role, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]userrole.Role, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUserRoleRole2mazzaᚋentᚋgeneratedᚋuserroleᚐRole(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOUserRoleRole2ᚕmazzaᚋentᚋgeneratedᚋuserroleᚐRoleᚄ(ctx context.Context, sel ast.SelectionSet, v []userrole.Role) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserRoleRole2mazzaᚋentᚋgeneratedᚋuserroleᚐRole(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOUserRoleRole2ᚖmazzaᚋentᚋgeneratedᚋuserroleᚐRole(ctx context.Context, v interface{}) (*userrole.Role, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(userrole.Role)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserRoleRole2ᚖmazzaᚋentᚋgeneratedᚋuserroleᚐRole(ctx context.Context, sel ast.SelectionSet, v *userrole.Role) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOUserRoleWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐUserRoleWhereInputᚄ(ctx context.Context, v interface{}) ([]*generated.UserRoleWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*generated.UserRoleWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUserRoleWhereInput2ᚖmazzaᚋentᚋgeneratedᚐUserRoleWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOUserRoleWhereInput2ᚖmazzaᚋentᚋgeneratedᚐUserRoleWhereInput(ctx context.Context, v interface{}) (*generated.UserRoleWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserRoleWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐUserWhereInputᚄ(ctx context.Context, v interface{}) ([]*generated.UserWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*generated.UserWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUserWhereInput2ᚖmazzaᚋentᚋgeneratedᚐUserWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOUserWhereInput2ᚖmazzaᚋentᚋgeneratedᚐUserWhereInput(ctx context.Context, v interface{}) (*generated.UserWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOWorkshift2ᚕᚖmazzaᚋentᚋgeneratedᚐWorkshiftᚄ(ctx context.Context, sel ast.SelectionSet, v []*generated.Workshift) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWorkshift2ᚖmazzaᚋentᚋgeneratedᚐWorkshift(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOWorkshift2ᚖmazzaᚋentᚋgeneratedᚐWorkshift(ctx context.Context, sel ast.SelectionSet, v *generated.Workshift) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Workshift(ctx, sel, v)
}

func (ec *executionContext) unmarshalOWorkshiftStatus2ᚕmazzaᚋentᚋgeneratedᚋworkshiftᚐStatusᚄ(ctx context.Context, v interface{}) ([]workshift.Status, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]workshift.Status, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNWorkshiftStatus2mazzaᚋentᚋgeneratedᚋworkshiftᚐStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOWorkshiftStatus2ᚕmazzaᚋentᚋgeneratedᚋworkshiftᚐStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []workshift.Status) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWorkshiftStatus2mazzaᚋentᚋgeneratedᚋworkshiftᚐStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOWorkshiftStatus2ᚖmazzaᚋentᚋgeneratedᚋworkshiftᚐStatus(ctx context.Context, v interface{}) (*workshift.Status, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(workshift.Status)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOWorkshiftStatus2ᚖmazzaᚋentᚋgeneratedᚋworkshiftᚐStatus(ctx context.Context, sel ast.SelectionSet, v *workshift.Status) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOWorkshiftWhereInput2ᚕᚖmazzaᚋentᚋgeneratedᚐWorkshiftWhereInputᚄ(ctx context.Context, v interface{}) ([]*generated.WorkshiftWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*generated.WorkshiftWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNWorkshiftWhereInput2ᚖmazzaᚋentᚋgeneratedᚐWorkshiftWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOWorkshiftWhereInput2ᚖmazzaᚋentᚋgeneratedᚐWorkshiftWhereInput(ctx context.Context, v interface{}) (*generated.WorkshiftWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputWorkshiftWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
