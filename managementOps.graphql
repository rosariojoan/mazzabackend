
type ClientList {
    name: String!
    outstandingBalance: Float!
    invoiceCount: Int!
}

type SupplierList {
    name: String!
    outstandingBalance: Float!
    invoiceCount: Int!
}

type LoanProviderList {
    name: String!
    outstandingBalance: Float!
    totalBorrowed: Float!
    loansCount: Int!
    averageInterestRate: Float!
}

type ReceivableAggregationOutput {
  company: ID
  count: Int
  sum: Float
}

type PayableAggregationOutput {
  company: ID
  count: Int
  sum: Float
}

type LoanAggregationOutput {
  company: ID
  count: Int
  sum: Float
}

type AgingBucket {
  range: String!
  totalAmount: Float!
  count: Int
}

enum ReceivablesGroupBy {
  AGE
  CUSTOMER
  DAYSDUE
  STATUS
}

enum PayablesGroupBy {
  AGE
  NAME
  DAYSDUE
  STATUS
}

enum LoansGroupBy {
  category
  provider
  status
}

input CreateLoanInputData {
   loanInput: CreateLoanInput!
   accountingEntry: BaseEntryRegistrationInput
}

input UpdateLoanInputData {
   id: ID!
   loanInput: UpdateLoanInput!
   accountingEntry: BaseEntryRegistrationInput
}

#-----------------------------------------------
extend type Mutation {
   createLoan(input: CreateLoanInputData!): Loan!
   updateLoan(input: UpdateLoanInputData!): Loan!
}

extend type Query {
   clientList(top: Int): [ClientList!]!
   supplierList(top: Int): [SupplierList!]!
   loanProviderList(top: Int): [LoanProviderList!]!

   getLoan(id: ID!): Loan!

   aggregateReceivables(
      where: ReceivableWhereInput
      groupBy: [ReceivablesGroupBy!]
   ): [ReceivableAggregationOutput!]!

   aggregatePayables(
      where: PayableWhereInput
      groupBy: [PayablesGroupBy!]
   ): [PayableAggregationOutput!]!
   
   aggregateLoans(
      where: LoanWhereInput
      groupBy: [LoansGroupBy!]
   ): [LoanAggregationOutput!]!

   accountsReceivableAging(name: String): [AgingBucket!]!
   accountsPayableAging(name: String): [AgingBucket!]!
   loansAging(name: String): [AgingBucket!]!
}