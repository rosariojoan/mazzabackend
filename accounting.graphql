# input EntryTreasuryInput {
#     id:     ID!
#     amount: Float!
# }

input EntryProductInput {
  id: ID!
  amount: Float!
  quantity: Int!
}

input ReceivableInput {
  amount: Float!
  name: String!
  date: Time!
  dueDate: Time!
}

input ReceivableUpdateInput {
  id: ID!
  addAmountInDefault: Float
  addBalance: Float!
  status: ReceivableStatus!
}

input PayableInput {
  amount: Float!
  name: String!
  date: Time!
  dueDate: Time!
}

input PayableUpdateInput {
  id: ID!
  addAmountInDefault: Float
  addBalance: Float!
  status: PayableStatus!
}

input EntryItem {
  account: String!
  accountType: AccountType!
  amount: Float!
  isDebit: Boolean!
  label: String!
  category: String!
}

input InvoiceIssuer {
  name: String!
  taxID: String!
  address: String!
  city: String!
  country: String!
  phone: String!
  email: String!
}

input InvoiceCustomer {
  name: String!
  taxID: String!
  address: String!
  city: String!
  country: String!
  phone: String!
  email: String!
}

input InvoiceTotals {
  subtotal: String!
  vatRate: String!
  vat: String!
  total: String!
}

input PaymentDetails {
  bankName: String!
  accountNumber: String!
  iban: String!
  dueDate: String!
}

enum BaseOperationType {
  SALES
  SALES_RETURN
  PURCHASE
  PURCHASE_RETURN
  OTHER
  INITIAL_SETUP
}

enum SalesOperationType {
  SALES
  SALES_RETURN
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
  TAX_EXPENSE
  INCOME
  DIVIDEND_EXPENSE
  CONTRA_ASSET
  CONTRA_LIABILITY
  CONTRA_REVENUE
  CONTRA_EXPENSE
}

input BaseEntryRegistrationInput {
  main: [EntryItem!]!
  counterpart: [EntryItem!]!
  attachment: [String!]
  cashInput: Float
  date: Time!
  description: String
  operationType: BaseOperationType!
  payableInput: PayableInput
  payableUpdateInput: PayableUpdateInput
  productInput: Int
  receivableInput: ReceivableInput
  receivableUpdateInput: ReceivableUpdateInput
  totalTransactionValue: Float!
}

input InvoiceInput {
  accountingEntryData: BaseEntryRegistrationInput!
  invoiceData: CreateInvoiceInput!
  inventoryMovements: [CreateInventoryMovementInput!]
}

input SalesQuotationInput {
  invoiceData: CreateInvoiceInput!
}

input LedgerDownloadInput {
  startDate: Time!
  endDate: Time!
}

input ReportInput {
  companyID: ID
  date: Time!
}

type TrialBalanceRowItem {
  account: String!
  accountType: String!
  label: String!
  debit: Float!
  credit: Float!
  balance: Float!
}

type ReportRowItem {
  account: String!
  label: String!
  value: Float!
}

type Period {
  start: Time!
  end: Time!
}

type Assets {
  currentAssets: [ReportRowItem]!
  totalCurrentAssets: Float!
  fixedAssets: [ReportRowItem]!
  totalFixedAssets: Float!
  totalAssets: Float!
}

type Liabilities {
  currentLiabilities: [ReportRowItem]!
  totalCurrentLiabilities: Float!
  nonCurrentLiabilities: [ReportRowItem]!
  totalNonCurrentLiabilities: Float!
  totalLiabilities: Float!
}

type Equity {
  equity: [ReportRowItem]!
  totalEquity: Float!
}


type IncomeStatementRowItem {
  account: String!
  accountType: String!
  category: String!
  label: String!
  value: Float!
}

type IncomeStatementOuput {
  revenues: [IncomeStatementRowItem!]!
  netRevenue: Float!
  expenses: [IncomeStatementRowItem!]!
  totalExpenses: Float!
  earningsBeforeTax: Float!
  taxExpense: Float!
  netIncome: Float!
  period: Period!
  isProvisional: Boolean!
}

type BalanceSheetOuput {
  assets: Assets!
  liabilities: Liabilities!
  equity: Equity!
  totalLiabilityAndEquity: Float!
  period: Period!
  isProvisional: Boolean!
}

type FileOutput {
  encoding: String!
  kind: String!
  name: String!
  data: String!
}

# Graphql output from sales and sales quotation entry
type FileDetailsOutput {
  message: String!
  file: FileOutput
}

type InvoiceIssuanceOutput {
  message: String!
  fileUrl: String!
}

type InvoiceCount {
  status: InvoiceStatus!
  count: Int!
}

# -------------------------------------------------
extend type Mutation {
  issueSalesQuotation(input: SalesQuotationInput!): InvoiceIssuanceOutput!
  issueInvoice(input: InvoiceInput!): InvoiceIssuanceOutput!
  createInvoiceDraft(input: CreateInvoiceInput!): Invoice!
  deleteInvoiceDraft(id: ID!): Boolean!
  registerAccountingEntries(input: BaseEntryRegistrationInput!): String
}

extend type Query {
  trialBalance(date: Time!): [TrialBalanceRowItem]!
  incomeStatement(startDate: Time, endDate: Time): IncomeStatementOuput!
  balanceSheet(date: Time!): BalanceSheetOuput!
  # cashFlow(date: Time!): CashFlowRowItem!

  downloadLedger(where: LedgerDownloadInput!): FileDetailsOutput!
  downloadTrialBalance(where: ReportInput!): FileDetailsOutput!
  downloadIncomeStatement(where: ReportInput!): FileDetailsOutput!
  downloadBalanceSheet(where: ReportInput!): FileDetailsOutput!
  # downloadCashFlow(where: CashFlowDownloadInput!): FileDetailsOutput!

  countInvoices: [InvoiceCount!]!
}
