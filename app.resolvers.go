package mazza

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.53

import (
	"context"
	"fmt"
	"mazza/app/auth"
	"mazza/app/utils"
	"mazza/ent"
	"mazza/ent/company"
	"mazza/ent/customer"
	"mazza/ent/employee"
	"mazza/ent/payable"
	"mazza/ent/product"
	"mazza/ent/supplier"
	"mazza/ent/treasury"
	"mazza/ent/user"
	"mazza/ent/userrole"
	"mazza/ent/workshift"
	"mazza/ent/worktag"
	"mazza/ent/worktask"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Signup is the resolver for the signup field.
func (r *mutationResolver) Signup(ctx context.Context, input SignupInput) (*LoginOutput, error) {
	newCompany, err := r.CreateCompany(ctx, input.CompanyInput)
	if err != nil {
		return nil, err
	}

	newUser, err := r.CreateUser(ctx, *input.UserInput)
	if err != nil {
		return nil, err
	}

	role, err := r.client.UserRole.Create().SetRole(userrole.RoleAdmin).Save(ctx)
	if err != nil {
		return nil, err
	}

	_, err = newCompany.Update().AddAvailableRoleIDs(role.ID).Save(ctx)
	if err != nil {
		return nil, err
	}

	newUser, err = newUser.Update().AddAssignedRoleIDs(role.ID).Save(ctx)
	if err != nil {
		return nil, err
	}

	// loginInput := LoginInput{Username: newUser.Username, Password: input.UserInput.Password, FcmToken: *input.UserInput.FcmToken}
	// loginOutput, err := r.Login(ctx, loginInput)
	err = fmt.Errorf("miiniijnjn")
	// if err != nil {
	return nil, fmt.Errorf("your account was created, please use your creations to log in")
	// }

	// return loginOutput, nil
}

// CreateCompany is the resolver for the createCompany field.
func (r *mutationResolver) CreateCompany(ctx context.Context, input *ent.CreateCompanyInput) (*ent.Company, error) {
	client := ent.FromContext(ctx)
	company, err := client.Company.Create().SetInput(*input).Save(ctx)
	if err == nil {
		_ = utils.CreateDefaultItems(ctx, company.ID)
	}
	return company, err
}

// UpdateCompany is the resolver for the updateCompany field.
func (r *mutationResolver) UpdateCompany(ctx context.Context, id int, input ent.UpdateCompanyInput) (*ent.Company, error) {
	client := ent.FromContext(ctx)
	currentCompany, _, _ := utils.GetSession(&ctx)
	if currentCompany.ID != id {
		return nil, fmt.Errorf("unauthorized")
	}
	return client.Company.UpdateOneID(id).SetInput(input).Save(ctx)
}

// InvitedUserSignup is the resolver for the invitedUserSignup field.
func (r *mutationResolver) InvitedUserSignup(ctx context.Context, input InvitedUserSignupInput) (*ent.User, error) {
	panic(fmt.Errorf("not implemented: InvitedUserSignup - invitedUserSignup"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input ent.CreateUserInput) (*ent.User, error) {
	client := ent.FromContext(ctx)
	input.Password = utils.HashPwd(&input.Password)
	return client.User.Create().SetInput(input).Save(ctx)
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id int, input ent.UpdateUserInput) (*ent.User, error) {
	client := ent.FromContext(ctx)
	currentUser, _, _ := utils.GetSession(&ctx)
	if currentUser == nil {
		return nil, fmt.Errorf("unauthorized")
	}

	// Beside from admin, users can only update themselves
	if currentUser.ID != id {
		return nil, fmt.Errorf("unauthorized")
	}
	// Admin updating other users from the same company is not implemented yet.
	return client.User.UpdateOneID(id).SetInput(input).Save(ctx)
}

// ForgotPassword is the resolver for the forgotPassword field.
func (r *mutationResolver) ForgotPassword(ctx context.Context, username string) (string, error) {
	err := auth.ForgotPassword(&ctx, username)
	return "reset email sent to " + username, err
}

// ResetPassword is the resolver for the resetPassword field.
func (r *mutationResolver) ResetPassword(ctx context.Context, input ResetPasswordInput) (bool, error) {
	err := auth.ResetPassword(&ctx, input.Token, input.Password)
	if err != nil {
		return false, fmt.Errorf("invalid token")
	}
	return true, nil
}

// Unsubscribe is the resolver for the unsubscribe field.
func (r *mutationResolver) Unsubscribe(ctx context.Context, id int) (bool, error) {
	err := auth.Unsubscribe(&ctx)
	if err != nil {
		return false, fmt.Errorf("not allowed")
	}
	return true, nil
}

// CreateUserRole is the resolver for the createUserRole field.
func (r *mutationResolver) CreateUserRole(ctx context.Context, input ent.CreateUserRoleInput) (bool, error) {
	panic(fmt.Errorf("not implemented: CreateUserRole - createUserRole"))
}

// CreateCustomer is the resolver for the createCustomer field.
func (r *mutationResolver) CreateCustomer(ctx context.Context, input ent.CreateCustomerInput) (*ent.Customer, error) {
	_, currentCompany, _ := utils.GetSession(&ctx)
	return r.client.Customer.Create().SetInput(input).SetCompanyID(currentCompany.ID).Save(ctx)
}

// UpdateCustomer is the resolver for the updateCustomer field.
func (r *mutationResolver) UpdateCustomer(ctx context.Context, id int, input ent.UpdateCustomerInput) (*ent.Customer, error) {
	companyQ := utils.CurrentCompanyQuery(&ctx)
	filter := customer.HasCompanyWith(companyQ)
	return ent.FromContext(ctx).Customer.UpdateOneID(id).Where(filter).SetInput(input).Save(ctx)
}

// DeleteCustomer is the resolver for the deleteCustomer field.
func (r *mutationResolver) DeleteCustomer(ctx context.Context, id int) (bool, error) {
	companyQ := utils.CurrentCompanyQuery(&ctx)
	filter := customer.HasCompanyWith(companyQ)

	if err := ent.FromContext(ctx).Customer.DeleteOneID(id).Where(filter).Exec(ctx); err != nil {
		return false, fmt.Errorf("")
	}
	return true, nil
}

// CreateEmployee is the resolver for the createEmployee field.
func (r *mutationResolver) CreateEmployee(ctx context.Context, input ent.CreateEmployeeInput) (*ent.Employee, error) {
	_, currentCompany, _ := utils.GetSession(&ctx)
	return r.client.Employee.Create().SetInput(input).SetCompanyID(currentCompany.ID).Save(ctx)
}

// UpdateEmployee is the resolver for the updateEmployee field.
func (r *mutationResolver) UpdateEmployee(ctx context.Context, id int, input ent.UpdateEmployeeInput) (*ent.Employee, error) {
	companyQ := utils.CurrentCompanyQuery(&ctx)
	filter := employee.HasCompanyWith(companyQ)
	return ent.FromContext(ctx).Employee.UpdateOneID(id).Where(filter).SetInput(input).Save(ctx)
}

// DeleteEmployee is the resolver for the deleteEmployee field.
func (r *mutationResolver) DeleteEmployee(ctx context.Context, id int) (bool, error) {
	companyQ := utils.CurrentCompanyQuery(&ctx)
	filter := employee.HasCompanyWith(companyQ)

	if err := ent.FromContext(ctx).Employee.DeleteOneID(id).Where(filter).Exec(ctx); err != nil {
		return false, fmt.Errorf("")
	}
	return true, nil
}

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input ent.CreateProductInput) (*ent.Product, error) {
	_, currentCompany, _ := utils.GetSession(&ctx)
	return r.client.Product.Create().SetInput(input).SetCompanyID(currentCompany.ID).Save(ctx)
}

// UpdateProduct is the resolver for the updateProduct field.
func (r *mutationResolver) UpdateProduct(ctx context.Context, id int, input ent.UpdateProductInput) (*ent.Product, error) {
	companyQ := utils.CurrentCompanyQuery(&ctx)
	filter := product.HasCompanyWith(companyQ)
	return ent.FromContext(ctx).Product.UpdateOneID(id).Where(filter).SetInput(input).Save(ctx)
}

// DeleteProduct is the resolver for the deleteProduct field.
func (r *mutationResolver) DeleteProduct(ctx context.Context, id int) (bool, error) {
	companyQ := utils.CurrentCompanyQuery(&ctx)
	filter := product.HasCompanyWith(companyQ)

	if err := ent.FromContext(ctx).Product.DeleteOneID(id).Where(filter).Exec(ctx); err != nil {
		return false, fmt.Errorf("")
	}
	return true, nil
}

// CreateSupplier is the resolver for the createSupplier field.
func (r *mutationResolver) CreateSupplier(ctx context.Context, input ent.CreateSupplierInput) (*ent.Supplier, error) {
	_, currentCompany, _ := utils.GetSession(&ctx)
	return r.client.Supplier.Create().SetInput(input).SetCompanyID(currentCompany.ID).Save(ctx)
}

// UpdateSupplier is the resolver for the updateSupplier field.
func (r *mutationResolver) UpdateSupplier(ctx context.Context, id int, input ent.UpdateSupplierInput) (*ent.Supplier, error) {
	companyQ := utils.CurrentCompanyQuery(&ctx)
	filter := supplier.HasCompanyWith(companyQ)
	return ent.FromContext(ctx).Supplier.UpdateOneID(id).Where(filter).SetInput(input).Save(ctx)
}

// DeleteSupplier is the resolver for the deleteSupplier field.
func (r *mutationResolver) DeleteSupplier(ctx context.Context, id int) (bool, error) {
	companyQ := utils.CurrentCompanyQuery(&ctx)
	filter := supplier.HasCompanyWith(companyQ)

	if err := ent.FromContext(ctx).Supplier.DeleteOneID(id).Where(filter).Exec(ctx); err != nil {
		return false, fmt.Errorf("")
	}
	return true, nil
}

// CreateTreasury is the resolver for the createTreasury field.
func (r *mutationResolver) CreateTreasury(ctx context.Context, input ent.CreateTreasuryInput) (*ent.Treasury, error) {
	_, currentCompany, _ := utils.GetSession(&ctx)
	return r.client.Treasury.Create().SetInput(input).SetCompanyID(currentCompany.ID).Save(ctx)
}

// UpdateTreasury is the resolver for the updateTreasury field.
func (r *mutationResolver) UpdateTreasury(ctx context.Context, id int, input ent.UpdateTreasuryInput) (*ent.Treasury, error) {
	companyQ := utils.CurrentCompanyQuery(&ctx)
	filter := treasury.HasCompanyWith(companyQ)
	return ent.FromContext(ctx).Treasury.UpdateOneID(id).Where(filter).SetInput(input).Save(ctx)
}

// DeleteTreasury is the resolver for the deleteTreasury field.
func (r *mutationResolver) DeleteTreasury(ctx context.Context, id int) (bool, error) {
	companyQ := utils.CurrentCompanyQuery(&ctx)
	filter := treasury.HasCompanyWith(companyQ)

	if err := ent.FromContext(ctx).Treasury.DeleteOneID(id).Where(filter).Exec(ctx); err != nil {
		return false, fmt.Errorf("")
	}
	return true, nil
}

// CreateWorkShift is the resolver for the createWorkShift field.
func (r *mutationResolver) CreateWorkShift(ctx context.Context, input ent.CreateWorkshiftInput) (*ent.Workshift, error) {
	_, currentCompany, employeeID := utils.GetSession(&ctx)
	var clockIn time.Time
	if input.EditRequestID == nil {
		clockIn = time.Now()
	} else {
		clockIn = *input.ClockIn
	}
	fmt.Println(&input)

	return r.client.Workshift.Create().SetInput(input).
		SetCompanyID(currentCompany.ID).
		SetEmployeeID(*employeeID).
		SetClockIn(clockIn).SetStatus(workshift.StatusPENDING).
		Save(ctx)
}

// UpdateWorkShift is the resolver for the updateWorkShift field.
func (r *mutationResolver) UpdateWorkShift(ctx context.Context, id int, input ent.UpdateWorkshiftInput) (*ent.Workshift, error) {
	companyQ := utils.CurrentCompanyQuery(&ctx)
	filter := workshift.HasCompanyWith(companyQ)
	return ent.FromContext(ctx).Workshift.UpdateOneID(id).Where(filter).SetInput(input).Save(ctx)
}

// DeleteWorkShift is the resolver for the deleteWorkShift field.
func (r *mutationResolver) DeleteWorkShift(ctx context.Context, id int) (bool, error) {
	companyQ := utils.CurrentCompanyQuery(&ctx)
	filter := workshift.HasCompanyWith(companyQ)

	if err := ent.FromContext(ctx).Workshift.DeleteOneID(id).Where(filter).Exec(ctx); err != nil {
		return false, err
	}
	return true, nil
}

// CreateWorkTask is the resolver for the createWorkTask field.
func (r *mutationResolver) CreateWorkTask(ctx context.Context, input ent.CreateWorktaskInput) (*ent.Worktask, error) {
	currentUser, currentCompany, _ := utils.GetSession(&ctx)
	return r.client.Worktask.Create().SetInput(input).SetCompanyID(currentCompany.ID).
		SetCreatedByID(currentUser.ID).Save(ctx)
}

// UpdateWorkTask is the resolver for the updateWorkTask field.
func (r *mutationResolver) UpdateWorkTask(ctx context.Context, id int, input ent.UpdateWorktaskInput) (*ent.Worktask, error) {
	companyQ := utils.CurrentCompanyQuery(&ctx)
	filter := worktask.HasCompanyWith(companyQ)
	return ent.FromContext(ctx).Worktask.UpdateOneID(id).Where(filter).SetInput(input).Save(ctx)
}

// DeleteWorkTask is the resolver for the deleteWorkTask field.
func (r *mutationResolver) DeleteWorkTask(ctx context.Context, id int) (bool, error) {
	companyQ := utils.CurrentCompanyQuery(&ctx)
	filter := worktask.HasCompanyWith(companyQ)
	// r.client.Workshift.Query().GroupBy().Aggregate()
	if err := ent.FromContext(ctx).Worktask.DeleteOneID(id).Where(filter).Exec(ctx); err != nil {
		return false, err
	}
	return true, nil
}

// CreateWorkTag is the resolver for the createWorkTag field.
func (r *mutationResolver) CreateWorkTag(ctx context.Context, input ent.CreateWorktagInput) (*ent.Worktag, error) {
	_, currentCompany, _ := utils.GetSession(&ctx)
	return r.client.Worktag.Create().SetInput(input).SetCompanyID(currentCompany.ID).Save(ctx)
}

// UpdateWorkTag is the resolver for the updateWorkTag field.
func (r *mutationResolver) UpdateWorkTag(ctx context.Context, id int, input ent.UpdateWorktagInput) (*ent.Worktag, error) {
	companyQ := utils.CurrentCompanyQuery(&ctx)
	filter := worktag.HasCompanyWith(companyQ)
	return ent.FromContext(ctx).Worktag.UpdateOneID(id).Where(filter).SetInput(input).Save(ctx)
}

// DeleteWorkTag is the resolver for the deleteWorkTag field.
func (r *mutationResolver) DeleteWorkTag(ctx context.Context, id int) (bool, error) {
	companyQ := utils.CurrentCompanyQuery(&ctx)
	filter := worktag.HasCompanyWith(companyQ)

	if err := ent.FromContext(ctx).Worktag.DeleteOneID(id).Where(filter).Exec(ctx); err != nil {
		return false, fmt.Errorf("")
	}
	return true, nil
}

// VerifyPasswordResetToken is the resolver for the verifyPasswordResetToken field.
func (r *queryResolver) VerifyPasswordResetToken(ctx context.Context, token string) (bool, error) {
	err := auth.VerifyPasswordResetToken(&ctx, r.client, token)
	if err != nil {
		return false, &ent.NotFoundError{}
	}
	return true, nil
}

// Companies is the resolver for the companies field.
func (r *queryResolver) Companies(ctx context.Context, where *ent.CompanyWhereInput) ([]*ent.Company, error) {
	filter := utils.CompanyQuery(&ctx)
	query, err := where.Filter(r.client.Company.Query().Where(filter))
	if err != nil {
		return nil, err
	}
	return query.All(ctx)
}

// Customers is the resolver for the customers field.
func (r *queryResolver) Customers(ctx context.Context, where *ent.CustomerWhereInput) ([]*ent.Customer, error) {
	companyQ := utils.CurrentCompanyQuery(&ctx)
	filter := customer.HasCompanyWith(companyQ)
	query, err := where.Filter(r.client.Customer.Query().Where(filter))
	if err != nil {
		return nil, err
	}
	return query.All(ctx)
}

// Employees is the resolver for the employees field.
func (r *queryResolver) Employees(ctx context.Context, where *ent.EmployeeWhereInput) ([]*ent.Employee, error) {
	companyQ := utils.CurrentCompanyQuery(&ctx)
	filter := employee.HasCompanyWith(companyQ)
	query, err := where.Filter(r.client.Employee.Query().Where(filter))
	if err != nil {
		return nil, err
	}
	return query.All(ctx)
}

// Payables is the resolver for the payables field.
func (r *queryResolver) Payables(ctx context.Context, where *ent.PayableWhereInput) ([]*ent.Payable, error) {
	supplierQ := supplier.HasCompanyWith(utils.CurrentCompanyQuery(&ctx))
	filter := payable.HasSupplierWith(supplierQ)
	query, err := where.Filter(r.client.Payable.Query().Where(filter))
	if err != nil {
		return nil, err
	}
	return query.All(ctx)
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context, where *ent.ProductWhereInput) ([]*ent.Product, error) {
	filter := product.HasCompanyWith(utils.CurrentCompanyQuery(&ctx))
	query, err := where.Filter(r.client.Product.Query().Where(filter))
	if err != nil {
		return nil, err
	}
	return query.All(ctx)
}

// LowStock is the resolver for the lowStock field.
func (r *queryResolver) LowStock(ctx context.Context, where *ent.ProductWhereInput) ([]*ent.Product, error) {
	companyQ := product.HasCompanyWith(utils.CurrentCompanyQuery(&ctx))
	productQ := sql.FieldsLT(product.FieldStock, product.FieldMinimumStock)
	query, err := where.Filter(r.client.Product.Query().Where(companyQ, productQ))
	if err != nil {
		return nil, err
	}
	return query.All(ctx)
}

// NumberOfProducts is the resolver for the numberOfProducts field.
func (r *queryResolver) NumberOfProducts(ctx context.Context, where *ent.ProductWhereInput) (int, error) {
	filter := product.HasCompanyWith(utils.CurrentCompanyQuery(&ctx))
	query, err := where.Filter(r.client.Product.Query().Where(filter))
	if err != nil {
		return 0, err
	}
	return query.Count(ctx)
}

// NumberOfLowStock is the resolver for the numberOfLowStock field.
func (r *queryResolver) NumberOfLowStock(ctx context.Context, where *ent.ProductWhereInput) (int, error) {
	companyQ := product.HasCompanyWith(utils.CurrentCompanyQuery(&ctx))
	productQ := sql.FieldsLT(product.FieldStock, product.FieldMinimumStock)
	query, err := where.Filter(r.client.Product.Query().Where(companyQ, productQ))
	if err != nil {
		return 0, err
	}
	return query.Count(ctx)
}

// NumberOfOutOfStock is the resolver for the numberOfOutOfStock field.
func (r *queryResolver) NumberOfOutOfStock(ctx context.Context, where *ent.ProductWhereInput) (int, error) {
	companyQ := product.HasCompanyWith(utils.CurrentCompanyQuery(&ctx))
	productQ := product.And(product.CategoryEQ(product.CategoryMerchandise))
	query, err := where.Filter(r.client.Product.Query().Where(companyQ, productQ))
	if err != nil {
		return 0, err
	}
	return query.Count(ctx)
}

// Suppliers is the resolver for the suppliers field.
func (r *queryResolver) Suppliers(ctx context.Context, where *ent.SupplierWhereInput) ([]*ent.Supplier, error) {
	filter := supplier.HasCompanyWith(utils.CurrentCompanyQuery(&ctx))
	query, err := where.Filter(r.client.Supplier.Query().Where(filter))
	if err != nil {
		return nil, err
	}
	return query.All(ctx)
}

// Treasuries is the resolver for the treasuries field.
func (r *queryResolver) Treasuries(ctx context.Context, where *ent.TreasuryWhereInput) ([]*ent.Treasury, error) {
	filter := treasury.HasCompanyWith(utils.CurrentCompanyQuery(&ctx))
	query, err := where.Filter(r.client.Treasury.Query().Where(filter))
	if err != nil {
		return nil, err
	}
	return query.All(ctx)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, where *ent.UserWhereInput) ([]*ent.User, error) {
	roleQ := utils.UserRoleQuery(&ctx)
	filter := user.HasAssignedRolesWith(roleQ)
	query, err := where.Filter(r.client.User.Query().Where(filter))
	if err != nil {
		return nil, err
	}
	return query.All(ctx)
}

// UserRoles is the resolver for the userRoles field.
func (r *queryResolver) UserRoles(ctx context.Context, where *ent.UserRoleWhereInput) ([]*ent.UserRole, error) {
	filter := userrole.HasCompanyWith(utils.CurrentCompanyQuery(&ctx))
	query, err := where.Filter(r.client.UserRole.Query().Where(filter))
	if err != nil {
		return nil, err
	}
	return query.All(ctx)
}

// WorkShifts is the resolver for the workShifts field.
func (r *queryResolver) WorkShifts(ctx context.Context, where *ent.WorkshiftWhereInput) ([]*ent.Workshift, error) {
	_, currentCompany, _ := utils.GetSession(&ctx)
	companyQ := workshift.HasCompanyWith(company.IDEQ(currentCompany.ID))
	query, err := where.Filter(r.client.Workshift.Query().Where(companyQ))
	if err != nil {
		return nil, err
	}
	return query.All(ctx)
}

// WorkTags is the resolver for the workTags field.
func (r *queryResolver) WorkTags(ctx context.Context, where *ent.WorktagWhereInput) ([]*ent.Worktag, error) {
	_, currentCompany, _ := utils.GetSession(&ctx)
	companyQ := worktag.HasCompanyWith(company.IDEQ(currentCompany.ID))
	query, err := where.Filter(r.client.Worktag.Query().Where(companyQ))
	if err != nil {
		return nil, err
	}
	return query.All(ctx)
}

// WorkTasks is the resolver for the workTasks field.
func (r *queryResolver) WorkTasks(ctx context.Context, where *ent.WorktaskWhereInput) ([]*ent.Worktask, error) {
	currentUser, currentCompany, _ := utils.GetSession(&ctx)
	userQ := worktask.Or(
		worktask.HasAssignedToWith(employee.HasUserWith(user.IDEQ(currentUser.ID))),
		worktask.HasCreatedByWith(user.IDEQ(currentUser.ID)),
	)
	companyQ := worktask.HasCompanyWith(company.IDEQ(currentCompany.ID))
	query, err := where.Filter(r.client.Worktask.Query().Where(userQ, companyQ))
	if err != nil {
		return nil, err
	}
	return query.All(ctx)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
