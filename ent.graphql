directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type AccountingEntry implements Node {
  id: ID!
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  updatedat: Time! @goField(name: "UpdatedAt", forceResolver: false)
  deletedat: Time @goField(name: "DeletedAt", forceResolver: false)
  number: Int!
  group: Int!
  date: Time!
  account: String!
  label: String!
  amount: Float!
  description: String!
  accounttype: AccountingEntryAccountType! @goField(name: "AccountType", forceResolver: false)
  category: String!
  isdebit: Boolean! @goField(name: "IsDebit", forceResolver: false)
  isreversal: Boolean! @goField(name: "IsReversal", forceResolver: false)
  reversed: Boolean!
  company: Company
  user: User
}
"""
AccountingEntryAccountType is enum for the field accountType
"""
enum AccountingEntryAccountType @goModel(model: "mazza/ent/generated/accountingentry.AccountType") {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
  TAX_EXPENSE
  INCOME
  DIVIDEND_EXPENSE
  CONTRA_ASSET
  CONTRA_LIABILITY
  CONTRA_REVENUE
  CONTRA_EXPENSE
}
"""
A connection to a list of items.
"""
type AccountingEntryConnection {
  """
  A list of edges.
  """
  edges: [AccountingEntryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type AccountingEntryEdge {
  """
  The item at the end of the edge.
  """
  node: AccountingEntry
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for AccountingEntry connections
"""
input AccountingEntryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order AccountingEntries.
  """
  field: AccountingEntryOrderField!
}
"""
Properties by which AccountingEntry connections can be ordered.
"""
enum AccountingEntryOrderField {
  CREATED_AT
  DATE
  ACCOUNT
  AMOUNT
  DESCRIPTION
  ACCOUNTTYPE
  CATEGORY
  ISDEBIT
}
"""
AccountingEntryWhereInput is used for filtering AccountingEntry objects.
Input was generated by ent.
"""
input AccountingEntryWhereInput {
  not: AccountingEntryWhereInput
  and: [AccountingEntryWhereInput!]
  or: [AccountingEntryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  createdAt field predicates
  """
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """
  updatedAt field predicates
  """
  updatedat: Time
  updatedatNEQ: Time
  updatedatIn: [Time!]
  updatedatNotIn: [Time!]
  updatedatGT: Time
  updatedatGTE: Time
  updatedatLT: Time
  updatedatLTE: Time
  """
  deletedAt field predicates
  """
  deletedat: Time
  deletedatNEQ: Time
  deletedatIn: [Time!]
  deletedatNotIn: [Time!]
  deletedatGT: Time
  deletedatGTE: Time
  deletedatLT: Time
  deletedatLTE: Time
  deletedatIsNil: Boolean
  deletedatNotNil: Boolean
  """
  number field predicates
  """
  number: Int
  numberNEQ: Int
  numberIn: [Int!]
  numberNotIn: [Int!]
  numberGT: Int
  numberGTE: Int
  numberLT: Int
  numberLTE: Int
  """
  group field predicates
  """
  group: Int
  groupNEQ: Int
  groupIn: [Int!]
  groupNotIn: [Int!]
  groupGT: Int
  groupGTE: Int
  groupLT: Int
  groupLTE: Int
  """
  date field predicates
  """
  date: Time
  dateNEQ: Time
  dateIn: [Time!]
  dateNotIn: [Time!]
  dateGT: Time
  dateGTE: Time
  dateLT: Time
  dateLTE: Time
  """
  account field predicates
  """
  account: String
  accountNEQ: String
  accountIn: [String!]
  accountNotIn: [String!]
  accountGT: String
  accountGTE: String
  accountLT: String
  accountLTE: String
  accountContains: String
  accountHasPrefix: String
  accountHasSuffix: String
  accountEqualFold: String
  accountContainsFold: String
  """
  label field predicates
  """
  label: String
  labelNEQ: String
  labelIn: [String!]
  labelNotIn: [String!]
  labelGT: String
  labelGTE: String
  labelLT: String
  labelLTE: String
  labelContains: String
  labelHasPrefix: String
  labelHasSuffix: String
  labelEqualFold: String
  labelContainsFold: String
  """
  amount field predicates
  """
  amount: Float
  amountNEQ: Float
  amountIn: [Float!]
  amountNotIn: [Float!]
  amountGT: Float
  amountGTE: Float
  amountLT: Float
  amountLTE: Float
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  accountType field predicates
  """
  accounttype: AccountingEntryAccountType
  accounttypeNEQ: AccountingEntryAccountType
  accounttypeIn: [AccountingEntryAccountType!]
  accounttypeNotIn: [AccountingEntryAccountType!]
  """
  category field predicates
  """
  category: String
  categoryNEQ: String
  categoryIn: [String!]
  categoryNotIn: [String!]
  categoryGT: String
  categoryGTE: String
  categoryLT: String
  categoryLTE: String
  categoryContains: String
  categoryHasPrefix: String
  categoryHasSuffix: String
  categoryEqualFold: String
  categoryContainsFold: String
  """
  isDebit field predicates
  """
  isdebit: Boolean
  isdebitNEQ: Boolean
  """
  isReversal field predicates
  """
  isreversal: Boolean
  isreversalNEQ: Boolean
  """
  reversed field predicates
  """
  reversed: Boolean
  reversedNEQ: Boolean
  """
  company edge predicates
  """
  hasCompany: Boolean
  hasCompanyWith: [CompanyWhereInput!]
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
type Company implements Node {
  id: ID!
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  updatedat: Time! @goField(name: "UpdatedAt", forceResolver: false)
  deletedat: Time @goField(name: "DeletedAt", forceResolver: false)
  address: String
  basecurrency: String! @goField(name: "BaseCurrency", forceResolver: false)
  ceoname: String @goField(name: "CeoName", forceResolver: false)
  city: String!
  country: String!
  establishedat: Time! @goField(name: "EstablishedAt", forceResolver: false)
  description: String
  email: String
  industry: String
  lastentrydate: Time! @goField(name: "LastEntryDate", forceResolver: false)
  lastinvoicenumber: Int @goField(name: "LastInvoiceNumber", forceResolver: false)
  logourl: String @goField(name: "LogoURL", forceResolver: false)
  name: String!
  numberofemployees: Int! @goField(name: "NumberOfEmployees", forceResolver: false)
  phone: String
  taxid: String! @goField(name: "TaxId", forceResolver: false)
  vatrate: Float! @goField(name: "VatRate", forceResolver: false)
  website: String
  incompletesetup: Boolean @goField(name: "IncompleteSetup", forceResolver: false)
  availableroles: [UserRole!] @goField(name: "AvailableRoles", forceResolver: false)
  accountingentries: [AccountingEntry!] @goField(name: "AccountingEntries", forceResolver: false)
  customers: [Customer!]
  documents: [CompanyDocument!]
  employees: [Employee!]
  files: [File!]
  membersignuptokens: [MemberSignupToken!] @goField(name: "MemberSignupTokens", forceResolver: false)
  products: [Product!]
  projects: [Project!]
  payables: [Payable!]
  receivables: [Receivable!]
  suppliers: [Supplier!]
  tokens: [Token!]
  treasuries: [Treasury!]
  workshifts: [Workshift!] @goField(name: "WorkShifts", forceResolver: false)
  users: [User!]
  daughtercompanies: [Company!] @goField(name: "DaughterCompanies", forceResolver: false)
  parentcompany: Company @goField(name: "ParentCompany", forceResolver: false)
}
type CompanyDocument implements Node {
  id: ID!
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  updatedat: Time! @goField(name: "UpdatedAt", forceResolver: false)
  deletedat: Time @goField(name: "DeletedAt", forceResolver: false)
  filename: String!
  title: String!
  keywords: String!
  category: CompanyDocumentCategory!
  """
  File size in kilobyte
  """
  size: Int!
  """
  mimetype e.g. application/pdf
  """
  filetype: String! @goField(name: "FileType", forceResolver: false)
  status: CompanyDocumentStatus!
  url: String!
  thumbnail: String
  expirydate: Time! @goField(name: "ExpiryDate", forceResolver: false)
  company: Company!
  uploadedby: User @goField(name: "UploadedBy", forceResolver: false)
  approvedby: User @goField(name: "ApprovedBy", forceResolver: false)
}
"""
CompanyDocumentCategory is enum for the field category
"""
enum CompanyDocumentCategory @goModel(model: "mazza/ent/generated/companydocument.Category") {
  LEGAL
  CONTRACT
  LICENSE
  TAX
  HR
}
"""
A connection to a list of items.
"""
type CompanyDocumentConnection {
  """
  A list of edges.
  """
  edges: [CompanyDocumentEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CompanyDocumentEdge {
  """
  The item at the end of the edge.
  """
  node: CompanyDocument
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for CompanyDocument connections
"""
input CompanyDocumentOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order CompanyDocuments.
  """
  field: CompanyDocumentOrderField!
}
"""
Properties by which CompanyDocument connections can be ordered.
"""
enum CompanyDocumentOrderField {
  CREATED_AT
  CATEGORY
  STATUS
  EXPIRY_DATE
}
"""
CompanyDocumentStatus is enum for the field status
"""
enum CompanyDocumentStatus @goModel(model: "mazza/ent/generated/companydocument.Status") {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}
"""
CompanyDocumentWhereInput is used for filtering CompanyDocument objects.
Input was generated by ent.
"""
input CompanyDocumentWhereInput {
  not: CompanyDocumentWhereInput
  and: [CompanyDocumentWhereInput!]
  or: [CompanyDocumentWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  createdAt field predicates
  """
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """
  updatedAt field predicates
  """
  updatedat: Time
  updatedatNEQ: Time
  updatedatIn: [Time!]
  updatedatNotIn: [Time!]
  updatedatGT: Time
  updatedatGTE: Time
  updatedatLT: Time
  updatedatLTE: Time
  """
  deletedAt field predicates
  """
  deletedat: Time
  deletedatNEQ: Time
  deletedatIn: [Time!]
  deletedatNotIn: [Time!]
  deletedatGT: Time
  deletedatGTE: Time
  deletedatLT: Time
  deletedatLTE: Time
  deletedatIsNil: Boolean
  deletedatNotNil: Boolean
  """
  filename field predicates
  """
  filename: String
  filenameNEQ: String
  filenameIn: [String!]
  filenameNotIn: [String!]
  filenameGT: String
  filenameGTE: String
  filenameLT: String
  filenameLTE: String
  filenameContains: String
  filenameHasPrefix: String
  filenameHasSuffix: String
  filenameEqualFold: String
  filenameContainsFold: String
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  keywords field predicates
  """
  keywords: String
  keywordsNEQ: String
  keywordsIn: [String!]
  keywordsNotIn: [String!]
  keywordsGT: String
  keywordsGTE: String
  keywordsLT: String
  keywordsLTE: String
  keywordsContains: String
  keywordsHasPrefix: String
  keywordsHasSuffix: String
  keywordsEqualFold: String
  keywordsContainsFold: String
  """
  category field predicates
  """
  category: CompanyDocumentCategory
  categoryNEQ: CompanyDocumentCategory
  categoryIn: [CompanyDocumentCategory!]
  categoryNotIn: [CompanyDocumentCategory!]
  """
  size field predicates
  """
  size: Int
  sizeNEQ: Int
  sizeIn: [Int!]
  sizeNotIn: [Int!]
  sizeGT: Int
  sizeGTE: Int
  sizeLT: Int
  sizeLTE: Int
  """
  fileType field predicates
  """
  filetype: String
  filetypeNEQ: String
  filetypeIn: [String!]
  filetypeNotIn: [String!]
  filetypeGT: String
  filetypeGTE: String
  filetypeLT: String
  filetypeLTE: String
  filetypeContains: String
  filetypeHasPrefix: String
  filetypeHasSuffix: String
  filetypeEqualFold: String
  filetypeContainsFold: String
  """
  status field predicates
  """
  status: CompanyDocumentStatus
  statusNEQ: CompanyDocumentStatus
  statusIn: [CompanyDocumentStatus!]
  statusNotIn: [CompanyDocumentStatus!]
  """
  url field predicates
  """
  url: String
  urlNEQ: String
  urlIn: [String!]
  urlNotIn: [String!]
  urlGT: String
  urlGTE: String
  urlLT: String
  urlLTE: String
  urlContains: String
  urlHasPrefix: String
  urlHasSuffix: String
  urlEqualFold: String
  urlContainsFold: String
  """
  thumbnail field predicates
  """
  thumbnail: String
  thumbnailNEQ: String
  thumbnailIn: [String!]
  thumbnailNotIn: [String!]
  thumbnailGT: String
  thumbnailGTE: String
  thumbnailLT: String
  thumbnailLTE: String
  thumbnailContains: String
  thumbnailHasPrefix: String
  thumbnailHasSuffix: String
  thumbnailIsNil: Boolean
  thumbnailNotNil: Boolean
  thumbnailEqualFold: String
  thumbnailContainsFold: String
  """
  expiryDate field predicates
  """
  expirydate: Time
  expirydateNEQ: Time
  expirydateIn: [Time!]
  expirydateNotIn: [Time!]
  expirydateGT: Time
  expirydateGTE: Time
  expirydateLT: Time
  expirydateLTE: Time
  """
  company edge predicates
  """
  hasCompany: Boolean
  hasCompanyWith: [CompanyWhereInput!]
  """
  uploadedBy edge predicates
  """
  hasUploadedBy: Boolean
  hasUploadedByWith: [UserWhereInput!]
  """
  approvedBy edge predicates
  """
  hasApprovedBy: Boolean
  hasApprovedByWith: [UserWhereInput!]
}
"""
Ordering options for Company connections
"""
input CompanyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Companies.
  """
  field: CompanyOrderField!
}
"""
Properties by which Company connections can be ordered.
"""
enum CompanyOrderField {
  CREATED_AT
  CITY
  COUNTRY
  ESTABLISHEDAT
  NAME
}
"""
CompanyWhereInput is used for filtering Company objects.
Input was generated by ent.
"""
input CompanyWhereInput {
  not: CompanyWhereInput
  and: [CompanyWhereInput!]
  or: [CompanyWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  createdAt field predicates
  """
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """
  updatedAt field predicates
  """
  updatedat: Time
  updatedatNEQ: Time
  updatedatIn: [Time!]
  updatedatNotIn: [Time!]
  updatedatGT: Time
  updatedatGTE: Time
  updatedatLT: Time
  updatedatLTE: Time
  """
  deletedAt field predicates
  """
  deletedat: Time
  deletedatNEQ: Time
  deletedatIn: [Time!]
  deletedatNotIn: [Time!]
  deletedatGT: Time
  deletedatGTE: Time
  deletedatLT: Time
  deletedatLTE: Time
  deletedatIsNil: Boolean
  deletedatNotNil: Boolean
  """
  address field predicates
  """
  address: String
  addressNEQ: String
  addressIn: [String!]
  addressNotIn: [String!]
  addressGT: String
  addressGTE: String
  addressLT: String
  addressLTE: String
  addressContains: String
  addressHasPrefix: String
  addressHasSuffix: String
  addressIsNil: Boolean
  addressNotNil: Boolean
  addressEqualFold: String
  addressContainsFold: String
  """
  baseCurrency field predicates
  """
  basecurrency: String
  basecurrencyNEQ: String
  basecurrencyIn: [String!]
  basecurrencyNotIn: [String!]
  basecurrencyGT: String
  basecurrencyGTE: String
  basecurrencyLT: String
  basecurrencyLTE: String
  basecurrencyContains: String
  basecurrencyHasPrefix: String
  basecurrencyHasSuffix: String
  basecurrencyEqualFold: String
  basecurrencyContainsFold: String
  """
  ceoName field predicates
  """
  ceoname: String
  ceonameNEQ: String
  ceonameIn: [String!]
  ceonameNotIn: [String!]
  ceonameGT: String
  ceonameGTE: String
  ceonameLT: String
  ceonameLTE: String
  ceonameContains: String
  ceonameHasPrefix: String
  ceonameHasSuffix: String
  ceonameIsNil: Boolean
  ceonameNotNil: Boolean
  ceonameEqualFold: String
  ceonameContainsFold: String
  """
  city field predicates
  """
  city: String
  cityNEQ: String
  cityIn: [String!]
  cityNotIn: [String!]
  cityGT: String
  cityGTE: String
  cityLT: String
  cityLTE: String
  cityContains: String
  cityHasPrefix: String
  cityHasSuffix: String
  cityEqualFold: String
  cityContainsFold: String
  """
  country field predicates
  """
  country: String
  countryNEQ: String
  countryIn: [String!]
  countryNotIn: [String!]
  countryGT: String
  countryGTE: String
  countryLT: String
  countryLTE: String
  countryContains: String
  countryHasPrefix: String
  countryHasSuffix: String
  countryEqualFold: String
  countryContainsFold: String
  """
  establishedAt field predicates
  """
  establishedat: Time
  establishedatNEQ: Time
  establishedatIn: [Time!]
  establishedatNotIn: [Time!]
  establishedatGT: Time
  establishedatGTE: Time
  establishedatLT: Time
  establishedatLTE: Time
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailIsNil: Boolean
  emailNotNil: Boolean
  emailEqualFold: String
  emailContainsFold: String
  """
  industry field predicates
  """
  industry: String
  industryNEQ: String
  industryIn: [String!]
  industryNotIn: [String!]
  industryGT: String
  industryGTE: String
  industryLT: String
  industryLTE: String
  industryContains: String
  industryHasPrefix: String
  industryHasSuffix: String
  industryIsNil: Boolean
  industryNotNil: Boolean
  industryEqualFold: String
  industryContainsFold: String
  """
  lastEntryDate field predicates
  """
  lastentrydate: Time
  lastentrydateNEQ: Time
  lastentrydateIn: [Time!]
  lastentrydateNotIn: [Time!]
  lastentrydateGT: Time
  lastentrydateGTE: Time
  lastentrydateLT: Time
  lastentrydateLTE: Time
  """
  lastInvoiceNumber field predicates
  """
  lastinvoicenumber: Int
  lastinvoicenumberNEQ: Int
  lastinvoicenumberIn: [Int!]
  lastinvoicenumberNotIn: [Int!]
  lastinvoicenumberGT: Int
  lastinvoicenumberGTE: Int
  lastinvoicenumberLT: Int
  lastinvoicenumberLTE: Int
  lastinvoicenumberIsNil: Boolean
  lastinvoicenumberNotNil: Boolean
  """
  logoURL field predicates
  """
  logourl: String
  logourlNEQ: String
  logourlIn: [String!]
  logourlNotIn: [String!]
  logourlGT: String
  logourlGTE: String
  logourlLT: String
  logourlLTE: String
  logourlContains: String
  logourlHasPrefix: String
  logourlHasSuffix: String
  logourlIsNil: Boolean
  logourlNotNil: Boolean
  logourlEqualFold: String
  logourlContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  numberOfEmployees field predicates
  """
  numberofemployees: Int
  numberofemployeesNEQ: Int
  numberofemployeesIn: [Int!]
  numberofemployeesNotIn: [Int!]
  numberofemployeesGT: Int
  numberofemployeesGTE: Int
  numberofemployeesLT: Int
  numberofemployeesLTE: Int
  """
  phone field predicates
  """
  phone: String
  phoneNEQ: String
  phoneIn: [String!]
  phoneNotIn: [String!]
  phoneGT: String
  phoneGTE: String
  phoneLT: String
  phoneLTE: String
  phoneContains: String
  phoneHasPrefix: String
  phoneHasSuffix: String
  phoneIsNil: Boolean
  phoneNotNil: Boolean
  phoneEqualFold: String
  phoneContainsFold: String
  """
  taxId field predicates
  """
  taxid: String
  taxidNEQ: String
  taxidIn: [String!]
  taxidNotIn: [String!]
  taxidGT: String
  taxidGTE: String
  taxidLT: String
  taxidLTE: String
  taxidContains: String
  taxidHasPrefix: String
  taxidHasSuffix: String
  taxidEqualFold: String
  taxidContainsFold: String
  """
  vatRate field predicates
  """
  vatrate: Float
  vatrateNEQ: Float
  vatrateIn: [Float!]
  vatrateNotIn: [Float!]
  vatrateGT: Float
  vatrateGTE: Float
  vatrateLT: Float
  vatrateLTE: Float
  """
  website field predicates
  """
  website: String
  websiteNEQ: String
  websiteIn: [String!]
  websiteNotIn: [String!]
  websiteGT: String
  websiteGTE: String
  websiteLT: String
  websiteLTE: String
  websiteContains: String
  websiteHasPrefix: String
  websiteHasSuffix: String
  websiteIsNil: Boolean
  websiteNotNil: Boolean
  websiteEqualFold: String
  websiteContainsFold: String
  """
  incompleteSetup field predicates
  """
  incompletesetup: Boolean
  incompletesetupNEQ: Boolean
  incompletesetupIsNil: Boolean
  incompletesetupNotNil: Boolean
  """
  availableRoles edge predicates
  """
  hasAvailableRoles: Boolean
  hasAvailableRolesWith: [UserRoleWhereInput!]
  """
  accountingEntries edge predicates
  """
  hasAccountingEntries: Boolean
  hasAccountingEntriesWith: [AccountingEntryWhereInput!]
  """
  customers edge predicates
  """
  hasCustomers: Boolean
  hasCustomersWith: [CustomerWhereInput!]
  """
  documents edge predicates
  """
  hasDocuments: Boolean
  hasDocumentsWith: [CompanyDocumentWhereInput!]
  """
  employees edge predicates
  """
  hasEmployees: Boolean
  hasEmployeesWith: [EmployeeWhereInput!]
  """
  files edge predicates
  """
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
  """
  memberSignupTokens edge predicates
  """
  hasMemberSignupTokens: Boolean
  hasMemberSignupTokensWith: [MemberSignupTokenWhereInput!]
  """
  products edge predicates
  """
  hasProducts: Boolean
  hasProductsWith: [ProductWhereInput!]
  """
  projects edge predicates
  """
  hasProjects: Boolean
  hasProjectsWith: [ProjectWhereInput!]
  """
  payables edge predicates
  """
  hasPayables: Boolean
  hasPayablesWith: [PayableWhereInput!]
  """
  receivables edge predicates
  """
  hasReceivables: Boolean
  hasReceivablesWith: [ReceivableWhereInput!]
  """
  suppliers edge predicates
  """
  hasSuppliers: Boolean
  hasSuppliersWith: [SupplierWhereInput!]
  """
  tokens edge predicates
  """
  hasTokens: Boolean
  hasTokensWith: [TokenWhereInput!]
  """
  treasuries edge predicates
  """
  hasTreasuries: Boolean
  hasTreasuriesWith: [TreasuryWhereInput!]
  """
  workShifts edge predicates
  """
  hasWorkShifts: Boolean
  hasWorkShiftsWith: [WorkshiftWhereInput!]
  """
  users edge predicates
  """
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  """
  daughterCompanies edge predicates
  """
  hasDaughterCompanies: Boolean
  hasDaughterCompaniesWith: [CompanyWhereInput!]
  """
  parentCompany edge predicates
  """
  hasParentCompany: Boolean
  hasParentCompanyWith: [CompanyWhereInput!]
}
"""
CreateAccountingEntryInput is used for create AccountingEntry object.
Input was generated by ent.
"""
input CreateAccountingEntryInput {
  number: Int!
  group: Int!
  date: Time
  account: String!
  label: String!
  amount: Float!
  description: String!
  accounttype: AccountingEntryAccountType!
  category: String
  isdebit: Boolean!
  isreversal: Boolean
  reversed: Boolean
  companyID: ID
  userID: ID
}
"""
CreateCompanyDocumentInput is used for create CompanyDocument object.
Input was generated by ent.
"""
input CreateCompanyDocumentInput {
  filename: String!
  title: String!
  keywords: String!
  category: CompanyDocumentCategory!
  """
  File size in kilobyte
  """
  size: Int!
  """
  mimetype e.g. application/pdf
  """
  filetype: String!
  url: String!
  """
  Firebase cloud storage URI. Not exposed to the client
  """
  storageuri: String!
  thumbnail: String
  expirydate: Time!
}
"""
CreateCompanyInput is used for create Company object.
Input was generated by ent.
"""
input CreateCompanyInput {
  address: String
  basecurrency: String
  ceoname: String
  city: String!
  country: String!
  establishedat: Time!
  description: String
  email: String
  industry: String
  lastentrydate: Time!
  lastinvoicenumber: Int
  name: String!
  numberofemployees: Int
  phone: String
  taxid: String!
  vatrate: Float
  website: String
  incompletesetup: Boolean
  availableroleIDs: [ID!]
  accountingentryIDs: [ID!]
  customerIDs: [ID!]
  documentIDs: [ID!]
  employeeIDs: [ID!]
  fileIDs: [ID!]
  membersignuptokenIDs: [ID!]
  productIDs: [ID!]
  projectIDs: [ID!]
  payableIDs: [ID!]
  receivableIDs: [ID!]
  supplierIDs: [ID!]
  tokenIDs: [ID!]
  treasuryIDs: [ID!]
  workshiftIDs: [ID!]
  userIDs: [ID!]
  daughtercompanyIDs: [ID!]
  parentcompanyID: ID
}
"""
CreateCustomerInput is used for create Customer object.
Input was generated by ent.
"""
input CreateCustomerInput {
  address: String!
  city: String!
  country: String!
  description: String
  email: String
  isdefault: Boolean
  name: String!
  phone: String!
  taxid: String!
  companyID: ID
  receivableIDs: [ID!]
}
"""
CreateEmployeeInput is used for create Employee object.
Input was generated by ent.
"""
input CreateEmployeeInput {
  name: String!
  gender: EmployeeGender!
  position: String
  email: String
  phone: String!
  companyID: ID
  userID: ID
}
"""
CreateFileInput is used for create File object.
Input was generated by ent.
"""
input CreateFileInput {
  category: FileCategory!
  extension: String!
  size: String!
  """
  uri used to handle the file from the storage
  """
  uri: String!
  url: String!
  description: String!
  companyID: ID
}
"""
CreateMemberSignupTokenInput is used for create MemberSignupToken object.
Input was generated by ent.
"""
input CreateMemberSignupTokenInput {
  name: String!
  email: String
  """
  Must be an emoji
  """
  avatar: String!
  role: MemberSignupTokenRole!
  """
  A description about the user and its role of this user
  """
  note: String!
}
"""
CreatePayableInput is used for create Payable object.
Input was generated by ent.
"""
input CreatePayableInput {
  entrygroup: Int!
  date: Time!
  name: String
  outstandingbalance: Float!
  totaltransaction: Float!
  duedate: Time!
  status: PayableStatus!
  companyID: ID
}
"""
CreateProductInput is used for create Product object.
Input was generated by ent.
"""
input CreateProductInput {
  stock: Int
  companyID: ID
}
"""
CreateProjectInput is used for create Project object.
Input was generated by ent.
"""
input CreateProjectInput {
  name: String!
  description: String!
  startdate: Time!
  enddate: Time!
  progress: Float
  status: ProjectStatus
  companyID: ID
  createdbyID: ID
  leaderID: ID
  taskIDs: [ID!]
  milestoneIDs: [ID!]
}
"""
CreateProjectMilestoneInput is used for create ProjectMilestone object.
Input was generated by ent.
"""
input CreateProjectMilestoneInput {
  name: String!
  duedate: Time!
  projectID: ID!
}
"""
CreateProjectTaskInput is used for create ProjectTask object.
Input was generated by ent.
"""
input CreateProjectTaskInput {
  createdat: Time
  name: String!
  assigneename: String!
  """
  Where is task will be executed
  """
  location: String
  duedate: Time!
  startdate: Time!
  enddate: Time!
  description: String
  status: ProjectTaskStatus!
  projectID: ID!
  assigneeID: ID
  participantIDs: [ID!]
  createdbyID: ID
  workshiftIDs: [ID!]
}
"""
CreateReceivableInput is used for create Receivable object.
Input was generated by ent.
"""
input CreateReceivableInput {
  entrygroup: Int!
  date: Time!
  name: String
  outstandingbalance: Float!
  totaltransaction: Float!
  duedate: Time!
  status: ReceivableStatus!
  companyID: ID
}
"""
CreateSupplierInput is used for create Supplier object.
Input was generated by ent.
"""
input CreateSupplierInput {
  address: String!
  city: String!
  country: String!
  description: String!
  email: String!
  isdefault: Boolean
  name: String!
  phone: String!
  taxid: String!
  companyID: ID
  payableIDs: [ID!]
}
"""
CreateTreasuryInput is used for create Treasury object.
Input was generated by ent.
"""
input CreateTreasuryInput {
  balance: Float!
  companyID: ID
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  firebaseuid: String!
  fcmtoken: String
  email: String!
  name: String!
  address: String
  avatar: String
  photourl: String
  department: String
  phone: String
  birthdate: Time
  gender: UserGender!
  accountingentryIDs: [ID!]
  assignedroleIDs: [ID!]
  subordinateIDs: [ID!]
  leaderID: ID
  createdmembersignuptokenIDs: [ID!]
  employeeID: ID
  createdprojectIDs: [ID!]
  leaderedprojectIDs: [ID!]
  assignedprojecttaskIDs: [ID!]
  participatedprojecttaskIDs: [ID!]
  createdtaskIDs: [ID!]
  tokenIDs: [ID!]
  approvedworkshiftIDs: [ID!]
  workshiftIDs: [ID!]
  uploadeddocumentIDs: [ID!]
  approveddocumentIDs: [ID!]
}
"""
CreateUserRoleInput is used for create UserRole object.
Input was generated by ent.
"""
input CreateUserRoleInput {
  role: UserRoleRole!
  """
  Description about this role
  """
  notes: String!
  companyID: ID
  userID: ID
}
"""
CreateWorkshiftInput is used for create Workshift object.
Input was generated by ent.
"""
input CreateWorkshiftInput {
  """
  time that this shift was approved by the supervisor
  """
  approvedat: Time
  clockin: Time
  clockout: Time
  """
  it expects a serialized json like: {latitude: float, longitude: float, description: string}
  """
  clockinlocation: String!
  """
  it expects a serialized json like: {latitude: float, longitude: float, description: string}
  """
  clockoutlocation: String
  description: String
  """
  this is only used when the current item is a shift edit request
  """
  note: String
  status: WorkshiftStatus
  companyID: ID
  userID: ID
  approvedbyID: ID
  taskID: ID
  editrequestID: ID
  workshiftID: ID
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Customer implements Node {
  id: ID!
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  updatedat: Time! @goField(name: "UpdatedAt", forceResolver: false)
  deletedat: Time @goField(name: "DeletedAt", forceResolver: false)
  address: String!
  city: String!
  country: String!
  description: String
  email: String
  isdefault: Boolean @goField(name: "IsDefault", forceResolver: false)
  name: String!
  phone: String!
  taxid: String! @goField(name: "TaxId", forceResolver: false)
  company: Company
  receivables: [Receivable!]
}
"""
Ordering options for Customer connections
"""
input CustomerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Customers.
  """
  field: CustomerOrderField!
}
"""
Properties by which Customer connections can be ordered.
"""
enum CustomerOrderField {
  CREATED_AT
  CITY
}
"""
CustomerWhereInput is used for filtering Customer objects.
Input was generated by ent.
"""
input CustomerWhereInput {
  not: CustomerWhereInput
  and: [CustomerWhereInput!]
  or: [CustomerWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  createdAt field predicates
  """
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """
  updatedAt field predicates
  """
  updatedat: Time
  updatedatNEQ: Time
  updatedatIn: [Time!]
  updatedatNotIn: [Time!]
  updatedatGT: Time
  updatedatGTE: Time
  updatedatLT: Time
  updatedatLTE: Time
  """
  deletedAt field predicates
  """
  deletedat: Time
  deletedatNEQ: Time
  deletedatIn: [Time!]
  deletedatNotIn: [Time!]
  deletedatGT: Time
  deletedatGTE: Time
  deletedatLT: Time
  deletedatLTE: Time
  deletedatIsNil: Boolean
  deletedatNotNil: Boolean
  """
  address field predicates
  """
  address: String
  addressNEQ: String
  addressIn: [String!]
  addressNotIn: [String!]
  addressGT: String
  addressGTE: String
  addressLT: String
  addressLTE: String
  addressContains: String
  addressHasPrefix: String
  addressHasSuffix: String
  addressEqualFold: String
  addressContainsFold: String
  """
  city field predicates
  """
  city: String
  cityNEQ: String
  cityIn: [String!]
  cityNotIn: [String!]
  cityGT: String
  cityGTE: String
  cityLT: String
  cityLTE: String
  cityContains: String
  cityHasPrefix: String
  cityHasSuffix: String
  cityEqualFold: String
  cityContainsFold: String
  """
  country field predicates
  """
  country: String
  countryNEQ: String
  countryIn: [String!]
  countryNotIn: [String!]
  countryGT: String
  countryGTE: String
  countryLT: String
  countryLTE: String
  countryContains: String
  countryHasPrefix: String
  countryHasSuffix: String
  countryEqualFold: String
  countryContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailIsNil: Boolean
  emailNotNil: Boolean
  emailEqualFold: String
  emailContainsFold: String
  """
  isDefault field predicates
  """
  isdefault: Boolean
  isdefaultNEQ: Boolean
  isdefaultIsNil: Boolean
  isdefaultNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  phone field predicates
  """
  phone: String
  phoneNEQ: String
  phoneIn: [String!]
  phoneNotIn: [String!]
  phoneGT: String
  phoneGTE: String
  phoneLT: String
  phoneLTE: String
  phoneContains: String
  phoneHasPrefix: String
  phoneHasSuffix: String
  phoneEqualFold: String
  phoneContainsFold: String
  """
  taxId field predicates
  """
  taxid: String
  taxidNEQ: String
  taxidIn: [String!]
  taxidNotIn: [String!]
  taxidGT: String
  taxidGTE: String
  taxidLT: String
  taxidLTE: String
  taxidContains: String
  taxidHasPrefix: String
  taxidHasSuffix: String
  taxidEqualFold: String
  taxidContainsFold: String
  """
  company edge predicates
  """
  hasCompany: Boolean
  hasCompanyWith: [CompanyWhereInput!]
  """
  receivables edge predicates
  """
  hasReceivables: Boolean
  hasReceivablesWith: [ReceivableWhereInput!]
}
type Employee implements Node {
  id: ID!
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  updatedat: Time! @goField(name: "UpdatedAt", forceResolver: false)
  deletedat: Time @goField(name: "DeletedAt", forceResolver: false)
  name: String!
  gender: EmployeeGender!
  position: String
  email: String
  phone: String!
  company: Company
  user: User
}
"""
EmployeeGender is enum for the field gender
"""
enum EmployeeGender @goModel(model: "mazza/ent/generated/employee.Gender") {
  male
  female
}
"""
Ordering options for Employee connections
"""
input EmployeeOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Employees.
  """
  field: EmployeeOrderField!
}
"""
Properties by which Employee connections can be ordered.
"""
enum EmployeeOrderField {
  CREATED_AT
}
"""
EmployeeWhereInput is used for filtering Employee objects.
Input was generated by ent.
"""
input EmployeeWhereInput {
  not: EmployeeWhereInput
  and: [EmployeeWhereInput!]
  or: [EmployeeWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  createdAt field predicates
  """
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """
  updatedAt field predicates
  """
  updatedat: Time
  updatedatNEQ: Time
  updatedatIn: [Time!]
  updatedatNotIn: [Time!]
  updatedatGT: Time
  updatedatGTE: Time
  updatedatLT: Time
  updatedatLTE: Time
  """
  deletedAt field predicates
  """
  deletedat: Time
  deletedatNEQ: Time
  deletedatIn: [Time!]
  deletedatNotIn: [Time!]
  deletedatGT: Time
  deletedatGTE: Time
  deletedatLT: Time
  deletedatLTE: Time
  deletedatIsNil: Boolean
  deletedatNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  gender field predicates
  """
  gender: EmployeeGender
  genderNEQ: EmployeeGender
  genderIn: [EmployeeGender!]
  genderNotIn: [EmployeeGender!]
  """
  position field predicates
  """
  position: String
  positionNEQ: String
  positionIn: [String!]
  positionNotIn: [String!]
  positionGT: String
  positionGTE: String
  positionLT: String
  positionLTE: String
  positionContains: String
  positionHasPrefix: String
  positionHasSuffix: String
  positionIsNil: Boolean
  positionNotNil: Boolean
  positionEqualFold: String
  positionContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailIsNil: Boolean
  emailNotNil: Boolean
  emailEqualFold: String
  emailContainsFold: String
  """
  phone field predicates
  """
  phone: String
  phoneNEQ: String
  phoneIn: [String!]
  phoneNotIn: [String!]
  phoneGT: String
  phoneGTE: String
  phoneLT: String
  phoneLTE: String
  phoneContains: String
  phoneHasPrefix: String
  phoneHasSuffix: String
  phoneEqualFold: String
  phoneContainsFold: String
  """
  company edge predicates
  """
  hasCompany: Boolean
  hasCompanyWith: [CompanyWhereInput!]
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
type File implements Node {
  id: ID!
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  updatedat: Time! @goField(name: "UpdatedAt", forceResolver: false)
  deletedat: Time @goField(name: "DeletedAt", forceResolver: false)
  category: FileCategory!
  extension: String!
  size: String!
  url: String!
  description: String!
  company: Company
}
"""
FileCategory is enum for the field category
"""
enum FileCategory @goModel(model: "mazza/ent/generated/file.Category") {
  INVOICE
  SALESQUOTATION
}
"""
A connection to a list of items.
"""
type FileConnection {
  """
  A list of edges.
  """
  edges: [FileEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type FileEdge {
  """
  The item at the end of the edge.
  """
  node: File
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for File connections
"""
input FileOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Files.
  """
  field: FileOrderField!
}
"""
Properties by which File connections can be ordered.
"""
enum FileOrderField {
  CREATED_AT
  CATEGORY
}
"""
FileWhereInput is used for filtering File objects.
Input was generated by ent.
"""
input FileWhereInput {
  not: FileWhereInput
  and: [FileWhereInput!]
  or: [FileWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  createdAt field predicates
  """
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """
  updatedAt field predicates
  """
  updatedat: Time
  updatedatNEQ: Time
  updatedatIn: [Time!]
  updatedatNotIn: [Time!]
  updatedatGT: Time
  updatedatGTE: Time
  updatedatLT: Time
  updatedatLTE: Time
  """
  deletedAt field predicates
  """
  deletedat: Time
  deletedatNEQ: Time
  deletedatIn: [Time!]
  deletedatNotIn: [Time!]
  deletedatGT: Time
  deletedatGTE: Time
  deletedatLT: Time
  deletedatLTE: Time
  deletedatIsNil: Boolean
  deletedatNotNil: Boolean
  """
  category field predicates
  """
  category: FileCategory
  categoryNEQ: FileCategory
  categoryIn: [FileCategory!]
  categoryNotIn: [FileCategory!]
  """
  extension field predicates
  """
  extension: String
  extensionNEQ: String
  extensionIn: [String!]
  extensionNotIn: [String!]
  extensionGT: String
  extensionGTE: String
  extensionLT: String
  extensionLTE: String
  extensionContains: String
  extensionHasPrefix: String
  extensionHasSuffix: String
  extensionEqualFold: String
  extensionContainsFold: String
  """
  size field predicates
  """
  size: String
  sizeNEQ: String
  sizeIn: [String!]
  sizeNotIn: [String!]
  sizeGT: String
  sizeGTE: String
  sizeLT: String
  sizeLTE: String
  sizeContains: String
  sizeHasPrefix: String
  sizeHasSuffix: String
  sizeEqualFold: String
  sizeContainsFold: String
  """
  url field predicates
  """
  url: String
  urlNEQ: String
  urlIn: [String!]
  urlNotIn: [String!]
  urlGT: String
  urlGTE: String
  urlLT: String
  urlLTE: String
  urlContains: String
  urlHasPrefix: String
  urlHasSuffix: String
  urlEqualFold: String
  urlContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  company edge predicates
  """
  hasCompany: Boolean
  hasCompanyWith: [CompanyWhereInput!]
}
type MemberSignupToken implements Node {
  id: ID!
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  updatedat: Time! @goField(name: "UpdatedAt", forceResolver: false)
  deletedat: Time @goField(name: "DeletedAt", forceResolver: false)
  name: String!
  email: String
  token: String!
  """
  Must be an emoji
  """
  avatar: String!
  role: MemberSignupTokenRole!
  """
  A description about the user and its role of this user
  """
  note: String!
  numberaccessed: Int! @goField(name: "NumberAccessed", forceResolver: false)
  expiresat: Time! @goField(name: "ExpiresAt", forceResolver: false)
  alreadyused: Boolean! @goField(name: "AlreadyUsed", forceResolver: false)
  company: Company!
  createdby: User @goField(name: "CreatedBy", forceResolver: false)
}
"""
A connection to a list of items.
"""
type MemberSignupTokenConnection {
  """
  A list of edges.
  """
  edges: [MemberSignupTokenEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type MemberSignupTokenEdge {
  """
  The item at the end of the edge.
  """
  node: MemberSignupToken
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for MemberSignupToken connections
"""
input MemberSignupTokenOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order MemberSignupTokens.
  """
  field: MemberSignupTokenOrderField!
}
"""
Properties by which MemberSignupToken connections can be ordered.
"""
enum MemberSignupTokenOrderField {
  CREATED_AT
}
"""
MemberSignupTokenRole is enum for the field role
"""
enum MemberSignupTokenRole @goModel(model: "mazza/ent/generated/membersignuptoken.Role") {
  SUPERUSER
  ADMIN
  ACCOUNTANT
  AUDITOR
  STAFF
}
"""
MemberSignupTokenWhereInput is used for filtering MemberSignupToken objects.
Input was generated by ent.
"""
input MemberSignupTokenWhereInput {
  not: MemberSignupTokenWhereInput
  and: [MemberSignupTokenWhereInput!]
  or: [MemberSignupTokenWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  createdAt field predicates
  """
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """
  updatedAt field predicates
  """
  updatedat: Time
  updatedatNEQ: Time
  updatedatIn: [Time!]
  updatedatNotIn: [Time!]
  updatedatGT: Time
  updatedatGTE: Time
  updatedatLT: Time
  updatedatLTE: Time
  """
  deletedAt field predicates
  """
  deletedat: Time
  deletedatNEQ: Time
  deletedatIn: [Time!]
  deletedatNotIn: [Time!]
  deletedatGT: Time
  deletedatGTE: Time
  deletedatLT: Time
  deletedatLTE: Time
  deletedatIsNil: Boolean
  deletedatNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailIsNil: Boolean
  emailNotNil: Boolean
  emailEqualFold: String
  emailContainsFold: String
  """
  token field predicates
  """
  token: String
  tokenNEQ: String
  tokenIn: [String!]
  tokenNotIn: [String!]
  tokenGT: String
  tokenGTE: String
  tokenLT: String
  tokenLTE: String
  tokenContains: String
  tokenHasPrefix: String
  tokenHasSuffix: String
  tokenEqualFold: String
  tokenContainsFold: String
  """
  avatar field predicates
  """
  avatar: String
  avatarNEQ: String
  avatarIn: [String!]
  avatarNotIn: [String!]
  avatarGT: String
  avatarGTE: String
  avatarLT: String
  avatarLTE: String
  avatarContains: String
  avatarHasPrefix: String
  avatarHasSuffix: String
  avatarEqualFold: String
  avatarContainsFold: String
  """
  role field predicates
  """
  role: MemberSignupTokenRole
  roleNEQ: MemberSignupTokenRole
  roleIn: [MemberSignupTokenRole!]
  roleNotIn: [MemberSignupTokenRole!]
  """
  note field predicates
  """
  note: String
  noteNEQ: String
  noteIn: [String!]
  noteNotIn: [String!]
  noteGT: String
  noteGTE: String
  noteLT: String
  noteLTE: String
  noteContains: String
  noteHasPrefix: String
  noteHasSuffix: String
  noteEqualFold: String
  noteContainsFold: String
  """
  numberAccessed field predicates
  """
  numberaccessed: Int
  numberaccessedNEQ: Int
  numberaccessedIn: [Int!]
  numberaccessedNotIn: [Int!]
  numberaccessedGT: Int
  numberaccessedGTE: Int
  numberaccessedLT: Int
  numberaccessedLTE: Int
  """
  expiresAt field predicates
  """
  expiresat: Time
  expiresatNEQ: Time
  expiresatIn: [Time!]
  expiresatNotIn: [Time!]
  expiresatGT: Time
  expiresatGTE: Time
  expiresatLT: Time
  expiresatLTE: Time
  """
  alreadyUsed field predicates
  """
  alreadyused: Boolean
  alreadyusedNEQ: Boolean
  """
  company edge predicates
  """
  hasCompany: Boolean
  hasCompanyWith: [CompanyWhereInput!]
  """
  createdBy edge predicates
  """
  hasCreatedBy: Boolean
  hasCreatedByWith: [UserWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "mazza/ent/generated.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Payable implements Node {
  id: ID!
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  updatedat: Time! @goField(name: "UpdatedAt", forceResolver: false)
  deletedat: Time @goField(name: "DeletedAt", forceResolver: false)
  entrygroup: Int! @goField(name: "EntryGroup", forceResolver: false)
  date: Time!
  name: String!
  outstandingbalance: Float! @goField(name: "OutstandingBalance", forceResolver: false)
  totaltransaction: Float! @goField(name: "TotalTransaction", forceResolver: false)
  duedate: Time! @goField(name: "DueDate", forceResolver: false)
  status: PayableStatus!
  company: Company
}
"""
A connection to a list of items.
"""
type PayableConnection {
  """
  A list of edges.
  """
  edges: [PayableEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PayableEdge {
  """
  The item at the end of the edge.
  """
  node: Payable
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Payable connections
"""
input PayableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Payables.
  """
  field: PayableOrderField!
}
"""
Properties by which Payable connections can be ordered.
"""
enum PayableOrderField {
  CREATED_AT
  DUEDATE
  STATUS
}
"""
PayableStatus is enum for the field status
"""
enum PayableStatus @goModel(model: "mazza/ent/generated/payable.Status") {
  paid
  pending
  default
}
"""
PayableWhereInput is used for filtering Payable objects.
Input was generated by ent.
"""
input PayableWhereInput {
  not: PayableWhereInput
  and: [PayableWhereInput!]
  or: [PayableWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  createdAt field predicates
  """
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """
  updatedAt field predicates
  """
  updatedat: Time
  updatedatNEQ: Time
  updatedatIn: [Time!]
  updatedatNotIn: [Time!]
  updatedatGT: Time
  updatedatGTE: Time
  updatedatLT: Time
  updatedatLTE: Time
  """
  deletedAt field predicates
  """
  deletedat: Time
  deletedatNEQ: Time
  deletedatIn: [Time!]
  deletedatNotIn: [Time!]
  deletedatGT: Time
  deletedatGTE: Time
  deletedatLT: Time
  deletedatLTE: Time
  deletedatIsNil: Boolean
  deletedatNotNil: Boolean
  """
  entryGroup field predicates
  """
  entrygroup: Int
  entrygroupNEQ: Int
  entrygroupIn: [Int!]
  entrygroupNotIn: [Int!]
  entrygroupGT: Int
  entrygroupGTE: Int
  entrygroupLT: Int
  entrygroupLTE: Int
  """
  date field predicates
  """
  date: Time
  dateNEQ: Time
  dateIn: [Time!]
  dateNotIn: [Time!]
  dateGT: Time
  dateGTE: Time
  dateLT: Time
  dateLTE: Time
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  outstandingBalance field predicates
  """
  outstandingbalance: Float
  outstandingbalanceNEQ: Float
  outstandingbalanceIn: [Float!]
  outstandingbalanceNotIn: [Float!]
  outstandingbalanceGT: Float
  outstandingbalanceGTE: Float
  outstandingbalanceLT: Float
  outstandingbalanceLTE: Float
  """
  totalTransaction field predicates
  """
  totaltransaction: Float
  totaltransactionNEQ: Float
  totaltransactionIn: [Float!]
  totaltransactionNotIn: [Float!]
  totaltransactionGT: Float
  totaltransactionGTE: Float
  totaltransactionLT: Float
  totaltransactionLTE: Float
  """
  dueDate field predicates
  """
  duedate: Time
  duedateNEQ: Time
  duedateIn: [Time!]
  duedateNotIn: [Time!]
  duedateGT: Time
  duedateGTE: Time
  duedateLT: Time
  duedateLTE: Time
  """
  status field predicates
  """
  status: PayableStatus
  statusNEQ: PayableStatus
  statusIn: [PayableStatus!]
  statusNotIn: [PayableStatus!]
  """
  company edge predicates
  """
  hasCompany: Boolean
  hasCompanyWith: [CompanyWhereInput!]
}
type Product implements Node {
  id: ID!
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  updatedat: Time! @goField(name: "UpdatedAt", forceResolver: false)
  deletedat: Time @goField(name: "DeletedAt", forceResolver: false)
  stock: Int!
  company: Company
}
"""
Ordering options for Product connections
"""
input ProductOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Products.
  """
  field: ProductOrderField!
}
"""
Properties by which Product connections can be ordered.
"""
enum ProductOrderField {
  CREATED_AT
}
"""
ProductWhereInput is used for filtering Product objects.
Input was generated by ent.
"""
input ProductWhereInput {
  not: ProductWhereInput
  and: [ProductWhereInput!]
  or: [ProductWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  createdAt field predicates
  """
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """
  updatedAt field predicates
  """
  updatedat: Time
  updatedatNEQ: Time
  updatedatIn: [Time!]
  updatedatNotIn: [Time!]
  updatedatGT: Time
  updatedatGTE: Time
  updatedatLT: Time
  updatedatLTE: Time
  """
  deletedAt field predicates
  """
  deletedat: Time
  deletedatNEQ: Time
  deletedatIn: [Time!]
  deletedatNotIn: [Time!]
  deletedatGT: Time
  deletedatGTE: Time
  deletedatLT: Time
  deletedatLTE: Time
  deletedatIsNil: Boolean
  deletedatNotNil: Boolean
  """
  stock field predicates
  """
  stock: Int
  stockNEQ: Int
  stockIn: [Int!]
  stockNotIn: [Int!]
  stockGT: Int
  stockGTE: Int
  stockLT: Int
  stockLTE: Int
  """
  company edge predicates
  """
  hasCompany: Boolean
  hasCompanyWith: [CompanyWhereInput!]
}
type Project implements Node {
  id: ID!
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  updatedat: Time! @goField(name: "UpdatedAt", forceResolver: false)
  deletedat: Time @goField(name: "DeletedAt", forceResolver: false)
  name: String!
  description: String!
  startdate: Time! @goField(name: "StartDate", forceResolver: false)
  enddate: Time! @goField(name: "EndDate", forceResolver: false)
  progress: Float!
  status: ProjectStatus!
  company: Company
  createdby: User @goField(name: "CreatedBy", forceResolver: false)
  leader: User
  tasks: [ProjectTask!]
  milestones: [ProjectMilestone!]
}
"""
A connection to a list of items.
"""
type ProjectConnection {
  """
  A list of edges.
  """
  edges: [ProjectEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ProjectEdge {
  """
  The item at the end of the edge.
  """
  node: Project
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type ProjectMilestone implements Node {
  id: ID!
  name: String!
  duedate: Time! @goField(name: "DueDate", forceResolver: false)
  project: Project!
}
"""
ProjectMilestoneWhereInput is used for filtering ProjectMilestone objects.
Input was generated by ent.
"""
input ProjectMilestoneWhereInput {
  not: ProjectMilestoneWhereInput
  and: [ProjectMilestoneWhereInput!]
  or: [ProjectMilestoneWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  dueDate field predicates
  """
  duedate: Time
  duedateNEQ: Time
  duedateIn: [Time!]
  duedateNotIn: [Time!]
  duedateGT: Time
  duedateGTE: Time
  duedateLT: Time
  duedateLTE: Time
  """
  project edge predicates
  """
  hasProject: Boolean
  hasProjectWith: [ProjectWhereInput!]
}
"""
Ordering options for Project connections
"""
input ProjectOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Projects.
  """
  field: ProjectOrderField!
}
"""
Properties by which Project connections can be ordered.
"""
enum ProjectOrderField {
  CREATED_AT
  START_DATE
  END_DATE
  STATUS
}
"""
ProjectStatus is enum for the field status
"""
enum ProjectStatus @goModel(model: "mazza/ent/generated/project.Status") {
  notStarted
  inProgress
  completed
}
type ProjectTask implements Node {
  id: ID!
  createdat: Time @goField(name: "CreatedAt", forceResolver: false)
  name: String!
  assigneename: String! @goField(name: "AssigneeName", forceResolver: false)
  """
  Where is task will be executed
  """
  location: String
  duedate: Time! @goField(name: "DueDate", forceResolver: false)
  startdate: Time! @goField(name: "StartDate", forceResolver: false)
  enddate: Time! @goField(name: "EndDate", forceResolver: false)
  description: String
  status: ProjectTaskStatus!
  project: Project!
  assignee: User
  participants: [User!]
  createdby: User @goField(name: "CreatedBy", forceResolver: false)
  workshifts: [Workshift!] @goField(name: "WorkShifts", forceResolver: false)
}
"""
A connection to a list of items.
"""
type ProjectTaskConnection {
  """
  A list of edges.
  """
  edges: [ProjectTaskEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ProjectTaskEdge {
  """
  The item at the end of the edge.
  """
  node: ProjectTask
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for ProjectTask connections
"""
input ProjectTaskOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order ProjectTasks.
  """
  field: ProjectTaskOrderField!
}
"""
Properties by which ProjectTask connections can be ordered.
"""
enum ProjectTaskOrderField {
  DUE_DATE
  START_DATE
  END_DATE
  STATUS
}
"""
ProjectTaskStatus is enum for the field status
"""
enum ProjectTaskStatus @goModel(model: "mazza/ent/generated/projecttask.Status") {
  notStarted
  inProgress
  completed
}
"""
ProjectTaskWhereInput is used for filtering ProjectTask objects.
Input was generated by ent.
"""
input ProjectTaskWhereInput {
  not: ProjectTaskWhereInput
  and: [ProjectTaskWhereInput!]
  or: [ProjectTaskWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  createdAt field predicates
  """
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  createdatIsNil: Boolean
  createdatNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  assigneeName field predicates
  """
  assigneename: String
  assigneenameNEQ: String
  assigneenameIn: [String!]
  assigneenameNotIn: [String!]
  assigneenameGT: String
  assigneenameGTE: String
  assigneenameLT: String
  assigneenameLTE: String
  assigneenameContains: String
  assigneenameHasPrefix: String
  assigneenameHasSuffix: String
  assigneenameEqualFold: String
  assigneenameContainsFold: String
  """
  location field predicates
  """
  location: String
  locationNEQ: String
  locationIn: [String!]
  locationNotIn: [String!]
  locationGT: String
  locationGTE: String
  locationLT: String
  locationLTE: String
  locationContains: String
  locationHasPrefix: String
  locationHasSuffix: String
  locationIsNil: Boolean
  locationNotNil: Boolean
  locationEqualFold: String
  locationContainsFold: String
  """
  dueDate field predicates
  """
  duedate: Time
  duedateNEQ: Time
  duedateIn: [Time!]
  duedateNotIn: [Time!]
  duedateGT: Time
  duedateGTE: Time
  duedateLT: Time
  duedateLTE: Time
  """
  startDate field predicates
  """
  startdate: Time
  startdateNEQ: Time
  startdateIn: [Time!]
  startdateNotIn: [Time!]
  startdateGT: Time
  startdateGTE: Time
  startdateLT: Time
  startdateLTE: Time
  """
  endDate field predicates
  """
  enddate: Time
  enddateNEQ: Time
  enddateIn: [Time!]
  enddateNotIn: [Time!]
  enddateGT: Time
  enddateGTE: Time
  enddateLT: Time
  enddateLTE: Time
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  status field predicates
  """
  status: ProjectTaskStatus
  statusNEQ: ProjectTaskStatus
  statusIn: [ProjectTaskStatus!]
  statusNotIn: [ProjectTaskStatus!]
  """
  project edge predicates
  """
  hasProject: Boolean
  hasProjectWith: [ProjectWhereInput!]
  """
  assignee edge predicates
  """
  hasAssignee: Boolean
  hasAssigneeWith: [UserWhereInput!]
  """
  participants edge predicates
  """
  hasParticipants: Boolean
  hasParticipantsWith: [UserWhereInput!]
  """
  createdBy edge predicates
  """
  hasCreatedBy: Boolean
  hasCreatedByWith: [UserWhereInput!]
  """
  workShifts edge predicates
  """
  hasWorkShifts: Boolean
  hasWorkShiftsWith: [WorkshiftWhereInput!]
}
"""
ProjectWhereInput is used for filtering Project objects.
Input was generated by ent.
"""
input ProjectWhereInput {
  not: ProjectWhereInput
  and: [ProjectWhereInput!]
  or: [ProjectWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  createdAt field predicates
  """
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """
  updatedAt field predicates
  """
  updatedat: Time
  updatedatNEQ: Time
  updatedatIn: [Time!]
  updatedatNotIn: [Time!]
  updatedatGT: Time
  updatedatGTE: Time
  updatedatLT: Time
  updatedatLTE: Time
  """
  deletedAt field predicates
  """
  deletedat: Time
  deletedatNEQ: Time
  deletedatIn: [Time!]
  deletedatNotIn: [Time!]
  deletedatGT: Time
  deletedatGTE: Time
  deletedatLT: Time
  deletedatLTE: Time
  deletedatIsNil: Boolean
  deletedatNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  startDate field predicates
  """
  startdate: Time
  startdateNEQ: Time
  startdateIn: [Time!]
  startdateNotIn: [Time!]
  startdateGT: Time
  startdateGTE: Time
  startdateLT: Time
  startdateLTE: Time
  """
  endDate field predicates
  """
  enddate: Time
  enddateNEQ: Time
  enddateIn: [Time!]
  enddateNotIn: [Time!]
  enddateGT: Time
  enddateGTE: Time
  enddateLT: Time
  enddateLTE: Time
  """
  progress field predicates
  """
  progress: Float
  progressNEQ: Float
  progressIn: [Float!]
  progressNotIn: [Float!]
  progressGT: Float
  progressGTE: Float
  progressLT: Float
  progressLTE: Float
  """
  status field predicates
  """
  status: ProjectStatus
  statusNEQ: ProjectStatus
  statusIn: [ProjectStatus!]
  statusNotIn: [ProjectStatus!]
  """
  company edge predicates
  """
  hasCompany: Boolean
  hasCompanyWith: [CompanyWhereInput!]
  """
  createdBy edge predicates
  """
  hasCreatedBy: Boolean
  hasCreatedByWith: [UserWhereInput!]
  """
  leader edge predicates
  """
  hasLeader: Boolean
  hasLeaderWith: [UserWhereInput!]
  """
  tasks edge predicates
  """
  hasTasks: Boolean
  hasTasksWith: [ProjectTaskWhereInput!]
  """
  milestones edge predicates
  """
  hasMilestones: Boolean
  hasMilestonesWith: [ProjectMilestoneWhereInput!]
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  accountingEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for AccountingEntries returned from the connection.
    """
    orderBy: [AccountingEntryOrder!]

    """
    Filtering options for AccountingEntries returned from the connection.
    """
    where: AccountingEntryWhereInput
  ): AccountingEntryConnection!
  companyDocuments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for CompanyDocuments returned from the connection.
    """
    orderBy: [CompanyDocumentOrder!]

    """
    Filtering options for CompanyDocuments returned from the connection.
    """
    where: CompanyDocumentWhereInput
  ): CompanyDocumentConnection!
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Files returned from the connection.
    """
    orderBy: FileOrder

    """
    Filtering options for Files returned from the connection.
    """
    where: FileWhereInput
  ): FileConnection!
  memberSignupTokens(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for MemberSignupTokens returned from the connection.
    """
    orderBy: [MemberSignupTokenOrder!]

    """
    Filtering options for MemberSignupTokens returned from the connection.
    """
    where: MemberSignupTokenWhereInput
  ): MemberSignupTokenConnection!
  payables(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Payables returned from the connection.
    """
    orderBy: [PayableOrder!]

    """
    Filtering options for Payables returned from the connection.
    """
    where: PayableWhereInput
  ): PayableConnection!
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Projects returned from the connection.
    """
    orderBy: [ProjectOrder!]

    """
    Filtering options for Projects returned from the connection.
    """
    where: ProjectWhereInput
  ): ProjectConnection!
  projectTasks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ProjectTasks returned from the connection.
    """
    orderBy: [ProjectTaskOrder!]

    """
    Filtering options for ProjectTasks returned from the connection.
    """
    where: ProjectTaskWhereInput
  ): ProjectTaskConnection!
  receivables(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Receivables returned from the connection.
    """
    orderBy: [ReceivableOrder!]

    """
    Filtering options for Receivables returned from the connection.
    """
    where: ReceivableWhereInput
  ): ReceivableConnection!
  tokens: [Token!]!
  workshifts: [Workshift!]!
}
type Receivable implements Node {
  id: ID!
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  updatedat: Time! @goField(name: "UpdatedAt", forceResolver: false)
  deletedat: Time @goField(name: "DeletedAt", forceResolver: false)
  entrygroup: Int! @goField(name: "EntryGroup", forceResolver: false)
  date: Time!
  name: String!
  outstandingbalance: Float! @goField(name: "OutstandingBalance", forceResolver: false)
  totaltransaction: Float! @goField(name: "TotalTransaction", forceResolver: false)
  duedate: Time! @goField(name: "DueDate", forceResolver: false)
  status: ReceivableStatus!
  company: Company
}
"""
A connection to a list of items.
"""
type ReceivableConnection {
  """
  A list of edges.
  """
  edges: [ReceivableEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ReceivableEdge {
  """
  The item at the end of the edge.
  """
  node: Receivable
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Receivable connections
"""
input ReceivableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Receivables.
  """
  field: ReceivableOrderField!
}
"""
Properties by which Receivable connections can be ordered.
"""
enum ReceivableOrderField {
  CREATED_AT
  DUEDATE
  STATUS
}
"""
ReceivableStatus is enum for the field status
"""
enum ReceivableStatus @goModel(model: "mazza/ent/generated/receivable.Status") {
  paid
  pending
  default
}
"""
ReceivableWhereInput is used for filtering Receivable objects.
Input was generated by ent.
"""
input ReceivableWhereInput {
  not: ReceivableWhereInput
  and: [ReceivableWhereInput!]
  or: [ReceivableWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  createdAt field predicates
  """
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """
  updatedAt field predicates
  """
  updatedat: Time
  updatedatNEQ: Time
  updatedatIn: [Time!]
  updatedatNotIn: [Time!]
  updatedatGT: Time
  updatedatGTE: Time
  updatedatLT: Time
  updatedatLTE: Time
  """
  deletedAt field predicates
  """
  deletedat: Time
  deletedatNEQ: Time
  deletedatIn: [Time!]
  deletedatNotIn: [Time!]
  deletedatGT: Time
  deletedatGTE: Time
  deletedatLT: Time
  deletedatLTE: Time
  deletedatIsNil: Boolean
  deletedatNotNil: Boolean
  """
  entryGroup field predicates
  """
  entrygroup: Int
  entrygroupNEQ: Int
  entrygroupIn: [Int!]
  entrygroupNotIn: [Int!]
  entrygroupGT: Int
  entrygroupGTE: Int
  entrygroupLT: Int
  entrygroupLTE: Int
  """
  date field predicates
  """
  date: Time
  dateNEQ: Time
  dateIn: [Time!]
  dateNotIn: [Time!]
  dateGT: Time
  dateGTE: Time
  dateLT: Time
  dateLTE: Time
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  outstandingBalance field predicates
  """
  outstandingbalance: Float
  outstandingbalanceNEQ: Float
  outstandingbalanceIn: [Float!]
  outstandingbalanceNotIn: [Float!]
  outstandingbalanceGT: Float
  outstandingbalanceGTE: Float
  outstandingbalanceLT: Float
  outstandingbalanceLTE: Float
  """
  totalTransaction field predicates
  """
  totaltransaction: Float
  totaltransactionNEQ: Float
  totaltransactionIn: [Float!]
  totaltransactionNotIn: [Float!]
  totaltransactionGT: Float
  totaltransactionGTE: Float
  totaltransactionLT: Float
  totaltransactionLTE: Float
  """
  dueDate field predicates
  """
  duedate: Time
  duedateNEQ: Time
  duedateIn: [Time!]
  duedateNotIn: [Time!]
  duedateGT: Time
  duedateGTE: Time
  duedateLT: Time
  duedateLTE: Time
  """
  status field predicates
  """
  status: ReceivableStatus
  statusNEQ: ReceivableStatus
  statusIn: [ReceivableStatus!]
  statusNotIn: [ReceivableStatus!]
  """
  company edge predicates
  """
  hasCompany: Boolean
  hasCompanyWith: [CompanyWhereInput!]
}
type Supplier implements Node {
  id: ID!
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  updatedat: Time! @goField(name: "UpdatedAt", forceResolver: false)
  deletedat: Time @goField(name: "DeletedAt", forceResolver: false)
  address: String!
  city: String!
  country: String!
  description: String!
  email: String!
  isdefault: Boolean @goField(name: "IsDefault", forceResolver: false)
  name: String!
  phone: String!
  taxid: String! @goField(name: "TaxId", forceResolver: false)
  company: Company
  payables: [Payable!]
}
"""
Ordering options for Supplier connections
"""
input SupplierOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Suppliers.
  """
  field: SupplierOrderField!
}
"""
Properties by which Supplier connections can be ordered.
"""
enum SupplierOrderField {
  CREATED_AT
}
"""
SupplierWhereInput is used for filtering Supplier objects.
Input was generated by ent.
"""
input SupplierWhereInput {
  not: SupplierWhereInput
  and: [SupplierWhereInput!]
  or: [SupplierWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  createdAt field predicates
  """
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """
  updatedAt field predicates
  """
  updatedat: Time
  updatedatNEQ: Time
  updatedatIn: [Time!]
  updatedatNotIn: [Time!]
  updatedatGT: Time
  updatedatGTE: Time
  updatedatLT: Time
  updatedatLTE: Time
  """
  deletedAt field predicates
  """
  deletedat: Time
  deletedatNEQ: Time
  deletedatIn: [Time!]
  deletedatNotIn: [Time!]
  deletedatGT: Time
  deletedatGTE: Time
  deletedatLT: Time
  deletedatLTE: Time
  deletedatIsNil: Boolean
  deletedatNotNil: Boolean
  """
  address field predicates
  """
  address: String
  addressNEQ: String
  addressIn: [String!]
  addressNotIn: [String!]
  addressGT: String
  addressGTE: String
  addressLT: String
  addressLTE: String
  addressContains: String
  addressHasPrefix: String
  addressHasSuffix: String
  addressEqualFold: String
  addressContainsFold: String
  """
  city field predicates
  """
  city: String
  cityNEQ: String
  cityIn: [String!]
  cityNotIn: [String!]
  cityGT: String
  cityGTE: String
  cityLT: String
  cityLTE: String
  cityContains: String
  cityHasPrefix: String
  cityHasSuffix: String
  cityEqualFold: String
  cityContainsFold: String
  """
  country field predicates
  """
  country: String
  countryNEQ: String
  countryIn: [String!]
  countryNotIn: [String!]
  countryGT: String
  countryGTE: String
  countryLT: String
  countryLTE: String
  countryContains: String
  countryHasPrefix: String
  countryHasSuffix: String
  countryEqualFold: String
  countryContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """
  isDefault field predicates
  """
  isdefault: Boolean
  isdefaultNEQ: Boolean
  isdefaultIsNil: Boolean
  isdefaultNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  phone field predicates
  """
  phone: String
  phoneNEQ: String
  phoneIn: [String!]
  phoneNotIn: [String!]
  phoneGT: String
  phoneGTE: String
  phoneLT: String
  phoneLTE: String
  phoneContains: String
  phoneHasPrefix: String
  phoneHasSuffix: String
  phoneEqualFold: String
  phoneContainsFold: String
  """
  taxId field predicates
  """
  taxid: String
  taxidNEQ: String
  taxidIn: [String!]
  taxidNotIn: [String!]
  taxidGT: String
  taxidGTE: String
  taxidLT: String
  taxidLTE: String
  taxidContains: String
  taxidHasPrefix: String
  taxidHasSuffix: String
  taxidEqualFold: String
  taxidContainsFold: String
  """
  company edge predicates
  """
  hasCompany: Boolean
  hasCompanyWith: [CompanyWhereInput!]
  """
  payables edge predicates
  """
  hasPayables: Boolean
  hasPayablesWith: [PayableWhereInput!]
}
"""
The builtin Time type
"""
scalar Time
type Token implements Node {
  id: ID!
  expiry: Time!
  category: TokenCategory!
  token: String!
  company: Company
  user: User
}
"""
TokenCategory is enum for the field category
"""
enum TokenCategory @goModel(model: "mazza/ent/generated/token.Category") {
  passwordReset
  invitation
}
"""
TokenWhereInput is used for filtering Token objects.
Input was generated by ent.
"""
input TokenWhereInput {
  not: TokenWhereInput
  and: [TokenWhereInput!]
  or: [TokenWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  expiry field predicates
  """
  expiry: Time
  expiryNEQ: Time
  expiryIn: [Time!]
  expiryNotIn: [Time!]
  expiryGT: Time
  expiryGTE: Time
  expiryLT: Time
  expiryLTE: Time
  """
  category field predicates
  """
  category: TokenCategory
  categoryNEQ: TokenCategory
  categoryIn: [TokenCategory!]
  categoryNotIn: [TokenCategory!]
  """
  token field predicates
  """
  token: String
  tokenNEQ: String
  tokenIn: [String!]
  tokenNotIn: [String!]
  tokenGT: String
  tokenGTE: String
  tokenLT: String
  tokenLTE: String
  tokenContains: String
  tokenHasPrefix: String
  tokenHasSuffix: String
  tokenEqualFold: String
  tokenContainsFold: String
  """
  company edge predicates
  """
  hasCompany: Boolean
  hasCompanyWith: [CompanyWhereInput!]
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
type Treasury implements Node {
  id: ID!
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  updatedat: Time! @goField(name: "UpdatedAt", forceResolver: false)
  deletedat: Time @goField(name: "DeletedAt", forceResolver: false)
  balance: Float!
  company: Company
}
"""
Ordering options for Treasury connections
"""
input TreasuryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Treasuries.
  """
  field: TreasuryOrderField!
}
"""
Properties by which Treasury connections can be ordered.
"""
enum TreasuryOrderField {
  CREATED_AT
}
"""
TreasuryWhereInput is used for filtering Treasury objects.
Input was generated by ent.
"""
input TreasuryWhereInput {
  not: TreasuryWhereInput
  and: [TreasuryWhereInput!]
  or: [TreasuryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  createdAt field predicates
  """
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """
  updatedAt field predicates
  """
  updatedat: Time
  updatedatNEQ: Time
  updatedatIn: [Time!]
  updatedatNotIn: [Time!]
  updatedatGT: Time
  updatedatGTE: Time
  updatedatLT: Time
  updatedatLTE: Time
  """
  deletedAt field predicates
  """
  deletedat: Time
  deletedatNEQ: Time
  deletedatIn: [Time!]
  deletedatNotIn: [Time!]
  deletedatGT: Time
  deletedatGTE: Time
  deletedatLT: Time
  deletedatLTE: Time
  deletedatIsNil: Boolean
  deletedatNotNil: Boolean
  """
  balance field predicates
  """
  balance: Float
  balanceNEQ: Float
  balanceIn: [Float!]
  balanceNotIn: [Float!]
  balanceGT: Float
  balanceGTE: Float
  balanceLT: Float
  balanceLTE: Float
  """
  company edge predicates
  """
  hasCompany: Boolean
  hasCompanyWith: [CompanyWhereInput!]
}
"""
UpdateAccountingEntryInput is used for update AccountingEntry object.
Input was generated by ent.
"""
input UpdateAccountingEntryInput {
  number: Int
  group: Int
  date: Time
  account: String
  label: String
  amount: Float
  description: String
  accounttype: AccountingEntryAccountType
  category: String
  isdebit: Boolean
  isreversal: Boolean
  reversed: Boolean
  companyID: ID
  clearCompany: Boolean
  userID: ID
  clearUser: Boolean
}
"""
UpdateCompanyDocumentInput is used for update CompanyDocument object.
Input was generated by ent.
"""
input UpdateCompanyDocumentInput {
  filename: String
  title: String
  keywords: String
  category: CompanyDocumentCategory
  """
  File size in kilobyte
  """
  size: Int
  """
  mimetype e.g. application/pdf
  """
  filetype: String
  status: CompanyDocumentStatus
  url: String
  """
  Firebase cloud storage URI. Not exposed to the client
  """
  storageuri: String
  thumbnail: String
  clearThumbnail: Boolean
  expirydate: Time
  companyID: ID
  uploadedbyID: ID
  clearUploadedBy: Boolean
  approvedbyID: ID
  clearApprovedBy: Boolean
}
"""
UpdateCompanyInput is used for update Company object.
Input was generated by ent.
"""
input UpdateCompanyInput {
  address: String
  clearAddress: Boolean
  basecurrency: String
  ceoname: String
  clearCeoName: Boolean
  city: String
  country: String
  establishedat: Time
  description: String
  clearDescription: Boolean
  email: String
  clearEmail: Boolean
  industry: String
  clearIndustry: Boolean
  lastentrydate: Time
  lastinvoicenumber: Int
  clearLastInvoiceNumber: Boolean
  name: String
  numberofemployees: Int
  phone: String
  clearPhone: Boolean
  taxid: String
  vatrate: Float
  website: String
  clearWebsite: Boolean
  incompletesetup: Boolean
  clearIncompleteSetup: Boolean
  addAvailableRoleIDs: [ID!]
  removeAvailableRoleIDs: [ID!]
  clearAvailableRoles: Boolean
  addAccountingEntryIDs: [ID!]
  removeAccountingEntryIDs: [ID!]
  clearAccountingEntries: Boolean
  addCustomerIDs: [ID!]
  removeCustomerIDs: [ID!]
  clearCustomers: Boolean
  addDocumentIDs: [ID!]
  removeDocumentIDs: [ID!]
  clearDocuments: Boolean
  addEmployeeIDs: [ID!]
  removeEmployeeIDs: [ID!]
  clearEmployees: Boolean
  addFileIDs: [ID!]
  removeFileIDs: [ID!]
  clearFiles: Boolean
  addMemberSignupTokenIDs: [ID!]
  removeMemberSignupTokenIDs: [ID!]
  clearMemberSignupTokens: Boolean
  addProductIDs: [ID!]
  removeProductIDs: [ID!]
  clearProducts: Boolean
  addProjectIDs: [ID!]
  removeProjectIDs: [ID!]
  clearProjects: Boolean
  addPayableIDs: [ID!]
  removePayableIDs: [ID!]
  clearPayables: Boolean
  addReceivableIDs: [ID!]
  removeReceivableIDs: [ID!]
  clearReceivables: Boolean
  addSupplierIDs: [ID!]
  removeSupplierIDs: [ID!]
  clearSuppliers: Boolean
  addTokenIDs: [ID!]
  removeTokenIDs: [ID!]
  clearTokens: Boolean
  addTreasuryIDs: [ID!]
  removeTreasuryIDs: [ID!]
  clearTreasuries: Boolean
  addWorkShiftIDs: [ID!]
  removeWorkShiftIDs: [ID!]
  clearWorkShifts: Boolean
  addUserIDs: [ID!]
  removeUserIDs: [ID!]
  clearUsers: Boolean
  addDaughterCompanyIDs: [ID!]
  removeDaughterCompanyIDs: [ID!]
  clearDaughterCompanies: Boolean
  parentcompanyID: ID
  clearParentCompany: Boolean
}
"""
UpdateCustomerInput is used for update Customer object.
Input was generated by ent.
"""
input UpdateCustomerInput {
  address: String
  city: String
  country: String
  description: String
  clearDescription: Boolean
  email: String
  clearEmail: Boolean
  isdefault: Boolean
  clearIsDefault: Boolean
  name: String
  phone: String
  taxid: String
  companyID: ID
  clearCompany: Boolean
  addReceivableIDs: [ID!]
  removeReceivableIDs: [ID!]
  clearReceivables: Boolean
}
"""
UpdateEmployeeInput is used for update Employee object.
Input was generated by ent.
"""
input UpdateEmployeeInput {
  name: String
  gender: EmployeeGender
  position: String
  clearPosition: Boolean
  email: String
  clearEmail: Boolean
  phone: String
  companyID: ID
  clearCompany: Boolean
  userID: ID
  clearUser: Boolean
}
"""
UpdateFileInput is used for update File object.
Input was generated by ent.
"""
input UpdateFileInput {
  category: FileCategory
  extension: String
  size: String
  """
  uri used to handle the file from the storage
  """
  uri: String
  url: String
  description: String
  companyID: ID
  clearCompany: Boolean
}
"""
UpdateMemberSignupTokenInput is used for update MemberSignupToken object.
Input was generated by ent.
"""
input UpdateMemberSignupTokenInput {
  name: String
  email: String
  clearEmail: Boolean
  """
  Must be an emoji
  """
  avatar: String
  role: MemberSignupTokenRole
  """
  A description about the user and its role of this user
  """
  note: String
  companyID: ID
  createdbyID: ID
  clearCreatedBy: Boolean
}
"""
UpdatePayableInput is used for update Payable object.
Input was generated by ent.
"""
input UpdatePayableInput {
  entrygroup: Int
  date: Time
  name: String
  outstandingbalance: Float
  totaltransaction: Float
  duedate: Time
  status: PayableStatus
  companyID: ID
  clearCompany: Boolean
}
"""
UpdateProductInput is used for update Product object.
Input was generated by ent.
"""
input UpdateProductInput {
  stock: Int
  companyID: ID
  clearCompany: Boolean
}
"""
UpdateProjectInput is used for update Project object.
Input was generated by ent.
"""
input UpdateProjectInput {
  name: String
  description: String
  startdate: Time
  enddate: Time
  progress: Float
  status: ProjectStatus
  companyID: ID
  clearCompany: Boolean
  createdbyID: ID
  clearCreatedBy: Boolean
  leaderID: ID
  clearLeader: Boolean
  addTaskIDs: [ID!]
  removeTaskIDs: [ID!]
  clearTasks: Boolean
  addMilestoneIDs: [ID!]
  removeMilestoneIDs: [ID!]
  clearMilestones: Boolean
}
"""
UpdateProjectMilestoneInput is used for update ProjectMilestone object.
Input was generated by ent.
"""
input UpdateProjectMilestoneInput {
  name: String
  duedate: Time
  projectID: ID
}
"""
UpdateProjectTaskInput is used for update ProjectTask object.
Input was generated by ent.
"""
input UpdateProjectTaskInput {
  name: String
  assigneename: String
  """
  Where is task will be executed
  """
  location: String
  clearLocation: Boolean
  duedate: Time
  startdate: Time
  enddate: Time
  description: String
  clearDescription: Boolean
  status: ProjectTaskStatus
  projectID: ID
  assigneeID: ID
  clearAssignee: Boolean
  addParticipantIDs: [ID!]
  removeParticipantIDs: [ID!]
  clearParticipants: Boolean
  addWorkShiftIDs: [ID!]
  removeWorkShiftIDs: [ID!]
  clearWorkShifts: Boolean
}
"""
UpdateReceivableInput is used for update Receivable object.
Input was generated by ent.
"""
input UpdateReceivableInput {
  entrygroup: Int
  date: Time
  name: String
  outstandingbalance: Float
  totaltransaction: Float
  duedate: Time
  status: ReceivableStatus
  companyID: ID
  clearCompany: Boolean
}
"""
UpdateSupplierInput is used for update Supplier object.
Input was generated by ent.
"""
input UpdateSupplierInput {
  address: String
  city: String
  country: String
  description: String
  email: String
  isdefault: Boolean
  clearIsDefault: Boolean
  name: String
  phone: String
  taxid: String
  companyID: ID
  clearCompany: Boolean
  addPayableIDs: [ID!]
  removePayableIDs: [ID!]
  clearPayables: Boolean
}
"""
UpdateTreasuryInput is used for update Treasury object.
Input was generated by ent.
"""
input UpdateTreasuryInput {
  balance: Float
  companyID: ID
  clearCompany: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  firebaseuid: String
  fcmtoken: String
  clearFcmToken: Boolean
  name: String
  address: String
  clearAddress: Boolean
  avatar: String
  clearAvatar: Boolean
  photourl: String
  clearPhotoURL: Boolean
  department: String
  clearDepartment: Boolean
  phone: String
  clearPhone: Boolean
  birthdate: Time
  clearBirthdate: Boolean
  gender: UserGender
  active: Boolean
  addAccountingEntryIDs: [ID!]
  removeAccountingEntryIDs: [ID!]
  clearAccountingEntries: Boolean
  addCompanyIDs: [ID!]
  removeCompanyIDs: [ID!]
  addAssignedRoleIDs: [ID!]
  removeAssignedRoleIDs: [ID!]
  clearAssignedRoles: Boolean
  addSubordinateIDs: [ID!]
  removeSubordinateIDs: [ID!]
  clearSubordinates: Boolean
  leaderID: ID
  clearLeader: Boolean
  addCreatedMemberSignupTokenIDs: [ID!]
  removeCreatedMemberSignupTokenIDs: [ID!]
  clearCreatedMemberSignupTokens: Boolean
  employeeID: ID
  clearEmployee: Boolean
  addCreatedProjectIDs: [ID!]
  removeCreatedProjectIDs: [ID!]
  clearCreatedProjects: Boolean
  addLeaderedProjectIDs: [ID!]
  removeLeaderedProjectIDs: [ID!]
  clearLeaderedProjects: Boolean
  addAssignedProjectTaskIDs: [ID!]
  removeAssignedProjectTaskIDs: [ID!]
  clearAssignedProjectTasks: Boolean
  addParticipatedProjectTaskIDs: [ID!]
  removeParticipatedProjectTaskIDs: [ID!]
  clearParticipatedProjectTasks: Boolean
  addTokenIDs: [ID!]
  removeTokenIDs: [ID!]
  clearTokens: Boolean
  addApprovedWorkShiftIDs: [ID!]
  removeApprovedWorkShiftIDs: [ID!]
  clearApprovedWorkShifts: Boolean
  addWorkShiftIDs: [ID!]
  removeWorkShiftIDs: [ID!]
  clearWorkShifts: Boolean
  addUploadedDocumentIDs: [ID!]
  removeUploadedDocumentIDs: [ID!]
  clearUploadedDocuments: Boolean
  addApprovedDocumentIDs: [ID!]
  removeApprovedDocumentIDs: [ID!]
  clearApprovedDocuments: Boolean
}
"""
UpdateUserRoleInput is used for update UserRole object.
Input was generated by ent.
"""
input UpdateUserRoleInput {
  role: UserRoleRole
  """
  Description about this role
  """
  notes: String
  companyID: ID
  clearCompany: Boolean
  userID: ID
  clearUser: Boolean
}
"""
UpdateWorkshiftInput is used for update Workshift object.
Input was generated by ent.
"""
input UpdateWorkshiftInput {
  """
  time that this shift was approved by the supervisor
  """
  approvedat: Time
  clearApprovedAt: Boolean
  clockin: Time
  clockout: Time
  clearClockOut: Boolean
  """
  it expects a serialized json like: {latitude: float, longitude: float, description: string}
  """
  clockinlocation: String
  """
  it expects a serialized json like: {latitude: float, longitude: float, description: string}
  """
  clockoutlocation: String
  clearClockOutLocation: Boolean
  description: String
  clearDescription: Boolean
  """
  this is only used when the current item is a shift edit request
  """
  note: String
  clearNote: Boolean
  status: WorkshiftStatus
  companyID: ID
  clearCompany: Boolean
  userID: ID
  clearUser: Boolean
  approvedbyID: ID
  clearApprovedBy: Boolean
  taskID: ID
  clearTask: Boolean
  editrequestID: ID
  clearEditRequest: Boolean
  workshiftID: ID
  clearWorkShift: Boolean
}
type User implements Node {
  id: ID!
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  updatedat: Time! @goField(name: "UpdatedAt", forceResolver: false)
  deletedat: Time @goField(name: "DeletedAt", forceResolver: false)
  email: String!
  name: String!
  address: String
  avatar: String
  photourl: String @goField(name: "PhotoURL", forceResolver: false)
  department: String
  phone: String
  birthdate: Time
  """
  It can be the last time the user opened the app and synced with the backend.
  """
  lastlogin: Time @goField(name: "LastLogin", forceResolver: false)
  gender: UserGender!
  active: Boolean!
  accountingentries: [AccountingEntry!] @goField(name: "AccountingEntries", forceResolver: false)
  company: [Company!]!
  """
  a user should be assigned to only one role in the company
  """
  assignedroles: [UserRole!] @goField(name: "AssignedRoles", forceResolver: false)
  subordinates: [User!]
  leader: User
  createdmembersignuptokens: [MemberSignupToken!] @goField(name: "CreatedMemberSignupTokens", forceResolver: false)
  employee: Employee
  """
  Represents the projects created by the user
  """
  createdprojects: [Project!] @goField(name: "CreatedProjects", forceResolver: false)
  """
  Represents the projects leadered or supervised by the user
  """
  leaderedprojects: [Project!] @goField(name: "LeaderedProjects", forceResolver: false)
  """
  These are the project tasks assigned to the user and he is responsible for them
  """
  assignedprojecttasks: [ProjectTask!] @goField(name: "AssignedProjectTasks", forceResolver: false)
  """
  These are the project tasks in which the user is a member. E.g. a meeting
  """
  participatedprojecttasks: [ProjectTask!] @goField(name: "ParticipatedProjectTasks", forceResolver: false)
  """
  Represents the tasks created by a user
  """
  createdtasks: [ProjectTask!] @goField(name: "CreatedTasks", forceResolver: false)
  tokens: [Token!]
  approvedworkshifts: [Workshift!] @goField(name: "ApprovedWorkShifts", forceResolver: false)
  workshifts: [Workshift!] @goField(name: "WorkShifts", forceResolver: false)
  uploadeddocuments: [CompanyDocument!] @goField(name: "UploadedDocuments", forceResolver: false)
  approveddocuments: [CompanyDocument!] @goField(name: "ApprovedDocuments", forceResolver: false)
}
"""
UserGender is enum for the field gender
"""
enum UserGender @goModel(model: "mazza/ent/generated/user.Gender") {
  male
  female
}
"""
Ordering options for User connections
"""
input UserOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Users.
  """
  field: UserOrderField!
}
"""
Properties by which User connections can be ordered.
"""
enum UserOrderField {
  CREATED_AT
  NAME
}
type UserRole implements Node {
  id: ID!
  role: UserRoleRole!
  """
  Description about this role
  """
  notes: String!
  """
  each role must belong to only only company
  """
  company: Company
  """
  a role must belong to only one user
  """
  user: User
}
"""
Ordering options for UserRole connections
"""
input UserRoleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order UserRoles.
  """
  field: UserRoleOrderField!
}
"""
Properties by which UserRole connections can be ordered.
"""
enum UserRoleOrderField {
  ROLES
}
"""
UserRoleRole is enum for the field role
"""
enum UserRoleRole @goModel(model: "mazza/ent/generated/userrole.Role") {
  SUPERUSER
  ADMIN
  ACCOUNTANT
  AUDITOR
  STAFF
}
"""
UserRoleWhereInput is used for filtering UserRole objects.
Input was generated by ent.
"""
input UserRoleWhereInput {
  not: UserRoleWhereInput
  and: [UserRoleWhereInput!]
  or: [UserRoleWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  role field predicates
  """
  role: UserRoleRole
  roleNEQ: UserRoleRole
  roleIn: [UserRoleRole!]
  roleNotIn: [UserRoleRole!]
  """
  notes field predicates
  """
  notes: String
  notesNEQ: String
  notesIn: [String!]
  notesNotIn: [String!]
  notesGT: String
  notesGTE: String
  notesLT: String
  notesLTE: String
  notesContains: String
  notesHasPrefix: String
  notesHasSuffix: String
  notesEqualFold: String
  notesContainsFold: String
  """
  company edge predicates
  """
  hasCompany: Boolean
  hasCompanyWith: [CompanyWhereInput!]
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  createdAt field predicates
  """
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """
  updatedAt field predicates
  """
  updatedat: Time
  updatedatNEQ: Time
  updatedatIn: [Time!]
  updatedatNotIn: [Time!]
  updatedatGT: Time
  updatedatGTE: Time
  updatedatLT: Time
  updatedatLTE: Time
  """
  deletedAt field predicates
  """
  deletedat: Time
  deletedatNEQ: Time
  deletedatIn: [Time!]
  deletedatNotIn: [Time!]
  deletedatGT: Time
  deletedatGTE: Time
  deletedatLT: Time
  deletedatLTE: Time
  deletedatIsNil: Boolean
  deletedatNotNil: Boolean
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  address field predicates
  """
  address: String
  addressNEQ: String
  addressIn: [String!]
  addressNotIn: [String!]
  addressGT: String
  addressGTE: String
  addressLT: String
  addressLTE: String
  addressContains: String
  addressHasPrefix: String
  addressHasSuffix: String
  addressIsNil: Boolean
  addressNotNil: Boolean
  addressEqualFold: String
  addressContainsFold: String
  """
  avatar field predicates
  """
  avatar: String
  avatarNEQ: String
  avatarIn: [String!]
  avatarNotIn: [String!]
  avatarGT: String
  avatarGTE: String
  avatarLT: String
  avatarLTE: String
  avatarContains: String
  avatarHasPrefix: String
  avatarHasSuffix: String
  avatarIsNil: Boolean
  avatarNotNil: Boolean
  avatarEqualFold: String
  avatarContainsFold: String
  """
  photoURL field predicates
  """
  photourl: String
  photourlNEQ: String
  photourlIn: [String!]
  photourlNotIn: [String!]
  photourlGT: String
  photourlGTE: String
  photourlLT: String
  photourlLTE: String
  photourlContains: String
  photourlHasPrefix: String
  photourlHasSuffix: String
  photourlIsNil: Boolean
  photourlNotNil: Boolean
  photourlEqualFold: String
  photourlContainsFold: String
  """
  department field predicates
  """
  department: String
  departmentNEQ: String
  departmentIn: [String!]
  departmentNotIn: [String!]
  departmentGT: String
  departmentGTE: String
  departmentLT: String
  departmentLTE: String
  departmentContains: String
  departmentHasPrefix: String
  departmentHasSuffix: String
  departmentIsNil: Boolean
  departmentNotNil: Boolean
  departmentEqualFold: String
  departmentContainsFold: String
  """
  phone field predicates
  """
  phone: String
  phoneNEQ: String
  phoneIn: [String!]
  phoneNotIn: [String!]
  phoneGT: String
  phoneGTE: String
  phoneLT: String
  phoneLTE: String
  phoneContains: String
  phoneHasPrefix: String
  phoneHasSuffix: String
  phoneIsNil: Boolean
  phoneNotNil: Boolean
  phoneEqualFold: String
  phoneContainsFold: String
  """
  birthdate field predicates
  """
  birthdate: Time
  birthdateNEQ: Time
  birthdateIn: [Time!]
  birthdateNotIn: [Time!]
  birthdateGT: Time
  birthdateGTE: Time
  birthdateLT: Time
  birthdateLTE: Time
  birthdateIsNil: Boolean
  birthdateNotNil: Boolean
  """
  lastLogin field predicates
  """
  lastlogin: Time
  lastloginNEQ: Time
  lastloginIn: [Time!]
  lastloginNotIn: [Time!]
  lastloginGT: Time
  lastloginGTE: Time
  lastloginLT: Time
  lastloginLTE: Time
  lastloginIsNil: Boolean
  lastloginNotNil: Boolean
  """
  gender field predicates
  """
  gender: UserGender
  genderNEQ: UserGender
  genderIn: [UserGender!]
  genderNotIn: [UserGender!]
  """
  active field predicates
  """
  active: Boolean
  activeNEQ: Boolean
  """
  accountingEntries edge predicates
  """
  hasAccountingEntries: Boolean
  hasAccountingEntriesWith: [AccountingEntryWhereInput!]
  """
  company edge predicates
  """
  hasCompany: Boolean
  hasCompanyWith: [CompanyWhereInput!]
  """
  assignedRoles edge predicates
  """
  hasAssignedRoles: Boolean
  hasAssignedRolesWith: [UserRoleWhereInput!]
  """
  subordinates edge predicates
  """
  hasSubordinates: Boolean
  hasSubordinatesWith: [UserWhereInput!]
  """
  leader edge predicates
  """
  hasLeader: Boolean
  hasLeaderWith: [UserWhereInput!]
  """
  createdMemberSignupTokens edge predicates
  """
  hasCreatedMemberSignupTokens: Boolean
  hasCreatedMemberSignupTokensWith: [MemberSignupTokenWhereInput!]
  """
  employee edge predicates
  """
  hasEmployee: Boolean
  hasEmployeeWith: [EmployeeWhereInput!]
  """
  createdProjects edge predicates
  """
  hasCreatedProjects: Boolean
  hasCreatedProjectsWith: [ProjectWhereInput!]
  """
  leaderedProjects edge predicates
  """
  hasLeaderedProjects: Boolean
  hasLeaderedProjectsWith: [ProjectWhereInput!]
  """
  assignedProjectTasks edge predicates
  """
  hasAssignedProjectTasks: Boolean
  hasAssignedProjectTasksWith: [ProjectTaskWhereInput!]
  """
  participatedProjectTasks edge predicates
  """
  hasParticipatedProjectTasks: Boolean
  hasParticipatedProjectTasksWith: [ProjectTaskWhereInput!]
  """
  createdTasks edge predicates
  """
  hasCreatedTasks: Boolean
  hasCreatedTasksWith: [ProjectTaskWhereInput!]
  """
  tokens edge predicates
  """
  hasTokens: Boolean
  hasTokensWith: [TokenWhereInput!]
  """
  approvedWorkShifts edge predicates
  """
  hasApprovedWorkShifts: Boolean
  hasApprovedWorkShiftsWith: [WorkshiftWhereInput!]
  """
  workShifts edge predicates
  """
  hasWorkShifts: Boolean
  hasWorkShiftsWith: [WorkshiftWhereInput!]
  """
  uploadedDocuments edge predicates
  """
  hasUploadedDocuments: Boolean
  hasUploadedDocumentsWith: [CompanyDocumentWhereInput!]
  """
  approvedDocuments edge predicates
  """
  hasApprovedDocuments: Boolean
  hasApprovedDocumentsWith: [CompanyDocumentWhereInput!]
}
type Workshift implements Node {
  id: ID!
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  updatedat: Time! @goField(name: "UpdatedAt", forceResolver: false)
  deletedat: Time @goField(name: "DeletedAt", forceResolver: false)
  """
  time that this shift was approved by the supervisor
  """
  approvedat: Time @goField(name: "ApprovedAt", forceResolver: false)
  clockin: Time! @goField(name: "ClockIn", forceResolver: false)
  clockout: Time @goField(name: "ClockOut", forceResolver: false)
  """
  it expects a serialized json like: {latitude: float, longitude: float, description: string}
  """
  clockinlocation: String! @goField(name: "ClockInLocation", forceResolver: false)
  """
  it expects a serialized json like: {latitude: float, longitude: float, description: string}
  """
  clockoutlocation: String @goField(name: "ClockOutLocation", forceResolver: false)
  description: String
  """
  this is only used when the current item is a shift edit request
  """
  note: String
  status: WorkshiftStatus!
  company: Company
  user: User
  approvedby: User @goField(name: "ApprovedBy", forceResolver: false)
  task: ProjectTask
  editrequest: Workshift @goField(name: "EditRequest", forceResolver: false)
  workshift: Workshift @goField(name: "WorkShift", forceResolver: false)
}
"""
Ordering options for Workshift connections
"""
input WorkshiftOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Workshifts.
  """
  field: WorkshiftOrderField!
}
"""
Properties by which Workshift connections can be ordered.
"""
enum WorkshiftOrderField {
  CREATED_AT
  APPROVED_AT
  CLOCK_IN
  CLOCK_OUT
  STATUS
}
"""
WorkshiftStatus is enum for the field status
"""
enum WorkshiftStatus @goModel(model: "mazza/ent/generated/workshift.Status") {
  APPROVED
  PENDING
}
"""
WorkshiftWhereInput is used for filtering Workshift objects.
Input was generated by ent.
"""
input WorkshiftWhereInput {
  not: WorkshiftWhereInput
  and: [WorkshiftWhereInput!]
  or: [WorkshiftWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  createdAt field predicates
  """
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """
  updatedAt field predicates
  """
  updatedat: Time
  updatedatNEQ: Time
  updatedatIn: [Time!]
  updatedatNotIn: [Time!]
  updatedatGT: Time
  updatedatGTE: Time
  updatedatLT: Time
  updatedatLTE: Time
  """
  deletedAt field predicates
  """
  deletedat: Time
  deletedatNEQ: Time
  deletedatIn: [Time!]
  deletedatNotIn: [Time!]
  deletedatGT: Time
  deletedatGTE: Time
  deletedatLT: Time
  deletedatLTE: Time
  deletedatIsNil: Boolean
  deletedatNotNil: Boolean
  """
  approvedAt field predicates
  """
  approvedat: Time
  approvedatNEQ: Time
  approvedatIn: [Time!]
  approvedatNotIn: [Time!]
  approvedatGT: Time
  approvedatGTE: Time
  approvedatLT: Time
  approvedatLTE: Time
  approvedatIsNil: Boolean
  approvedatNotNil: Boolean
  """
  clockIn field predicates
  """
  clockin: Time
  clockinNEQ: Time
  clockinIn: [Time!]
  clockinNotIn: [Time!]
  clockinGT: Time
  clockinGTE: Time
  clockinLT: Time
  clockinLTE: Time
  """
  clockOut field predicates
  """
  clockout: Time
  clockoutNEQ: Time
  clockoutIn: [Time!]
  clockoutNotIn: [Time!]
  clockoutGT: Time
  clockoutGTE: Time
  clockoutLT: Time
  clockoutLTE: Time
  clockoutIsNil: Boolean
  clockoutNotNil: Boolean
  """
  clockInLocation field predicates
  """
  clockinlocation: String
  clockinlocationNEQ: String
  clockinlocationIn: [String!]
  clockinlocationNotIn: [String!]
  clockinlocationGT: String
  clockinlocationGTE: String
  clockinlocationLT: String
  clockinlocationLTE: String
  clockinlocationContains: String
  clockinlocationHasPrefix: String
  clockinlocationHasSuffix: String
  clockinlocationEqualFold: String
  clockinlocationContainsFold: String
  """
  clockOutLocation field predicates
  """
  clockoutlocation: String
  clockoutlocationNEQ: String
  clockoutlocationIn: [String!]
  clockoutlocationNotIn: [String!]
  clockoutlocationGT: String
  clockoutlocationGTE: String
  clockoutlocationLT: String
  clockoutlocationLTE: String
  clockoutlocationContains: String
  clockoutlocationHasPrefix: String
  clockoutlocationHasSuffix: String
  clockoutlocationIsNil: Boolean
  clockoutlocationNotNil: Boolean
  clockoutlocationEqualFold: String
  clockoutlocationContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  note field predicates
  """
  note: String
  noteNEQ: String
  noteIn: [String!]
  noteNotIn: [String!]
  noteGT: String
  noteGTE: String
  noteLT: String
  noteLTE: String
  noteContains: String
  noteHasPrefix: String
  noteHasSuffix: String
  noteIsNil: Boolean
  noteNotNil: Boolean
  noteEqualFold: String
  noteContainsFold: String
  """
  status field predicates
  """
  status: WorkshiftStatus
  statusNEQ: WorkshiftStatus
  statusIn: [WorkshiftStatus!]
  statusNotIn: [WorkshiftStatus!]
  """
  company edge predicates
  """
  hasCompany: Boolean
  hasCompanyWith: [CompanyWhereInput!]
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """
  approvedBy edge predicates
  """
  hasApprovedBy: Boolean
  hasApprovedByWith: [UserWhereInput!]
  """
  task edge predicates
  """
  hasTask: Boolean
  hasTaskWith: [ProjectTaskWhereInput!]
  """
  editRequest edge predicates
  """
  hasEditRequest: Boolean
  hasEditRequestWith: [WorkshiftWhereInput!]
  """
  workShift edge predicates
  """
  hasWorkShift: Boolean
  hasWorkShiftWith: [WorkshiftWhereInput!]
}
