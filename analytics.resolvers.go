package mazza

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.52

import (
	"context"
	"fmt"
	accountingentry "mazza/app/accountingEntry"
	"mazza/app/analytics"
	"mazza/ent/utils"
	"mazza/firebase"
	"mazza/inits"
	"mazza/mazza/generated/model"

	expo "github.com/oliveroneill/exponent-server-sdk-golang/sdk"
)

// Notify is the resolver for the notify field.
func (r *mutationResolver) Notify(ctx context.Context, input *model.Notif) (*string, error) {
	targetUser, err := r.client.User.Get(ctx, input.UserID)
	if err != nil {
		return nil, err
	}

	// var data map[string]string
	// if input.Data != nil {
	// 	data = map[string]string{"data": *input.Data}
	// }
	// var notification *messaging.Notification
	// if input.Notification != nil {
	// 	notification = &messaging.Notification{
	// 		Title: input.Notification.Title,
	// 		Body:  input.Notification.Body,
	// 	}
	// }

	if targetUser.ExpoPushToken == nil {
		return nil, nil
	}

	token := expo.ExponentPushToken(*targetUser.ExpoPushToken)
	_, err = inits.ExpoClient.Publish(&expo.PushMessage{
		To:    []expo.ExponentPushToken{token},
		Title: input.Notification.Title,
		Body:  input.Notification.Body,
		Data: map[string]string{
			"type": firebase.AlertType.InvitedUserRegistration,
		},
		Sound:    "default",
		Priority: expo.HighPriority,
	})
	if err != nil {
		fmt.Println("send notif err:", err)
	}

	return nil, nil
}

// ExpensesBreakdown is the resolver for the expensesBreakdown field.
func (r *queryResolver) ExpensesBreakdown(ctx context.Context, rangeArg model.TimeRange) ([]*model.ExpensesBreakdownOutput, error) {
	_, currentCompany := utils.GetSession(&ctx)
	breadown, err := accountingentry.AggregateExpenses(ctx, *r.client.AccountingEntry, currentCompany.ID, rangeArg)
	return breadown, err
}

// RevenueTrend is the resolver for the revenueTrend field.
func (r *queryResolver) RevenueTrend(ctx context.Context, rangeArg model.TimeRange) ([]*model.RevenueTrendOutput, error) {
	_, currentCompany := utils.GetSession(&ctx)
	_ = currentCompany
	trend, err := accountingentry.AggregateRevenue(ctx, *r.client.AccountingEntry, currentCompany.ID, rangeArg)
	return trend, err
}

// HomepageAnalytics is the resolver for the homepageAnalytics field.
func (r *queryResolver) HomepageAnalytics(ctx context.Context) (*model.HomepageAnalytics, error) {
	return analytics.HomepageAnalytics(ctx, r.client)
}
