package mazza

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.53

import (
	"context"
	"fmt"
	"mazza/app/utils"
	"mazza/ent"
	"mazza/ent/accountingentry"
	"mazza/ent/cashmovement"
	"mazza/ent/company"
	"mazza/ent/treasury"
	"mazza/ent/user"

	"entgo.io/contrib/entgql"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id int) (ent.Noder, error) {
	return r.client.Noder(ctx, id)
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []int) ([]ent.Noder, error) {
	return r.client.Noders(ctx, ids)
}

// AccountingEntries is the resolver for the accountingEntries field.
func (r *queryResolver) AccountingEntries(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.AccountingEntryOrder, where *ent.AccountingEntryWhereInput) (*ent.AccountingEntryConnection, error) {
	currentCompany, _, _ := utils.GetSession(&ctx)
	compFilter := accountingentry.HasCompanyWith(company.IDEQ(currentCompany.ID))
	return r.client.AccountingEntry.Query().Where(compFilter).Paginate(
		ctx, after, first, before, last,
		ent.WithAccountingEntryOrder(orderBy),
		ent.WithAccountingEntryFilter(where.Filter),
	)
}

// CashMovements is the resolver for the cashMovements field.
func (r *queryResolver) CashMovements(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, where *ent.CashMovementWhereInput) (*ent.CashMovementConnection, error) {
	currentCompany, _, _ := utils.GetSession(&ctx)
	compFilter := cashmovement.HasTreasuryWith(treasury.HasCompanyWith(company.IDEQ(currentCompany.ID)))

	return r.client.CashMovement.Query().Where(compFilter).Paginate(
		ctx, after, first, before, last,
		ent.WithCashMovementFilter(where.Filter),
	)
}

// Files is the resolver for the files field.
func (r *queryResolver) Files(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.FileOrder, where *ent.FileWhereInput) (*ent.FileConnection, error) {
	currentUser, _, _ := utils.GetSession(&ctx)
	userQ := user.IDEQ(currentUser.ID)

	return r.client.User.Query().Where(userQ).QueryAssignedRoles().QueryCompany().QueryFiles().Paginate(
		ctx, after, first, before, last,
		ent.WithFileOrder(orderBy),
		ent.WithFileFilter(where.Filter),
	)
}

// ProductMovements is the resolver for the productMovements field.
func (r *queryResolver) ProductMovements(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, where *ent.ProductMovementWhereInput) (*ent.ProductMovementConnection, error) {
	currentUser, _, _ := utils.GetSession(&ctx)
	userQ := user.IDEQ(currentUser.ID)

	return r.client.User.Query().Where(userQ).QueryAssignedRoles().QueryCompany().QueryProducts().QueryProductMovements().Paginate(
		ctx, after, first, before, last,
		ent.WithProductMovementFilter(where.Filter),
	)
}

// Receivables is the resolver for the receivables field.
func (r *queryResolver) Receivables(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, where *ent.ReceivableWhereInput) (*ent.ReceivableConnection, error) {
	currentUser, _, _ := utils.GetSession(&ctx)
	userQ := user.IDEQ(currentUser.ID)

	return r.client.User.Query().Where(userQ).QueryAssignedRoles().QueryCompany().QueryCustomers().QueryReceivables().Paginate(
		ctx, after, first, before, last,
		ent.WithReceivableFilter(where.Filter),
	)
}

// Tokens is the resolver for the tokens field.
func (r *queryResolver) Tokens(ctx context.Context) ([]*ent.Token, error) {
	panic(fmt.Errorf("not implemented: Tokens - tokens"))
}

// Workshifts is the resolver for the workshifts field.
func (r *queryResolver) Workshifts(ctx context.Context) ([]*ent.Workshift, error) {
	panic(fmt.Errorf("not implemented: Workshifts - workshifts"))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
