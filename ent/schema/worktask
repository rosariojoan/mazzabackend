package schema

import (
	"context"
	"mazza/app/notifications"
	gen "mazza/ent/generated"
	"mazza/ent/generated/employee"
	"mazza/ent/generated/hook"
	"mazza/ent/generated/user"
	"mazza/ent/utils"
	"time"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/schema"
	"entgo.io/ent/schema/edge"
	"entgo.io/ent/schema/field"
)

// Worktask holds the schema definition for the Worktask entity.
type Worktask struct {
	ent.Schema
}

func (Worktask) Mixin() []ent.Mixin {
	return []ent.Mixin{
		BaseModelMixin{},
	}
}

// Fields of the Worktask.
func (Worktask) Fields() []ent.Field {
	return []ent.Field{
		field.String("description").Optional(),
		field.Enum("status").Values("DRAFT", "ASSIGNED", "DONE"),
		field.JSON("subtasks", []string{}).Optional().Comment(
			"The content of this field should be a serialized slice of JSONs.\n" +
				"Each entry should hve the following fields: " +
				"description: string, order: number, completed: bool, completedBy: {id: number, name: string}, completedAt: time",
		),
		field.String("title"),
		field.Time("startTime"),
		field.Time("endTime").Optional(),
	}
}

// Edges of the Worktask.
func (Worktask) Edges() []ent.Edge {
	return []ent.Edge{
		edge.From("company", Company.Type).Ref("workTasks").Unique(),
		edge.From("createdBy", User.Type).Ref("createdTasks").Unique(),
		edge.From("assignedTo", Employee.Type).Ref("assignedTasks"),
		// edge.To("subtasks", Worktask.Type).Annotations(entsql.OnDelete(entsql.Cascade)), // a task can have many subtasks
		// edge.From("workTask", Worktask.Type).Ref("subtasks").Unique(),                   // a subtask can only belong to one task
		// edge.To("workShifts", Workshift.Type).Annotations(entsql.OnDelete(entsql.SetNull)),
		edge.To("workTags", Worktag.Type).Annotations(entsql.OnDelete(entsql.SetNull)),
	}
}

// Enable query and mutation for the CompanyClient schema
func (Worktask) Annotations() []schema.Annotation {
	return []schema.Annotation{
		entgql.Mutations(entgql.MutationCreate(), entgql.MutationUpdate()),
	}
}

// Hooks of the Worktask. On create, notification to assigned employees
func (Worktask) Hooks() []ent.Hook {
	return []ent.Hook{
		hook.On(
			func(next ent.Mutator) ent.Mutator {
				return hook.WorktaskFunc(func(ctx context.Context, m *gen.WorktaskMutation) (ent.Value, error) {
					v, err := next.Mutate(ctx, m)
					if err != nil {
						return v, nil
					}

					// Post mutation action: send notification to the assigned employees

					// The current user is excluded from the notification list
					currentUser, _, currentEmployeeID := utils.GetSession(&ctx)
					_assignedIDs := m.AssignedToIDs()

					if len(_assignedIDs) == 0 {
						return v, nil
					}

					var assignedIDs []int
					for _, id := range _assignedIDs {
						if id != *currentEmployeeID {
							assignedIDs = append(assignedIDs, id)
						}
					}

					if len(assignedIDs) == 0 {
						return v, nil
					}

					// Get the users associated the assigned employees
					users, err := m.Client().Employee.Query().Where(employee.IDIn(assignedIDs...)).
						QueryUser().Select(user.FieldID, user.FieldFcmToken).All(ctx)

					if err != nil {
						return v, nil
					}

					// Post mutation: this user has a leader, send a notification to the leader after creating the workshift
					taskTitle, _ := m.Title()
					for _, user := range users {
						data := struct {
							AlertType  string    `json:"alertType"`
							UserID     int       `json:"userID"`
							TimeSent   time.Time `json:"timeSent"`
							Title      string    `json:"title"`
							AssignedBy string    `json:"assignedBy"`
						}{
							AlertType:  notifications.AlertType.AssignedWorkTask,
							UserID:     user.ID,
							TimeSent:   time.Now(),
							Title:      taskTitle,
							AssignedBy: currentUser.Name,
						}

						go func() {
							dataMap, err := notifications.GetMap(data)
							if err != nil {
								return
							}
							// Send notification to the closest, available driver
							title := "Nova tarefa atribu√≠da"
							notifications.SendDataNotification(*user.FcmToken, &title, dataMap)
						}()
					}
					_ = currentUser
					return v, nil
				})
			},
			ent.OpCreate,
		),
	}
}
