// Code generated by ent, DO NOT EDIT.

package workshift

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the workshift type in the database.
	Label = "workshift"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deletedat field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldApprovedAt holds the string denoting the approvedat field in the database.
	FieldApprovedAt = "approved_at"
	// FieldClockIn holds the string denoting the clockin field in the database.
	FieldClockIn = "clock_in"
	// FieldClockOut holds the string denoting the clockout field in the database.
	FieldClockOut = "clock_out"
	// FieldClockInLocation holds the string denoting the clockinlocation field in the database.
	FieldClockInLocation = "clock_in_location"
	// FieldClockOutLocation holds the string denoting the clockoutlocation field in the database.
	FieldClockOutLocation = "clock_out_location"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldNote holds the string denoting the note field in the database.
	FieldNote = "note"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeCompany holds the string denoting the company edge name in mutations.
	EdgeCompany = "company"
	// EdgeEmployee holds the string denoting the employee edge name in mutations.
	EdgeEmployee = "employee"
	// EdgeApprovedBy holds the string denoting the approvedby edge name in mutations.
	EdgeApprovedBy = "approvedBy"
	// EdgeWorkTask holds the string denoting the worktask edge name in mutations.
	EdgeWorkTask = "workTask"
	// EdgeEditRequest holds the string denoting the editrequest edge name in mutations.
	EdgeEditRequest = "editRequest"
	// EdgeWorkShift holds the string denoting the workshift edge name in mutations.
	EdgeWorkShift = "workShift"
	// Table holds the table name of the workshift in the database.
	Table = "workshifts"
	// CompanyTable is the table that holds the company relation/edge.
	CompanyTable = "workshifts"
	// CompanyInverseTable is the table name for the Company entity.
	// It exists in this package in order to avoid circular dependency with the "company" package.
	CompanyInverseTable = "companies"
	// CompanyColumn is the table column denoting the company relation/edge.
	CompanyColumn = "company_work_shifts"
	// EmployeeTable is the table that holds the employee relation/edge.
	EmployeeTable = "workshifts"
	// EmployeeInverseTable is the table name for the Employee entity.
	// It exists in this package in order to avoid circular dependency with the "employee" package.
	EmployeeInverseTable = "employees"
	// EmployeeColumn is the table column denoting the employee relation/edge.
	EmployeeColumn = "employee_work_shifts"
	// ApprovedByTable is the table that holds the approvedBy relation/edge.
	ApprovedByTable = "workshifts"
	// ApprovedByInverseTable is the table name for the Employee entity.
	// It exists in this package in order to avoid circular dependency with the "employee" package.
	ApprovedByInverseTable = "employees"
	// ApprovedByColumn is the table column denoting the approvedBy relation/edge.
	ApprovedByColumn = "employee_approved_work_shifts"
	// WorkTaskTable is the table that holds the workTask relation/edge.
	WorkTaskTable = "workshifts"
	// WorkTaskInverseTable is the table name for the Worktask entity.
	// It exists in this package in order to avoid circular dependency with the "worktask" package.
	WorkTaskInverseTable = "worktasks"
	// WorkTaskColumn is the table column denoting the workTask relation/edge.
	WorkTaskColumn = "worktask_work_shifts"
	// EditRequestTable is the table that holds the editRequest relation/edge.
	EditRequestTable = "workshifts"
	// EditRequestColumn is the table column denoting the editRequest relation/edge.
	EditRequestColumn = "workshift_edit_request"
	// WorkShiftTable is the table that holds the workShift relation/edge.
	WorkShiftTable = "workshifts"
	// WorkShiftColumn is the table column denoting the workShift relation/edge.
	WorkShiftColumn = "workshift_edit_request"
)

// Columns holds all SQL columns for workshift fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldApprovedAt,
	FieldClockIn,
	FieldClockOut,
	FieldClockInLocation,
	FieldClockOutLocation,
	FieldDescription,
	FieldNote,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "workshifts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"company_work_shifts",
	"employee_work_shifts",
	"employee_approved_work_shifts",
	"workshift_edit_request",
	"worktask_work_shifts",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "mazza/ent/runtime"
var (
	Hooks [2]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultClockIn holds the default value on creation for the "clockIn" field.
	DefaultClockIn func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusPENDING is the default value of the Status enum.
const DefaultStatus = StatusPENDING

// Status values.
const (
	StatusAPPROVED Status = "APPROVED"
	StatusPENDING  Status = "PENDING"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusAPPROVED, StatusPENDING:
		return nil
	default:
		return fmt.Errorf("workshift: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Workshift queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deletedAt field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByApprovedAt orders the results by the approvedAt field.
func ByApprovedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApprovedAt, opts...).ToFunc()
}

// ByClockIn orders the results by the clockIn field.
func ByClockIn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClockIn, opts...).ToFunc()
}

// ByClockOut orders the results by the clockOut field.
func ByClockOut(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClockOut, opts...).ToFunc()
}

// ByClockInLocation orders the results by the clockInLocation field.
func ByClockInLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClockInLocation, opts...).ToFunc()
}

// ByClockOutLocation orders the results by the clockOutLocation field.
func ByClockOutLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClockOutLocation, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByNote orders the results by the note field.
func ByNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNote, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCompanyField orders the results by company field.
func ByCompanyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompanyStep(), sql.OrderByField(field, opts...))
	}
}

// ByEmployeeField orders the results by employee field.
func ByEmployeeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmployeeStep(), sql.OrderByField(field, opts...))
	}
}

// ByApprovedByField orders the results by approvedBy field.
func ByApprovedByField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApprovedByStep(), sql.OrderByField(field, opts...))
	}
}

// ByWorkTaskField orders the results by workTask field.
func ByWorkTaskField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkTaskStep(), sql.OrderByField(field, opts...))
	}
}

// ByEditRequestField orders the results by editRequest field.
func ByEditRequestField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEditRequestStep(), sql.OrderByField(field, opts...))
	}
}

// ByWorkShiftField orders the results by workShift field.
func ByWorkShiftField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkShiftStep(), sql.OrderByField(field, opts...))
	}
}
func newCompanyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompanyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
	)
}
func newEmployeeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmployeeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EmployeeTable, EmployeeColumn),
	)
}
func newApprovedByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApprovedByInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ApprovedByTable, ApprovedByColumn),
	)
}
func newWorkTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkTaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, WorkTaskTable, WorkTaskColumn),
	)
}
func newEditRequestStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, EditRequestTable, EditRequestColumn),
	)
}
func newWorkShiftStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, WorkShiftTable, WorkShiftColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}
