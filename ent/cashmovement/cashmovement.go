// Code generated by ent, DO NOT EDIT.

package cashmovement

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the cashmovement type in the database.
	Label = "cash_movement"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deletedat field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// FieldEntryGroup holds the string denoting the entrygroup field in the database.
	FieldEntryGroup = "entry_group"
	// EdgeTreasury holds the string denoting the treasury edge name in mutations.
	EdgeTreasury = "treasury"
	// Table holds the table name of the cashmovement in the database.
	Table = "cash_movements"
	// TreasuryTable is the table that holds the treasury relation/edge.
	TreasuryTable = "cash_movements"
	// TreasuryInverseTable is the table name for the Treasury entity.
	// It exists in this package in order to avoid circular dependency with the "treasury" package.
	TreasuryInverseTable = "treasuries"
	// TreasuryColumn is the table column denoting the treasury relation/edge.
	TreasuryColumn = "treasury_cash_movements"
)

// Columns holds all SQL columns for cashmovement fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldAmount,
	FieldDate,
	FieldEntryGroup,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "cash_movements"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"treasury_cash_movements",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
	// EntryGroupValidator is a validator for the "entryGroup" field. It is called by the builders before save.
	EntryGroupValidator func(int) error
)

// OrderOption defines the ordering options for the CashMovement queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deletedAt field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByDate orders the results by the date field.
func ByDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDate, opts...).ToFunc()
}

// ByEntryGroup orders the results by the entryGroup field.
func ByEntryGroup(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntryGroup, opts...).ToFunc()
}

// ByTreasuryField orders the results by treasury field.
func ByTreasuryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTreasuryStep(), sql.OrderByField(field, opts...))
	}
}
func newTreasuryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TreasuryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TreasuryTable, TreasuryColumn),
	)
}
