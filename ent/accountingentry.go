// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"mazza/ent/accountingentry"
	"mazza/ent/company"
	"mazza/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AccountingEntry is the model entity for the AccountingEntry schema.
type AccountingEntry struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// DeletedAt holds the value of the "deletedAt" field.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	// Number holds the value of the "number" field.
	Number int `json:"number,omitempty"`
	// Group holds the value of the "group" field.
	Group int `json:"group,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Account holds the value of the "account" field.
	Account string `json:"account,omitempty"`
	// Label holds the value of the "label" field.
	Label string `json:"label,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// AccountType holds the value of the "accountType" field.
	AccountType accountingentry.AccountType `json:"accountType,omitempty"`
	// IsDebit holds the value of the "isDebit" field.
	IsDebit bool `json:"isDebit,omitempty"`
	// IsReversal holds the value of the "isReversal" field.
	IsReversal bool `json:"isReversal,omitempty"`
	// Reversed holds the value of the "reversed" field.
	Reversed bool `json:"reversed,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AccountingEntryQuery when eager-loading is set.
	Edges                      AccountingEntryEdges `json:"edges"`
	company_accounting_entries *int
	user_accounting_entries    *int
	selectValues               sql.SelectValues
}

// AccountingEntryEdges holds the relations/edges for other nodes in the graph.
type AccountingEntryEdges struct {
	// Company holds the value of the company edge.
	Company *Company `json:"company,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// CompanyOrErr returns the Company value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AccountingEntryEdges) CompanyOrErr() (*Company, error) {
	if e.Company != nil {
		return e.Company, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: company.Label}
	}
	return nil, &NotLoadedError{edge: "company"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AccountingEntryEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AccountingEntry) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case accountingentry.FieldIsDebit, accountingentry.FieldIsReversal, accountingentry.FieldReversed:
			values[i] = new(sql.NullBool)
		case accountingentry.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case accountingentry.FieldID, accountingentry.FieldNumber, accountingentry.FieldGroup:
			values[i] = new(sql.NullInt64)
		case accountingentry.FieldAccount, accountingentry.FieldLabel, accountingentry.FieldDescription, accountingentry.FieldAccountType:
			values[i] = new(sql.NullString)
		case accountingentry.FieldCreatedAt, accountingentry.FieldUpdatedAt, accountingentry.FieldDeletedAt, accountingentry.FieldDate:
			values[i] = new(sql.NullTime)
		case accountingentry.ForeignKeys[0]: // company_accounting_entries
			values[i] = new(sql.NullInt64)
		case accountingentry.ForeignKeys[1]: // user_accounting_entries
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AccountingEntry fields.
func (ae *AccountingEntry) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case accountingentry.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ae.ID = int(value.Int64)
		case accountingentry.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				ae.CreatedAt = value.Time
			}
		case accountingentry.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				ae.UpdatedAt = value.Time
			}
		case accountingentry.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deletedAt", values[i])
			} else if value.Valid {
				ae.DeletedAt = new(time.Time)
				*ae.DeletedAt = value.Time
			}
		case accountingentry.FieldNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				ae.Number = int(value.Int64)
			}
		case accountingentry.FieldGroup:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field group", values[i])
			} else if value.Valid {
				ae.Group = int(value.Int64)
			}
		case accountingentry.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				ae.Date = value.Time
			}
		case accountingentry.FieldAccount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account", values[i])
			} else if value.Valid {
				ae.Account = value.String
			}
		case accountingentry.FieldLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value.Valid {
				ae.Label = value.String
			}
		case accountingentry.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				ae.Amount = value.Float64
			}
		case accountingentry.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ae.Description = value.String
			}
		case accountingentry.FieldAccountType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field accountType", values[i])
			} else if value.Valid {
				ae.AccountType = accountingentry.AccountType(value.String)
			}
		case accountingentry.FieldIsDebit:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isDebit", values[i])
			} else if value.Valid {
				ae.IsDebit = value.Bool
			}
		case accountingentry.FieldIsReversal:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isReversal", values[i])
			} else if value.Valid {
				ae.IsReversal = value.Bool
			}
		case accountingentry.FieldReversed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field reversed", values[i])
			} else if value.Valid {
				ae.Reversed = value.Bool
			}
		case accountingentry.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field company_accounting_entries", value)
			} else if value.Valid {
				ae.company_accounting_entries = new(int)
				*ae.company_accounting_entries = int(value.Int64)
			}
		case accountingentry.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_accounting_entries", value)
			} else if value.Valid {
				ae.user_accounting_entries = new(int)
				*ae.user_accounting_entries = int(value.Int64)
			}
		default:
			ae.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AccountingEntry.
// This includes values selected through modifiers, order, etc.
func (ae *AccountingEntry) Value(name string) (ent.Value, error) {
	return ae.selectValues.Get(name)
}

// QueryCompany queries the "company" edge of the AccountingEntry entity.
func (ae *AccountingEntry) QueryCompany() *CompanyQuery {
	return NewAccountingEntryClient(ae.config).QueryCompany(ae)
}

// QueryUser queries the "user" edge of the AccountingEntry entity.
func (ae *AccountingEntry) QueryUser() *UserQuery {
	return NewAccountingEntryClient(ae.config).QueryUser(ae)
}

// Update returns a builder for updating this AccountingEntry.
// Note that you need to call AccountingEntry.Unwrap() before calling this method if this AccountingEntry
// was returned from a transaction, and the transaction was committed or rolled back.
func (ae *AccountingEntry) Update() *AccountingEntryUpdateOne {
	return NewAccountingEntryClient(ae.config).UpdateOne(ae)
}

// Unwrap unwraps the AccountingEntry entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ae *AccountingEntry) Unwrap() *AccountingEntry {
	_tx, ok := ae.config.driver.(*txDriver)
	if !ok {
		panic("ent: AccountingEntry is not a transactional entity")
	}
	ae.config.driver = _tx.drv
	return ae
}

// String implements the fmt.Stringer.
func (ae *AccountingEntry) String() string {
	var builder strings.Builder
	builder.WriteString("AccountingEntry(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ae.ID))
	builder.WriteString("createdAt=")
	builder.WriteString(ae.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(ae.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := ae.DeletedAt; v != nil {
		builder.WriteString("deletedAt=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("number=")
	builder.WriteString(fmt.Sprintf("%v", ae.Number))
	builder.WriteString(", ")
	builder.WriteString("group=")
	builder.WriteString(fmt.Sprintf("%v", ae.Group))
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(ae.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("account=")
	builder.WriteString(ae.Account)
	builder.WriteString(", ")
	builder.WriteString("label=")
	builder.WriteString(ae.Label)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", ae.Amount))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ae.Description)
	builder.WriteString(", ")
	builder.WriteString("accountType=")
	builder.WriteString(fmt.Sprintf("%v", ae.AccountType))
	builder.WriteString(", ")
	builder.WriteString("isDebit=")
	builder.WriteString(fmt.Sprintf("%v", ae.IsDebit))
	builder.WriteString(", ")
	builder.WriteString("isReversal=")
	builder.WriteString(fmt.Sprintf("%v", ae.IsReversal))
	builder.WriteString(", ")
	builder.WriteString("reversed=")
	builder.WriteString(fmt.Sprintf("%v", ae.Reversed))
	builder.WriteByte(')')
	return builder.String()
}

// AccountingEntries is a parsable slice of AccountingEntry.
type AccountingEntries []*AccountingEntry
