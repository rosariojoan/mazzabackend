// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mazza/ent/company"
	"mazza/ent/worktag"
	"mazza/ent/worktask"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorktagCreate is the builder for creating a Worktag entity.
type WorktagCreate struct {
	config
	mutation *WorktagMutation
	hooks    []Hook
}

// SetCreatedAt sets the "createdAt" field.
func (wc *WorktagCreate) SetCreatedAt(t time.Time) *WorktagCreate {
	wc.mutation.SetCreatedAt(t)
	return wc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (wc *WorktagCreate) SetNillableCreatedAt(t *time.Time) *WorktagCreate {
	if t != nil {
		wc.SetCreatedAt(*t)
	}
	return wc
}

// SetUpdatedAt sets the "updatedAt" field.
func (wc *WorktagCreate) SetUpdatedAt(t time.Time) *WorktagCreate {
	wc.mutation.SetUpdatedAt(t)
	return wc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (wc *WorktagCreate) SetNillableUpdatedAt(t *time.Time) *WorktagCreate {
	if t != nil {
		wc.SetUpdatedAt(*t)
	}
	return wc
}

// SetDeletedAt sets the "deletedAt" field.
func (wc *WorktagCreate) SetDeletedAt(t time.Time) *WorktagCreate {
	wc.mutation.SetDeletedAt(t)
	return wc
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (wc *WorktagCreate) SetNillableDeletedAt(t *time.Time) *WorktagCreate {
	if t != nil {
		wc.SetDeletedAt(*t)
	}
	return wc
}

// SetName sets the "name" field.
func (wc *WorktagCreate) SetName(s string) *WorktagCreate {
	wc.mutation.SetName(s)
	return wc
}

// SetColor sets the "color" field.
func (wc *WorktagCreate) SetColor(s string) *WorktagCreate {
	wc.mutation.SetColor(s)
	return wc
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (wc *WorktagCreate) SetCompanyID(id int) *WorktagCreate {
	wc.mutation.SetCompanyID(id)
	return wc
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (wc *WorktagCreate) SetNillableCompanyID(id *int) *WorktagCreate {
	if id != nil {
		wc = wc.SetCompanyID(*id)
	}
	return wc
}

// SetCompany sets the "company" edge to the Company entity.
func (wc *WorktagCreate) SetCompany(c *Company) *WorktagCreate {
	return wc.SetCompanyID(c.ID)
}

// AddWorkTaskIDs adds the "workTasks" edge to the Worktask entity by IDs.
func (wc *WorktagCreate) AddWorkTaskIDs(ids ...int) *WorktagCreate {
	wc.mutation.AddWorkTaskIDs(ids...)
	return wc
}

// AddWorkTasks adds the "workTasks" edges to the Worktask entity.
func (wc *WorktagCreate) AddWorkTasks(w ...*Worktask) *WorktagCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wc.AddWorkTaskIDs(ids...)
}

// Mutation returns the WorktagMutation object of the builder.
func (wc *WorktagCreate) Mutation() *WorktagMutation {
	return wc.mutation
}

// Save creates the Worktag in the database.
func (wc *WorktagCreate) Save(ctx context.Context) (*Worktag, error) {
	wc.defaults()
	return withHooks(ctx, wc.sqlSave, wc.mutation, wc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WorktagCreate) SaveX(ctx context.Context) *Worktag {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *WorktagCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *WorktagCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wc *WorktagCreate) defaults() {
	if _, ok := wc.mutation.CreatedAt(); !ok {
		v := worktag.DefaultCreatedAt()
		wc.mutation.SetCreatedAt(v)
	}
	if _, ok := wc.mutation.UpdatedAt(); !ok {
		v := worktag.DefaultUpdatedAt()
		wc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wc *WorktagCreate) check() error {
	if _, ok := wc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "Worktag.createdAt"`)}
	}
	if _, ok := wc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "Worktag.updatedAt"`)}
	}
	if _, ok := wc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Worktag.name"`)}
	}
	if v, ok := wc.mutation.Name(); ok {
		if err := worktag.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Worktag.name": %w`, err)}
		}
	}
	if _, ok := wc.mutation.Color(); !ok {
		return &ValidationError{Name: "color", err: errors.New(`ent: missing required field "Worktag.color"`)}
	}
	return nil
}

func (wc *WorktagCreate) sqlSave(ctx context.Context) (*Worktag, error) {
	if err := wc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	wc.mutation.id = &_node.ID
	wc.mutation.done = true
	return _node, nil
}

func (wc *WorktagCreate) createSpec() (*Worktag, *sqlgraph.CreateSpec) {
	var (
		_node = &Worktag{config: wc.config}
		_spec = sqlgraph.NewCreateSpec(worktag.Table, sqlgraph.NewFieldSpec(worktag.FieldID, field.TypeInt))
	)
	if value, ok := wc.mutation.CreatedAt(); ok {
		_spec.SetField(worktag.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wc.mutation.UpdatedAt(); ok {
		_spec.SetField(worktag.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := wc.mutation.DeletedAt(); ok {
		_spec.SetField(worktag.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := wc.mutation.Name(); ok {
		_spec.SetField(worktag.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := wc.mutation.Color(); ok {
		_spec.SetField(worktag.FieldColor, field.TypeString, value)
		_node.Color = value
	}
	if nodes := wc.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   worktag.CompanyTable,
			Columns: []string{worktag.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.company_work_tags = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.WorkTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   worktag.WorkTasksTable,
			Columns: worktag.WorkTasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worktask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WorktagCreateBulk is the builder for creating many Worktag entities in bulk.
type WorktagCreateBulk struct {
	config
	err      error
	builders []*WorktagCreate
}

// Save creates the Worktag entities in the database.
func (wcb *WorktagCreateBulk) Save(ctx context.Context) ([]*Worktag, error) {
	if wcb.err != nil {
		return nil, wcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Worktag, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorktagMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WorktagCreateBulk) SaveX(ctx context.Context) []*Worktag {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *WorktagCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *WorktagCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}
