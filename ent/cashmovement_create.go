// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mazza/ent/cashmovement"
	"mazza/ent/treasury"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CashMovementCreate is the builder for creating a CashMovement entity.
type CashMovementCreate struct {
	config
	mutation *CashMovementMutation
	hooks    []Hook
}

// SetCreatedAt sets the "createdAt" field.
func (cmc *CashMovementCreate) SetCreatedAt(t time.Time) *CashMovementCreate {
	cmc.mutation.SetCreatedAt(t)
	return cmc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (cmc *CashMovementCreate) SetNillableCreatedAt(t *time.Time) *CashMovementCreate {
	if t != nil {
		cmc.SetCreatedAt(*t)
	}
	return cmc
}

// SetUpdatedAt sets the "updatedAt" field.
func (cmc *CashMovementCreate) SetUpdatedAt(t time.Time) *CashMovementCreate {
	cmc.mutation.SetUpdatedAt(t)
	return cmc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (cmc *CashMovementCreate) SetNillableUpdatedAt(t *time.Time) *CashMovementCreate {
	if t != nil {
		cmc.SetUpdatedAt(*t)
	}
	return cmc
}

// SetDeletedAt sets the "deletedAt" field.
func (cmc *CashMovementCreate) SetDeletedAt(t time.Time) *CashMovementCreate {
	cmc.mutation.SetDeletedAt(t)
	return cmc
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (cmc *CashMovementCreate) SetNillableDeletedAt(t *time.Time) *CashMovementCreate {
	if t != nil {
		cmc.SetDeletedAt(*t)
	}
	return cmc
}

// SetAmount sets the "amount" field.
func (cmc *CashMovementCreate) SetAmount(f float64) *CashMovementCreate {
	cmc.mutation.SetAmount(f)
	return cmc
}

// SetDate sets the "date" field.
func (cmc *CashMovementCreate) SetDate(t time.Time) *CashMovementCreate {
	cmc.mutation.SetDate(t)
	return cmc
}

// SetEntryGroup sets the "entryGroup" field.
func (cmc *CashMovementCreate) SetEntryGroup(i int) *CashMovementCreate {
	cmc.mutation.SetEntryGroup(i)
	return cmc
}

// SetTreasuryID sets the "treasury" edge to the Treasury entity by ID.
func (cmc *CashMovementCreate) SetTreasuryID(id int) *CashMovementCreate {
	cmc.mutation.SetTreasuryID(id)
	return cmc
}

// SetNillableTreasuryID sets the "treasury" edge to the Treasury entity by ID if the given value is not nil.
func (cmc *CashMovementCreate) SetNillableTreasuryID(id *int) *CashMovementCreate {
	if id != nil {
		cmc = cmc.SetTreasuryID(*id)
	}
	return cmc
}

// SetTreasury sets the "treasury" edge to the Treasury entity.
func (cmc *CashMovementCreate) SetTreasury(t *Treasury) *CashMovementCreate {
	return cmc.SetTreasuryID(t.ID)
}

// Mutation returns the CashMovementMutation object of the builder.
func (cmc *CashMovementCreate) Mutation() *CashMovementMutation {
	return cmc.mutation
}

// Save creates the CashMovement in the database.
func (cmc *CashMovementCreate) Save(ctx context.Context) (*CashMovement, error) {
	cmc.defaults()
	return withHooks(ctx, cmc.sqlSave, cmc.mutation, cmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cmc *CashMovementCreate) SaveX(ctx context.Context) *CashMovement {
	v, err := cmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmc *CashMovementCreate) Exec(ctx context.Context) error {
	_, err := cmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmc *CashMovementCreate) ExecX(ctx context.Context) {
	if err := cmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmc *CashMovementCreate) defaults() {
	if _, ok := cmc.mutation.CreatedAt(); !ok {
		v := cashmovement.DefaultCreatedAt()
		cmc.mutation.SetCreatedAt(v)
	}
	if _, ok := cmc.mutation.UpdatedAt(); !ok {
		v := cashmovement.DefaultUpdatedAt()
		cmc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmc *CashMovementCreate) check() error {
	if _, ok := cmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "CashMovement.createdAt"`)}
	}
	if _, ok := cmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "CashMovement.updatedAt"`)}
	}
	if _, ok := cmc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "CashMovement.amount"`)}
	}
	if _, ok := cmc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "CashMovement.date"`)}
	}
	if _, ok := cmc.mutation.EntryGroup(); !ok {
		return &ValidationError{Name: "entryGroup", err: errors.New(`ent: missing required field "CashMovement.entryGroup"`)}
	}
	if v, ok := cmc.mutation.EntryGroup(); ok {
		if err := cashmovement.EntryGroupValidator(v); err != nil {
			return &ValidationError{Name: "entryGroup", err: fmt.Errorf(`ent: validator failed for field "CashMovement.entryGroup": %w`, err)}
		}
	}
	return nil
}

func (cmc *CashMovementCreate) sqlSave(ctx context.Context) (*CashMovement, error) {
	if err := cmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cmc.mutation.id = &_node.ID
	cmc.mutation.done = true
	return _node, nil
}

func (cmc *CashMovementCreate) createSpec() (*CashMovement, *sqlgraph.CreateSpec) {
	var (
		_node = &CashMovement{config: cmc.config}
		_spec = sqlgraph.NewCreateSpec(cashmovement.Table, sqlgraph.NewFieldSpec(cashmovement.FieldID, field.TypeInt))
	)
	if value, ok := cmc.mutation.CreatedAt(); ok {
		_spec.SetField(cashmovement.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cmc.mutation.UpdatedAt(); ok {
		_spec.SetField(cashmovement.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cmc.mutation.DeletedAt(); ok {
		_spec.SetField(cashmovement.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := cmc.mutation.Amount(); ok {
		_spec.SetField(cashmovement.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := cmc.mutation.Date(); ok {
		_spec.SetField(cashmovement.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if value, ok := cmc.mutation.EntryGroup(); ok {
		_spec.SetField(cashmovement.FieldEntryGroup, field.TypeInt, value)
		_node.EntryGroup = value
	}
	if nodes := cmc.mutation.TreasuryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cashmovement.TreasuryTable,
			Columns: []string{cashmovement.TreasuryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(treasury.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.treasury_cash_movements = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CashMovementCreateBulk is the builder for creating many CashMovement entities in bulk.
type CashMovementCreateBulk struct {
	config
	err      error
	builders []*CashMovementCreate
}

// Save creates the CashMovement entities in the database.
func (cmcb *CashMovementCreateBulk) Save(ctx context.Context) ([]*CashMovement, error) {
	if cmcb.err != nil {
		return nil, cmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cmcb.builders))
	nodes := make([]*CashMovement, len(cmcb.builders))
	mutators := make([]Mutator, len(cmcb.builders))
	for i := range cmcb.builders {
		func(i int, root context.Context) {
			builder := cmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CashMovementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cmcb *CashMovementCreateBulk) SaveX(ctx context.Context) []*CashMovement {
	v, err := cmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmcb *CashMovementCreateBulk) Exec(ctx context.Context) error {
	_, err := cmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmcb *CashMovementCreateBulk) ExecX(ctx context.Context) {
	if err := cmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
