// Code generated by ent, DO NOT EDIT.

package company

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the company type in the database.
	Label = "company"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deletedat field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldBaseCurrency holds the string denoting the basecurrency field in the database.
	FieldBaseCurrency = "base_currency"
	// FieldCeoName holds the string denoting the ceoname field in the database.
	FieldCeoName = "ceo_name"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// FieldCountry holds the string denoting the country field in the database.
	FieldCountry = "country"
	// FieldEstablishedAt holds the string denoting the establishedat field in the database.
	FieldEstablishedAt = "established_at"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldLastEntryDate holds the string denoting the lastentrydate field in the database.
	FieldLastEntryDate = "last_entry_date"
	// FieldLastInvoiceNumber holds the string denoting the lastinvoicenumber field in the database.
	FieldLastInvoiceNumber = "last_invoice_number"
	// FieldLogo holds the string denoting the logo field in the database.
	FieldLogo = "logo"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldNumberOfEmployees holds the string denoting the numberofemployees field in the database.
	FieldNumberOfEmployees = "number_of_employees"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldSector holds the string denoting the sector field in the database.
	FieldSector = "sector"
	// FieldTaxId holds the string denoting the taxid field in the database.
	FieldTaxId = "tax_id"
	// FieldVatRate holds the string denoting the vatrate field in the database.
	FieldVatRate = "vat_rate"
	// FieldWebsite holds the string denoting the website field in the database.
	FieldWebsite = "website"
	// EdgeAvailableRoles holds the string denoting the availableroles edge name in mutations.
	EdgeAvailableRoles = "availableRoles"
	// EdgeAccountingEntries holds the string denoting the accountingentries edge name in mutations.
	EdgeAccountingEntries = "accountingEntries"
	// EdgeCustomers holds the string denoting the customers edge name in mutations.
	EdgeCustomers = "customers"
	// EdgeEmployees holds the string denoting the employees edge name in mutations.
	EdgeEmployees = "employees"
	// EdgeFiles holds the string denoting the files edge name in mutations.
	EdgeFiles = "files"
	// EdgeProducts holds the string denoting the products edge name in mutations.
	EdgeProducts = "products"
	// EdgeSuppliers holds the string denoting the suppliers edge name in mutations.
	EdgeSuppliers = "suppliers"
	// EdgeTokens holds the string denoting the tokens edge name in mutations.
	EdgeTokens = "tokens"
	// EdgeTreasuries holds the string denoting the treasuries edge name in mutations.
	EdgeTreasuries = "treasuries"
	// EdgeWorkShifts holds the string denoting the workshifts edge name in mutations.
	EdgeWorkShifts = "workShifts"
	// EdgeWorkTasks holds the string denoting the worktasks edge name in mutations.
	EdgeWorkTasks = "workTasks"
	// EdgeWorkTags holds the string denoting the worktags edge name in mutations.
	EdgeWorkTags = "workTags"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeDaughterCompanies holds the string denoting the daughtercompanies edge name in mutations.
	EdgeDaughterCompanies = "daughterCompanies"
	// EdgeParentCompany holds the string denoting the parentcompany edge name in mutations.
	EdgeParentCompany = "parentCompany"
	// Table holds the table name of the company in the database.
	Table = "companies"
	// AvailableRolesTable is the table that holds the availableRoles relation/edge.
	AvailableRolesTable = "user_roles"
	// AvailableRolesInverseTable is the table name for the UserRole entity.
	// It exists in this package in order to avoid circular dependency with the "userrole" package.
	AvailableRolesInverseTable = "user_roles"
	// AvailableRolesColumn is the table column denoting the availableRoles relation/edge.
	AvailableRolesColumn = "company_available_roles"
	// AccountingEntriesTable is the table that holds the accountingEntries relation/edge.
	AccountingEntriesTable = "accounting_entries"
	// AccountingEntriesInverseTable is the table name for the AccountingEntry entity.
	// It exists in this package in order to avoid circular dependency with the "accountingentry" package.
	AccountingEntriesInverseTable = "accounting_entries"
	// AccountingEntriesColumn is the table column denoting the accountingEntries relation/edge.
	AccountingEntriesColumn = "company_accounting_entries"
	// CustomersTable is the table that holds the customers relation/edge.
	CustomersTable = "customers"
	// CustomersInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomersInverseTable = "customers"
	// CustomersColumn is the table column denoting the customers relation/edge.
	CustomersColumn = "company_customers"
	// EmployeesTable is the table that holds the employees relation/edge.
	EmployeesTable = "employees"
	// EmployeesInverseTable is the table name for the Employee entity.
	// It exists in this package in order to avoid circular dependency with the "employee" package.
	EmployeesInverseTable = "employees"
	// EmployeesColumn is the table column denoting the employees relation/edge.
	EmployeesColumn = "company_employees"
	// FilesTable is the table that holds the files relation/edge.
	FilesTable = "files"
	// FilesInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	FilesInverseTable = "files"
	// FilesColumn is the table column denoting the files relation/edge.
	FilesColumn = "company_files"
	// ProductsTable is the table that holds the products relation/edge.
	ProductsTable = "products"
	// ProductsInverseTable is the table name for the Product entity.
	// It exists in this package in order to avoid circular dependency with the "product" package.
	ProductsInverseTable = "products"
	// ProductsColumn is the table column denoting the products relation/edge.
	ProductsColumn = "company_products"
	// SuppliersTable is the table that holds the suppliers relation/edge.
	SuppliersTable = "suppliers"
	// SuppliersInverseTable is the table name for the Supplier entity.
	// It exists in this package in order to avoid circular dependency with the "supplier" package.
	SuppliersInverseTable = "suppliers"
	// SuppliersColumn is the table column denoting the suppliers relation/edge.
	SuppliersColumn = "company_suppliers"
	// TokensTable is the table that holds the tokens relation/edge.
	TokensTable = "tokens"
	// TokensInverseTable is the table name for the Token entity.
	// It exists in this package in order to avoid circular dependency with the "token" package.
	TokensInverseTable = "tokens"
	// TokensColumn is the table column denoting the tokens relation/edge.
	TokensColumn = "company_tokens"
	// TreasuriesTable is the table that holds the treasuries relation/edge.
	TreasuriesTable = "treasuries"
	// TreasuriesInverseTable is the table name for the Treasury entity.
	// It exists in this package in order to avoid circular dependency with the "treasury" package.
	TreasuriesInverseTable = "treasuries"
	// TreasuriesColumn is the table column denoting the treasuries relation/edge.
	TreasuriesColumn = "company_treasuries"
	// WorkShiftsTable is the table that holds the workShifts relation/edge.
	WorkShiftsTable = "workshifts"
	// WorkShiftsInverseTable is the table name for the Workshift entity.
	// It exists in this package in order to avoid circular dependency with the "workshift" package.
	WorkShiftsInverseTable = "workshifts"
	// WorkShiftsColumn is the table column denoting the workShifts relation/edge.
	WorkShiftsColumn = "company_work_shifts"
	// WorkTasksTable is the table that holds the workTasks relation/edge.
	WorkTasksTable = "worktasks"
	// WorkTasksInverseTable is the table name for the Worktask entity.
	// It exists in this package in order to avoid circular dependency with the "worktask" package.
	WorkTasksInverseTable = "worktasks"
	// WorkTasksColumn is the table column denoting the workTasks relation/edge.
	WorkTasksColumn = "company_work_tasks"
	// WorkTagsTable is the table that holds the workTags relation/edge.
	WorkTagsTable = "worktags"
	// WorkTagsInverseTable is the table name for the Worktag entity.
	// It exists in this package in order to avoid circular dependency with the "worktag" package.
	WorkTagsInverseTable = "worktags"
	// WorkTagsColumn is the table column denoting the workTags relation/edge.
	WorkTagsColumn = "company_work_tags"
	// UsersTable is the table that holds the users relation/edge. The primary key declared below.
	UsersTable = "company_users"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// DaughterCompaniesTable is the table that holds the daughterCompanies relation/edge.
	DaughterCompaniesTable = "companies"
	// DaughterCompaniesColumn is the table column denoting the daughterCompanies relation/edge.
	DaughterCompaniesColumn = "company_daughter_companies"
	// ParentCompanyTable is the table that holds the parentCompany relation/edge.
	ParentCompanyTable = "companies"
	// ParentCompanyColumn is the table column denoting the parentCompany relation/edge.
	ParentCompanyColumn = "company_daughter_companies"
)

// Columns holds all SQL columns for company fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldAddress,
	FieldBaseCurrency,
	FieldCeoName,
	FieldCity,
	FieldCountry,
	FieldEstablishedAt,
	FieldDescription,
	FieldEmail,
	FieldLastEntryDate,
	FieldLastInvoiceNumber,
	FieldLogo,
	FieldName,
	FieldNumberOfEmployees,
	FieldPhone,
	FieldSector,
	FieldTaxId,
	FieldVatRate,
	FieldWebsite,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "companies"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"company_daughter_companies",
}

var (
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the users relation (M2M).
	UsersPrimaryKey = []string{"company_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultBaseCurrency holds the default value on creation for the "baseCurrency" field.
	DefaultBaseCurrency string
	// DefaultLastInvoiceNumber holds the default value on creation for the "lastInvoiceNumber" field.
	DefaultLastInvoiceNumber int32
	// LastInvoiceNumberValidator is a validator for the "lastInvoiceNumber" field. It is called by the builders before save.
	LastInvoiceNumberValidator func(int32) error
	// DefaultNumberOfEmployees holds the default value on creation for the "numberOfEmployees" field.
	DefaultNumberOfEmployees int32
	// NumberOfEmployeesValidator is a validator for the "numberOfEmployees" field. It is called by the builders before save.
	NumberOfEmployeesValidator func(int32) error
	// DefaultVatRate holds the default value on creation for the "vatRate" field.
	DefaultVatRate float64
)

// OrderOption defines the ordering options for the Company queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deletedAt field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByBaseCurrency orders the results by the baseCurrency field.
func ByBaseCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBaseCurrency, opts...).ToFunc()
}

// ByCeoName orders the results by the ceoName field.
func ByCeoName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCeoName, opts...).ToFunc()
}

// ByCity orders the results by the city field.
func ByCity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCity, opts...).ToFunc()
}

// ByCountry orders the results by the country field.
func ByCountry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountry, opts...).ToFunc()
}

// ByEstablishedAt orders the results by the establishedAt field.
func ByEstablishedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEstablishedAt, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByLastEntryDate orders the results by the lastEntryDate field.
func ByLastEntryDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastEntryDate, opts...).ToFunc()
}

// ByLastInvoiceNumber orders the results by the lastInvoiceNumber field.
func ByLastInvoiceNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastInvoiceNumber, opts...).ToFunc()
}

// ByLogo orders the results by the logo field.
func ByLogo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLogo, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByNumberOfEmployees orders the results by the numberOfEmployees field.
func ByNumberOfEmployees(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumberOfEmployees, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// BySector orders the results by the sector field.
func BySector(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSector, opts...).ToFunc()
}

// ByTaxId orders the results by the taxId field.
func ByTaxId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaxId, opts...).ToFunc()
}

// ByVatRate orders the results by the vatRate field.
func ByVatRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVatRate, opts...).ToFunc()
}

// ByWebsite orders the results by the website field.
func ByWebsite(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWebsite, opts...).ToFunc()
}

// ByAvailableRolesCount orders the results by availableRoles count.
func ByAvailableRolesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAvailableRolesStep(), opts...)
	}
}

// ByAvailableRoles orders the results by availableRoles terms.
func ByAvailableRoles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAvailableRolesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAccountingEntriesCount orders the results by accountingEntries count.
func ByAccountingEntriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAccountingEntriesStep(), opts...)
	}
}

// ByAccountingEntries orders the results by accountingEntries terms.
func ByAccountingEntries(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAccountingEntriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCustomersCount orders the results by customers count.
func ByCustomersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCustomersStep(), opts...)
	}
}

// ByCustomers orders the results by customers terms.
func ByCustomers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEmployeesCount orders the results by employees count.
func ByEmployeesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEmployeesStep(), opts...)
	}
}

// ByEmployees orders the results by employees terms.
func ByEmployees(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmployeesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFilesCount orders the results by files count.
func ByFilesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFilesStep(), opts...)
	}
}

// ByFiles orders the results by files terms.
func ByFiles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFilesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProductsCount orders the results by products count.
func ByProductsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProductsStep(), opts...)
	}
}

// ByProducts orders the results by products terms.
func ByProducts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySuppliersCount orders the results by suppliers count.
func BySuppliersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSuppliersStep(), opts...)
	}
}

// BySuppliers orders the results by suppliers terms.
func BySuppliers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSuppliersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTokensCount orders the results by tokens count.
func ByTokensCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTokensStep(), opts...)
	}
}

// ByTokens orders the results by tokens terms.
func ByTokens(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTokensStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTreasuriesCount orders the results by treasuries count.
func ByTreasuriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTreasuriesStep(), opts...)
	}
}

// ByTreasuries orders the results by treasuries terms.
func ByTreasuries(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTreasuriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWorkShiftsCount orders the results by workShifts count.
func ByWorkShiftsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWorkShiftsStep(), opts...)
	}
}

// ByWorkShifts orders the results by workShifts terms.
func ByWorkShifts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkShiftsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWorkTasksCount orders the results by workTasks count.
func ByWorkTasksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWorkTasksStep(), opts...)
	}
}

// ByWorkTasks orders the results by workTasks terms.
func ByWorkTasks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkTasksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWorkTagsCount orders the results by workTags count.
func ByWorkTagsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWorkTagsStep(), opts...)
	}
}

// ByWorkTags orders the results by workTags terms.
func ByWorkTags(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkTagsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUsersCount orders the results by users count.
func ByUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersStep(), opts...)
	}
}

// ByUsers orders the results by users terms.
func ByUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDaughterCompaniesCount orders the results by daughterCompanies count.
func ByDaughterCompaniesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDaughterCompaniesStep(), opts...)
	}
}

// ByDaughterCompanies orders the results by daughterCompanies terms.
func ByDaughterCompanies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDaughterCompaniesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByParentCompanyField orders the results by parentCompany field.
func ByParentCompanyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParentCompanyStep(), sql.OrderByField(field, opts...))
	}
}
func newAvailableRolesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AvailableRolesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AvailableRolesTable, AvailableRolesColumn),
	)
}
func newAccountingEntriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AccountingEntriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AccountingEntriesTable, AccountingEntriesColumn),
	)
}
func newCustomersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CustomersTable, CustomersColumn),
	)
}
func newEmployeesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmployeesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EmployeesTable, EmployeesColumn),
	)
}
func newFilesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FilesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FilesTable, FilesColumn),
	)
}
func newProductsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProductsTable, ProductsColumn),
	)
}
func newSuppliersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SuppliersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SuppliersTable, SuppliersColumn),
	)
}
func newTokensStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TokensInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TokensTable, TokensColumn),
	)
}
func newTreasuriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TreasuriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TreasuriesTable, TreasuriesColumn),
	)
}
func newWorkShiftsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkShiftsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, WorkShiftsTable, WorkShiftsColumn),
	)
}
func newWorkTasksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkTasksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, WorkTasksTable, WorkTasksColumn),
	)
}
func newWorkTagsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkTagsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, WorkTagsTable, WorkTagsColumn),
	)
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, UsersTable, UsersPrimaryKey...),
	)
}
func newDaughterCompaniesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DaughterCompaniesTable, DaughterCompaniesColumn),
	)
}
func newParentCompanyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ParentCompanyTable, ParentCompanyColumn),
	)
}
