// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mazza/ent/product"
	"mazza/ent/productmovement"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductMovementCreate is the builder for creating a ProductMovement entity.
type ProductMovementCreate struct {
	config
	mutation *ProductMovementMutation
	hooks    []Hook
}

// SetCreatedAt sets the "createdAt" field.
func (pmc *ProductMovementCreate) SetCreatedAt(t time.Time) *ProductMovementCreate {
	pmc.mutation.SetCreatedAt(t)
	return pmc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (pmc *ProductMovementCreate) SetNillableCreatedAt(t *time.Time) *ProductMovementCreate {
	if t != nil {
		pmc.SetCreatedAt(*t)
	}
	return pmc
}

// SetUpdatedAt sets the "updatedAt" field.
func (pmc *ProductMovementCreate) SetUpdatedAt(t time.Time) *ProductMovementCreate {
	pmc.mutation.SetUpdatedAt(t)
	return pmc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (pmc *ProductMovementCreate) SetNillableUpdatedAt(t *time.Time) *ProductMovementCreate {
	if t != nil {
		pmc.SetUpdatedAt(*t)
	}
	return pmc
}

// SetDeletedAt sets the "deletedAt" field.
func (pmc *ProductMovementCreate) SetDeletedAt(t time.Time) *ProductMovementCreate {
	pmc.mutation.SetDeletedAt(t)
	return pmc
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (pmc *ProductMovementCreate) SetNillableDeletedAt(t *time.Time) *ProductMovementCreate {
	if t != nil {
		pmc.SetDeletedAt(*t)
	}
	return pmc
}

// SetEntryGroup sets the "entryGroup" field.
func (pmc *ProductMovementCreate) SetEntryGroup(i int) *ProductMovementCreate {
	pmc.mutation.SetEntryGroup(i)
	return pmc
}

// SetAverageCost sets the "averageCost" field.
func (pmc *ProductMovementCreate) SetAverageCost(f float64) *ProductMovementCreate {
	pmc.mutation.SetAverageCost(f)
	return pmc
}

// SetUnitCost sets the "unitCost" field.
func (pmc *ProductMovementCreate) SetUnitCost(f float64) *ProductMovementCreate {
	pmc.mutation.SetUnitCost(f)
	return pmc
}

// SetPrice sets the "price" field.
func (pmc *ProductMovementCreate) SetPrice(f float64) *ProductMovementCreate {
	pmc.mutation.SetPrice(f)
	return pmc
}

// SetQuantity sets the "quantity" field.
func (pmc *ProductMovementCreate) SetQuantity(i int) *ProductMovementCreate {
	pmc.mutation.SetQuantity(i)
	return pmc
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (pmc *ProductMovementCreate) SetProductID(id int) *ProductMovementCreate {
	pmc.mutation.SetProductID(id)
	return pmc
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (pmc *ProductMovementCreate) SetNillableProductID(id *int) *ProductMovementCreate {
	if id != nil {
		pmc = pmc.SetProductID(*id)
	}
	return pmc
}

// SetProduct sets the "product" edge to the Product entity.
func (pmc *ProductMovementCreate) SetProduct(p *Product) *ProductMovementCreate {
	return pmc.SetProductID(p.ID)
}

// Mutation returns the ProductMovementMutation object of the builder.
func (pmc *ProductMovementCreate) Mutation() *ProductMovementMutation {
	return pmc.mutation
}

// Save creates the ProductMovement in the database.
func (pmc *ProductMovementCreate) Save(ctx context.Context) (*ProductMovement, error) {
	pmc.defaults()
	return withHooks(ctx, pmc.sqlSave, pmc.mutation, pmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pmc *ProductMovementCreate) SaveX(ctx context.Context) *ProductMovement {
	v, err := pmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmc *ProductMovementCreate) Exec(ctx context.Context) error {
	_, err := pmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmc *ProductMovementCreate) ExecX(ctx context.Context) {
	if err := pmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmc *ProductMovementCreate) defaults() {
	if _, ok := pmc.mutation.CreatedAt(); !ok {
		v := productmovement.DefaultCreatedAt()
		pmc.mutation.SetCreatedAt(v)
	}
	if _, ok := pmc.mutation.UpdatedAt(); !ok {
		v := productmovement.DefaultUpdatedAt()
		pmc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmc *ProductMovementCreate) check() error {
	if _, ok := pmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "ProductMovement.createdAt"`)}
	}
	if _, ok := pmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "ProductMovement.updatedAt"`)}
	}
	if _, ok := pmc.mutation.EntryGroup(); !ok {
		return &ValidationError{Name: "entryGroup", err: errors.New(`ent: missing required field "ProductMovement.entryGroup"`)}
	}
	if v, ok := pmc.mutation.EntryGroup(); ok {
		if err := productmovement.EntryGroupValidator(v); err != nil {
			return &ValidationError{Name: "entryGroup", err: fmt.Errorf(`ent: validator failed for field "ProductMovement.entryGroup": %w`, err)}
		}
	}
	if _, ok := pmc.mutation.AverageCost(); !ok {
		return &ValidationError{Name: "averageCost", err: errors.New(`ent: missing required field "ProductMovement.averageCost"`)}
	}
	if v, ok := pmc.mutation.AverageCost(); ok {
		if err := productmovement.AverageCostValidator(v); err != nil {
			return &ValidationError{Name: "averageCost", err: fmt.Errorf(`ent: validator failed for field "ProductMovement.averageCost": %w`, err)}
		}
	}
	if _, ok := pmc.mutation.UnitCost(); !ok {
		return &ValidationError{Name: "unitCost", err: errors.New(`ent: missing required field "ProductMovement.unitCost"`)}
	}
	if v, ok := pmc.mutation.UnitCost(); ok {
		if err := productmovement.UnitCostValidator(v); err != nil {
			return &ValidationError{Name: "unitCost", err: fmt.Errorf(`ent: validator failed for field "ProductMovement.unitCost": %w`, err)}
		}
	}
	if _, ok := pmc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "ProductMovement.price"`)}
	}
	if v, ok := pmc.mutation.Price(); ok {
		if err := productmovement.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "ProductMovement.price": %w`, err)}
		}
	}
	if _, ok := pmc.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`ent: missing required field "ProductMovement.quantity"`)}
	}
	return nil
}

func (pmc *ProductMovementCreate) sqlSave(ctx context.Context) (*ProductMovement, error) {
	if err := pmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pmc.mutation.id = &_node.ID
	pmc.mutation.done = true
	return _node, nil
}

func (pmc *ProductMovementCreate) createSpec() (*ProductMovement, *sqlgraph.CreateSpec) {
	var (
		_node = &ProductMovement{config: pmc.config}
		_spec = sqlgraph.NewCreateSpec(productmovement.Table, sqlgraph.NewFieldSpec(productmovement.FieldID, field.TypeInt))
	)
	if value, ok := pmc.mutation.CreatedAt(); ok {
		_spec.SetField(productmovement.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pmc.mutation.UpdatedAt(); ok {
		_spec.SetField(productmovement.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pmc.mutation.DeletedAt(); ok {
		_spec.SetField(productmovement.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := pmc.mutation.EntryGroup(); ok {
		_spec.SetField(productmovement.FieldEntryGroup, field.TypeInt, value)
		_node.EntryGroup = value
	}
	if value, ok := pmc.mutation.AverageCost(); ok {
		_spec.SetField(productmovement.FieldAverageCost, field.TypeFloat64, value)
		_node.AverageCost = value
	}
	if value, ok := pmc.mutation.UnitCost(); ok {
		_spec.SetField(productmovement.FieldUnitCost, field.TypeFloat64, value)
		_node.UnitCost = value
	}
	if value, ok := pmc.mutation.Price(); ok {
		_spec.SetField(productmovement.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := pmc.mutation.Quantity(); ok {
		_spec.SetField(productmovement.FieldQuantity, field.TypeInt, value)
		_node.Quantity = value
	}
	if nodes := pmc.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productmovement.ProductTable,
			Columns: []string{productmovement.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_product_movements = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProductMovementCreateBulk is the builder for creating many ProductMovement entities in bulk.
type ProductMovementCreateBulk struct {
	config
	err      error
	builders []*ProductMovementCreate
}

// Save creates the ProductMovement entities in the database.
func (pmcb *ProductMovementCreateBulk) Save(ctx context.Context) ([]*ProductMovement, error) {
	if pmcb.err != nil {
		return nil, pmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pmcb.builders))
	nodes := make([]*ProductMovement, len(pmcb.builders))
	mutators := make([]Mutator, len(pmcb.builders))
	for i := range pmcb.builders {
		func(i int, root context.Context) {
			builder := pmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductMovementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pmcb *ProductMovementCreateBulk) SaveX(ctx context.Context) []*ProductMovement {
	v, err := pmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmcb *ProductMovementCreateBulk) Exec(ctx context.Context) error {
	_, err := pmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmcb *ProductMovementCreateBulk) ExecX(ctx context.Context) {
	if err := pmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
