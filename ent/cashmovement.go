// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"mazza/ent/cashmovement"
	"mazza/ent/treasury"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CashMovement is the model entity for the CashMovement schema.
type CashMovement struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// DeletedAt holds the value of the "deletedAt" field.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// EntryGroup holds the value of the "entryGroup" field.
	EntryGroup int `json:"entryGroup,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CashMovementQuery when eager-loading is set.
	Edges                   CashMovementEdges `json:"edges"`
	treasury_cash_movements *int
	selectValues            sql.SelectValues
}

// CashMovementEdges holds the relations/edges for other nodes in the graph.
type CashMovementEdges struct {
	// Treasury holds the value of the treasury edge.
	Treasury *Treasury `json:"treasury,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// TreasuryOrErr returns the Treasury value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CashMovementEdges) TreasuryOrErr() (*Treasury, error) {
	if e.Treasury != nil {
		return e.Treasury, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: treasury.Label}
	}
	return nil, &NotLoadedError{edge: "treasury"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CashMovement) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cashmovement.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case cashmovement.FieldID, cashmovement.FieldEntryGroup:
			values[i] = new(sql.NullInt64)
		case cashmovement.FieldCreatedAt, cashmovement.FieldUpdatedAt, cashmovement.FieldDeletedAt, cashmovement.FieldDate:
			values[i] = new(sql.NullTime)
		case cashmovement.ForeignKeys[0]: // treasury_cash_movements
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CashMovement fields.
func (cm *CashMovement) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cashmovement.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cm.ID = int(value.Int64)
		case cashmovement.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				cm.CreatedAt = value.Time
			}
		case cashmovement.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				cm.UpdatedAt = value.Time
			}
		case cashmovement.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deletedAt", values[i])
			} else if value.Valid {
				cm.DeletedAt = new(time.Time)
				*cm.DeletedAt = value.Time
			}
		case cashmovement.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				cm.Amount = value.Float64
			}
		case cashmovement.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				cm.Date = value.Time
			}
		case cashmovement.FieldEntryGroup:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field entryGroup", values[i])
			} else if value.Valid {
				cm.EntryGroup = int(value.Int64)
			}
		case cashmovement.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field treasury_cash_movements", value)
			} else if value.Valid {
				cm.treasury_cash_movements = new(int)
				*cm.treasury_cash_movements = int(value.Int64)
			}
		default:
			cm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CashMovement.
// This includes values selected through modifiers, order, etc.
func (cm *CashMovement) Value(name string) (ent.Value, error) {
	return cm.selectValues.Get(name)
}

// QueryTreasury queries the "treasury" edge of the CashMovement entity.
func (cm *CashMovement) QueryTreasury() *TreasuryQuery {
	return NewCashMovementClient(cm.config).QueryTreasury(cm)
}

// Update returns a builder for updating this CashMovement.
// Note that you need to call CashMovement.Unwrap() before calling this method if this CashMovement
// was returned from a transaction, and the transaction was committed or rolled back.
func (cm *CashMovement) Update() *CashMovementUpdateOne {
	return NewCashMovementClient(cm.config).UpdateOne(cm)
}

// Unwrap unwraps the CashMovement entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cm *CashMovement) Unwrap() *CashMovement {
	_tx, ok := cm.config.driver.(*txDriver)
	if !ok {
		panic("ent: CashMovement is not a transactional entity")
	}
	cm.config.driver = _tx.drv
	return cm
}

// String implements the fmt.Stringer.
func (cm *CashMovement) String() string {
	var builder strings.Builder
	builder.WriteString("CashMovement(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cm.ID))
	builder.WriteString("createdAt=")
	builder.WriteString(cm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(cm.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := cm.DeletedAt; v != nil {
		builder.WriteString("deletedAt=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", cm.Amount))
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(cm.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("entryGroup=")
	builder.WriteString(fmt.Sprintf("%v", cm.EntryGroup))
	builder.WriteByte(')')
	return builder.String()
}

// CashMovements is a parsable slice of CashMovement.
type CashMovements []*CashMovement
