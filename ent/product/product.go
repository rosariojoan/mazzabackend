// Code generated by ent, DO NOT EDIT.

package product

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the product type in the database.
	Label = "product"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deletedat field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldIsDefault holds the string denoting the isdefault field in the database.
	FieldIsDefault = "is_default"
	// FieldMinimumStock holds the string denoting the minimumstock field in the database.
	FieldMinimumStock = "minimum_stock"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldSku holds the string denoting the sku field in the database.
	FieldSku = "sku"
	// FieldStock holds the string denoting the stock field in the database.
	FieldStock = "stock"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldUnitCost holds the string denoting the unitcost field in the database.
	FieldUnitCost = "unit_cost"
	// EdgeCompany holds the string denoting the company edge name in mutations.
	EdgeCompany = "company"
	// EdgePictures holds the string denoting the pictures edge name in mutations.
	EdgePictures = "pictures"
	// EdgeProductMovements holds the string denoting the productmovements edge name in mutations.
	EdgeProductMovements = "productMovements"
	// Table holds the table name of the product in the database.
	Table = "products"
	// CompanyTable is the table that holds the company relation/edge.
	CompanyTable = "products"
	// CompanyInverseTable is the table name for the Company entity.
	// It exists in this package in order to avoid circular dependency with the "company" package.
	CompanyInverseTable = "companies"
	// CompanyColumn is the table column denoting the company relation/edge.
	CompanyColumn = "company_products"
	// PicturesTable is the table that holds the pictures relation/edge.
	PicturesTable = "files"
	// PicturesInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	PicturesInverseTable = "files"
	// PicturesColumn is the table column denoting the pictures relation/edge.
	PicturesColumn = "product_pictures"
	// ProductMovementsTable is the table that holds the productMovements relation/edge.
	ProductMovementsTable = "product_movements"
	// ProductMovementsInverseTable is the table name for the ProductMovement entity.
	// It exists in this package in order to avoid circular dependency with the "productmovement" package.
	ProductMovementsInverseTable = "product_movements"
	// ProductMovementsColumn is the table column denoting the productMovements relation/edge.
	ProductMovementsColumn = "product_product_movements"
)

// Columns holds all SQL columns for product fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldDescription,
	FieldIsDefault,
	FieldMinimumStock,
	FieldName,
	FieldPrice,
	FieldSku,
	FieldStock,
	FieldCategory,
	FieldUnitCost,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "products"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"company_products",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultIsDefault holds the default value on creation for the "isDefault" field.
	DefaultIsDefault bool
	// DefaultMinimumStock holds the default value on creation for the "minimumStock" field.
	DefaultMinimumStock int
	// MinimumStockValidator is a validator for the "minimumStock" field. It is called by the builders before save.
	MinimumStockValidator func(int) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultPrice holds the default value on creation for the "price" field.
	DefaultPrice int
	// PriceValidator is a validator for the "price" field. It is called by the builders before save.
	PriceValidator func(int) error
	// SkuValidator is a validator for the "sku" field. It is called by the builders before save.
	SkuValidator func(string) error
	// DefaultStock holds the default value on creation for the "stock" field.
	DefaultStock float64
	// StockValidator is a validator for the "stock" field. It is called by the builders before save.
	StockValidator func(float64) error
	// UnitCostValidator is a validator for the "unitCost" field. It is called by the builders before save.
	UnitCostValidator func(float64) error
)

// Category defines the type for the "category" enum field.
type Category string

// Category values.
const (
	CategoryMerchandise Category = "merchandise"
	CategoryOther       Category = "other"
	CategoryService     Category = "service"
)

func (c Category) String() string {
	return string(c)
}

// CategoryValidator is a validator for the "category" field enum values. It is called by the builders before save.
func CategoryValidator(c Category) error {
	switch c {
	case CategoryMerchandise, CategoryOther, CategoryService:
		return nil
	default:
		return fmt.Errorf("product: invalid enum value for category field: %q", c)
	}
}

// OrderOption defines the ordering options for the Product queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deletedAt field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByIsDefault orders the results by the isDefault field.
func ByIsDefault(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDefault, opts...).ToFunc()
}

// ByMinimumStock orders the results by the minimumStock field.
func ByMinimumStock(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinimumStock, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// BySku orders the results by the sku field.
func BySku(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSku, opts...).ToFunc()
}

// ByStock orders the results by the stock field.
func ByStock(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStock, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByUnitCost orders the results by the unitCost field.
func ByUnitCost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnitCost, opts...).ToFunc()
}

// ByCompanyField orders the results by company field.
func ByCompanyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompanyStep(), sql.OrderByField(field, opts...))
	}
}

// ByPicturesCount orders the results by pictures count.
func ByPicturesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPicturesStep(), opts...)
	}
}

// ByPictures orders the results by pictures terms.
func ByPictures(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPicturesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProductMovementsCount orders the results by productMovements count.
func ByProductMovementsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProductMovementsStep(), opts...)
	}
}

// ByProductMovements orders the results by productMovements terms.
func ByProductMovements(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductMovementsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCompanyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompanyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
	)
}
func newPicturesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PicturesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PicturesTable, PicturesColumn),
	)
}
func newProductMovementsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductMovementsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProductMovementsTable, ProductMovementsColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Category) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Category) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Category(str)
	if err := CategoryValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Category", str)
	}
	return nil
}
