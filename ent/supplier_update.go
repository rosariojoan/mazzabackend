// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mazza/ent/company"
	"mazza/ent/payable"
	"mazza/ent/predicate"
	"mazza/ent/supplier"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SupplierUpdate is the builder for updating Supplier entities.
type SupplierUpdate struct {
	config
	hooks    []Hook
	mutation *SupplierMutation
}

// Where appends a list predicates to the SupplierUpdate builder.
func (su *SupplierUpdate) Where(ps ...predicate.Supplier) *SupplierUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updatedAt" field.
func (su *SupplierUpdate) SetUpdatedAt(t time.Time) *SupplierUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetDeletedAt sets the "deletedAt" field.
func (su *SupplierUpdate) SetDeletedAt(t time.Time) *SupplierUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (su *SupplierUpdate) SetNillableDeletedAt(t *time.Time) *SupplierUpdate {
	if t != nil {
		su.SetDeletedAt(*t)
	}
	return su
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (su *SupplierUpdate) ClearDeletedAt() *SupplierUpdate {
	su.mutation.ClearDeletedAt()
	return su
}

// SetAddress sets the "address" field.
func (su *SupplierUpdate) SetAddress(s string) *SupplierUpdate {
	su.mutation.SetAddress(s)
	return su
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (su *SupplierUpdate) SetNillableAddress(s *string) *SupplierUpdate {
	if s != nil {
		su.SetAddress(*s)
	}
	return su
}

// SetCity sets the "city" field.
func (su *SupplierUpdate) SetCity(s string) *SupplierUpdate {
	su.mutation.SetCity(s)
	return su
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (su *SupplierUpdate) SetNillableCity(s *string) *SupplierUpdate {
	if s != nil {
		su.SetCity(*s)
	}
	return su
}

// SetCountry sets the "country" field.
func (su *SupplierUpdate) SetCountry(s string) *SupplierUpdate {
	su.mutation.SetCountry(s)
	return su
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (su *SupplierUpdate) SetNillableCountry(s *string) *SupplierUpdate {
	if s != nil {
		su.SetCountry(*s)
	}
	return su
}

// SetDescription sets the "description" field.
func (su *SupplierUpdate) SetDescription(s string) *SupplierUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *SupplierUpdate) SetNillableDescription(s *string) *SupplierUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// SetEmail sets the "email" field.
func (su *SupplierUpdate) SetEmail(s string) *SupplierUpdate {
	su.mutation.SetEmail(s)
	return su
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (su *SupplierUpdate) SetNillableEmail(s *string) *SupplierUpdate {
	if s != nil {
		su.SetEmail(*s)
	}
	return su
}

// SetIsDefault sets the "isDefault" field.
func (su *SupplierUpdate) SetIsDefault(b bool) *SupplierUpdate {
	su.mutation.SetIsDefault(b)
	return su
}

// SetNillableIsDefault sets the "isDefault" field if the given value is not nil.
func (su *SupplierUpdate) SetNillableIsDefault(b *bool) *SupplierUpdate {
	if b != nil {
		su.SetIsDefault(*b)
	}
	return su
}

// ClearIsDefault clears the value of the "isDefault" field.
func (su *SupplierUpdate) ClearIsDefault() *SupplierUpdate {
	su.mutation.ClearIsDefault()
	return su
}

// SetName sets the "name" field.
func (su *SupplierUpdate) SetName(s string) *SupplierUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *SupplierUpdate) SetNillableName(s *string) *SupplierUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetPhone sets the "phone" field.
func (su *SupplierUpdate) SetPhone(s string) *SupplierUpdate {
	su.mutation.SetPhone(s)
	return su
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (su *SupplierUpdate) SetNillablePhone(s *string) *SupplierUpdate {
	if s != nil {
		su.SetPhone(*s)
	}
	return su
}

// SetTaxId sets the "taxId" field.
func (su *SupplierUpdate) SetTaxId(s string) *SupplierUpdate {
	su.mutation.SetTaxId(s)
	return su
}

// SetNillableTaxId sets the "taxId" field if the given value is not nil.
func (su *SupplierUpdate) SetNillableTaxId(s *string) *SupplierUpdate {
	if s != nil {
		su.SetTaxId(*s)
	}
	return su
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (su *SupplierUpdate) SetCompanyID(id int) *SupplierUpdate {
	su.mutation.SetCompanyID(id)
	return su
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (su *SupplierUpdate) SetNillableCompanyID(id *int) *SupplierUpdate {
	if id != nil {
		su = su.SetCompanyID(*id)
	}
	return su
}

// SetCompany sets the "company" edge to the Company entity.
func (su *SupplierUpdate) SetCompany(c *Company) *SupplierUpdate {
	return su.SetCompanyID(c.ID)
}

// AddPayableIDs adds the "payables" edge to the Payable entity by IDs.
func (su *SupplierUpdate) AddPayableIDs(ids ...int) *SupplierUpdate {
	su.mutation.AddPayableIDs(ids...)
	return su
}

// AddPayables adds the "payables" edges to the Payable entity.
func (su *SupplierUpdate) AddPayables(p ...*Payable) *SupplierUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddPayableIDs(ids...)
}

// Mutation returns the SupplierMutation object of the builder.
func (su *SupplierUpdate) Mutation() *SupplierMutation {
	return su.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (su *SupplierUpdate) ClearCompany() *SupplierUpdate {
	su.mutation.ClearCompany()
	return su
}

// ClearPayables clears all "payables" edges to the Payable entity.
func (su *SupplierUpdate) ClearPayables() *SupplierUpdate {
	su.mutation.ClearPayables()
	return su
}

// RemovePayableIDs removes the "payables" edge to Payable entities by IDs.
func (su *SupplierUpdate) RemovePayableIDs(ids ...int) *SupplierUpdate {
	su.mutation.RemovePayableIDs(ids...)
	return su
}

// RemovePayables removes "payables" edges to Payable entities.
func (su *SupplierUpdate) RemovePayables(p ...*Payable) *SupplierUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemovePayableIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SupplierUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SupplierUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SupplierUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SupplierUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SupplierUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := supplier.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SupplierUpdate) check() error {
	if v, ok := su.mutation.Name(); ok {
		if err := supplier.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Supplier.name": %w`, err)}
		}
	}
	if v, ok := su.mutation.TaxId(); ok {
		if err := supplier.TaxIdValidator(v); err != nil {
			return &ValidationError{Name: "taxId", err: fmt.Errorf(`ent: validator failed for field "Supplier.taxId": %w`, err)}
		}
	}
	return nil
}

func (su *SupplierUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(supplier.Table, supplier.Columns, sqlgraph.NewFieldSpec(supplier.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(supplier.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(supplier.FieldDeletedAt, field.TypeTime, value)
	}
	if su.mutation.DeletedAtCleared() {
		_spec.ClearField(supplier.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := su.mutation.Address(); ok {
		_spec.SetField(supplier.FieldAddress, field.TypeString, value)
	}
	if value, ok := su.mutation.City(); ok {
		_spec.SetField(supplier.FieldCity, field.TypeString, value)
	}
	if value, ok := su.mutation.Country(); ok {
		_spec.SetField(supplier.FieldCountry, field.TypeString, value)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(supplier.FieldDescription, field.TypeString, value)
	}
	if value, ok := su.mutation.Email(); ok {
		_spec.SetField(supplier.FieldEmail, field.TypeString, value)
	}
	if value, ok := su.mutation.IsDefault(); ok {
		_spec.SetField(supplier.FieldIsDefault, field.TypeBool, value)
	}
	if su.mutation.IsDefaultCleared() {
		_spec.ClearField(supplier.FieldIsDefault, field.TypeBool)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(supplier.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Phone(); ok {
		_spec.SetField(supplier.FieldPhone, field.TypeString, value)
	}
	if value, ok := su.mutation.TaxId(); ok {
		_spec.SetField(supplier.FieldTaxId, field.TypeString, value)
	}
	if su.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   supplier.CompanyTable,
			Columns: []string{supplier.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   supplier.CompanyTable,
			Columns: []string{supplier.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.PayablesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   supplier.PayablesTable,
			Columns: []string{supplier.PayablesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payable.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedPayablesIDs(); len(nodes) > 0 && !su.mutation.PayablesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   supplier.PayablesTable,
			Columns: []string{supplier.PayablesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payable.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PayablesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   supplier.PayablesTable,
			Columns: []string{supplier.PayablesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payable.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{supplier.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SupplierUpdateOne is the builder for updating a single Supplier entity.
type SupplierUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SupplierMutation
}

// SetUpdatedAt sets the "updatedAt" field.
func (suo *SupplierUpdateOne) SetUpdatedAt(t time.Time) *SupplierUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetDeletedAt sets the "deletedAt" field.
func (suo *SupplierUpdateOne) SetDeletedAt(t time.Time) *SupplierUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (suo *SupplierUpdateOne) SetNillableDeletedAt(t *time.Time) *SupplierUpdateOne {
	if t != nil {
		suo.SetDeletedAt(*t)
	}
	return suo
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (suo *SupplierUpdateOne) ClearDeletedAt() *SupplierUpdateOne {
	suo.mutation.ClearDeletedAt()
	return suo
}

// SetAddress sets the "address" field.
func (suo *SupplierUpdateOne) SetAddress(s string) *SupplierUpdateOne {
	suo.mutation.SetAddress(s)
	return suo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (suo *SupplierUpdateOne) SetNillableAddress(s *string) *SupplierUpdateOne {
	if s != nil {
		suo.SetAddress(*s)
	}
	return suo
}

// SetCity sets the "city" field.
func (suo *SupplierUpdateOne) SetCity(s string) *SupplierUpdateOne {
	suo.mutation.SetCity(s)
	return suo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (suo *SupplierUpdateOne) SetNillableCity(s *string) *SupplierUpdateOne {
	if s != nil {
		suo.SetCity(*s)
	}
	return suo
}

// SetCountry sets the "country" field.
func (suo *SupplierUpdateOne) SetCountry(s string) *SupplierUpdateOne {
	suo.mutation.SetCountry(s)
	return suo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (suo *SupplierUpdateOne) SetNillableCountry(s *string) *SupplierUpdateOne {
	if s != nil {
		suo.SetCountry(*s)
	}
	return suo
}

// SetDescription sets the "description" field.
func (suo *SupplierUpdateOne) SetDescription(s string) *SupplierUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *SupplierUpdateOne) SetNillableDescription(s *string) *SupplierUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// SetEmail sets the "email" field.
func (suo *SupplierUpdateOne) SetEmail(s string) *SupplierUpdateOne {
	suo.mutation.SetEmail(s)
	return suo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (suo *SupplierUpdateOne) SetNillableEmail(s *string) *SupplierUpdateOne {
	if s != nil {
		suo.SetEmail(*s)
	}
	return suo
}

// SetIsDefault sets the "isDefault" field.
func (suo *SupplierUpdateOne) SetIsDefault(b bool) *SupplierUpdateOne {
	suo.mutation.SetIsDefault(b)
	return suo
}

// SetNillableIsDefault sets the "isDefault" field if the given value is not nil.
func (suo *SupplierUpdateOne) SetNillableIsDefault(b *bool) *SupplierUpdateOne {
	if b != nil {
		suo.SetIsDefault(*b)
	}
	return suo
}

// ClearIsDefault clears the value of the "isDefault" field.
func (suo *SupplierUpdateOne) ClearIsDefault() *SupplierUpdateOne {
	suo.mutation.ClearIsDefault()
	return suo
}

// SetName sets the "name" field.
func (suo *SupplierUpdateOne) SetName(s string) *SupplierUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *SupplierUpdateOne) SetNillableName(s *string) *SupplierUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetPhone sets the "phone" field.
func (suo *SupplierUpdateOne) SetPhone(s string) *SupplierUpdateOne {
	suo.mutation.SetPhone(s)
	return suo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (suo *SupplierUpdateOne) SetNillablePhone(s *string) *SupplierUpdateOne {
	if s != nil {
		suo.SetPhone(*s)
	}
	return suo
}

// SetTaxId sets the "taxId" field.
func (suo *SupplierUpdateOne) SetTaxId(s string) *SupplierUpdateOne {
	suo.mutation.SetTaxId(s)
	return suo
}

// SetNillableTaxId sets the "taxId" field if the given value is not nil.
func (suo *SupplierUpdateOne) SetNillableTaxId(s *string) *SupplierUpdateOne {
	if s != nil {
		suo.SetTaxId(*s)
	}
	return suo
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (suo *SupplierUpdateOne) SetCompanyID(id int) *SupplierUpdateOne {
	suo.mutation.SetCompanyID(id)
	return suo
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (suo *SupplierUpdateOne) SetNillableCompanyID(id *int) *SupplierUpdateOne {
	if id != nil {
		suo = suo.SetCompanyID(*id)
	}
	return suo
}

// SetCompany sets the "company" edge to the Company entity.
func (suo *SupplierUpdateOne) SetCompany(c *Company) *SupplierUpdateOne {
	return suo.SetCompanyID(c.ID)
}

// AddPayableIDs adds the "payables" edge to the Payable entity by IDs.
func (suo *SupplierUpdateOne) AddPayableIDs(ids ...int) *SupplierUpdateOne {
	suo.mutation.AddPayableIDs(ids...)
	return suo
}

// AddPayables adds the "payables" edges to the Payable entity.
func (suo *SupplierUpdateOne) AddPayables(p ...*Payable) *SupplierUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddPayableIDs(ids...)
}

// Mutation returns the SupplierMutation object of the builder.
func (suo *SupplierUpdateOne) Mutation() *SupplierMutation {
	return suo.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (suo *SupplierUpdateOne) ClearCompany() *SupplierUpdateOne {
	suo.mutation.ClearCompany()
	return suo
}

// ClearPayables clears all "payables" edges to the Payable entity.
func (suo *SupplierUpdateOne) ClearPayables() *SupplierUpdateOne {
	suo.mutation.ClearPayables()
	return suo
}

// RemovePayableIDs removes the "payables" edge to Payable entities by IDs.
func (suo *SupplierUpdateOne) RemovePayableIDs(ids ...int) *SupplierUpdateOne {
	suo.mutation.RemovePayableIDs(ids...)
	return suo
}

// RemovePayables removes "payables" edges to Payable entities.
func (suo *SupplierUpdateOne) RemovePayables(p ...*Payable) *SupplierUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemovePayableIDs(ids...)
}

// Where appends a list predicates to the SupplierUpdate builder.
func (suo *SupplierUpdateOne) Where(ps ...predicate.Supplier) *SupplierUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SupplierUpdateOne) Select(field string, fields ...string) *SupplierUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Supplier entity.
func (suo *SupplierUpdateOne) Save(ctx context.Context) (*Supplier, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SupplierUpdateOne) SaveX(ctx context.Context) *Supplier {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SupplierUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SupplierUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SupplierUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := supplier.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SupplierUpdateOne) check() error {
	if v, ok := suo.mutation.Name(); ok {
		if err := supplier.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Supplier.name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.TaxId(); ok {
		if err := supplier.TaxIdValidator(v); err != nil {
			return &ValidationError{Name: "taxId", err: fmt.Errorf(`ent: validator failed for field "Supplier.taxId": %w`, err)}
		}
	}
	return nil
}

func (suo *SupplierUpdateOne) sqlSave(ctx context.Context) (_node *Supplier, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(supplier.Table, supplier.Columns, sqlgraph.NewFieldSpec(supplier.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Supplier.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, supplier.FieldID)
		for _, f := range fields {
			if !supplier.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != supplier.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(supplier.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(supplier.FieldDeletedAt, field.TypeTime, value)
	}
	if suo.mutation.DeletedAtCleared() {
		_spec.ClearField(supplier.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.Address(); ok {
		_spec.SetField(supplier.FieldAddress, field.TypeString, value)
	}
	if value, ok := suo.mutation.City(); ok {
		_spec.SetField(supplier.FieldCity, field.TypeString, value)
	}
	if value, ok := suo.mutation.Country(); ok {
		_spec.SetField(supplier.FieldCountry, field.TypeString, value)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(supplier.FieldDescription, field.TypeString, value)
	}
	if value, ok := suo.mutation.Email(); ok {
		_spec.SetField(supplier.FieldEmail, field.TypeString, value)
	}
	if value, ok := suo.mutation.IsDefault(); ok {
		_spec.SetField(supplier.FieldIsDefault, field.TypeBool, value)
	}
	if suo.mutation.IsDefaultCleared() {
		_spec.ClearField(supplier.FieldIsDefault, field.TypeBool)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(supplier.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Phone(); ok {
		_spec.SetField(supplier.FieldPhone, field.TypeString, value)
	}
	if value, ok := suo.mutation.TaxId(); ok {
		_spec.SetField(supplier.FieldTaxId, field.TypeString, value)
	}
	if suo.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   supplier.CompanyTable,
			Columns: []string{supplier.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   supplier.CompanyTable,
			Columns: []string{supplier.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.PayablesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   supplier.PayablesTable,
			Columns: []string{supplier.PayablesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payable.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedPayablesIDs(); len(nodes) > 0 && !suo.mutation.PayablesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   supplier.PayablesTable,
			Columns: []string{supplier.PayablesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payable.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PayablesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   supplier.PayablesTable,
			Columns: []string{supplier.PayablesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payable.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Supplier{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{supplier.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
