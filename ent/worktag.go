// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"mazza/ent/company"
	"mazza/ent/worktag"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Worktag is the model entity for the Worktag schema.
type Worktag struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// DeletedAt holds the value of the "deletedAt" field.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Color holds the value of the "color" field.
	Color string `json:"color,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorktagQuery when eager-loading is set.
	Edges             WorktagEdges `json:"edges"`
	company_work_tags *int
	selectValues      sql.SelectValues
}

// WorktagEdges holds the relations/edges for other nodes in the graph.
type WorktagEdges struct {
	// Company holds the value of the company edge.
	Company *Company `json:"company,omitempty"`
	// WorkTasks holds the value of the workTasks edge.
	WorkTasks []*Worktask `json:"workTasks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedWorkTasks map[string][]*Worktask
}

// CompanyOrErr returns the Company value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorktagEdges) CompanyOrErr() (*Company, error) {
	if e.Company != nil {
		return e.Company, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: company.Label}
	}
	return nil, &NotLoadedError{edge: "company"}
}

// WorkTasksOrErr returns the WorkTasks value or an error if the edge
// was not loaded in eager-loading.
func (e WorktagEdges) WorkTasksOrErr() ([]*Worktask, error) {
	if e.loadedTypes[1] {
		return e.WorkTasks, nil
	}
	return nil, &NotLoadedError{edge: "workTasks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Worktag) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case worktag.FieldID:
			values[i] = new(sql.NullInt64)
		case worktag.FieldName, worktag.FieldColor:
			values[i] = new(sql.NullString)
		case worktag.FieldCreatedAt, worktag.FieldUpdatedAt, worktag.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case worktag.ForeignKeys[0]: // company_work_tags
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Worktag fields.
func (w *Worktag) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case worktag.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			w.ID = int(value.Int64)
		case worktag.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				w.CreatedAt = value.Time
			}
		case worktag.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				w.UpdatedAt = value.Time
			}
		case worktag.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deletedAt", values[i])
			} else if value.Valid {
				w.DeletedAt = new(time.Time)
				*w.DeletedAt = value.Time
			}
		case worktag.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				w.Name = value.String
			}
		case worktag.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				w.Color = value.String
			}
		case worktag.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field company_work_tags", value)
			} else if value.Valid {
				w.company_work_tags = new(int)
				*w.company_work_tags = int(value.Int64)
			}
		default:
			w.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Worktag.
// This includes values selected through modifiers, order, etc.
func (w *Worktag) Value(name string) (ent.Value, error) {
	return w.selectValues.Get(name)
}

// QueryCompany queries the "company" edge of the Worktag entity.
func (w *Worktag) QueryCompany() *CompanyQuery {
	return NewWorktagClient(w.config).QueryCompany(w)
}

// QueryWorkTasks queries the "workTasks" edge of the Worktag entity.
func (w *Worktag) QueryWorkTasks() *WorktaskQuery {
	return NewWorktagClient(w.config).QueryWorkTasks(w)
}

// Update returns a builder for updating this Worktag.
// Note that you need to call Worktag.Unwrap() before calling this method if this Worktag
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Worktag) Update() *WorktagUpdateOne {
	return NewWorktagClient(w.config).UpdateOne(w)
}

// Unwrap unwraps the Worktag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Worktag) Unwrap() *Worktag {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Worktag is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Worktag) String() string {
	var builder strings.Builder
	builder.WriteString("Worktag(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("createdAt=")
	builder.WriteString(w.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(w.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := w.DeletedAt; v != nil {
		builder.WriteString("deletedAt=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(w.Name)
	builder.WriteString(", ")
	builder.WriteString("color=")
	builder.WriteString(w.Color)
	builder.WriteByte(')')
	return builder.String()
}

// NamedWorkTasks returns the WorkTasks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (w *Worktag) NamedWorkTasks(name string) ([]*Worktask, error) {
	if w.Edges.namedWorkTasks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := w.Edges.namedWorkTasks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (w *Worktag) appendNamedWorkTasks(name string, edges ...*Worktask) {
	if w.Edges.namedWorkTasks == nil {
		w.Edges.namedWorkTasks = make(map[string][]*Worktask)
	}
	if len(edges) == 0 {
		w.Edges.namedWorkTasks[name] = []*Worktask{}
	} else {
		w.Edges.namedWorkTasks[name] = append(w.Edges.namedWorkTasks[name], edges...)
	}
}

// Worktags is a parsable slice of Worktag.
type Worktags []*Worktag
