// Code generated by ent, DO NOT EDIT.

package membersignuptoken

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the membersignuptoken type in the database.
	Label = "member_signup_token"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deletedat field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// FieldAvatar holds the string denoting the avatar field in the database.
	FieldAvatar = "avatar"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// FieldNote holds the string denoting the note field in the database.
	FieldNote = "note"
	// FieldNumberAccessed holds the string denoting the numberaccessed field in the database.
	FieldNumberAccessed = "number_accessed"
	// FieldExpiresAt holds the string denoting the expiresat field in the database.
	FieldExpiresAt = "expires_at"
	// FieldAlreadyUsed holds the string denoting the alreadyused field in the database.
	FieldAlreadyUsed = "already_used"
	// EdgeCompany holds the string denoting the company edge name in mutations.
	EdgeCompany = "company"
	// EdgeCreatedBy holds the string denoting the createdby edge name in mutations.
	EdgeCreatedBy = "createdBy"
	// Table holds the table name of the membersignuptoken in the database.
	Table = "member_signup_tokens"
	// CompanyTable is the table that holds the company relation/edge.
	CompanyTable = "member_signup_tokens"
	// CompanyInverseTable is the table name for the Company entity.
	// It exists in this package in order to avoid circular dependency with the "company" package.
	CompanyInverseTable = "companies"
	// CompanyColumn is the table column denoting the company relation/edge.
	CompanyColumn = "company_member_signup_tokens"
	// CreatedByTable is the table that holds the createdBy relation/edge.
	CreatedByTable = "member_signup_tokens"
	// CreatedByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreatedByInverseTable = "users"
	// CreatedByColumn is the table column denoting the createdBy relation/edge.
	CreatedByColumn = "user_created_member_signup_tokens"
)

// Columns holds all SQL columns for membersignuptoken fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldName,
	FieldEmail,
	FieldToken,
	FieldAvatar,
	FieldRole,
	FieldNote,
	FieldNumberAccessed,
	FieldExpiresAt,
	FieldAlreadyUsed,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "member_signup_tokens"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"company_member_signup_tokens",
	"user_created_member_signup_tokens",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// TokenValidator is a validator for the "token" field. It is called by the builders before save.
	TokenValidator func(string) error
	// DefaultNumberAccessed holds the default value on creation for the "numberAccessed" field.
	DefaultNumberAccessed int
	// NumberAccessedValidator is a validator for the "numberAccessed" field. It is called by the builders before save.
	NumberAccessedValidator func(int) error
	// DefaultAlreadyUsed holds the default value on creation for the "alreadyUsed" field.
	DefaultAlreadyUsed bool
)

// Role defines the type for the "role" enum field.
type Role string

// Role values.
const (
	RoleSUPERUSER  Role = "SUPERUSER"
	RoleADMIN      Role = "ADMIN"
	RoleACCOUNTANT Role = "ACCOUNTANT"
	RoleAUDITOR    Role = "AUDITOR"
	RoleSTAFF      Role = "STAFF"
)

func (r Role) String() string {
	return string(r)
}

// RoleValidator is a validator for the "role" field enum values. It is called by the builders before save.
func RoleValidator(r Role) error {
	switch r {
	case RoleSUPERUSER, RoleADMIN, RoleACCOUNTANT, RoleAUDITOR, RoleSTAFF:
		return nil
	default:
		return fmt.Errorf("membersignuptoken: invalid enum value for role field: %q", r)
	}
}

// OrderOption defines the ordering options for the MemberSignupToken queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deletedAt field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByToken orders the results by the token field.
func ByToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToken, opts...).ToFunc()
}

// ByAvatar orders the results by the avatar field.
func ByAvatar(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatar, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByNote orders the results by the note field.
func ByNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNote, opts...).ToFunc()
}

// ByNumberAccessed orders the results by the numberAccessed field.
func ByNumberAccessed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumberAccessed, opts...).ToFunc()
}

// ByExpiresAt orders the results by the expiresAt field.
func ByExpiresAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiresAt, opts...).ToFunc()
}

// ByAlreadyUsed orders the results by the alreadyUsed field.
func ByAlreadyUsed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlreadyUsed, opts...).ToFunc()
}

// ByCompanyField orders the results by company field.
func ByCompanyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompanyStep(), sql.OrderByField(field, opts...))
	}
}

// ByCreatedByField orders the results by createdBy field.
func ByCreatedByField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedByStep(), sql.OrderByField(field, opts...))
	}
}
func newCompanyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompanyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
	)
}
func newCreatedByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatedByInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CreatedByTable, CreatedByColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Role) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Role) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Role(str)
	if err := RoleValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}
