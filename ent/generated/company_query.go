// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"mazza/ent/generated/accountingentry"
	"mazza/ent/generated/company"
	"mazza/ent/generated/companydocument"
	"mazza/ent/generated/customer"
	"mazza/ent/generated/employee"
	"mazza/ent/generated/file"
	"mazza/ent/generated/inventory"
	"mazza/ent/generated/inventorymovement"
	"mazza/ent/generated/invoice"
	"mazza/ent/generated/loan"
	"mazza/ent/generated/membersignuptoken"
	"mazza/ent/generated/payable"
	"mazza/ent/generated/predicate"
	"mazza/ent/generated/product"
	"mazza/ent/generated/project"
	"mazza/ent/generated/receivable"
	"mazza/ent/generated/supplier"
	"mazza/ent/generated/token"
	"mazza/ent/generated/treasury"
	"mazza/ent/generated/user"
	"mazza/ent/generated/userrole"
	"mazza/ent/generated/workshift"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CompanyQuery is the builder for querying Company entities.
type CompanyQuery struct {
	config
	ctx                         *QueryContext
	order                       []company.OrderOption
	inters                      []Interceptor
	predicates                  []predicate.Company
	withAvailableRoles          *UserRoleQuery
	withAccountingEntries       *AccountingEntryQuery
	withCustomers               *CustomerQuery
	withDocuments               *CompanyDocumentQuery
	withEmployees               *EmployeeQuery
	withFiles                   *FileQuery
	withInventory               *InventoryQuery
	withInventoryMovements      *InventoryMovementQuery
	withInvoices                *InvoiceQuery
	withLoans                   *LoanQuery
	withMemberSignupTokens      *MemberSignupTokenQuery
	withProducts                *ProductQuery
	withProjects                *ProjectQuery
	withPayables                *PayableQuery
	withReceivables             *ReceivableQuery
	withSuppliers               *SupplierQuery
	withTokens                  *TokenQuery
	withTreasuries              *TreasuryQuery
	withWorkShifts              *WorkshiftQuery
	withUsers                   *UserQuery
	withDaughterCompanies       *CompanyQuery
	withParentCompany           *CompanyQuery
	withFKs                     bool
	loadTotal                   []func(context.Context, []*Company) error
	modifiers                   []func(*sql.Selector)
	withNamedAvailableRoles     map[string]*UserRoleQuery
	withNamedAccountingEntries  map[string]*AccountingEntryQuery
	withNamedCustomers          map[string]*CustomerQuery
	withNamedDocuments          map[string]*CompanyDocumentQuery
	withNamedEmployees          map[string]*EmployeeQuery
	withNamedFiles              map[string]*FileQuery
	withNamedInventory          map[string]*InventoryQuery
	withNamedInventoryMovements map[string]*InventoryMovementQuery
	withNamedInvoices           map[string]*InvoiceQuery
	withNamedLoans              map[string]*LoanQuery
	withNamedMemberSignupTokens map[string]*MemberSignupTokenQuery
	withNamedProducts           map[string]*ProductQuery
	withNamedProjects           map[string]*ProjectQuery
	withNamedPayables           map[string]*PayableQuery
	withNamedReceivables        map[string]*ReceivableQuery
	withNamedSuppliers          map[string]*SupplierQuery
	withNamedTokens             map[string]*TokenQuery
	withNamedTreasuries         map[string]*TreasuryQuery
	withNamedWorkShifts         map[string]*WorkshiftQuery
	withNamedUsers              map[string]*UserQuery
	withNamedDaughterCompanies  map[string]*CompanyQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CompanyQuery builder.
func (cq *CompanyQuery) Where(ps ...predicate.Company) *CompanyQuery {
	cq.predicates = append(cq.predicates, ps...)
	return cq
}

// Limit the number of records to be returned by this query.
func (cq *CompanyQuery) Limit(limit int) *CompanyQuery {
	cq.ctx.Limit = &limit
	return cq
}

// Offset to start from.
func (cq *CompanyQuery) Offset(offset int) *CompanyQuery {
	cq.ctx.Offset = &offset
	return cq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cq *CompanyQuery) Unique(unique bool) *CompanyQuery {
	cq.ctx.Unique = &unique
	return cq
}

// Order specifies how the records should be ordered.
func (cq *CompanyQuery) Order(o ...company.OrderOption) *CompanyQuery {
	cq.order = append(cq.order, o...)
	return cq
}

// QueryAvailableRoles chains the current query on the "availableRoles" edge.
func (cq *CompanyQuery) QueryAvailableRoles() *UserRoleQuery {
	query := (&UserRoleClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(company.Table, company.FieldID, selector),
			sqlgraph.To(userrole.Table, userrole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, company.AvailableRolesTable, company.AvailableRolesColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAccountingEntries chains the current query on the "accountingEntries" edge.
func (cq *CompanyQuery) QueryAccountingEntries() *AccountingEntryQuery {
	query := (&AccountingEntryClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(company.Table, company.FieldID, selector),
			sqlgraph.To(accountingentry.Table, accountingentry.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, company.AccountingEntriesTable, company.AccountingEntriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCustomers chains the current query on the "customers" edge.
func (cq *CompanyQuery) QueryCustomers() *CustomerQuery {
	query := (&CustomerClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(company.Table, company.FieldID, selector),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, company.CustomersTable, company.CustomersColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDocuments chains the current query on the "documents" edge.
func (cq *CompanyQuery) QueryDocuments() *CompanyDocumentQuery {
	query := (&CompanyDocumentClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(company.Table, company.FieldID, selector),
			sqlgraph.To(companydocument.Table, companydocument.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, company.DocumentsTable, company.DocumentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEmployees chains the current query on the "employees" edge.
func (cq *CompanyQuery) QueryEmployees() *EmployeeQuery {
	query := (&EmployeeClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(company.Table, company.FieldID, selector),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, company.EmployeesTable, company.EmployeesColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFiles chains the current query on the "files" edge.
func (cq *CompanyQuery) QueryFiles() *FileQuery {
	query := (&FileClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(company.Table, company.FieldID, selector),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, company.FilesTable, company.FilesColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInventory chains the current query on the "inventory" edge.
func (cq *CompanyQuery) QueryInventory() *InventoryQuery {
	query := (&InventoryClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(company.Table, company.FieldID, selector),
			sqlgraph.To(inventory.Table, inventory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, company.InventoryTable, company.InventoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInventoryMovements chains the current query on the "inventoryMovements" edge.
func (cq *CompanyQuery) QueryInventoryMovements() *InventoryMovementQuery {
	query := (&InventoryMovementClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(company.Table, company.FieldID, selector),
			sqlgraph.To(inventorymovement.Table, inventorymovement.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, company.InventoryMovementsTable, company.InventoryMovementsColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInvoices chains the current query on the "invoices" edge.
func (cq *CompanyQuery) QueryInvoices() *InvoiceQuery {
	query := (&InvoiceClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(company.Table, company.FieldID, selector),
			sqlgraph.To(invoice.Table, invoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, company.InvoicesTable, company.InvoicesColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLoans chains the current query on the "loans" edge.
func (cq *CompanyQuery) QueryLoans() *LoanQuery {
	query := (&LoanClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(company.Table, company.FieldID, selector),
			sqlgraph.To(loan.Table, loan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, company.LoansTable, company.LoansColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMemberSignupTokens chains the current query on the "memberSignupTokens" edge.
func (cq *CompanyQuery) QueryMemberSignupTokens() *MemberSignupTokenQuery {
	query := (&MemberSignupTokenClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(company.Table, company.FieldID, selector),
			sqlgraph.To(membersignuptoken.Table, membersignuptoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, company.MemberSignupTokensTable, company.MemberSignupTokensColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProducts chains the current query on the "products" edge.
func (cq *CompanyQuery) QueryProducts() *ProductQuery {
	query := (&ProductClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(company.Table, company.FieldID, selector),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, company.ProductsTable, company.ProductsColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProjects chains the current query on the "projects" edge.
func (cq *CompanyQuery) QueryProjects() *ProjectQuery {
	query := (&ProjectClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(company.Table, company.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, company.ProjectsTable, company.ProjectsColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPayables chains the current query on the "payables" edge.
func (cq *CompanyQuery) QueryPayables() *PayableQuery {
	query := (&PayableClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(company.Table, company.FieldID, selector),
			sqlgraph.To(payable.Table, payable.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, company.PayablesTable, company.PayablesColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReceivables chains the current query on the "receivables" edge.
func (cq *CompanyQuery) QueryReceivables() *ReceivableQuery {
	query := (&ReceivableClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(company.Table, company.FieldID, selector),
			sqlgraph.To(receivable.Table, receivable.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, company.ReceivablesTable, company.ReceivablesColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySuppliers chains the current query on the "suppliers" edge.
func (cq *CompanyQuery) QuerySuppliers() *SupplierQuery {
	query := (&SupplierClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(company.Table, company.FieldID, selector),
			sqlgraph.To(supplier.Table, supplier.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, company.SuppliersTable, company.SuppliersColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTokens chains the current query on the "tokens" edge.
func (cq *CompanyQuery) QueryTokens() *TokenQuery {
	query := (&TokenClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(company.Table, company.FieldID, selector),
			sqlgraph.To(token.Table, token.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, company.TokensTable, company.TokensColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTreasuries chains the current query on the "treasuries" edge.
func (cq *CompanyQuery) QueryTreasuries() *TreasuryQuery {
	query := (&TreasuryClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(company.Table, company.FieldID, selector),
			sqlgraph.To(treasury.Table, treasury.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, company.TreasuriesTable, company.TreasuriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkShifts chains the current query on the "workShifts" edge.
func (cq *CompanyQuery) QueryWorkShifts() *WorkshiftQuery {
	query := (&WorkshiftClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(company.Table, company.FieldID, selector),
			sqlgraph.To(workshift.Table, workshift.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, company.WorkShiftsTable, company.WorkShiftsColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUsers chains the current query on the "users" edge.
func (cq *CompanyQuery) QueryUsers() *UserQuery {
	query := (&UserClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(company.Table, company.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, company.UsersTable, company.UsersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDaughterCompanies chains the current query on the "daughterCompanies" edge.
func (cq *CompanyQuery) QueryDaughterCompanies() *CompanyQuery {
	query := (&CompanyClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(company.Table, company.FieldID, selector),
			sqlgraph.To(company.Table, company.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, company.DaughterCompaniesTable, company.DaughterCompaniesColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParentCompany chains the current query on the "parentCompany" edge.
func (cq *CompanyQuery) QueryParentCompany() *CompanyQuery {
	query := (&CompanyClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(company.Table, company.FieldID, selector),
			sqlgraph.To(company.Table, company.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, company.ParentCompanyTable, company.ParentCompanyColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Company entity from the query.
// Returns a *NotFoundError when no Company was found.
func (cq *CompanyQuery) First(ctx context.Context) (*Company, error) {
	nodes, err := cq.Limit(1).All(setContextOp(ctx, cq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{company.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cq *CompanyQuery) FirstX(ctx context.Context) *Company {
	node, err := cq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Company ID from the query.
// Returns a *NotFoundError when no Company ID was found.
func (cq *CompanyQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cq.Limit(1).IDs(setContextOp(ctx, cq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{company.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cq *CompanyQuery) FirstIDX(ctx context.Context) int {
	id, err := cq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Company entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Company entity is found.
// Returns a *NotFoundError when no Company entities are found.
func (cq *CompanyQuery) Only(ctx context.Context) (*Company, error) {
	nodes, err := cq.Limit(2).All(setContextOp(ctx, cq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{company.Label}
	default:
		return nil, &NotSingularError{company.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cq *CompanyQuery) OnlyX(ctx context.Context) *Company {
	node, err := cq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Company ID in the query.
// Returns a *NotSingularError when more than one Company ID is found.
// Returns a *NotFoundError when no entities are found.
func (cq *CompanyQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cq.Limit(2).IDs(setContextOp(ctx, cq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{company.Label}
	default:
		err = &NotSingularError{company.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cq *CompanyQuery) OnlyIDX(ctx context.Context) int {
	id, err := cq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Companies.
func (cq *CompanyQuery) All(ctx context.Context) ([]*Company, error) {
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryAll)
	if err := cq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Company, *CompanyQuery]()
	return withInterceptors[[]*Company](ctx, cq, qr, cq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cq *CompanyQuery) AllX(ctx context.Context) []*Company {
	nodes, err := cq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Company IDs.
func (cq *CompanyQuery) IDs(ctx context.Context) (ids []int, err error) {
	if cq.ctx.Unique == nil && cq.path != nil {
		cq.Unique(true)
	}
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryIDs)
	if err = cq.Select(company.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cq *CompanyQuery) IDsX(ctx context.Context) []int {
	ids, err := cq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cq *CompanyQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryCount)
	if err := cq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cq, querierCount[*CompanyQuery](), cq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cq *CompanyQuery) CountX(ctx context.Context) int {
	count, err := cq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cq *CompanyQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryExist)
	switch _, err := cq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cq *CompanyQuery) ExistX(ctx context.Context) bool {
	exist, err := cq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CompanyQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cq *CompanyQuery) Clone() *CompanyQuery {
	if cq == nil {
		return nil
	}
	return &CompanyQuery{
		config:                 cq.config,
		ctx:                    cq.ctx.Clone(),
		order:                  append([]company.OrderOption{}, cq.order...),
		inters:                 append([]Interceptor{}, cq.inters...),
		predicates:             append([]predicate.Company{}, cq.predicates...),
		withAvailableRoles:     cq.withAvailableRoles.Clone(),
		withAccountingEntries:  cq.withAccountingEntries.Clone(),
		withCustomers:          cq.withCustomers.Clone(),
		withDocuments:          cq.withDocuments.Clone(),
		withEmployees:          cq.withEmployees.Clone(),
		withFiles:              cq.withFiles.Clone(),
		withInventory:          cq.withInventory.Clone(),
		withInventoryMovements: cq.withInventoryMovements.Clone(),
		withInvoices:           cq.withInvoices.Clone(),
		withLoans:              cq.withLoans.Clone(),
		withMemberSignupTokens: cq.withMemberSignupTokens.Clone(),
		withProducts:           cq.withProducts.Clone(),
		withProjects:           cq.withProjects.Clone(),
		withPayables:           cq.withPayables.Clone(),
		withReceivables:        cq.withReceivables.Clone(),
		withSuppliers:          cq.withSuppliers.Clone(),
		withTokens:             cq.withTokens.Clone(),
		withTreasuries:         cq.withTreasuries.Clone(),
		withWorkShifts:         cq.withWorkShifts.Clone(),
		withUsers:              cq.withUsers.Clone(),
		withDaughterCompanies:  cq.withDaughterCompanies.Clone(),
		withParentCompany:      cq.withParentCompany.Clone(),
		// clone intermediate query.
		sql:       cq.sql.Clone(),
		path:      cq.path,
		modifiers: append([]func(*sql.Selector){}, cq.modifiers...),
	}
}

// WithAvailableRoles tells the query-builder to eager-load the nodes that are connected to
// the "availableRoles" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithAvailableRoles(opts ...func(*UserRoleQuery)) *CompanyQuery {
	query := (&UserRoleClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withAvailableRoles = query
	return cq
}

// WithAccountingEntries tells the query-builder to eager-load the nodes that are connected to
// the "accountingEntries" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithAccountingEntries(opts ...func(*AccountingEntryQuery)) *CompanyQuery {
	query := (&AccountingEntryClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withAccountingEntries = query
	return cq
}

// WithCustomers tells the query-builder to eager-load the nodes that are connected to
// the "customers" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithCustomers(opts ...func(*CustomerQuery)) *CompanyQuery {
	query := (&CustomerClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withCustomers = query
	return cq
}

// WithDocuments tells the query-builder to eager-load the nodes that are connected to
// the "documents" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithDocuments(opts ...func(*CompanyDocumentQuery)) *CompanyQuery {
	query := (&CompanyDocumentClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withDocuments = query
	return cq
}

// WithEmployees tells the query-builder to eager-load the nodes that are connected to
// the "employees" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithEmployees(opts ...func(*EmployeeQuery)) *CompanyQuery {
	query := (&EmployeeClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withEmployees = query
	return cq
}

// WithFiles tells the query-builder to eager-load the nodes that are connected to
// the "files" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithFiles(opts ...func(*FileQuery)) *CompanyQuery {
	query := (&FileClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withFiles = query
	return cq
}

// WithInventory tells the query-builder to eager-load the nodes that are connected to
// the "inventory" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithInventory(opts ...func(*InventoryQuery)) *CompanyQuery {
	query := (&InventoryClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withInventory = query
	return cq
}

// WithInventoryMovements tells the query-builder to eager-load the nodes that are connected to
// the "inventoryMovements" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithInventoryMovements(opts ...func(*InventoryMovementQuery)) *CompanyQuery {
	query := (&InventoryMovementClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withInventoryMovements = query
	return cq
}

// WithInvoices tells the query-builder to eager-load the nodes that are connected to
// the "invoices" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithInvoices(opts ...func(*InvoiceQuery)) *CompanyQuery {
	query := (&InvoiceClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withInvoices = query
	return cq
}

// WithLoans tells the query-builder to eager-load the nodes that are connected to
// the "loans" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithLoans(opts ...func(*LoanQuery)) *CompanyQuery {
	query := (&LoanClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withLoans = query
	return cq
}

// WithMemberSignupTokens tells the query-builder to eager-load the nodes that are connected to
// the "memberSignupTokens" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithMemberSignupTokens(opts ...func(*MemberSignupTokenQuery)) *CompanyQuery {
	query := (&MemberSignupTokenClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withMemberSignupTokens = query
	return cq
}

// WithProducts tells the query-builder to eager-load the nodes that are connected to
// the "products" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithProducts(opts ...func(*ProductQuery)) *CompanyQuery {
	query := (&ProductClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withProducts = query
	return cq
}

// WithProjects tells the query-builder to eager-load the nodes that are connected to
// the "projects" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithProjects(opts ...func(*ProjectQuery)) *CompanyQuery {
	query := (&ProjectClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withProjects = query
	return cq
}

// WithPayables tells the query-builder to eager-load the nodes that are connected to
// the "payables" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithPayables(opts ...func(*PayableQuery)) *CompanyQuery {
	query := (&PayableClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withPayables = query
	return cq
}

// WithReceivables tells the query-builder to eager-load the nodes that are connected to
// the "receivables" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithReceivables(opts ...func(*ReceivableQuery)) *CompanyQuery {
	query := (&ReceivableClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withReceivables = query
	return cq
}

// WithSuppliers tells the query-builder to eager-load the nodes that are connected to
// the "suppliers" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithSuppliers(opts ...func(*SupplierQuery)) *CompanyQuery {
	query := (&SupplierClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withSuppliers = query
	return cq
}

// WithTokens tells the query-builder to eager-load the nodes that are connected to
// the "tokens" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithTokens(opts ...func(*TokenQuery)) *CompanyQuery {
	query := (&TokenClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withTokens = query
	return cq
}

// WithTreasuries tells the query-builder to eager-load the nodes that are connected to
// the "treasuries" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithTreasuries(opts ...func(*TreasuryQuery)) *CompanyQuery {
	query := (&TreasuryClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withTreasuries = query
	return cq
}

// WithWorkShifts tells the query-builder to eager-load the nodes that are connected to
// the "workShifts" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithWorkShifts(opts ...func(*WorkshiftQuery)) *CompanyQuery {
	query := (&WorkshiftClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withWorkShifts = query
	return cq
}

// WithUsers tells the query-builder to eager-load the nodes that are connected to
// the "users" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithUsers(opts ...func(*UserQuery)) *CompanyQuery {
	query := (&UserClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withUsers = query
	return cq
}

// WithDaughterCompanies tells the query-builder to eager-load the nodes that are connected to
// the "daughterCompanies" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithDaughterCompanies(opts ...func(*CompanyQuery)) *CompanyQuery {
	query := (&CompanyClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withDaughterCompanies = query
	return cq
}

// WithParentCompany tells the query-builder to eager-load the nodes that are connected to
// the "parentCompany" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithParentCompany(opts ...func(*CompanyQuery)) *CompanyQuery {
	query := (&CompanyClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withParentCompany = query
	return cq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Company.Query().
//		GroupBy(company.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (cq *CompanyQuery) GroupBy(field string, fields ...string) *CompanyGroupBy {
	cq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CompanyGroupBy{build: cq}
	grbuild.flds = &cq.ctx.Fields
	grbuild.label = company.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt,omitempty"`
//	}
//
//	client.Company.Query().
//		Select(company.FieldCreatedAt).
//		Scan(ctx, &v)
func (cq *CompanyQuery) Select(fields ...string) *CompanySelect {
	cq.ctx.Fields = append(cq.ctx.Fields, fields...)
	sbuild := &CompanySelect{CompanyQuery: cq}
	sbuild.label = company.Label
	sbuild.flds, sbuild.scan = &cq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CompanySelect configured with the given aggregations.
func (cq *CompanyQuery) Aggregate(fns ...AggregateFunc) *CompanySelect {
	return cq.Select().Aggregate(fns...)
}

func (cq *CompanyQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cq); err != nil {
				return err
			}
		}
	}
	for _, f := range cq.ctx.Fields {
		if !company.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if cq.path != nil {
		prev, err := cq.path(ctx)
		if err != nil {
			return err
		}
		cq.sql = prev
	}
	return nil
}

func (cq *CompanyQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Company, error) {
	var (
		nodes       = []*Company{}
		withFKs     = cq.withFKs
		_spec       = cq.querySpec()
		loadedTypes = [22]bool{
			cq.withAvailableRoles != nil,
			cq.withAccountingEntries != nil,
			cq.withCustomers != nil,
			cq.withDocuments != nil,
			cq.withEmployees != nil,
			cq.withFiles != nil,
			cq.withInventory != nil,
			cq.withInventoryMovements != nil,
			cq.withInvoices != nil,
			cq.withLoans != nil,
			cq.withMemberSignupTokens != nil,
			cq.withProducts != nil,
			cq.withProjects != nil,
			cq.withPayables != nil,
			cq.withReceivables != nil,
			cq.withSuppliers != nil,
			cq.withTokens != nil,
			cq.withTreasuries != nil,
			cq.withWorkShifts != nil,
			cq.withUsers != nil,
			cq.withDaughterCompanies != nil,
			cq.withParentCompany != nil,
		}
	)
	if cq.withParentCompany != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, company.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Company).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Company{config: cq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(cq.modifiers) > 0 {
		_spec.Modifiers = cq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cq.withAvailableRoles; query != nil {
		if err := cq.loadAvailableRoles(ctx, query, nodes,
			func(n *Company) { n.Edges.AvailableRoles = []*UserRole{} },
			func(n *Company, e *UserRole) { n.Edges.AvailableRoles = append(n.Edges.AvailableRoles, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withAccountingEntries; query != nil {
		if err := cq.loadAccountingEntries(ctx, query, nodes,
			func(n *Company) { n.Edges.AccountingEntries = []*AccountingEntry{} },
			func(n *Company, e *AccountingEntry) { n.Edges.AccountingEntries = append(n.Edges.AccountingEntries, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withCustomers; query != nil {
		if err := cq.loadCustomers(ctx, query, nodes,
			func(n *Company) { n.Edges.Customers = []*Customer{} },
			func(n *Company, e *Customer) { n.Edges.Customers = append(n.Edges.Customers, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withDocuments; query != nil {
		if err := cq.loadDocuments(ctx, query, nodes,
			func(n *Company) { n.Edges.Documents = []*CompanyDocument{} },
			func(n *Company, e *CompanyDocument) { n.Edges.Documents = append(n.Edges.Documents, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withEmployees; query != nil {
		if err := cq.loadEmployees(ctx, query, nodes,
			func(n *Company) { n.Edges.Employees = []*Employee{} },
			func(n *Company, e *Employee) { n.Edges.Employees = append(n.Edges.Employees, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withFiles; query != nil {
		if err := cq.loadFiles(ctx, query, nodes,
			func(n *Company) { n.Edges.Files = []*File{} },
			func(n *Company, e *File) { n.Edges.Files = append(n.Edges.Files, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withInventory; query != nil {
		if err := cq.loadInventory(ctx, query, nodes,
			func(n *Company) { n.Edges.Inventory = []*Inventory{} },
			func(n *Company, e *Inventory) { n.Edges.Inventory = append(n.Edges.Inventory, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withInventoryMovements; query != nil {
		if err := cq.loadInventoryMovements(ctx, query, nodes,
			func(n *Company) { n.Edges.InventoryMovements = []*InventoryMovement{} },
			func(n *Company, e *InventoryMovement) {
				n.Edges.InventoryMovements = append(n.Edges.InventoryMovements, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := cq.withInvoices; query != nil {
		if err := cq.loadInvoices(ctx, query, nodes,
			func(n *Company) { n.Edges.Invoices = []*Invoice{} },
			func(n *Company, e *Invoice) { n.Edges.Invoices = append(n.Edges.Invoices, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withLoans; query != nil {
		if err := cq.loadLoans(ctx, query, nodes,
			func(n *Company) { n.Edges.Loans = []*Loan{} },
			func(n *Company, e *Loan) { n.Edges.Loans = append(n.Edges.Loans, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withMemberSignupTokens; query != nil {
		if err := cq.loadMemberSignupTokens(ctx, query, nodes,
			func(n *Company) { n.Edges.MemberSignupTokens = []*MemberSignupToken{} },
			func(n *Company, e *MemberSignupToken) {
				n.Edges.MemberSignupTokens = append(n.Edges.MemberSignupTokens, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := cq.withProducts; query != nil {
		if err := cq.loadProducts(ctx, query, nodes,
			func(n *Company) { n.Edges.Products = []*Product{} },
			func(n *Company, e *Product) { n.Edges.Products = append(n.Edges.Products, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withProjects; query != nil {
		if err := cq.loadProjects(ctx, query, nodes,
			func(n *Company) { n.Edges.Projects = []*Project{} },
			func(n *Company, e *Project) { n.Edges.Projects = append(n.Edges.Projects, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withPayables; query != nil {
		if err := cq.loadPayables(ctx, query, nodes,
			func(n *Company) { n.Edges.Payables = []*Payable{} },
			func(n *Company, e *Payable) { n.Edges.Payables = append(n.Edges.Payables, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withReceivables; query != nil {
		if err := cq.loadReceivables(ctx, query, nodes,
			func(n *Company) { n.Edges.Receivables = []*Receivable{} },
			func(n *Company, e *Receivable) { n.Edges.Receivables = append(n.Edges.Receivables, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withSuppliers; query != nil {
		if err := cq.loadSuppliers(ctx, query, nodes,
			func(n *Company) { n.Edges.Suppliers = []*Supplier{} },
			func(n *Company, e *Supplier) { n.Edges.Suppliers = append(n.Edges.Suppliers, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withTokens; query != nil {
		if err := cq.loadTokens(ctx, query, nodes,
			func(n *Company) { n.Edges.Tokens = []*Token{} },
			func(n *Company, e *Token) { n.Edges.Tokens = append(n.Edges.Tokens, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withTreasuries; query != nil {
		if err := cq.loadTreasuries(ctx, query, nodes,
			func(n *Company) { n.Edges.Treasuries = []*Treasury{} },
			func(n *Company, e *Treasury) { n.Edges.Treasuries = append(n.Edges.Treasuries, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withWorkShifts; query != nil {
		if err := cq.loadWorkShifts(ctx, query, nodes,
			func(n *Company) { n.Edges.WorkShifts = []*Workshift{} },
			func(n *Company, e *Workshift) { n.Edges.WorkShifts = append(n.Edges.WorkShifts, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withUsers; query != nil {
		if err := cq.loadUsers(ctx, query, nodes,
			func(n *Company) { n.Edges.Users = []*User{} },
			func(n *Company, e *User) { n.Edges.Users = append(n.Edges.Users, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withDaughterCompanies; query != nil {
		if err := cq.loadDaughterCompanies(ctx, query, nodes,
			func(n *Company) { n.Edges.DaughterCompanies = []*Company{} },
			func(n *Company, e *Company) { n.Edges.DaughterCompanies = append(n.Edges.DaughterCompanies, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withParentCompany; query != nil {
		if err := cq.loadParentCompany(ctx, query, nodes, nil,
			func(n *Company, e *Company) { n.Edges.ParentCompany = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedAvailableRoles {
		if err := cq.loadAvailableRoles(ctx, query, nodes,
			func(n *Company) { n.appendNamedAvailableRoles(name) },
			func(n *Company, e *UserRole) { n.appendNamedAvailableRoles(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedAccountingEntries {
		if err := cq.loadAccountingEntries(ctx, query, nodes,
			func(n *Company) { n.appendNamedAccountingEntries(name) },
			func(n *Company, e *AccountingEntry) { n.appendNamedAccountingEntries(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedCustomers {
		if err := cq.loadCustomers(ctx, query, nodes,
			func(n *Company) { n.appendNamedCustomers(name) },
			func(n *Company, e *Customer) { n.appendNamedCustomers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedDocuments {
		if err := cq.loadDocuments(ctx, query, nodes,
			func(n *Company) { n.appendNamedDocuments(name) },
			func(n *Company, e *CompanyDocument) { n.appendNamedDocuments(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedEmployees {
		if err := cq.loadEmployees(ctx, query, nodes,
			func(n *Company) { n.appendNamedEmployees(name) },
			func(n *Company, e *Employee) { n.appendNamedEmployees(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedFiles {
		if err := cq.loadFiles(ctx, query, nodes,
			func(n *Company) { n.appendNamedFiles(name) },
			func(n *Company, e *File) { n.appendNamedFiles(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedInventory {
		if err := cq.loadInventory(ctx, query, nodes,
			func(n *Company) { n.appendNamedInventory(name) },
			func(n *Company, e *Inventory) { n.appendNamedInventory(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedInventoryMovements {
		if err := cq.loadInventoryMovements(ctx, query, nodes,
			func(n *Company) { n.appendNamedInventoryMovements(name) },
			func(n *Company, e *InventoryMovement) { n.appendNamedInventoryMovements(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedInvoices {
		if err := cq.loadInvoices(ctx, query, nodes,
			func(n *Company) { n.appendNamedInvoices(name) },
			func(n *Company, e *Invoice) { n.appendNamedInvoices(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedLoans {
		if err := cq.loadLoans(ctx, query, nodes,
			func(n *Company) { n.appendNamedLoans(name) },
			func(n *Company, e *Loan) { n.appendNamedLoans(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedMemberSignupTokens {
		if err := cq.loadMemberSignupTokens(ctx, query, nodes,
			func(n *Company) { n.appendNamedMemberSignupTokens(name) },
			func(n *Company, e *MemberSignupToken) { n.appendNamedMemberSignupTokens(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedProducts {
		if err := cq.loadProducts(ctx, query, nodes,
			func(n *Company) { n.appendNamedProducts(name) },
			func(n *Company, e *Product) { n.appendNamedProducts(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedProjects {
		if err := cq.loadProjects(ctx, query, nodes,
			func(n *Company) { n.appendNamedProjects(name) },
			func(n *Company, e *Project) { n.appendNamedProjects(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedPayables {
		if err := cq.loadPayables(ctx, query, nodes,
			func(n *Company) { n.appendNamedPayables(name) },
			func(n *Company, e *Payable) { n.appendNamedPayables(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedReceivables {
		if err := cq.loadReceivables(ctx, query, nodes,
			func(n *Company) { n.appendNamedReceivables(name) },
			func(n *Company, e *Receivable) { n.appendNamedReceivables(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedSuppliers {
		if err := cq.loadSuppliers(ctx, query, nodes,
			func(n *Company) { n.appendNamedSuppliers(name) },
			func(n *Company, e *Supplier) { n.appendNamedSuppliers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedTokens {
		if err := cq.loadTokens(ctx, query, nodes,
			func(n *Company) { n.appendNamedTokens(name) },
			func(n *Company, e *Token) { n.appendNamedTokens(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedTreasuries {
		if err := cq.loadTreasuries(ctx, query, nodes,
			func(n *Company) { n.appendNamedTreasuries(name) },
			func(n *Company, e *Treasury) { n.appendNamedTreasuries(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedWorkShifts {
		if err := cq.loadWorkShifts(ctx, query, nodes,
			func(n *Company) { n.appendNamedWorkShifts(name) },
			func(n *Company, e *Workshift) { n.appendNamedWorkShifts(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedUsers {
		if err := cq.loadUsers(ctx, query, nodes,
			func(n *Company) { n.appendNamedUsers(name) },
			func(n *Company, e *User) { n.appendNamedUsers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedDaughterCompanies {
		if err := cq.loadDaughterCompanies(ctx, query, nodes,
			func(n *Company) { n.appendNamedDaughterCompanies(name) },
			func(n *Company, e *Company) { n.appendNamedDaughterCompanies(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range cq.loadTotal {
		if err := cq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cq *CompanyQuery) loadAvailableRoles(ctx context.Context, query *UserRoleQuery, nodes []*Company, init func(*Company), assign func(*Company, *UserRole)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Company)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.UserRole(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(company.AvailableRolesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.company_available_roles
		if fk == nil {
			return fmt.Errorf(`foreign-key "company_available_roles" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "company_available_roles" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CompanyQuery) loadAccountingEntries(ctx context.Context, query *AccountingEntryQuery, nodes []*Company, init func(*Company), assign func(*Company, *AccountingEntry)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Company)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.AccountingEntry(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(company.AccountingEntriesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.company_accounting_entries
		if fk == nil {
			return fmt.Errorf(`foreign-key "company_accounting_entries" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "company_accounting_entries" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CompanyQuery) loadCustomers(ctx context.Context, query *CustomerQuery, nodes []*Company, init func(*Company), assign func(*Company, *Customer)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Company)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Customer(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(company.CustomersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.company_customers
		if fk == nil {
			return fmt.Errorf(`foreign-key "company_customers" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "company_customers" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CompanyQuery) loadDocuments(ctx context.Context, query *CompanyDocumentQuery, nodes []*Company, init func(*Company), assign func(*Company, *CompanyDocument)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Company)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.CompanyDocument(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(company.DocumentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.company_documents
		if fk == nil {
			return fmt.Errorf(`foreign-key "company_documents" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "company_documents" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CompanyQuery) loadEmployees(ctx context.Context, query *EmployeeQuery, nodes []*Company, init func(*Company), assign func(*Company, *Employee)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Company)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(company.EmployeesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.company_employees
		if fk == nil {
			return fmt.Errorf(`foreign-key "company_employees" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "company_employees" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CompanyQuery) loadFiles(ctx context.Context, query *FileQuery, nodes []*Company, init func(*Company), assign func(*Company, *File)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Company)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.File(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(company.FilesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.company_files
		if fk == nil {
			return fmt.Errorf(`foreign-key "company_files" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "company_files" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CompanyQuery) loadInventory(ctx context.Context, query *InventoryQuery, nodes []*Company, init func(*Company), assign func(*Company, *Inventory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Company)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(company.InventoryColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.company_inventory
		if fk == nil {
			return fmt.Errorf(`foreign-key "company_inventory" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "company_inventory" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CompanyQuery) loadInventoryMovements(ctx context.Context, query *InventoryMovementQuery, nodes []*Company, init func(*Company), assign func(*Company, *InventoryMovement)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Company)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.InventoryMovement(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(company.InventoryMovementsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.company_inventory_movements
		if fk == nil {
			return fmt.Errorf(`foreign-key "company_inventory_movements" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "company_inventory_movements" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CompanyQuery) loadInvoices(ctx context.Context, query *InvoiceQuery, nodes []*Company, init func(*Company), assign func(*Company, *Invoice)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Company)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Invoice(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(company.InvoicesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.company_invoices
		if fk == nil {
			return fmt.Errorf(`foreign-key "company_invoices" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "company_invoices" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CompanyQuery) loadLoans(ctx context.Context, query *LoanQuery, nodes []*Company, init func(*Company), assign func(*Company, *Loan)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Company)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Loan(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(company.LoansColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.company_loans
		if fk == nil {
			return fmt.Errorf(`foreign-key "company_loans" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "company_loans" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CompanyQuery) loadMemberSignupTokens(ctx context.Context, query *MemberSignupTokenQuery, nodes []*Company, init func(*Company), assign func(*Company, *MemberSignupToken)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Company)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.MemberSignupToken(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(company.MemberSignupTokensColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.company_member_signup_tokens
		if fk == nil {
			return fmt.Errorf(`foreign-key "company_member_signup_tokens" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "company_member_signup_tokens" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CompanyQuery) loadProducts(ctx context.Context, query *ProductQuery, nodes []*Company, init func(*Company), assign func(*Company, *Product)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Company)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Product(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(company.ProductsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.company_products
		if fk == nil {
			return fmt.Errorf(`foreign-key "company_products" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "company_products" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CompanyQuery) loadProjects(ctx context.Context, query *ProjectQuery, nodes []*Company, init func(*Company), assign func(*Company, *Project)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Company)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Project(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(company.ProjectsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.company_projects
		if fk == nil {
			return fmt.Errorf(`foreign-key "company_projects" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "company_projects" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CompanyQuery) loadPayables(ctx context.Context, query *PayableQuery, nodes []*Company, init func(*Company), assign func(*Company, *Payable)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Company)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Payable(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(company.PayablesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.company_payables
		if fk == nil {
			return fmt.Errorf(`foreign-key "company_payables" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "company_payables" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CompanyQuery) loadReceivables(ctx context.Context, query *ReceivableQuery, nodes []*Company, init func(*Company), assign func(*Company, *Receivable)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Company)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Receivable(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(company.ReceivablesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.company_receivables
		if fk == nil {
			return fmt.Errorf(`foreign-key "company_receivables" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "company_receivables" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CompanyQuery) loadSuppliers(ctx context.Context, query *SupplierQuery, nodes []*Company, init func(*Company), assign func(*Company, *Supplier)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Company)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Supplier(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(company.SuppliersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.company_suppliers
		if fk == nil {
			return fmt.Errorf(`foreign-key "company_suppliers" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "company_suppliers" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CompanyQuery) loadTokens(ctx context.Context, query *TokenQuery, nodes []*Company, init func(*Company), assign func(*Company, *Token)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Company)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Token(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(company.TokensColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.company_tokens
		if fk == nil {
			return fmt.Errorf(`foreign-key "company_tokens" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "company_tokens" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CompanyQuery) loadTreasuries(ctx context.Context, query *TreasuryQuery, nodes []*Company, init func(*Company), assign func(*Company, *Treasury)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Company)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Treasury(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(company.TreasuriesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.company_treasuries
		if fk == nil {
			return fmt.Errorf(`foreign-key "company_treasuries" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "company_treasuries" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CompanyQuery) loadWorkShifts(ctx context.Context, query *WorkshiftQuery, nodes []*Company, init func(*Company), assign func(*Company, *Workshift)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Company)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Workshift(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(company.WorkShiftsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.company_work_shifts
		if fk == nil {
			return fmt.Errorf(`foreign-key "company_work_shifts" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "company_work_shifts" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CompanyQuery) loadUsers(ctx context.Context, query *UserQuery, nodes []*Company, init func(*Company), assign func(*Company, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Company)
	nids := make(map[int]map[*Company]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(company.UsersTable)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(company.UsersPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(company.UsersPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(company.UsersPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Company]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*User](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "users" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (cq *CompanyQuery) loadDaughterCompanies(ctx context.Context, query *CompanyQuery, nodes []*Company, init func(*Company), assign func(*Company, *Company)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Company)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Company(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(company.DaughterCompaniesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.company_daughter_companies
		if fk == nil {
			return fmt.Errorf(`foreign-key "company_daughter_companies" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "company_daughter_companies" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CompanyQuery) loadParentCompany(ctx context.Context, query *CompanyQuery, nodes []*Company, init func(*Company), assign func(*Company, *Company)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Company)
	for i := range nodes {
		if nodes[i].company_daughter_companies == nil {
			continue
		}
		fk := *nodes[i].company_daughter_companies
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(company.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "company_daughter_companies" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (cq *CompanyQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cq.querySpec()
	if len(cq.modifiers) > 0 {
		_spec.Modifiers = cq.modifiers
	}
	_spec.Node.Columns = cq.ctx.Fields
	if len(cq.ctx.Fields) > 0 {
		_spec.Unique = cq.ctx.Unique != nil && *cq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cq.driver, _spec)
}

func (cq *CompanyQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(company.Table, company.Columns, sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt))
	_spec.From = cq.sql
	if unique := cq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cq.path != nil {
		_spec.Unique = true
	}
	if fields := cq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, company.FieldID)
		for i := range fields {
			if fields[i] != company.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cq *CompanyQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cq.driver.Dialect())
	t1 := builder.Table(company.Table)
	columns := cq.ctx.Fields
	if len(columns) == 0 {
		columns = company.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cq.sql != nil {
		selector = cq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cq.ctx.Unique != nil && *cq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range cq.modifiers {
		m(selector)
	}
	for _, p := range cq.predicates {
		p(selector)
	}
	for _, p := range cq.order {
		p(selector)
	}
	if offset := cq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (cq *CompanyQuery) Modify(modifiers ...func(s *sql.Selector)) *CompanySelect {
	cq.modifiers = append(cq.modifiers, modifiers...)
	return cq.Select()
}

// WithNamedAvailableRoles tells the query-builder to eager-load the nodes that are connected to the "availableRoles"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithNamedAvailableRoles(name string, opts ...func(*UserRoleQuery)) *CompanyQuery {
	query := (&UserRoleClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedAvailableRoles == nil {
		cq.withNamedAvailableRoles = make(map[string]*UserRoleQuery)
	}
	cq.withNamedAvailableRoles[name] = query
	return cq
}

// WithNamedAccountingEntries tells the query-builder to eager-load the nodes that are connected to the "accountingEntries"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithNamedAccountingEntries(name string, opts ...func(*AccountingEntryQuery)) *CompanyQuery {
	query := (&AccountingEntryClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedAccountingEntries == nil {
		cq.withNamedAccountingEntries = make(map[string]*AccountingEntryQuery)
	}
	cq.withNamedAccountingEntries[name] = query
	return cq
}

// WithNamedCustomers tells the query-builder to eager-load the nodes that are connected to the "customers"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithNamedCustomers(name string, opts ...func(*CustomerQuery)) *CompanyQuery {
	query := (&CustomerClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedCustomers == nil {
		cq.withNamedCustomers = make(map[string]*CustomerQuery)
	}
	cq.withNamedCustomers[name] = query
	return cq
}

// WithNamedDocuments tells the query-builder to eager-load the nodes that are connected to the "documents"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithNamedDocuments(name string, opts ...func(*CompanyDocumentQuery)) *CompanyQuery {
	query := (&CompanyDocumentClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedDocuments == nil {
		cq.withNamedDocuments = make(map[string]*CompanyDocumentQuery)
	}
	cq.withNamedDocuments[name] = query
	return cq
}

// WithNamedEmployees tells the query-builder to eager-load the nodes that are connected to the "employees"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithNamedEmployees(name string, opts ...func(*EmployeeQuery)) *CompanyQuery {
	query := (&EmployeeClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedEmployees == nil {
		cq.withNamedEmployees = make(map[string]*EmployeeQuery)
	}
	cq.withNamedEmployees[name] = query
	return cq
}

// WithNamedFiles tells the query-builder to eager-load the nodes that are connected to the "files"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithNamedFiles(name string, opts ...func(*FileQuery)) *CompanyQuery {
	query := (&FileClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedFiles == nil {
		cq.withNamedFiles = make(map[string]*FileQuery)
	}
	cq.withNamedFiles[name] = query
	return cq
}

// WithNamedInventory tells the query-builder to eager-load the nodes that are connected to the "inventory"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithNamedInventory(name string, opts ...func(*InventoryQuery)) *CompanyQuery {
	query := (&InventoryClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedInventory == nil {
		cq.withNamedInventory = make(map[string]*InventoryQuery)
	}
	cq.withNamedInventory[name] = query
	return cq
}

// WithNamedInventoryMovements tells the query-builder to eager-load the nodes that are connected to the "inventoryMovements"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithNamedInventoryMovements(name string, opts ...func(*InventoryMovementQuery)) *CompanyQuery {
	query := (&InventoryMovementClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedInventoryMovements == nil {
		cq.withNamedInventoryMovements = make(map[string]*InventoryMovementQuery)
	}
	cq.withNamedInventoryMovements[name] = query
	return cq
}

// WithNamedInvoices tells the query-builder to eager-load the nodes that are connected to the "invoices"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithNamedInvoices(name string, opts ...func(*InvoiceQuery)) *CompanyQuery {
	query := (&InvoiceClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedInvoices == nil {
		cq.withNamedInvoices = make(map[string]*InvoiceQuery)
	}
	cq.withNamedInvoices[name] = query
	return cq
}

// WithNamedLoans tells the query-builder to eager-load the nodes that are connected to the "loans"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithNamedLoans(name string, opts ...func(*LoanQuery)) *CompanyQuery {
	query := (&LoanClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedLoans == nil {
		cq.withNamedLoans = make(map[string]*LoanQuery)
	}
	cq.withNamedLoans[name] = query
	return cq
}

// WithNamedMemberSignupTokens tells the query-builder to eager-load the nodes that are connected to the "memberSignupTokens"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithNamedMemberSignupTokens(name string, opts ...func(*MemberSignupTokenQuery)) *CompanyQuery {
	query := (&MemberSignupTokenClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedMemberSignupTokens == nil {
		cq.withNamedMemberSignupTokens = make(map[string]*MemberSignupTokenQuery)
	}
	cq.withNamedMemberSignupTokens[name] = query
	return cq
}

// WithNamedProducts tells the query-builder to eager-load the nodes that are connected to the "products"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithNamedProducts(name string, opts ...func(*ProductQuery)) *CompanyQuery {
	query := (&ProductClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedProducts == nil {
		cq.withNamedProducts = make(map[string]*ProductQuery)
	}
	cq.withNamedProducts[name] = query
	return cq
}

// WithNamedProjects tells the query-builder to eager-load the nodes that are connected to the "projects"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithNamedProjects(name string, opts ...func(*ProjectQuery)) *CompanyQuery {
	query := (&ProjectClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedProjects == nil {
		cq.withNamedProjects = make(map[string]*ProjectQuery)
	}
	cq.withNamedProjects[name] = query
	return cq
}

// WithNamedPayables tells the query-builder to eager-load the nodes that are connected to the "payables"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithNamedPayables(name string, opts ...func(*PayableQuery)) *CompanyQuery {
	query := (&PayableClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedPayables == nil {
		cq.withNamedPayables = make(map[string]*PayableQuery)
	}
	cq.withNamedPayables[name] = query
	return cq
}

// WithNamedReceivables tells the query-builder to eager-load the nodes that are connected to the "receivables"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithNamedReceivables(name string, opts ...func(*ReceivableQuery)) *CompanyQuery {
	query := (&ReceivableClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedReceivables == nil {
		cq.withNamedReceivables = make(map[string]*ReceivableQuery)
	}
	cq.withNamedReceivables[name] = query
	return cq
}

// WithNamedSuppliers tells the query-builder to eager-load the nodes that are connected to the "suppliers"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithNamedSuppliers(name string, opts ...func(*SupplierQuery)) *CompanyQuery {
	query := (&SupplierClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedSuppliers == nil {
		cq.withNamedSuppliers = make(map[string]*SupplierQuery)
	}
	cq.withNamedSuppliers[name] = query
	return cq
}

// WithNamedTokens tells the query-builder to eager-load the nodes that are connected to the "tokens"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithNamedTokens(name string, opts ...func(*TokenQuery)) *CompanyQuery {
	query := (&TokenClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedTokens == nil {
		cq.withNamedTokens = make(map[string]*TokenQuery)
	}
	cq.withNamedTokens[name] = query
	return cq
}

// WithNamedTreasuries tells the query-builder to eager-load the nodes that are connected to the "treasuries"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithNamedTreasuries(name string, opts ...func(*TreasuryQuery)) *CompanyQuery {
	query := (&TreasuryClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedTreasuries == nil {
		cq.withNamedTreasuries = make(map[string]*TreasuryQuery)
	}
	cq.withNamedTreasuries[name] = query
	return cq
}

// WithNamedWorkShifts tells the query-builder to eager-load the nodes that are connected to the "workShifts"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithNamedWorkShifts(name string, opts ...func(*WorkshiftQuery)) *CompanyQuery {
	query := (&WorkshiftClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedWorkShifts == nil {
		cq.withNamedWorkShifts = make(map[string]*WorkshiftQuery)
	}
	cq.withNamedWorkShifts[name] = query
	return cq
}

// WithNamedUsers tells the query-builder to eager-load the nodes that are connected to the "users"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithNamedUsers(name string, opts ...func(*UserQuery)) *CompanyQuery {
	query := (&UserClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedUsers == nil {
		cq.withNamedUsers = make(map[string]*UserQuery)
	}
	cq.withNamedUsers[name] = query
	return cq
}

// WithNamedDaughterCompanies tells the query-builder to eager-load the nodes that are connected to the "daughterCompanies"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CompanyQuery) WithNamedDaughterCompanies(name string, opts ...func(*CompanyQuery)) *CompanyQuery {
	query := (&CompanyClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedDaughterCompanies == nil {
		cq.withNamedDaughterCompanies = make(map[string]*CompanyQuery)
	}
	cq.withNamedDaughterCompanies[name] = query
	return cq
}

// CompanyGroupBy is the group-by builder for Company entities.
type CompanyGroupBy struct {
	selector
	build *CompanyQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cgb *CompanyGroupBy) Aggregate(fns ...AggregateFunc) *CompanyGroupBy {
	cgb.fns = append(cgb.fns, fns...)
	return cgb
}

// Scan applies the selector query and scans the result into the given value.
func (cgb *CompanyGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cgb.build.ctx, ent.OpQueryGroupBy)
	if err := cgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CompanyQuery, *CompanyGroupBy](ctx, cgb.build, cgb, cgb.build.inters, v)
}

func (cgb *CompanyGroupBy) sqlScan(ctx context.Context, root *CompanyQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cgb.fns))
	for _, fn := range cgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cgb.flds)+len(cgb.fns))
		for _, f := range *cgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CompanySelect is the builder for selecting fields of Company entities.
type CompanySelect struct {
	*CompanyQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cs *CompanySelect) Aggregate(fns ...AggregateFunc) *CompanySelect {
	cs.fns = append(cs.fns, fns...)
	return cs
}

// Scan applies the selector query and scans the result into the given value.
func (cs *CompanySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cs.ctx, ent.OpQuerySelect)
	if err := cs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CompanyQuery, *CompanySelect](ctx, cs.CompanyQuery, cs, cs.inters, v)
}

func (cs *CompanySelect) sqlScan(ctx context.Context, root *CompanyQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cs.fns))
	for _, fn := range cs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (cs *CompanySelect) Modify(modifiers ...func(s *sql.Selector)) *CompanySelect {
	cs.modifiers = append(cs.modifiers, modifiers...)
	return cs
}
