// Code generated by ent, DO NOT EDIT.

package invoice

import (
	"mazza/ent/generated/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deletedAt" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldDeletedAt, v))
}

// CompanyLogo applies equality check predicate on the "companyLogo" field. It's identical to CompanyLogoEQ.
func CompanyLogo(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCompanyLogo, v))
}

// CompanyName applies equality check predicate on the "companyName" field. It's identical to CompanyNameEQ.
func CompanyName(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCompanyName, v))
}

// CompanyTaxID applies equality check predicate on the "companyTaxID" field. It's identical to CompanyTaxIDEQ.
func CompanyTaxID(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCompanyTaxID, v))
}

// CompanyAddress applies equality check predicate on the "companyAddress" field. It's identical to CompanyAddressEQ.
func CompanyAddress(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCompanyAddress, v))
}

// CompanyCity applies equality check predicate on the "companyCity" field. It's identical to CompanyCityEQ.
func CompanyCity(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCompanyCity, v))
}

// CompanyEmail applies equality check predicate on the "companyEmail" field. It's identical to CompanyEmailEQ.
func CompanyEmail(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCompanyEmail, v))
}

// CompanyPhone applies equality check predicate on the "companyPhone" field. It's identical to CompanyPhoneEQ.
func CompanyPhone(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCompanyPhone, v))
}

// Number applies equality check predicate on the "number" field. It's identical to NumberEQ.
func Number(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldNumber, v))
}

// IssueDate applies equality check predicate on the "issueDate" field. It's identical to IssueDateEQ.
func IssueDate(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldIssueDate, v))
}

// DueDate applies equality check predicate on the "dueDate" field. It's identical to DueDateEQ.
func DueDate(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldDueDate, v))
}

// PaidAt applies equality check predicate on the "paidAt" field. It's identical to PaidAtEQ.
func PaidAt(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldPaidAt, v))
}

// CustomerName applies equality check predicate on the "customerName" field. It's identical to CustomerNameEQ.
func CustomerName(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCustomerName, v))
}

// CustomerTaxID applies equality check predicate on the "customerTaxID" field. It's identical to CustomerTaxIDEQ.
func CustomerTaxID(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCustomerTaxID, v))
}

// CustomerAddress applies equality check predicate on the "customerAddress" field. It's identical to CustomerAddressEQ.
func CustomerAddress(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCustomerAddress, v))
}

// CustomerCity applies equality check predicate on the "customerCity" field. It's identical to CustomerCityEQ.
func CustomerCity(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCustomerCity, v))
}

// CustomerEmail applies equality check predicate on the "customerEmail" field. It's identical to CustomerEmailEQ.
func CustomerEmail(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCustomerEmail, v))
}

// CustomerPhone applies equality check predicate on the "customerPhone" field. It's identical to CustomerPhoneEQ.
func CustomerPhone(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCustomerPhone, v))
}

// Items applies equality check predicate on the "items" field. It's identical to ItemsEQ.
func Items(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldItems, v))
}

// Subtotal applies equality check predicate on the "subtotal" field. It's identical to SubtotalEQ.
func Subtotal(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldSubtotal, v))
}

// Tax applies equality check predicate on the "tax" field. It's identical to TaxEQ.
func Tax(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldTax, v))
}

// Total applies equality check predicate on the "total" field. It's identical to TotalEQ.
func Total(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldTotal, v))
}

// Notes applies equality check predicate on the "notes" field. It's identical to NotesEQ.
func Notes(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldNotes, v))
}

// PaymentMethod applies equality check predicate on the "paymentMethod" field. It's identical to PaymentMethodEQ.
func PaymentMethod(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldPaymentMethod, v))
}

// BankName applies equality check predicate on the "bankName" field. It's identical to BankNameEQ.
func BankName(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldBankName, v))
}

// BankAgency applies equality check predicate on the "bankAgency" field. It's identical to BankAgencyEQ.
func BankAgency(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldBankAgency, v))
}

// BankAccountNumber applies equality check predicate on the "bankAccountNumber" field. It's identical to BankAccountNumberEQ.
func BankAccountNumber(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldBankAccountNumber, v))
}

// BankAccountName applies equality check predicate on the "bankAccountName" field. It's identical to BankAccountNameEQ.
func BankAccountName(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldBankAccountName, v))
}

// StorageURI applies equality check predicate on the "storageURI" field. It's identical to StorageURIEQ.
func StorageURI(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldStorageURI, v))
}

// URL applies equality check predicate on the "URL" field. It's identical to URLEQ.
func URL(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldURL, v))
}

// Filename applies equality check predicate on the "filename" field. It's identical to FilenameEQ.
func Filename(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldFilename, v))
}

// Size applies equality check predicate on the "size" field. It's identical to SizeEQ.
func Size(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldSize, v))
}

// Keywords applies equality check predicate on the "keywords" field. It's identical to KeywordsEQ.
func Keywords(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldKeywords, v))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deletedAt" field.
func DeletedAtEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deletedAt" field.
func DeletedAtNEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deletedAt" field.
func DeletedAtIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deletedAt" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deletedAt" field.
func DeletedAtGT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deletedAt" field.
func DeletedAtGTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deletedAt" field.
func DeletedAtLT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deletedAt" field.
func DeletedAtLTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deletedAt" field.
func DeletedAtIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deletedAt" field.
func DeletedAtNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldDeletedAt))
}

// CompanyLogoEQ applies the EQ predicate on the "companyLogo" field.
func CompanyLogoEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCompanyLogo, v))
}

// CompanyLogoNEQ applies the NEQ predicate on the "companyLogo" field.
func CompanyLogoNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldCompanyLogo, v))
}

// CompanyLogoIn applies the In predicate on the "companyLogo" field.
func CompanyLogoIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldCompanyLogo, vs...))
}

// CompanyLogoNotIn applies the NotIn predicate on the "companyLogo" field.
func CompanyLogoNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldCompanyLogo, vs...))
}

// CompanyLogoGT applies the GT predicate on the "companyLogo" field.
func CompanyLogoGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldCompanyLogo, v))
}

// CompanyLogoGTE applies the GTE predicate on the "companyLogo" field.
func CompanyLogoGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldCompanyLogo, v))
}

// CompanyLogoLT applies the LT predicate on the "companyLogo" field.
func CompanyLogoLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldCompanyLogo, v))
}

// CompanyLogoLTE applies the LTE predicate on the "companyLogo" field.
func CompanyLogoLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldCompanyLogo, v))
}

// CompanyLogoContains applies the Contains predicate on the "companyLogo" field.
func CompanyLogoContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldCompanyLogo, v))
}

// CompanyLogoHasPrefix applies the HasPrefix predicate on the "companyLogo" field.
func CompanyLogoHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldCompanyLogo, v))
}

// CompanyLogoHasSuffix applies the HasSuffix predicate on the "companyLogo" field.
func CompanyLogoHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldCompanyLogo, v))
}

// CompanyLogoIsNil applies the IsNil predicate on the "companyLogo" field.
func CompanyLogoIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldCompanyLogo))
}

// CompanyLogoNotNil applies the NotNil predicate on the "companyLogo" field.
func CompanyLogoNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldCompanyLogo))
}

// CompanyLogoEqualFold applies the EqualFold predicate on the "companyLogo" field.
func CompanyLogoEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldCompanyLogo, v))
}

// CompanyLogoContainsFold applies the ContainsFold predicate on the "companyLogo" field.
func CompanyLogoContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldCompanyLogo, v))
}

// CompanyNameEQ applies the EQ predicate on the "companyName" field.
func CompanyNameEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCompanyName, v))
}

// CompanyNameNEQ applies the NEQ predicate on the "companyName" field.
func CompanyNameNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldCompanyName, v))
}

// CompanyNameIn applies the In predicate on the "companyName" field.
func CompanyNameIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldCompanyName, vs...))
}

// CompanyNameNotIn applies the NotIn predicate on the "companyName" field.
func CompanyNameNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldCompanyName, vs...))
}

// CompanyNameGT applies the GT predicate on the "companyName" field.
func CompanyNameGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldCompanyName, v))
}

// CompanyNameGTE applies the GTE predicate on the "companyName" field.
func CompanyNameGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldCompanyName, v))
}

// CompanyNameLT applies the LT predicate on the "companyName" field.
func CompanyNameLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldCompanyName, v))
}

// CompanyNameLTE applies the LTE predicate on the "companyName" field.
func CompanyNameLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldCompanyName, v))
}

// CompanyNameContains applies the Contains predicate on the "companyName" field.
func CompanyNameContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldCompanyName, v))
}

// CompanyNameHasPrefix applies the HasPrefix predicate on the "companyName" field.
func CompanyNameHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldCompanyName, v))
}

// CompanyNameHasSuffix applies the HasSuffix predicate on the "companyName" field.
func CompanyNameHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldCompanyName, v))
}

// CompanyNameEqualFold applies the EqualFold predicate on the "companyName" field.
func CompanyNameEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldCompanyName, v))
}

// CompanyNameContainsFold applies the ContainsFold predicate on the "companyName" field.
func CompanyNameContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldCompanyName, v))
}

// CompanyTaxIDEQ applies the EQ predicate on the "companyTaxID" field.
func CompanyTaxIDEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCompanyTaxID, v))
}

// CompanyTaxIDNEQ applies the NEQ predicate on the "companyTaxID" field.
func CompanyTaxIDNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldCompanyTaxID, v))
}

// CompanyTaxIDIn applies the In predicate on the "companyTaxID" field.
func CompanyTaxIDIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldCompanyTaxID, vs...))
}

// CompanyTaxIDNotIn applies the NotIn predicate on the "companyTaxID" field.
func CompanyTaxIDNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldCompanyTaxID, vs...))
}

// CompanyTaxIDGT applies the GT predicate on the "companyTaxID" field.
func CompanyTaxIDGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldCompanyTaxID, v))
}

// CompanyTaxIDGTE applies the GTE predicate on the "companyTaxID" field.
func CompanyTaxIDGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldCompanyTaxID, v))
}

// CompanyTaxIDLT applies the LT predicate on the "companyTaxID" field.
func CompanyTaxIDLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldCompanyTaxID, v))
}

// CompanyTaxIDLTE applies the LTE predicate on the "companyTaxID" field.
func CompanyTaxIDLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldCompanyTaxID, v))
}

// CompanyTaxIDContains applies the Contains predicate on the "companyTaxID" field.
func CompanyTaxIDContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldCompanyTaxID, v))
}

// CompanyTaxIDHasPrefix applies the HasPrefix predicate on the "companyTaxID" field.
func CompanyTaxIDHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldCompanyTaxID, v))
}

// CompanyTaxIDHasSuffix applies the HasSuffix predicate on the "companyTaxID" field.
func CompanyTaxIDHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldCompanyTaxID, v))
}

// CompanyTaxIDIsNil applies the IsNil predicate on the "companyTaxID" field.
func CompanyTaxIDIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldCompanyTaxID))
}

// CompanyTaxIDNotNil applies the NotNil predicate on the "companyTaxID" field.
func CompanyTaxIDNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldCompanyTaxID))
}

// CompanyTaxIDEqualFold applies the EqualFold predicate on the "companyTaxID" field.
func CompanyTaxIDEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldCompanyTaxID, v))
}

// CompanyTaxIDContainsFold applies the ContainsFold predicate on the "companyTaxID" field.
func CompanyTaxIDContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldCompanyTaxID, v))
}

// CompanyAddressEQ applies the EQ predicate on the "companyAddress" field.
func CompanyAddressEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCompanyAddress, v))
}

// CompanyAddressNEQ applies the NEQ predicate on the "companyAddress" field.
func CompanyAddressNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldCompanyAddress, v))
}

// CompanyAddressIn applies the In predicate on the "companyAddress" field.
func CompanyAddressIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldCompanyAddress, vs...))
}

// CompanyAddressNotIn applies the NotIn predicate on the "companyAddress" field.
func CompanyAddressNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldCompanyAddress, vs...))
}

// CompanyAddressGT applies the GT predicate on the "companyAddress" field.
func CompanyAddressGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldCompanyAddress, v))
}

// CompanyAddressGTE applies the GTE predicate on the "companyAddress" field.
func CompanyAddressGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldCompanyAddress, v))
}

// CompanyAddressLT applies the LT predicate on the "companyAddress" field.
func CompanyAddressLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldCompanyAddress, v))
}

// CompanyAddressLTE applies the LTE predicate on the "companyAddress" field.
func CompanyAddressLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldCompanyAddress, v))
}

// CompanyAddressContains applies the Contains predicate on the "companyAddress" field.
func CompanyAddressContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldCompanyAddress, v))
}

// CompanyAddressHasPrefix applies the HasPrefix predicate on the "companyAddress" field.
func CompanyAddressHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldCompanyAddress, v))
}

// CompanyAddressHasSuffix applies the HasSuffix predicate on the "companyAddress" field.
func CompanyAddressHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldCompanyAddress, v))
}

// CompanyAddressEqualFold applies the EqualFold predicate on the "companyAddress" field.
func CompanyAddressEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldCompanyAddress, v))
}

// CompanyAddressContainsFold applies the ContainsFold predicate on the "companyAddress" field.
func CompanyAddressContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldCompanyAddress, v))
}

// CompanyCityEQ applies the EQ predicate on the "companyCity" field.
func CompanyCityEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCompanyCity, v))
}

// CompanyCityNEQ applies the NEQ predicate on the "companyCity" field.
func CompanyCityNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldCompanyCity, v))
}

// CompanyCityIn applies the In predicate on the "companyCity" field.
func CompanyCityIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldCompanyCity, vs...))
}

// CompanyCityNotIn applies the NotIn predicate on the "companyCity" field.
func CompanyCityNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldCompanyCity, vs...))
}

// CompanyCityGT applies the GT predicate on the "companyCity" field.
func CompanyCityGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldCompanyCity, v))
}

// CompanyCityGTE applies the GTE predicate on the "companyCity" field.
func CompanyCityGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldCompanyCity, v))
}

// CompanyCityLT applies the LT predicate on the "companyCity" field.
func CompanyCityLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldCompanyCity, v))
}

// CompanyCityLTE applies the LTE predicate on the "companyCity" field.
func CompanyCityLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldCompanyCity, v))
}

// CompanyCityContains applies the Contains predicate on the "companyCity" field.
func CompanyCityContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldCompanyCity, v))
}

// CompanyCityHasPrefix applies the HasPrefix predicate on the "companyCity" field.
func CompanyCityHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldCompanyCity, v))
}

// CompanyCityHasSuffix applies the HasSuffix predicate on the "companyCity" field.
func CompanyCityHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldCompanyCity, v))
}

// CompanyCityEqualFold applies the EqualFold predicate on the "companyCity" field.
func CompanyCityEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldCompanyCity, v))
}

// CompanyCityContainsFold applies the ContainsFold predicate on the "companyCity" field.
func CompanyCityContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldCompanyCity, v))
}

// CompanyEmailEQ applies the EQ predicate on the "companyEmail" field.
func CompanyEmailEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCompanyEmail, v))
}

// CompanyEmailNEQ applies the NEQ predicate on the "companyEmail" field.
func CompanyEmailNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldCompanyEmail, v))
}

// CompanyEmailIn applies the In predicate on the "companyEmail" field.
func CompanyEmailIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldCompanyEmail, vs...))
}

// CompanyEmailNotIn applies the NotIn predicate on the "companyEmail" field.
func CompanyEmailNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldCompanyEmail, vs...))
}

// CompanyEmailGT applies the GT predicate on the "companyEmail" field.
func CompanyEmailGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldCompanyEmail, v))
}

// CompanyEmailGTE applies the GTE predicate on the "companyEmail" field.
func CompanyEmailGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldCompanyEmail, v))
}

// CompanyEmailLT applies the LT predicate on the "companyEmail" field.
func CompanyEmailLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldCompanyEmail, v))
}

// CompanyEmailLTE applies the LTE predicate on the "companyEmail" field.
func CompanyEmailLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldCompanyEmail, v))
}

// CompanyEmailContains applies the Contains predicate on the "companyEmail" field.
func CompanyEmailContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldCompanyEmail, v))
}

// CompanyEmailHasPrefix applies the HasPrefix predicate on the "companyEmail" field.
func CompanyEmailHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldCompanyEmail, v))
}

// CompanyEmailHasSuffix applies the HasSuffix predicate on the "companyEmail" field.
func CompanyEmailHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldCompanyEmail, v))
}

// CompanyEmailIsNil applies the IsNil predicate on the "companyEmail" field.
func CompanyEmailIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldCompanyEmail))
}

// CompanyEmailNotNil applies the NotNil predicate on the "companyEmail" field.
func CompanyEmailNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldCompanyEmail))
}

// CompanyEmailEqualFold applies the EqualFold predicate on the "companyEmail" field.
func CompanyEmailEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldCompanyEmail, v))
}

// CompanyEmailContainsFold applies the ContainsFold predicate on the "companyEmail" field.
func CompanyEmailContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldCompanyEmail, v))
}

// CompanyPhoneEQ applies the EQ predicate on the "companyPhone" field.
func CompanyPhoneEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCompanyPhone, v))
}

// CompanyPhoneNEQ applies the NEQ predicate on the "companyPhone" field.
func CompanyPhoneNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldCompanyPhone, v))
}

// CompanyPhoneIn applies the In predicate on the "companyPhone" field.
func CompanyPhoneIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldCompanyPhone, vs...))
}

// CompanyPhoneNotIn applies the NotIn predicate on the "companyPhone" field.
func CompanyPhoneNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldCompanyPhone, vs...))
}

// CompanyPhoneGT applies the GT predicate on the "companyPhone" field.
func CompanyPhoneGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldCompanyPhone, v))
}

// CompanyPhoneGTE applies the GTE predicate on the "companyPhone" field.
func CompanyPhoneGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldCompanyPhone, v))
}

// CompanyPhoneLT applies the LT predicate on the "companyPhone" field.
func CompanyPhoneLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldCompanyPhone, v))
}

// CompanyPhoneLTE applies the LTE predicate on the "companyPhone" field.
func CompanyPhoneLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldCompanyPhone, v))
}

// CompanyPhoneContains applies the Contains predicate on the "companyPhone" field.
func CompanyPhoneContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldCompanyPhone, v))
}

// CompanyPhoneHasPrefix applies the HasPrefix predicate on the "companyPhone" field.
func CompanyPhoneHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldCompanyPhone, v))
}

// CompanyPhoneHasSuffix applies the HasSuffix predicate on the "companyPhone" field.
func CompanyPhoneHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldCompanyPhone, v))
}

// CompanyPhoneIsNil applies the IsNil predicate on the "companyPhone" field.
func CompanyPhoneIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldCompanyPhone))
}

// CompanyPhoneNotNil applies the NotNil predicate on the "companyPhone" field.
func CompanyPhoneNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldCompanyPhone))
}

// CompanyPhoneEqualFold applies the EqualFold predicate on the "companyPhone" field.
func CompanyPhoneEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldCompanyPhone, v))
}

// CompanyPhoneContainsFold applies the ContainsFold predicate on the "companyPhone" field.
func CompanyPhoneContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldCompanyPhone, v))
}

// NumberEQ applies the EQ predicate on the "number" field.
func NumberEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldNumber, v))
}

// NumberNEQ applies the NEQ predicate on the "number" field.
func NumberNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldNumber, v))
}

// NumberIn applies the In predicate on the "number" field.
func NumberIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldNumber, vs...))
}

// NumberNotIn applies the NotIn predicate on the "number" field.
func NumberNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldNumber, vs...))
}

// NumberGT applies the GT predicate on the "number" field.
func NumberGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldNumber, v))
}

// NumberGTE applies the GTE predicate on the "number" field.
func NumberGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldNumber, v))
}

// NumberLT applies the LT predicate on the "number" field.
func NumberLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldNumber, v))
}

// NumberLTE applies the LTE predicate on the "number" field.
func NumberLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldNumber, v))
}

// NumberContains applies the Contains predicate on the "number" field.
func NumberContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldNumber, v))
}

// NumberHasPrefix applies the HasPrefix predicate on the "number" field.
func NumberHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldNumber, v))
}

// NumberHasSuffix applies the HasSuffix predicate on the "number" field.
func NumberHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldNumber, v))
}

// NumberIsNil applies the IsNil predicate on the "number" field.
func NumberIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldNumber))
}

// NumberNotNil applies the NotNil predicate on the "number" field.
func NumberNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldNumber))
}

// NumberEqualFold applies the EqualFold predicate on the "number" field.
func NumberEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldNumber, v))
}

// NumberContainsFold applies the ContainsFold predicate on the "number" field.
func NumberContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldNumber, v))
}

// IssueDateEQ applies the EQ predicate on the "issueDate" field.
func IssueDateEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldIssueDate, v))
}

// IssueDateNEQ applies the NEQ predicate on the "issueDate" field.
func IssueDateNEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldIssueDate, v))
}

// IssueDateIn applies the In predicate on the "issueDate" field.
func IssueDateIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldIssueDate, vs...))
}

// IssueDateNotIn applies the NotIn predicate on the "issueDate" field.
func IssueDateNotIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldIssueDate, vs...))
}

// IssueDateGT applies the GT predicate on the "issueDate" field.
func IssueDateGT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldIssueDate, v))
}

// IssueDateGTE applies the GTE predicate on the "issueDate" field.
func IssueDateGTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldIssueDate, v))
}

// IssueDateLT applies the LT predicate on the "issueDate" field.
func IssueDateLT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldIssueDate, v))
}

// IssueDateLTE applies the LTE predicate on the "issueDate" field.
func IssueDateLTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldIssueDate, v))
}

// DueDateEQ applies the EQ predicate on the "dueDate" field.
func DueDateEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldDueDate, v))
}

// DueDateNEQ applies the NEQ predicate on the "dueDate" field.
func DueDateNEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldDueDate, v))
}

// DueDateIn applies the In predicate on the "dueDate" field.
func DueDateIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldDueDate, vs...))
}

// DueDateNotIn applies the NotIn predicate on the "dueDate" field.
func DueDateNotIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldDueDate, vs...))
}

// DueDateGT applies the GT predicate on the "dueDate" field.
func DueDateGT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldDueDate, v))
}

// DueDateGTE applies the GTE predicate on the "dueDate" field.
func DueDateGTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldDueDate, v))
}

// DueDateLT applies the LT predicate on the "dueDate" field.
func DueDateLT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldDueDate, v))
}

// DueDateLTE applies the LTE predicate on the "dueDate" field.
func DueDateLTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldDueDate, v))
}

// PaidAtEQ applies the EQ predicate on the "paidAt" field.
func PaidAtEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldPaidAt, v))
}

// PaidAtNEQ applies the NEQ predicate on the "paidAt" field.
func PaidAtNEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldPaidAt, v))
}

// PaidAtIn applies the In predicate on the "paidAt" field.
func PaidAtIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldPaidAt, vs...))
}

// PaidAtNotIn applies the NotIn predicate on the "paidAt" field.
func PaidAtNotIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldPaidAt, vs...))
}

// PaidAtGT applies the GT predicate on the "paidAt" field.
func PaidAtGT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldPaidAt, v))
}

// PaidAtGTE applies the GTE predicate on the "paidAt" field.
func PaidAtGTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldPaidAt, v))
}

// PaidAtLT applies the LT predicate on the "paidAt" field.
func PaidAtLT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldPaidAt, v))
}

// PaidAtLTE applies the LTE predicate on the "paidAt" field.
func PaidAtLTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldPaidAt, v))
}

// PaidAtIsNil applies the IsNil predicate on the "paidAt" field.
func PaidAtIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldPaidAt))
}

// PaidAtNotNil applies the NotNil predicate on the "paidAt" field.
func PaidAtNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldPaidAt))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldStatus, vs...))
}

// CustomerNameEQ applies the EQ predicate on the "customerName" field.
func CustomerNameEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCustomerName, v))
}

// CustomerNameNEQ applies the NEQ predicate on the "customerName" field.
func CustomerNameNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldCustomerName, v))
}

// CustomerNameIn applies the In predicate on the "customerName" field.
func CustomerNameIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldCustomerName, vs...))
}

// CustomerNameNotIn applies the NotIn predicate on the "customerName" field.
func CustomerNameNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldCustomerName, vs...))
}

// CustomerNameGT applies the GT predicate on the "customerName" field.
func CustomerNameGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldCustomerName, v))
}

// CustomerNameGTE applies the GTE predicate on the "customerName" field.
func CustomerNameGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldCustomerName, v))
}

// CustomerNameLT applies the LT predicate on the "customerName" field.
func CustomerNameLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldCustomerName, v))
}

// CustomerNameLTE applies the LTE predicate on the "customerName" field.
func CustomerNameLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldCustomerName, v))
}

// CustomerNameContains applies the Contains predicate on the "customerName" field.
func CustomerNameContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldCustomerName, v))
}

// CustomerNameHasPrefix applies the HasPrefix predicate on the "customerName" field.
func CustomerNameHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldCustomerName, v))
}

// CustomerNameHasSuffix applies the HasSuffix predicate on the "customerName" field.
func CustomerNameHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldCustomerName, v))
}

// CustomerNameIsNil applies the IsNil predicate on the "customerName" field.
func CustomerNameIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldCustomerName))
}

// CustomerNameNotNil applies the NotNil predicate on the "customerName" field.
func CustomerNameNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldCustomerName))
}

// CustomerNameEqualFold applies the EqualFold predicate on the "customerName" field.
func CustomerNameEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldCustomerName, v))
}

// CustomerNameContainsFold applies the ContainsFold predicate on the "customerName" field.
func CustomerNameContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldCustomerName, v))
}

// CustomerTaxIDEQ applies the EQ predicate on the "customerTaxID" field.
func CustomerTaxIDEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCustomerTaxID, v))
}

// CustomerTaxIDNEQ applies the NEQ predicate on the "customerTaxID" field.
func CustomerTaxIDNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldCustomerTaxID, v))
}

// CustomerTaxIDIn applies the In predicate on the "customerTaxID" field.
func CustomerTaxIDIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldCustomerTaxID, vs...))
}

// CustomerTaxIDNotIn applies the NotIn predicate on the "customerTaxID" field.
func CustomerTaxIDNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldCustomerTaxID, vs...))
}

// CustomerTaxIDGT applies the GT predicate on the "customerTaxID" field.
func CustomerTaxIDGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldCustomerTaxID, v))
}

// CustomerTaxIDGTE applies the GTE predicate on the "customerTaxID" field.
func CustomerTaxIDGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldCustomerTaxID, v))
}

// CustomerTaxIDLT applies the LT predicate on the "customerTaxID" field.
func CustomerTaxIDLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldCustomerTaxID, v))
}

// CustomerTaxIDLTE applies the LTE predicate on the "customerTaxID" field.
func CustomerTaxIDLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldCustomerTaxID, v))
}

// CustomerTaxIDContains applies the Contains predicate on the "customerTaxID" field.
func CustomerTaxIDContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldCustomerTaxID, v))
}

// CustomerTaxIDHasPrefix applies the HasPrefix predicate on the "customerTaxID" field.
func CustomerTaxIDHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldCustomerTaxID, v))
}

// CustomerTaxIDHasSuffix applies the HasSuffix predicate on the "customerTaxID" field.
func CustomerTaxIDHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldCustomerTaxID, v))
}

// CustomerTaxIDIsNil applies the IsNil predicate on the "customerTaxID" field.
func CustomerTaxIDIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldCustomerTaxID))
}

// CustomerTaxIDNotNil applies the NotNil predicate on the "customerTaxID" field.
func CustomerTaxIDNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldCustomerTaxID))
}

// CustomerTaxIDEqualFold applies the EqualFold predicate on the "customerTaxID" field.
func CustomerTaxIDEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldCustomerTaxID, v))
}

// CustomerTaxIDContainsFold applies the ContainsFold predicate on the "customerTaxID" field.
func CustomerTaxIDContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldCustomerTaxID, v))
}

// CustomerAddressEQ applies the EQ predicate on the "customerAddress" field.
func CustomerAddressEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCustomerAddress, v))
}

// CustomerAddressNEQ applies the NEQ predicate on the "customerAddress" field.
func CustomerAddressNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldCustomerAddress, v))
}

// CustomerAddressIn applies the In predicate on the "customerAddress" field.
func CustomerAddressIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldCustomerAddress, vs...))
}

// CustomerAddressNotIn applies the NotIn predicate on the "customerAddress" field.
func CustomerAddressNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldCustomerAddress, vs...))
}

// CustomerAddressGT applies the GT predicate on the "customerAddress" field.
func CustomerAddressGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldCustomerAddress, v))
}

// CustomerAddressGTE applies the GTE predicate on the "customerAddress" field.
func CustomerAddressGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldCustomerAddress, v))
}

// CustomerAddressLT applies the LT predicate on the "customerAddress" field.
func CustomerAddressLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldCustomerAddress, v))
}

// CustomerAddressLTE applies the LTE predicate on the "customerAddress" field.
func CustomerAddressLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldCustomerAddress, v))
}

// CustomerAddressContains applies the Contains predicate on the "customerAddress" field.
func CustomerAddressContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldCustomerAddress, v))
}

// CustomerAddressHasPrefix applies the HasPrefix predicate on the "customerAddress" field.
func CustomerAddressHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldCustomerAddress, v))
}

// CustomerAddressHasSuffix applies the HasSuffix predicate on the "customerAddress" field.
func CustomerAddressHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldCustomerAddress, v))
}

// CustomerAddressIsNil applies the IsNil predicate on the "customerAddress" field.
func CustomerAddressIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldCustomerAddress))
}

// CustomerAddressNotNil applies the NotNil predicate on the "customerAddress" field.
func CustomerAddressNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldCustomerAddress))
}

// CustomerAddressEqualFold applies the EqualFold predicate on the "customerAddress" field.
func CustomerAddressEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldCustomerAddress, v))
}

// CustomerAddressContainsFold applies the ContainsFold predicate on the "customerAddress" field.
func CustomerAddressContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldCustomerAddress, v))
}

// CustomerCityEQ applies the EQ predicate on the "customerCity" field.
func CustomerCityEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCustomerCity, v))
}

// CustomerCityNEQ applies the NEQ predicate on the "customerCity" field.
func CustomerCityNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldCustomerCity, v))
}

// CustomerCityIn applies the In predicate on the "customerCity" field.
func CustomerCityIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldCustomerCity, vs...))
}

// CustomerCityNotIn applies the NotIn predicate on the "customerCity" field.
func CustomerCityNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldCustomerCity, vs...))
}

// CustomerCityGT applies the GT predicate on the "customerCity" field.
func CustomerCityGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldCustomerCity, v))
}

// CustomerCityGTE applies the GTE predicate on the "customerCity" field.
func CustomerCityGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldCustomerCity, v))
}

// CustomerCityLT applies the LT predicate on the "customerCity" field.
func CustomerCityLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldCustomerCity, v))
}

// CustomerCityLTE applies the LTE predicate on the "customerCity" field.
func CustomerCityLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldCustomerCity, v))
}

// CustomerCityContains applies the Contains predicate on the "customerCity" field.
func CustomerCityContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldCustomerCity, v))
}

// CustomerCityHasPrefix applies the HasPrefix predicate on the "customerCity" field.
func CustomerCityHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldCustomerCity, v))
}

// CustomerCityHasSuffix applies the HasSuffix predicate on the "customerCity" field.
func CustomerCityHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldCustomerCity, v))
}

// CustomerCityIsNil applies the IsNil predicate on the "customerCity" field.
func CustomerCityIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldCustomerCity))
}

// CustomerCityNotNil applies the NotNil predicate on the "customerCity" field.
func CustomerCityNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldCustomerCity))
}

// CustomerCityEqualFold applies the EqualFold predicate on the "customerCity" field.
func CustomerCityEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldCustomerCity, v))
}

// CustomerCityContainsFold applies the ContainsFold predicate on the "customerCity" field.
func CustomerCityContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldCustomerCity, v))
}

// CustomerEmailEQ applies the EQ predicate on the "customerEmail" field.
func CustomerEmailEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCustomerEmail, v))
}

// CustomerEmailNEQ applies the NEQ predicate on the "customerEmail" field.
func CustomerEmailNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldCustomerEmail, v))
}

// CustomerEmailIn applies the In predicate on the "customerEmail" field.
func CustomerEmailIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldCustomerEmail, vs...))
}

// CustomerEmailNotIn applies the NotIn predicate on the "customerEmail" field.
func CustomerEmailNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldCustomerEmail, vs...))
}

// CustomerEmailGT applies the GT predicate on the "customerEmail" field.
func CustomerEmailGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldCustomerEmail, v))
}

// CustomerEmailGTE applies the GTE predicate on the "customerEmail" field.
func CustomerEmailGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldCustomerEmail, v))
}

// CustomerEmailLT applies the LT predicate on the "customerEmail" field.
func CustomerEmailLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldCustomerEmail, v))
}

// CustomerEmailLTE applies the LTE predicate on the "customerEmail" field.
func CustomerEmailLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldCustomerEmail, v))
}

// CustomerEmailContains applies the Contains predicate on the "customerEmail" field.
func CustomerEmailContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldCustomerEmail, v))
}

// CustomerEmailHasPrefix applies the HasPrefix predicate on the "customerEmail" field.
func CustomerEmailHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldCustomerEmail, v))
}

// CustomerEmailHasSuffix applies the HasSuffix predicate on the "customerEmail" field.
func CustomerEmailHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldCustomerEmail, v))
}

// CustomerEmailIsNil applies the IsNil predicate on the "customerEmail" field.
func CustomerEmailIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldCustomerEmail))
}

// CustomerEmailNotNil applies the NotNil predicate on the "customerEmail" field.
func CustomerEmailNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldCustomerEmail))
}

// CustomerEmailEqualFold applies the EqualFold predicate on the "customerEmail" field.
func CustomerEmailEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldCustomerEmail, v))
}

// CustomerEmailContainsFold applies the ContainsFold predicate on the "customerEmail" field.
func CustomerEmailContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldCustomerEmail, v))
}

// CustomerPhoneEQ applies the EQ predicate on the "customerPhone" field.
func CustomerPhoneEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCustomerPhone, v))
}

// CustomerPhoneNEQ applies the NEQ predicate on the "customerPhone" field.
func CustomerPhoneNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldCustomerPhone, v))
}

// CustomerPhoneIn applies the In predicate on the "customerPhone" field.
func CustomerPhoneIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldCustomerPhone, vs...))
}

// CustomerPhoneNotIn applies the NotIn predicate on the "customerPhone" field.
func CustomerPhoneNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldCustomerPhone, vs...))
}

// CustomerPhoneGT applies the GT predicate on the "customerPhone" field.
func CustomerPhoneGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldCustomerPhone, v))
}

// CustomerPhoneGTE applies the GTE predicate on the "customerPhone" field.
func CustomerPhoneGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldCustomerPhone, v))
}

// CustomerPhoneLT applies the LT predicate on the "customerPhone" field.
func CustomerPhoneLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldCustomerPhone, v))
}

// CustomerPhoneLTE applies the LTE predicate on the "customerPhone" field.
func CustomerPhoneLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldCustomerPhone, v))
}

// CustomerPhoneContains applies the Contains predicate on the "customerPhone" field.
func CustomerPhoneContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldCustomerPhone, v))
}

// CustomerPhoneHasPrefix applies the HasPrefix predicate on the "customerPhone" field.
func CustomerPhoneHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldCustomerPhone, v))
}

// CustomerPhoneHasSuffix applies the HasSuffix predicate on the "customerPhone" field.
func CustomerPhoneHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldCustomerPhone, v))
}

// CustomerPhoneIsNil applies the IsNil predicate on the "customerPhone" field.
func CustomerPhoneIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldCustomerPhone))
}

// CustomerPhoneNotNil applies the NotNil predicate on the "customerPhone" field.
func CustomerPhoneNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldCustomerPhone))
}

// CustomerPhoneEqualFold applies the EqualFold predicate on the "customerPhone" field.
func CustomerPhoneEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldCustomerPhone, v))
}

// CustomerPhoneContainsFold applies the ContainsFold predicate on the "customerPhone" field.
func CustomerPhoneContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldCustomerPhone, v))
}

// ItemsEQ applies the EQ predicate on the "items" field.
func ItemsEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldItems, v))
}

// ItemsNEQ applies the NEQ predicate on the "items" field.
func ItemsNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldItems, v))
}

// ItemsIn applies the In predicate on the "items" field.
func ItemsIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldItems, vs...))
}

// ItemsNotIn applies the NotIn predicate on the "items" field.
func ItemsNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldItems, vs...))
}

// ItemsGT applies the GT predicate on the "items" field.
func ItemsGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldItems, v))
}

// ItemsGTE applies the GTE predicate on the "items" field.
func ItemsGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldItems, v))
}

// ItemsLT applies the LT predicate on the "items" field.
func ItemsLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldItems, v))
}

// ItemsLTE applies the LTE predicate on the "items" field.
func ItemsLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldItems, v))
}

// ItemsContains applies the Contains predicate on the "items" field.
func ItemsContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldItems, v))
}

// ItemsHasPrefix applies the HasPrefix predicate on the "items" field.
func ItemsHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldItems, v))
}

// ItemsHasSuffix applies the HasSuffix predicate on the "items" field.
func ItemsHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldItems, v))
}

// ItemsEqualFold applies the EqualFold predicate on the "items" field.
func ItemsEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldItems, v))
}

// ItemsContainsFold applies the ContainsFold predicate on the "items" field.
func ItemsContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldItems, v))
}

// SubtotalEQ applies the EQ predicate on the "subtotal" field.
func SubtotalEQ(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldSubtotal, v))
}

// SubtotalNEQ applies the NEQ predicate on the "subtotal" field.
func SubtotalNEQ(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldSubtotal, v))
}

// SubtotalIn applies the In predicate on the "subtotal" field.
func SubtotalIn(vs ...float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldSubtotal, vs...))
}

// SubtotalNotIn applies the NotIn predicate on the "subtotal" field.
func SubtotalNotIn(vs ...float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldSubtotal, vs...))
}

// SubtotalGT applies the GT predicate on the "subtotal" field.
func SubtotalGT(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldSubtotal, v))
}

// SubtotalGTE applies the GTE predicate on the "subtotal" field.
func SubtotalGTE(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldSubtotal, v))
}

// SubtotalLT applies the LT predicate on the "subtotal" field.
func SubtotalLT(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldSubtotal, v))
}

// SubtotalLTE applies the LTE predicate on the "subtotal" field.
func SubtotalLTE(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldSubtotal, v))
}

// TaxEQ applies the EQ predicate on the "tax" field.
func TaxEQ(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldTax, v))
}

// TaxNEQ applies the NEQ predicate on the "tax" field.
func TaxNEQ(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldTax, v))
}

// TaxIn applies the In predicate on the "tax" field.
func TaxIn(vs ...float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldTax, vs...))
}

// TaxNotIn applies the NotIn predicate on the "tax" field.
func TaxNotIn(vs ...float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldTax, vs...))
}

// TaxGT applies the GT predicate on the "tax" field.
func TaxGT(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldTax, v))
}

// TaxGTE applies the GTE predicate on the "tax" field.
func TaxGTE(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldTax, v))
}

// TaxLT applies the LT predicate on the "tax" field.
func TaxLT(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldTax, v))
}

// TaxLTE applies the LTE predicate on the "tax" field.
func TaxLTE(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldTax, v))
}

// TotalEQ applies the EQ predicate on the "total" field.
func TotalEQ(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldTotal, v))
}

// TotalNEQ applies the NEQ predicate on the "total" field.
func TotalNEQ(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldTotal, v))
}

// TotalIn applies the In predicate on the "total" field.
func TotalIn(vs ...float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldTotal, vs...))
}

// TotalNotIn applies the NotIn predicate on the "total" field.
func TotalNotIn(vs ...float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldTotal, vs...))
}

// TotalGT applies the GT predicate on the "total" field.
func TotalGT(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldTotal, v))
}

// TotalGTE applies the GTE predicate on the "total" field.
func TotalGTE(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldTotal, v))
}

// TotalLT applies the LT predicate on the "total" field.
func TotalLT(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldTotal, v))
}

// TotalLTE applies the LTE predicate on the "total" field.
func TotalLTE(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldTotal, v))
}

// NotesEQ applies the EQ predicate on the "notes" field.
func NotesEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldNotes, v))
}

// NotesNEQ applies the NEQ predicate on the "notes" field.
func NotesNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldNotes, v))
}

// NotesIn applies the In predicate on the "notes" field.
func NotesIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldNotes, vs...))
}

// NotesNotIn applies the NotIn predicate on the "notes" field.
func NotesNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldNotes, vs...))
}

// NotesGT applies the GT predicate on the "notes" field.
func NotesGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldNotes, v))
}

// NotesGTE applies the GTE predicate on the "notes" field.
func NotesGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldNotes, v))
}

// NotesLT applies the LT predicate on the "notes" field.
func NotesLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldNotes, v))
}

// NotesLTE applies the LTE predicate on the "notes" field.
func NotesLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldNotes, v))
}

// NotesContains applies the Contains predicate on the "notes" field.
func NotesContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldNotes, v))
}

// NotesHasPrefix applies the HasPrefix predicate on the "notes" field.
func NotesHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldNotes, v))
}

// NotesHasSuffix applies the HasSuffix predicate on the "notes" field.
func NotesHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldNotes, v))
}

// NotesIsNil applies the IsNil predicate on the "notes" field.
func NotesIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldNotes))
}

// NotesNotNil applies the NotNil predicate on the "notes" field.
func NotesNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldNotes))
}

// NotesEqualFold applies the EqualFold predicate on the "notes" field.
func NotesEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldNotes, v))
}

// NotesContainsFold applies the ContainsFold predicate on the "notes" field.
func NotesContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldNotes, v))
}

// PaymentMethodEQ applies the EQ predicate on the "paymentMethod" field.
func PaymentMethodEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldPaymentMethod, v))
}

// PaymentMethodNEQ applies the NEQ predicate on the "paymentMethod" field.
func PaymentMethodNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldPaymentMethod, v))
}

// PaymentMethodIn applies the In predicate on the "paymentMethod" field.
func PaymentMethodIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldPaymentMethod, vs...))
}

// PaymentMethodNotIn applies the NotIn predicate on the "paymentMethod" field.
func PaymentMethodNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldPaymentMethod, vs...))
}

// PaymentMethodGT applies the GT predicate on the "paymentMethod" field.
func PaymentMethodGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldPaymentMethod, v))
}

// PaymentMethodGTE applies the GTE predicate on the "paymentMethod" field.
func PaymentMethodGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldPaymentMethod, v))
}

// PaymentMethodLT applies the LT predicate on the "paymentMethod" field.
func PaymentMethodLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldPaymentMethod, v))
}

// PaymentMethodLTE applies the LTE predicate on the "paymentMethod" field.
func PaymentMethodLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldPaymentMethod, v))
}

// PaymentMethodContains applies the Contains predicate on the "paymentMethod" field.
func PaymentMethodContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldPaymentMethod, v))
}

// PaymentMethodHasPrefix applies the HasPrefix predicate on the "paymentMethod" field.
func PaymentMethodHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldPaymentMethod, v))
}

// PaymentMethodHasSuffix applies the HasSuffix predicate on the "paymentMethod" field.
func PaymentMethodHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldPaymentMethod, v))
}

// PaymentMethodIsNil applies the IsNil predicate on the "paymentMethod" field.
func PaymentMethodIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldPaymentMethod))
}

// PaymentMethodNotNil applies the NotNil predicate on the "paymentMethod" field.
func PaymentMethodNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldPaymentMethod))
}

// PaymentMethodEqualFold applies the EqualFold predicate on the "paymentMethod" field.
func PaymentMethodEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldPaymentMethod, v))
}

// PaymentMethodContainsFold applies the ContainsFold predicate on the "paymentMethod" field.
func PaymentMethodContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldPaymentMethod, v))
}

// BankNameEQ applies the EQ predicate on the "bankName" field.
func BankNameEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldBankName, v))
}

// BankNameNEQ applies the NEQ predicate on the "bankName" field.
func BankNameNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldBankName, v))
}

// BankNameIn applies the In predicate on the "bankName" field.
func BankNameIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldBankName, vs...))
}

// BankNameNotIn applies the NotIn predicate on the "bankName" field.
func BankNameNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldBankName, vs...))
}

// BankNameGT applies the GT predicate on the "bankName" field.
func BankNameGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldBankName, v))
}

// BankNameGTE applies the GTE predicate on the "bankName" field.
func BankNameGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldBankName, v))
}

// BankNameLT applies the LT predicate on the "bankName" field.
func BankNameLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldBankName, v))
}

// BankNameLTE applies the LTE predicate on the "bankName" field.
func BankNameLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldBankName, v))
}

// BankNameContains applies the Contains predicate on the "bankName" field.
func BankNameContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldBankName, v))
}

// BankNameHasPrefix applies the HasPrefix predicate on the "bankName" field.
func BankNameHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldBankName, v))
}

// BankNameHasSuffix applies the HasSuffix predicate on the "bankName" field.
func BankNameHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldBankName, v))
}

// BankNameIsNil applies the IsNil predicate on the "bankName" field.
func BankNameIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldBankName))
}

// BankNameNotNil applies the NotNil predicate on the "bankName" field.
func BankNameNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldBankName))
}

// BankNameEqualFold applies the EqualFold predicate on the "bankName" field.
func BankNameEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldBankName, v))
}

// BankNameContainsFold applies the ContainsFold predicate on the "bankName" field.
func BankNameContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldBankName, v))
}

// BankAgencyEQ applies the EQ predicate on the "bankAgency" field.
func BankAgencyEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldBankAgency, v))
}

// BankAgencyNEQ applies the NEQ predicate on the "bankAgency" field.
func BankAgencyNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldBankAgency, v))
}

// BankAgencyIn applies the In predicate on the "bankAgency" field.
func BankAgencyIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldBankAgency, vs...))
}

// BankAgencyNotIn applies the NotIn predicate on the "bankAgency" field.
func BankAgencyNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldBankAgency, vs...))
}

// BankAgencyGT applies the GT predicate on the "bankAgency" field.
func BankAgencyGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldBankAgency, v))
}

// BankAgencyGTE applies the GTE predicate on the "bankAgency" field.
func BankAgencyGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldBankAgency, v))
}

// BankAgencyLT applies the LT predicate on the "bankAgency" field.
func BankAgencyLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldBankAgency, v))
}

// BankAgencyLTE applies the LTE predicate on the "bankAgency" field.
func BankAgencyLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldBankAgency, v))
}

// BankAgencyContains applies the Contains predicate on the "bankAgency" field.
func BankAgencyContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldBankAgency, v))
}

// BankAgencyHasPrefix applies the HasPrefix predicate on the "bankAgency" field.
func BankAgencyHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldBankAgency, v))
}

// BankAgencyHasSuffix applies the HasSuffix predicate on the "bankAgency" field.
func BankAgencyHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldBankAgency, v))
}

// BankAgencyIsNil applies the IsNil predicate on the "bankAgency" field.
func BankAgencyIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldBankAgency))
}

// BankAgencyNotNil applies the NotNil predicate on the "bankAgency" field.
func BankAgencyNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldBankAgency))
}

// BankAgencyEqualFold applies the EqualFold predicate on the "bankAgency" field.
func BankAgencyEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldBankAgency, v))
}

// BankAgencyContainsFold applies the ContainsFold predicate on the "bankAgency" field.
func BankAgencyContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldBankAgency, v))
}

// BankAccountNumberEQ applies the EQ predicate on the "bankAccountNumber" field.
func BankAccountNumberEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldBankAccountNumber, v))
}

// BankAccountNumberNEQ applies the NEQ predicate on the "bankAccountNumber" field.
func BankAccountNumberNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldBankAccountNumber, v))
}

// BankAccountNumberIn applies the In predicate on the "bankAccountNumber" field.
func BankAccountNumberIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldBankAccountNumber, vs...))
}

// BankAccountNumberNotIn applies the NotIn predicate on the "bankAccountNumber" field.
func BankAccountNumberNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldBankAccountNumber, vs...))
}

// BankAccountNumberGT applies the GT predicate on the "bankAccountNumber" field.
func BankAccountNumberGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldBankAccountNumber, v))
}

// BankAccountNumberGTE applies the GTE predicate on the "bankAccountNumber" field.
func BankAccountNumberGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldBankAccountNumber, v))
}

// BankAccountNumberLT applies the LT predicate on the "bankAccountNumber" field.
func BankAccountNumberLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldBankAccountNumber, v))
}

// BankAccountNumberLTE applies the LTE predicate on the "bankAccountNumber" field.
func BankAccountNumberLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldBankAccountNumber, v))
}

// BankAccountNumberContains applies the Contains predicate on the "bankAccountNumber" field.
func BankAccountNumberContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldBankAccountNumber, v))
}

// BankAccountNumberHasPrefix applies the HasPrefix predicate on the "bankAccountNumber" field.
func BankAccountNumberHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldBankAccountNumber, v))
}

// BankAccountNumberHasSuffix applies the HasSuffix predicate on the "bankAccountNumber" field.
func BankAccountNumberHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldBankAccountNumber, v))
}

// BankAccountNumberIsNil applies the IsNil predicate on the "bankAccountNumber" field.
func BankAccountNumberIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldBankAccountNumber))
}

// BankAccountNumberNotNil applies the NotNil predicate on the "bankAccountNumber" field.
func BankAccountNumberNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldBankAccountNumber))
}

// BankAccountNumberEqualFold applies the EqualFold predicate on the "bankAccountNumber" field.
func BankAccountNumberEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldBankAccountNumber, v))
}

// BankAccountNumberContainsFold applies the ContainsFold predicate on the "bankAccountNumber" field.
func BankAccountNumberContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldBankAccountNumber, v))
}

// BankAccountNameEQ applies the EQ predicate on the "bankAccountName" field.
func BankAccountNameEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldBankAccountName, v))
}

// BankAccountNameNEQ applies the NEQ predicate on the "bankAccountName" field.
func BankAccountNameNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldBankAccountName, v))
}

// BankAccountNameIn applies the In predicate on the "bankAccountName" field.
func BankAccountNameIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldBankAccountName, vs...))
}

// BankAccountNameNotIn applies the NotIn predicate on the "bankAccountName" field.
func BankAccountNameNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldBankAccountName, vs...))
}

// BankAccountNameGT applies the GT predicate on the "bankAccountName" field.
func BankAccountNameGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldBankAccountName, v))
}

// BankAccountNameGTE applies the GTE predicate on the "bankAccountName" field.
func BankAccountNameGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldBankAccountName, v))
}

// BankAccountNameLT applies the LT predicate on the "bankAccountName" field.
func BankAccountNameLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldBankAccountName, v))
}

// BankAccountNameLTE applies the LTE predicate on the "bankAccountName" field.
func BankAccountNameLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldBankAccountName, v))
}

// BankAccountNameContains applies the Contains predicate on the "bankAccountName" field.
func BankAccountNameContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldBankAccountName, v))
}

// BankAccountNameHasPrefix applies the HasPrefix predicate on the "bankAccountName" field.
func BankAccountNameHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldBankAccountName, v))
}

// BankAccountNameHasSuffix applies the HasSuffix predicate on the "bankAccountName" field.
func BankAccountNameHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldBankAccountName, v))
}

// BankAccountNameIsNil applies the IsNil predicate on the "bankAccountName" field.
func BankAccountNameIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldBankAccountName))
}

// BankAccountNameNotNil applies the NotNil predicate on the "bankAccountName" field.
func BankAccountNameNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldBankAccountName))
}

// BankAccountNameEqualFold applies the EqualFold predicate on the "bankAccountName" field.
func BankAccountNameEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldBankAccountName, v))
}

// BankAccountNameContainsFold applies the ContainsFold predicate on the "bankAccountName" field.
func BankAccountNameContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldBankAccountName, v))
}

// StorageURIEQ applies the EQ predicate on the "storageURI" field.
func StorageURIEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldStorageURI, v))
}

// StorageURINEQ applies the NEQ predicate on the "storageURI" field.
func StorageURINEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldStorageURI, v))
}

// StorageURIIn applies the In predicate on the "storageURI" field.
func StorageURIIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldStorageURI, vs...))
}

// StorageURINotIn applies the NotIn predicate on the "storageURI" field.
func StorageURINotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldStorageURI, vs...))
}

// StorageURIGT applies the GT predicate on the "storageURI" field.
func StorageURIGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldStorageURI, v))
}

// StorageURIGTE applies the GTE predicate on the "storageURI" field.
func StorageURIGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldStorageURI, v))
}

// StorageURILT applies the LT predicate on the "storageURI" field.
func StorageURILT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldStorageURI, v))
}

// StorageURILTE applies the LTE predicate on the "storageURI" field.
func StorageURILTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldStorageURI, v))
}

// StorageURIContains applies the Contains predicate on the "storageURI" field.
func StorageURIContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldStorageURI, v))
}

// StorageURIHasPrefix applies the HasPrefix predicate on the "storageURI" field.
func StorageURIHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldStorageURI, v))
}

// StorageURIHasSuffix applies the HasSuffix predicate on the "storageURI" field.
func StorageURIHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldStorageURI, v))
}

// StorageURIIsNil applies the IsNil predicate on the "storageURI" field.
func StorageURIIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldStorageURI))
}

// StorageURINotNil applies the NotNil predicate on the "storageURI" field.
func StorageURINotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldStorageURI))
}

// StorageURIEqualFold applies the EqualFold predicate on the "storageURI" field.
func StorageURIEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldStorageURI, v))
}

// StorageURIContainsFold applies the ContainsFold predicate on the "storageURI" field.
func StorageURIContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldStorageURI, v))
}

// URLEQ applies the EQ predicate on the "URL" field.
func URLEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "URL" field.
func URLNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "URL" field.
func URLIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "URL" field.
func URLNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "URL" field.
func URLGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "URL" field.
func URLGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "URL" field.
func URLLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "URL" field.
func URLLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "URL" field.
func URLContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "URL" field.
func URLHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "URL" field.
func URLHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldURL, v))
}

// URLIsNil applies the IsNil predicate on the "URL" field.
func URLIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldURL))
}

// URLNotNil applies the NotNil predicate on the "URL" field.
func URLNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldURL))
}

// URLEqualFold applies the EqualFold predicate on the "URL" field.
func URLEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "URL" field.
func URLContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldURL, v))
}

// FilenameEQ applies the EQ predicate on the "filename" field.
func FilenameEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldFilename, v))
}

// FilenameNEQ applies the NEQ predicate on the "filename" field.
func FilenameNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldFilename, v))
}

// FilenameIn applies the In predicate on the "filename" field.
func FilenameIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldFilename, vs...))
}

// FilenameNotIn applies the NotIn predicate on the "filename" field.
func FilenameNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldFilename, vs...))
}

// FilenameGT applies the GT predicate on the "filename" field.
func FilenameGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldFilename, v))
}

// FilenameGTE applies the GTE predicate on the "filename" field.
func FilenameGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldFilename, v))
}

// FilenameLT applies the LT predicate on the "filename" field.
func FilenameLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldFilename, v))
}

// FilenameLTE applies the LTE predicate on the "filename" field.
func FilenameLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldFilename, v))
}

// FilenameContains applies the Contains predicate on the "filename" field.
func FilenameContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldFilename, v))
}

// FilenameHasPrefix applies the HasPrefix predicate on the "filename" field.
func FilenameHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldFilename, v))
}

// FilenameHasSuffix applies the HasSuffix predicate on the "filename" field.
func FilenameHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldFilename, v))
}

// FilenameIsNil applies the IsNil predicate on the "filename" field.
func FilenameIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldFilename))
}

// FilenameNotNil applies the NotNil predicate on the "filename" field.
func FilenameNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldFilename))
}

// FilenameEqualFold applies the EqualFold predicate on the "filename" field.
func FilenameEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldFilename, v))
}

// FilenameContainsFold applies the ContainsFold predicate on the "filename" field.
func FilenameContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldFilename, v))
}

// SizeEQ applies the EQ predicate on the "size" field.
func SizeEQ(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldSize, v))
}

// SizeNEQ applies the NEQ predicate on the "size" field.
func SizeNEQ(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldSize, v))
}

// SizeIn applies the In predicate on the "size" field.
func SizeIn(vs ...float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldSize, vs...))
}

// SizeNotIn applies the NotIn predicate on the "size" field.
func SizeNotIn(vs ...float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldSize, vs...))
}

// SizeGT applies the GT predicate on the "size" field.
func SizeGT(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldSize, v))
}

// SizeGTE applies the GTE predicate on the "size" field.
func SizeGTE(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldSize, v))
}

// SizeLT applies the LT predicate on the "size" field.
func SizeLT(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldSize, v))
}

// SizeLTE applies the LTE predicate on the "size" field.
func SizeLTE(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldSize, v))
}

// SizeIsNil applies the IsNil predicate on the "size" field.
func SizeIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldSize))
}

// SizeNotNil applies the NotNil predicate on the "size" field.
func SizeNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldSize))
}

// KeywordsEQ applies the EQ predicate on the "keywords" field.
func KeywordsEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldKeywords, v))
}

// KeywordsNEQ applies the NEQ predicate on the "keywords" field.
func KeywordsNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldKeywords, v))
}

// KeywordsIn applies the In predicate on the "keywords" field.
func KeywordsIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldKeywords, vs...))
}

// KeywordsNotIn applies the NotIn predicate on the "keywords" field.
func KeywordsNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldKeywords, vs...))
}

// KeywordsGT applies the GT predicate on the "keywords" field.
func KeywordsGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldKeywords, v))
}

// KeywordsGTE applies the GTE predicate on the "keywords" field.
func KeywordsGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldKeywords, v))
}

// KeywordsLT applies the LT predicate on the "keywords" field.
func KeywordsLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldKeywords, v))
}

// KeywordsLTE applies the LTE predicate on the "keywords" field.
func KeywordsLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldKeywords, v))
}

// KeywordsContains applies the Contains predicate on the "keywords" field.
func KeywordsContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldKeywords, v))
}

// KeywordsHasPrefix applies the HasPrefix predicate on the "keywords" field.
func KeywordsHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldKeywords, v))
}

// KeywordsHasSuffix applies the HasSuffix predicate on the "keywords" field.
func KeywordsHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldKeywords, v))
}

// KeywordsEqualFold applies the EqualFold predicate on the "keywords" field.
func KeywordsEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldKeywords, v))
}

// KeywordsContainsFold applies the ContainsFold predicate on the "keywords" field.
func KeywordsContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldKeywords, v))
}

// HasCompany applies the HasEdge predicate on the "company" edge.
func HasCompany() predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompanyWith applies the HasEdge predicate on the "company" edge with a given conditions (other predicates).
func HasCompanyWith(preds ...predicate.Company) predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := newCompanyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIssuedBy applies the HasEdge predicate on the "issuedBy" edge.
func HasIssuedBy() predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, IssuedByTable, IssuedByColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIssuedByWith applies the HasEdge predicate on the "issuedBy" edge with a given conditions (other predicates).
func HasIssuedByWith(preds ...predicate.User) predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := newIssuedByStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClient applies the HasEdge predicate on the "client" edge.
func HasClient() predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClientTable, ClientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClientWith applies the HasEdge predicate on the "client" edge with a given conditions (other predicates).
func HasClientWith(preds ...predicate.Customer) predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := newClientStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Invoice) predicate.Invoice {
	return predicate.Invoice(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Invoice) predicate.Invoice {
	return predicate.Invoice(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Invoice) predicate.Invoice {
	return predicate.Invoice(sql.NotPredicates(p))
}
