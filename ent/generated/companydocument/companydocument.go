// Code generated by ent, DO NOT EDIT.

package companydocument

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the companydocument type in the database.
	Label = "company_document"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deletedat field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldFilename holds the string denoting the filename field in the database.
	FieldFilename = "filename"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldKeywords holds the string denoting the keywords field in the database.
	FieldKeywords = "keywords"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// FieldFileType holds the string denoting the filetype field in the database.
	FieldFileType = "file_type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldStorageURI holds the string denoting the storageuri field in the database.
	FieldStorageURI = "storage_uri"
	// FieldThumbnail holds the string denoting the thumbnail field in the database.
	FieldThumbnail = "thumbnail"
	// FieldExpiryDate holds the string denoting the expirydate field in the database.
	FieldExpiryDate = "expiry_date"
	// EdgeCompany holds the string denoting the company edge name in mutations.
	EdgeCompany = "company"
	// EdgeUploadedBy holds the string denoting the uploadedby edge name in mutations.
	EdgeUploadedBy = "uploadedBy"
	// EdgeApprovedBy holds the string denoting the approvedby edge name in mutations.
	EdgeApprovedBy = "approvedBy"
	// Table holds the table name of the companydocument in the database.
	Table = "company_documents"
	// CompanyTable is the table that holds the company relation/edge.
	CompanyTable = "company_documents"
	// CompanyInverseTable is the table name for the Company entity.
	// It exists in this package in order to avoid circular dependency with the "company" package.
	CompanyInverseTable = "companies"
	// CompanyColumn is the table column denoting the company relation/edge.
	CompanyColumn = "company_documents"
	// UploadedByTable is the table that holds the uploadedBy relation/edge.
	UploadedByTable = "company_documents"
	// UploadedByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UploadedByInverseTable = "users"
	// UploadedByColumn is the table column denoting the uploadedBy relation/edge.
	UploadedByColumn = "user_uploaded_documents"
	// ApprovedByTable is the table that holds the approvedBy relation/edge.
	ApprovedByTable = "company_documents"
	// ApprovedByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ApprovedByInverseTable = "users"
	// ApprovedByColumn is the table column denoting the approvedBy relation/edge.
	ApprovedByColumn = "user_approved_documents"
)

// Columns holds all SQL columns for companydocument fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldFilename,
	FieldTitle,
	FieldKeywords,
	FieldCategory,
	FieldSize,
	FieldFileType,
	FieldStatus,
	FieldURL,
	FieldStorageURI,
	FieldThumbnail,
	FieldExpiryDate,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "company_documents"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"company_documents",
	"user_uploaded_documents",
	"user_approved_documents",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
	// FilenameValidator is a validator for the "filename" field. It is called by the builders before save.
	FilenameValidator func(string) error
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// KeywordsValidator is a validator for the "keywords" field. It is called by the builders before save.
	KeywordsValidator func(string) error
	// SizeValidator is a validator for the "size" field. It is called by the builders before save.
	SizeValidator func(int) error
	// URLValidator is a validator for the "url" field. It is called by the builders before save.
	URLValidator func(string) error
	// StorageURIValidator is a validator for the "storageURI" field. It is called by the builders before save.
	StorageURIValidator func(string) error
)

// Category defines the type for the "category" enum field.
type Category string

// Category values.
const (
	CategoryLEGAL    Category = "LEGAL"
	CategoryCONTRACT Category = "CONTRACT"
	CategoryLICENSE  Category = "LICENSE"
	CategoryTAX      Category = "TAX"
	CategoryHR       Category = "HR"
)

func (c Category) String() string {
	return string(c)
}

// CategoryValidator is a validator for the "category" field enum values. It is called by the builders before save.
func CategoryValidator(c Category) error {
	switch c {
	case CategoryLEGAL, CategoryCONTRACT, CategoryLICENSE, CategoryTAX, CategoryHR:
		return nil
	default:
		return fmt.Errorf("companydocument: invalid enum value for category field: %q", c)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusPENDING  Status = "PENDING"
	StatusAPPROVED Status = "APPROVED"
	StatusREJECTED Status = "REJECTED"
	StatusEXPIRED  Status = "EXPIRED"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPENDING, StatusAPPROVED, StatusREJECTED, StatusEXPIRED:
		return nil
	default:
		return fmt.Errorf("companydocument: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the CompanyDocument queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deletedAt field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByFilename orders the results by the filename field.
func ByFilename(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFilename, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByKeywords orders the results by the keywords field.
func ByKeywords(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKeywords, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// BySize orders the results by the size field.
func BySize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSize, opts...).ToFunc()
}

// ByFileType orders the results by the fileType field.
func ByFileType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileType, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByStorageURI orders the results by the storageURI field.
func ByStorageURI(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStorageURI, opts...).ToFunc()
}

// ByThumbnail orders the results by the thumbnail field.
func ByThumbnail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldThumbnail, opts...).ToFunc()
}

// ByExpiryDate orders the results by the expiryDate field.
func ByExpiryDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiryDate, opts...).ToFunc()
}

// ByCompanyField orders the results by company field.
func ByCompanyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompanyStep(), sql.OrderByField(field, opts...))
	}
}

// ByUploadedByField orders the results by uploadedBy field.
func ByUploadedByField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUploadedByStep(), sql.OrderByField(field, opts...))
	}
}

// ByApprovedByField orders the results by approvedBy field.
func ByApprovedByField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApprovedByStep(), sql.OrderByField(field, opts...))
	}
}
func newCompanyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompanyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
	)
}
func newUploadedByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UploadedByInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UploadedByTable, UploadedByColumn),
	)
}
func newApprovedByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApprovedByInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ApprovedByTable, ApprovedByColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Category) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Category) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Category(str)
	if err := CategoryValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Category", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}
