// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"mazza/ent/generated/company"
	"mazza/ent/generated/inventory"
	"mazza/ent/generated/inventorymovement"
	"mazza/ent/generated/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InventoryMovementUpdate is the builder for updating InventoryMovement entities.
type InventoryMovementUpdate struct {
	config
	hooks     []Hook
	mutation  *InventoryMovementMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the InventoryMovementUpdate builder.
func (imu *InventoryMovementUpdate) Where(ps ...predicate.InventoryMovement) *InventoryMovementUpdate {
	imu.mutation.Where(ps...)
	return imu
}

// SetUpdatedAt sets the "updatedAt" field.
func (imu *InventoryMovementUpdate) SetUpdatedAt(t time.Time) *InventoryMovementUpdate {
	imu.mutation.SetUpdatedAt(t)
	return imu
}

// SetDeletedAt sets the "deletedAt" field.
func (imu *InventoryMovementUpdate) SetDeletedAt(t time.Time) *InventoryMovementUpdate {
	imu.mutation.SetDeletedAt(t)
	return imu
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (imu *InventoryMovementUpdate) SetNillableDeletedAt(t *time.Time) *InventoryMovementUpdate {
	if t != nil {
		imu.SetDeletedAt(*t)
	}
	return imu
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (imu *InventoryMovementUpdate) ClearDeletedAt() *InventoryMovementUpdate {
	imu.mutation.ClearDeletedAt()
	return imu
}

// SetCategory sets the "category" field.
func (imu *InventoryMovementUpdate) SetCategory(i inventorymovement.Category) *InventoryMovementUpdate {
	imu.mutation.SetCategory(i)
	return imu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (imu *InventoryMovementUpdate) SetNillableCategory(i *inventorymovement.Category) *InventoryMovementUpdate {
	if i != nil {
		imu.SetCategory(*i)
	}
	return imu
}

// SetQuantity sets the "quantity" field.
func (imu *InventoryMovementUpdate) SetQuantity(f float64) *InventoryMovementUpdate {
	imu.mutation.ResetQuantity()
	imu.mutation.SetQuantity(f)
	return imu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (imu *InventoryMovementUpdate) SetNillableQuantity(f *float64) *InventoryMovementUpdate {
	if f != nil {
		imu.SetQuantity(*f)
	}
	return imu
}

// AddQuantity adds f to the "quantity" field.
func (imu *InventoryMovementUpdate) AddQuantity(f float64) *InventoryMovementUpdate {
	imu.mutation.AddQuantity(f)
	return imu
}

// SetValue sets the "value" field.
func (imu *InventoryMovementUpdate) SetValue(f float64) *InventoryMovementUpdate {
	imu.mutation.ResetValue()
	imu.mutation.SetValue(f)
	return imu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (imu *InventoryMovementUpdate) SetNillableValue(f *float64) *InventoryMovementUpdate {
	if f != nil {
		imu.SetValue(*f)
	}
	return imu
}

// AddValue adds f to the "value" field.
func (imu *InventoryMovementUpdate) AddValue(f float64) *InventoryMovementUpdate {
	imu.mutation.AddValue(f)
	return imu
}

// SetDate sets the "date" field.
func (imu *InventoryMovementUpdate) SetDate(t time.Time) *InventoryMovementUpdate {
	imu.mutation.SetDate(t)
	return imu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (imu *InventoryMovementUpdate) SetNillableDate(t *time.Time) *InventoryMovementUpdate {
	if t != nil {
		imu.SetDate(*t)
	}
	return imu
}

// SetSource sets the "source" field.
func (imu *InventoryMovementUpdate) SetSource(s string) *InventoryMovementUpdate {
	imu.mutation.SetSource(s)
	return imu
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (imu *InventoryMovementUpdate) SetNillableSource(s *string) *InventoryMovementUpdate {
	if s != nil {
		imu.SetSource(*s)
	}
	return imu
}

// ClearSource clears the value of the "source" field.
func (imu *InventoryMovementUpdate) ClearSource() *InventoryMovementUpdate {
	imu.mutation.ClearSource()
	return imu
}

// SetDestination sets the "destination" field.
func (imu *InventoryMovementUpdate) SetDestination(s string) *InventoryMovementUpdate {
	imu.mutation.SetDestination(s)
	return imu
}

// SetNillableDestination sets the "destination" field if the given value is not nil.
func (imu *InventoryMovementUpdate) SetNillableDestination(s *string) *InventoryMovementUpdate {
	if s != nil {
		imu.SetDestination(*s)
	}
	return imu
}

// ClearDestination clears the value of the "destination" field.
func (imu *InventoryMovementUpdate) ClearDestination() *InventoryMovementUpdate {
	imu.mutation.ClearDestination()
	return imu
}

// SetNotes sets the "notes" field.
func (imu *InventoryMovementUpdate) SetNotes(s string) *InventoryMovementUpdate {
	imu.mutation.SetNotes(s)
	return imu
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (imu *InventoryMovementUpdate) SetNillableNotes(s *string) *InventoryMovementUpdate {
	if s != nil {
		imu.SetNotes(*s)
	}
	return imu
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (imu *InventoryMovementUpdate) SetCompanyID(id int) *InventoryMovementUpdate {
	imu.mutation.SetCompanyID(id)
	return imu
}

// SetCompany sets the "company" edge to the Company entity.
func (imu *InventoryMovementUpdate) SetCompany(c *Company) *InventoryMovementUpdate {
	return imu.SetCompanyID(c.ID)
}

// SetInventoryID sets the "inventory" edge to the Inventory entity by ID.
func (imu *InventoryMovementUpdate) SetInventoryID(id int) *InventoryMovementUpdate {
	imu.mutation.SetInventoryID(id)
	return imu
}

// SetInventory sets the "inventory" edge to the Inventory entity.
func (imu *InventoryMovementUpdate) SetInventory(i *Inventory) *InventoryMovementUpdate {
	return imu.SetInventoryID(i.ID)
}

// Mutation returns the InventoryMovementMutation object of the builder.
func (imu *InventoryMovementUpdate) Mutation() *InventoryMovementMutation {
	return imu.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (imu *InventoryMovementUpdate) ClearCompany() *InventoryMovementUpdate {
	imu.mutation.ClearCompany()
	return imu
}

// ClearInventory clears the "inventory" edge to the Inventory entity.
func (imu *InventoryMovementUpdate) ClearInventory() *InventoryMovementUpdate {
	imu.mutation.ClearInventory()
	return imu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (imu *InventoryMovementUpdate) Save(ctx context.Context) (int, error) {
	imu.defaults()
	return withHooks(ctx, imu.sqlSave, imu.mutation, imu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (imu *InventoryMovementUpdate) SaveX(ctx context.Context) int {
	affected, err := imu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (imu *InventoryMovementUpdate) Exec(ctx context.Context) error {
	_, err := imu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (imu *InventoryMovementUpdate) ExecX(ctx context.Context) {
	if err := imu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (imu *InventoryMovementUpdate) defaults() {
	if _, ok := imu.mutation.UpdatedAt(); !ok {
		v := inventorymovement.UpdateDefaultUpdatedAt()
		imu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (imu *InventoryMovementUpdate) check() error {
	if v, ok := imu.mutation.Category(); ok {
		if err := inventorymovement.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`generated: validator failed for field "InventoryMovement.category": %w`, err)}
		}
	}
	if imu.mutation.CompanyCleared() && len(imu.mutation.CompanyIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "InventoryMovement.company"`)
	}
	if imu.mutation.InventoryCleared() && len(imu.mutation.InventoryIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "InventoryMovement.inventory"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (imu *InventoryMovementUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InventoryMovementUpdate {
	imu.modifiers = append(imu.modifiers, modifiers...)
	return imu
}

func (imu *InventoryMovementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := imu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(inventorymovement.Table, inventorymovement.Columns, sqlgraph.NewFieldSpec(inventorymovement.FieldID, field.TypeInt))
	if ps := imu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := imu.mutation.UpdatedAt(); ok {
		_spec.SetField(inventorymovement.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := imu.mutation.DeletedAt(); ok {
		_spec.SetField(inventorymovement.FieldDeletedAt, field.TypeTime, value)
	}
	if imu.mutation.DeletedAtCleared() {
		_spec.ClearField(inventorymovement.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := imu.mutation.Category(); ok {
		_spec.SetField(inventorymovement.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := imu.mutation.Quantity(); ok {
		_spec.SetField(inventorymovement.FieldQuantity, field.TypeFloat64, value)
	}
	if value, ok := imu.mutation.AddedQuantity(); ok {
		_spec.AddField(inventorymovement.FieldQuantity, field.TypeFloat64, value)
	}
	if value, ok := imu.mutation.Value(); ok {
		_spec.SetField(inventorymovement.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := imu.mutation.AddedValue(); ok {
		_spec.AddField(inventorymovement.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := imu.mutation.Date(); ok {
		_spec.SetField(inventorymovement.FieldDate, field.TypeTime, value)
	}
	if value, ok := imu.mutation.Source(); ok {
		_spec.SetField(inventorymovement.FieldSource, field.TypeString, value)
	}
	if imu.mutation.SourceCleared() {
		_spec.ClearField(inventorymovement.FieldSource, field.TypeString)
	}
	if value, ok := imu.mutation.Destination(); ok {
		_spec.SetField(inventorymovement.FieldDestination, field.TypeString, value)
	}
	if imu.mutation.DestinationCleared() {
		_spec.ClearField(inventorymovement.FieldDestination, field.TypeString)
	}
	if value, ok := imu.mutation.Notes(); ok {
		_spec.SetField(inventorymovement.FieldNotes, field.TypeString, value)
	}
	if imu.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventorymovement.CompanyTable,
			Columns: []string{inventorymovement.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := imu.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventorymovement.CompanyTable,
			Columns: []string{inventorymovement.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if imu.mutation.InventoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventorymovement.InventoryTable,
			Columns: []string{inventorymovement.InventoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := imu.mutation.InventoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventorymovement.InventoryTable,
			Columns: []string{inventorymovement.InventoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(imu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, imu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inventorymovement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	imu.mutation.done = true
	return n, nil
}

// InventoryMovementUpdateOne is the builder for updating a single InventoryMovement entity.
type InventoryMovementUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *InventoryMovementMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updatedAt" field.
func (imuo *InventoryMovementUpdateOne) SetUpdatedAt(t time.Time) *InventoryMovementUpdateOne {
	imuo.mutation.SetUpdatedAt(t)
	return imuo
}

// SetDeletedAt sets the "deletedAt" field.
func (imuo *InventoryMovementUpdateOne) SetDeletedAt(t time.Time) *InventoryMovementUpdateOne {
	imuo.mutation.SetDeletedAt(t)
	return imuo
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (imuo *InventoryMovementUpdateOne) SetNillableDeletedAt(t *time.Time) *InventoryMovementUpdateOne {
	if t != nil {
		imuo.SetDeletedAt(*t)
	}
	return imuo
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (imuo *InventoryMovementUpdateOne) ClearDeletedAt() *InventoryMovementUpdateOne {
	imuo.mutation.ClearDeletedAt()
	return imuo
}

// SetCategory sets the "category" field.
func (imuo *InventoryMovementUpdateOne) SetCategory(i inventorymovement.Category) *InventoryMovementUpdateOne {
	imuo.mutation.SetCategory(i)
	return imuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (imuo *InventoryMovementUpdateOne) SetNillableCategory(i *inventorymovement.Category) *InventoryMovementUpdateOne {
	if i != nil {
		imuo.SetCategory(*i)
	}
	return imuo
}

// SetQuantity sets the "quantity" field.
func (imuo *InventoryMovementUpdateOne) SetQuantity(f float64) *InventoryMovementUpdateOne {
	imuo.mutation.ResetQuantity()
	imuo.mutation.SetQuantity(f)
	return imuo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (imuo *InventoryMovementUpdateOne) SetNillableQuantity(f *float64) *InventoryMovementUpdateOne {
	if f != nil {
		imuo.SetQuantity(*f)
	}
	return imuo
}

// AddQuantity adds f to the "quantity" field.
func (imuo *InventoryMovementUpdateOne) AddQuantity(f float64) *InventoryMovementUpdateOne {
	imuo.mutation.AddQuantity(f)
	return imuo
}

// SetValue sets the "value" field.
func (imuo *InventoryMovementUpdateOne) SetValue(f float64) *InventoryMovementUpdateOne {
	imuo.mutation.ResetValue()
	imuo.mutation.SetValue(f)
	return imuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (imuo *InventoryMovementUpdateOne) SetNillableValue(f *float64) *InventoryMovementUpdateOne {
	if f != nil {
		imuo.SetValue(*f)
	}
	return imuo
}

// AddValue adds f to the "value" field.
func (imuo *InventoryMovementUpdateOne) AddValue(f float64) *InventoryMovementUpdateOne {
	imuo.mutation.AddValue(f)
	return imuo
}

// SetDate sets the "date" field.
func (imuo *InventoryMovementUpdateOne) SetDate(t time.Time) *InventoryMovementUpdateOne {
	imuo.mutation.SetDate(t)
	return imuo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (imuo *InventoryMovementUpdateOne) SetNillableDate(t *time.Time) *InventoryMovementUpdateOne {
	if t != nil {
		imuo.SetDate(*t)
	}
	return imuo
}

// SetSource sets the "source" field.
func (imuo *InventoryMovementUpdateOne) SetSource(s string) *InventoryMovementUpdateOne {
	imuo.mutation.SetSource(s)
	return imuo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (imuo *InventoryMovementUpdateOne) SetNillableSource(s *string) *InventoryMovementUpdateOne {
	if s != nil {
		imuo.SetSource(*s)
	}
	return imuo
}

// ClearSource clears the value of the "source" field.
func (imuo *InventoryMovementUpdateOne) ClearSource() *InventoryMovementUpdateOne {
	imuo.mutation.ClearSource()
	return imuo
}

// SetDestination sets the "destination" field.
func (imuo *InventoryMovementUpdateOne) SetDestination(s string) *InventoryMovementUpdateOne {
	imuo.mutation.SetDestination(s)
	return imuo
}

// SetNillableDestination sets the "destination" field if the given value is not nil.
func (imuo *InventoryMovementUpdateOne) SetNillableDestination(s *string) *InventoryMovementUpdateOne {
	if s != nil {
		imuo.SetDestination(*s)
	}
	return imuo
}

// ClearDestination clears the value of the "destination" field.
func (imuo *InventoryMovementUpdateOne) ClearDestination() *InventoryMovementUpdateOne {
	imuo.mutation.ClearDestination()
	return imuo
}

// SetNotes sets the "notes" field.
func (imuo *InventoryMovementUpdateOne) SetNotes(s string) *InventoryMovementUpdateOne {
	imuo.mutation.SetNotes(s)
	return imuo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (imuo *InventoryMovementUpdateOne) SetNillableNotes(s *string) *InventoryMovementUpdateOne {
	if s != nil {
		imuo.SetNotes(*s)
	}
	return imuo
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (imuo *InventoryMovementUpdateOne) SetCompanyID(id int) *InventoryMovementUpdateOne {
	imuo.mutation.SetCompanyID(id)
	return imuo
}

// SetCompany sets the "company" edge to the Company entity.
func (imuo *InventoryMovementUpdateOne) SetCompany(c *Company) *InventoryMovementUpdateOne {
	return imuo.SetCompanyID(c.ID)
}

// SetInventoryID sets the "inventory" edge to the Inventory entity by ID.
func (imuo *InventoryMovementUpdateOne) SetInventoryID(id int) *InventoryMovementUpdateOne {
	imuo.mutation.SetInventoryID(id)
	return imuo
}

// SetInventory sets the "inventory" edge to the Inventory entity.
func (imuo *InventoryMovementUpdateOne) SetInventory(i *Inventory) *InventoryMovementUpdateOne {
	return imuo.SetInventoryID(i.ID)
}

// Mutation returns the InventoryMovementMutation object of the builder.
func (imuo *InventoryMovementUpdateOne) Mutation() *InventoryMovementMutation {
	return imuo.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (imuo *InventoryMovementUpdateOne) ClearCompany() *InventoryMovementUpdateOne {
	imuo.mutation.ClearCompany()
	return imuo
}

// ClearInventory clears the "inventory" edge to the Inventory entity.
func (imuo *InventoryMovementUpdateOne) ClearInventory() *InventoryMovementUpdateOne {
	imuo.mutation.ClearInventory()
	return imuo
}

// Where appends a list predicates to the InventoryMovementUpdate builder.
func (imuo *InventoryMovementUpdateOne) Where(ps ...predicate.InventoryMovement) *InventoryMovementUpdateOne {
	imuo.mutation.Where(ps...)
	return imuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (imuo *InventoryMovementUpdateOne) Select(field string, fields ...string) *InventoryMovementUpdateOne {
	imuo.fields = append([]string{field}, fields...)
	return imuo
}

// Save executes the query and returns the updated InventoryMovement entity.
func (imuo *InventoryMovementUpdateOne) Save(ctx context.Context) (*InventoryMovement, error) {
	imuo.defaults()
	return withHooks(ctx, imuo.sqlSave, imuo.mutation, imuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (imuo *InventoryMovementUpdateOne) SaveX(ctx context.Context) *InventoryMovement {
	node, err := imuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (imuo *InventoryMovementUpdateOne) Exec(ctx context.Context) error {
	_, err := imuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (imuo *InventoryMovementUpdateOne) ExecX(ctx context.Context) {
	if err := imuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (imuo *InventoryMovementUpdateOne) defaults() {
	if _, ok := imuo.mutation.UpdatedAt(); !ok {
		v := inventorymovement.UpdateDefaultUpdatedAt()
		imuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (imuo *InventoryMovementUpdateOne) check() error {
	if v, ok := imuo.mutation.Category(); ok {
		if err := inventorymovement.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`generated: validator failed for field "InventoryMovement.category": %w`, err)}
		}
	}
	if imuo.mutation.CompanyCleared() && len(imuo.mutation.CompanyIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "InventoryMovement.company"`)
	}
	if imuo.mutation.InventoryCleared() && len(imuo.mutation.InventoryIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "InventoryMovement.inventory"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (imuo *InventoryMovementUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InventoryMovementUpdateOne {
	imuo.modifiers = append(imuo.modifiers, modifiers...)
	return imuo
}

func (imuo *InventoryMovementUpdateOne) sqlSave(ctx context.Context) (_node *InventoryMovement, err error) {
	if err := imuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(inventorymovement.Table, inventorymovement.Columns, sqlgraph.NewFieldSpec(inventorymovement.FieldID, field.TypeInt))
	id, ok := imuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "InventoryMovement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := imuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, inventorymovement.FieldID)
		for _, f := range fields {
			if !inventorymovement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != inventorymovement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := imuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := imuo.mutation.UpdatedAt(); ok {
		_spec.SetField(inventorymovement.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := imuo.mutation.DeletedAt(); ok {
		_spec.SetField(inventorymovement.FieldDeletedAt, field.TypeTime, value)
	}
	if imuo.mutation.DeletedAtCleared() {
		_spec.ClearField(inventorymovement.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := imuo.mutation.Category(); ok {
		_spec.SetField(inventorymovement.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := imuo.mutation.Quantity(); ok {
		_spec.SetField(inventorymovement.FieldQuantity, field.TypeFloat64, value)
	}
	if value, ok := imuo.mutation.AddedQuantity(); ok {
		_spec.AddField(inventorymovement.FieldQuantity, field.TypeFloat64, value)
	}
	if value, ok := imuo.mutation.Value(); ok {
		_spec.SetField(inventorymovement.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := imuo.mutation.AddedValue(); ok {
		_spec.AddField(inventorymovement.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := imuo.mutation.Date(); ok {
		_spec.SetField(inventorymovement.FieldDate, field.TypeTime, value)
	}
	if value, ok := imuo.mutation.Source(); ok {
		_spec.SetField(inventorymovement.FieldSource, field.TypeString, value)
	}
	if imuo.mutation.SourceCleared() {
		_spec.ClearField(inventorymovement.FieldSource, field.TypeString)
	}
	if value, ok := imuo.mutation.Destination(); ok {
		_spec.SetField(inventorymovement.FieldDestination, field.TypeString, value)
	}
	if imuo.mutation.DestinationCleared() {
		_spec.ClearField(inventorymovement.FieldDestination, field.TypeString)
	}
	if value, ok := imuo.mutation.Notes(); ok {
		_spec.SetField(inventorymovement.FieldNotes, field.TypeString, value)
	}
	if imuo.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventorymovement.CompanyTable,
			Columns: []string{inventorymovement.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := imuo.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventorymovement.CompanyTable,
			Columns: []string{inventorymovement.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if imuo.mutation.InventoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventorymovement.InventoryTable,
			Columns: []string{inventorymovement.InventoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := imuo.mutation.InventoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventorymovement.InventoryTable,
			Columns: []string{inventorymovement.InventoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(imuo.modifiers...)
	_node = &InventoryMovement{config: imuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, imuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inventorymovement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	imuo.mutation.done = true
	return _node, nil
}
