// Code generated by ent, DO NOT EDIT.

package payable

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the payable type in the database.
	Label = "payable"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deletedat field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldEntryGroup holds the string denoting the entrygroup field in the database.
	FieldEntryGroup = "entry_group"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAmountInDefault holds the string denoting the amountindefault field in the database.
	FieldAmountInDefault = "amount_in_default"
	// FieldOutstandingBalance holds the string denoting the outstandingbalance field in the database.
	FieldOutstandingBalance = "outstanding_balance"
	// FieldTotalTransaction holds the string denoting the totaltransaction field in the database.
	FieldTotalTransaction = "total_transaction"
	// FieldDueDate holds the string denoting the duedate field in the database.
	FieldDueDate = "due_date"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeCompany holds the string denoting the company edge name in mutations.
	EdgeCompany = "company"
	// Table holds the table name of the payable in the database.
	Table = "payables"
	// CompanyTable is the table that holds the company relation/edge.
	CompanyTable = "payables"
	// CompanyInverseTable is the table name for the Company entity.
	// It exists in this package in order to avoid circular dependency with the "company" package.
	CompanyInverseTable = "companies"
	// CompanyColumn is the table column denoting the company relation/edge.
	CompanyColumn = "company_payables"
)

// Columns holds all SQL columns for payable fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldEntryGroup,
	FieldDate,
	FieldName,
	FieldAmountInDefault,
	FieldOutstandingBalance,
	FieldTotalTransaction,
	FieldDueDate,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "payables"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"company_payables",
	"supplier_payables",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
	// EntryGroupValidator is a validator for the "entryGroup" field. It is called by the builders before save.
	EntryGroupValidator func(int) error
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// DefaultAmountInDefault holds the default value on creation for the "amountInDefault" field.
	DefaultAmountInDefault float64
	// AmountInDefaultValidator is a validator for the "amountInDefault" field. It is called by the builders before save.
	AmountInDefaultValidator func(float64) error
	// OutstandingBalanceValidator is a validator for the "outstandingBalance" field. It is called by the builders before save.
	OutstandingBalanceValidator func(float64) error
	// TotalTransactionValidator is a validator for the "totalTransaction" field. It is called by the builders before save.
	TotalTransactionValidator func(float64) error
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusPaid    Status = "paid"
	StatusPending Status = "pending"
	StatusOverdue Status = "overdue"
	StatusDefault Status = "default"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPaid, StatusPending, StatusOverdue, StatusDefault:
		return nil
	default:
		return fmt.Errorf("payable: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Payable queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deletedAt field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByEntryGroup orders the results by the entryGroup field.
func ByEntryGroup(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntryGroup, opts...).ToFunc()
}

// ByDate orders the results by the date field.
func ByDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDate, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByAmountInDefault orders the results by the amountInDefault field.
func ByAmountInDefault(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmountInDefault, opts...).ToFunc()
}

// ByOutstandingBalance orders the results by the outstandingBalance field.
func ByOutstandingBalance(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutstandingBalance, opts...).ToFunc()
}

// ByTotalTransaction orders the results by the totalTransaction field.
func ByTotalTransaction(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalTransaction, opts...).ToFunc()
}

// ByDueDate orders the results by the dueDate field.
func ByDueDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDueDate, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCompanyField orders the results by company field.
func ByCompanyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompanyStep(), sql.OrderByField(field, opts...))
	}
}
func newCompanyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompanyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}
