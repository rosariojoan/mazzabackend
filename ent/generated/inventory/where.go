// Code generated by ent, DO NOT EDIT.

package inventory

import (
	"mazza/ent/generated/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Inventory {
	return predicate.Inventory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Inventory {
	return predicate.Inventory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Inventory {
	return predicate.Inventory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Inventory {
	return predicate.Inventory(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deletedAt" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldDeletedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldName, v))
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v float64) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldQuantity, v))
}

// Unit applies equality check predicate on the "unit" field. It's identical to UnitEQ.
func Unit(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldUnit, v))
}

// MinimumLevel applies equality check predicate on the "minimumLevel" field. It's identical to MinimumLevelEQ.
func MinimumLevel(v float64) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldMinimumLevel, v))
}

// CurrentValue applies equality check predicate on the "currentValue" field. It's identical to CurrentValueEQ.
func CurrentValue(v float64) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldCurrentValue, v))
}

// Notes applies equality check predicate on the "notes" field. It's identical to NotesEQ.
func Notes(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldNotes, v))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deletedAt" field.
func DeletedAtEQ(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deletedAt" field.
func DeletedAtNEQ(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deletedAt" field.
func DeletedAtIn(vs ...time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deletedAt" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deletedAt" field.
func DeletedAtGT(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deletedAt" field.
func DeletedAtGTE(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deletedAt" field.
func DeletedAtLT(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deletedAt" field.
func DeletedAtLTE(v time.Time) predicate.Inventory {
	return predicate.Inventory(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deletedAt" field.
func DeletedAtIsNil() predicate.Inventory {
	return predicate.Inventory(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deletedAt" field.
func DeletedAtNotNil() predicate.Inventory {
	return predicate.Inventory(sql.FieldNotNull(FieldDeletedAt))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldContainsFold(FieldName, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v Category) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v Category) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...Category) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...Category) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldCategory, vs...))
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v float64) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldQuantity, v))
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v float64) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldQuantity, v))
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...float64) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldQuantity, vs...))
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...float64) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldQuantity, vs...))
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v float64) predicate.Inventory {
	return predicate.Inventory(sql.FieldGT(FieldQuantity, v))
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v float64) predicate.Inventory {
	return predicate.Inventory(sql.FieldGTE(FieldQuantity, v))
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v float64) predicate.Inventory {
	return predicate.Inventory(sql.FieldLT(FieldQuantity, v))
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v float64) predicate.Inventory {
	return predicate.Inventory(sql.FieldLTE(FieldQuantity, v))
}

// UnitEQ applies the EQ predicate on the "unit" field.
func UnitEQ(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldUnit, v))
}

// UnitNEQ applies the NEQ predicate on the "unit" field.
func UnitNEQ(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldUnit, v))
}

// UnitIn applies the In predicate on the "unit" field.
func UnitIn(vs ...string) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldUnit, vs...))
}

// UnitNotIn applies the NotIn predicate on the "unit" field.
func UnitNotIn(vs ...string) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldUnit, vs...))
}

// UnitGT applies the GT predicate on the "unit" field.
func UnitGT(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldGT(FieldUnit, v))
}

// UnitGTE applies the GTE predicate on the "unit" field.
func UnitGTE(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldGTE(FieldUnit, v))
}

// UnitLT applies the LT predicate on the "unit" field.
func UnitLT(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldLT(FieldUnit, v))
}

// UnitLTE applies the LTE predicate on the "unit" field.
func UnitLTE(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldLTE(FieldUnit, v))
}

// UnitContains applies the Contains predicate on the "unit" field.
func UnitContains(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldContains(FieldUnit, v))
}

// UnitHasPrefix applies the HasPrefix predicate on the "unit" field.
func UnitHasPrefix(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldHasPrefix(FieldUnit, v))
}

// UnitHasSuffix applies the HasSuffix predicate on the "unit" field.
func UnitHasSuffix(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldHasSuffix(FieldUnit, v))
}

// UnitEqualFold applies the EqualFold predicate on the "unit" field.
func UnitEqualFold(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEqualFold(FieldUnit, v))
}

// UnitContainsFold applies the ContainsFold predicate on the "unit" field.
func UnitContainsFold(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldContainsFold(FieldUnit, v))
}

// MinimumLevelEQ applies the EQ predicate on the "minimumLevel" field.
func MinimumLevelEQ(v float64) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldMinimumLevel, v))
}

// MinimumLevelNEQ applies the NEQ predicate on the "minimumLevel" field.
func MinimumLevelNEQ(v float64) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldMinimumLevel, v))
}

// MinimumLevelIn applies the In predicate on the "minimumLevel" field.
func MinimumLevelIn(vs ...float64) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldMinimumLevel, vs...))
}

// MinimumLevelNotIn applies the NotIn predicate on the "minimumLevel" field.
func MinimumLevelNotIn(vs ...float64) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldMinimumLevel, vs...))
}

// MinimumLevelGT applies the GT predicate on the "minimumLevel" field.
func MinimumLevelGT(v float64) predicate.Inventory {
	return predicate.Inventory(sql.FieldGT(FieldMinimumLevel, v))
}

// MinimumLevelGTE applies the GTE predicate on the "minimumLevel" field.
func MinimumLevelGTE(v float64) predicate.Inventory {
	return predicate.Inventory(sql.FieldGTE(FieldMinimumLevel, v))
}

// MinimumLevelLT applies the LT predicate on the "minimumLevel" field.
func MinimumLevelLT(v float64) predicate.Inventory {
	return predicate.Inventory(sql.FieldLT(FieldMinimumLevel, v))
}

// MinimumLevelLTE applies the LTE predicate on the "minimumLevel" field.
func MinimumLevelLTE(v float64) predicate.Inventory {
	return predicate.Inventory(sql.FieldLTE(FieldMinimumLevel, v))
}

// CurrentValueEQ applies the EQ predicate on the "currentValue" field.
func CurrentValueEQ(v float64) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldCurrentValue, v))
}

// CurrentValueNEQ applies the NEQ predicate on the "currentValue" field.
func CurrentValueNEQ(v float64) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldCurrentValue, v))
}

// CurrentValueIn applies the In predicate on the "currentValue" field.
func CurrentValueIn(vs ...float64) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldCurrentValue, vs...))
}

// CurrentValueNotIn applies the NotIn predicate on the "currentValue" field.
func CurrentValueNotIn(vs ...float64) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldCurrentValue, vs...))
}

// CurrentValueGT applies the GT predicate on the "currentValue" field.
func CurrentValueGT(v float64) predicate.Inventory {
	return predicate.Inventory(sql.FieldGT(FieldCurrentValue, v))
}

// CurrentValueGTE applies the GTE predicate on the "currentValue" field.
func CurrentValueGTE(v float64) predicate.Inventory {
	return predicate.Inventory(sql.FieldGTE(FieldCurrentValue, v))
}

// CurrentValueLT applies the LT predicate on the "currentValue" field.
func CurrentValueLT(v float64) predicate.Inventory {
	return predicate.Inventory(sql.FieldLT(FieldCurrentValue, v))
}

// CurrentValueLTE applies the LTE predicate on the "currentValue" field.
func CurrentValueLTE(v float64) predicate.Inventory {
	return predicate.Inventory(sql.FieldLTE(FieldCurrentValue, v))
}

// NotesEQ applies the EQ predicate on the "notes" field.
func NotesEQ(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldNotes, v))
}

// NotesNEQ applies the NEQ predicate on the "notes" field.
func NotesNEQ(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldNotes, v))
}

// NotesIn applies the In predicate on the "notes" field.
func NotesIn(vs ...string) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldNotes, vs...))
}

// NotesNotIn applies the NotIn predicate on the "notes" field.
func NotesNotIn(vs ...string) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldNotes, vs...))
}

// NotesGT applies the GT predicate on the "notes" field.
func NotesGT(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldGT(FieldNotes, v))
}

// NotesGTE applies the GTE predicate on the "notes" field.
func NotesGTE(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldGTE(FieldNotes, v))
}

// NotesLT applies the LT predicate on the "notes" field.
func NotesLT(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldLT(FieldNotes, v))
}

// NotesLTE applies the LTE predicate on the "notes" field.
func NotesLTE(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldLTE(FieldNotes, v))
}

// NotesContains applies the Contains predicate on the "notes" field.
func NotesContains(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldContains(FieldNotes, v))
}

// NotesHasPrefix applies the HasPrefix predicate on the "notes" field.
func NotesHasPrefix(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldHasPrefix(FieldNotes, v))
}

// NotesHasSuffix applies the HasSuffix predicate on the "notes" field.
func NotesHasSuffix(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldHasSuffix(FieldNotes, v))
}

// NotesEqualFold applies the EqualFold predicate on the "notes" field.
func NotesEqualFold(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEqualFold(FieldNotes, v))
}

// NotesContainsFold applies the ContainsFold predicate on the "notes" field.
func NotesContainsFold(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldContainsFold(FieldNotes, v))
}

// HasCompany applies the HasEdge predicate on the "company" edge.
func HasCompany() predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompanyWith applies the HasEdge predicate on the "company" edge with a given conditions (other predicates).
func HasCompanyWith(preds ...predicate.Company) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		step := newCompanyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMovements applies the HasEdge predicate on the "movements" edge.
func HasMovements() predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MovementsTable, MovementsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMovementsWith applies the HasEdge predicate on the "movements" edge with a given conditions (other predicates).
func HasMovementsWith(preds ...predicate.InventoryMovement) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		step := newMovementsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Inventory) predicate.Inventory {
	return predicate.Inventory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Inventory) predicate.Inventory {
	return predicate.Inventory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Inventory) predicate.Inventory {
	return predicate.Inventory(sql.NotPredicates(p))
}
