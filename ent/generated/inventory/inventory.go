// Code generated by ent, DO NOT EDIT.

package inventory

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the inventory type in the database.
	Label = "inventory"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deletedat field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldQuantity holds the string denoting the quantity field in the database.
	FieldQuantity = "quantity"
	// FieldUnit holds the string denoting the unit field in the database.
	FieldUnit = "unit"
	// FieldMinimumLevel holds the string denoting the minimumlevel field in the database.
	FieldMinimumLevel = "minimum_level"
	// FieldCurrentValue holds the string denoting the currentvalue field in the database.
	FieldCurrentValue = "current_value"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// EdgeCompany holds the string denoting the company edge name in mutations.
	EdgeCompany = "company"
	// EdgeMovements holds the string denoting the movements edge name in mutations.
	EdgeMovements = "movements"
	// Table holds the table name of the inventory in the database.
	Table = "inventories"
	// CompanyTable is the table that holds the company relation/edge.
	CompanyTable = "inventories"
	// CompanyInverseTable is the table name for the Company entity.
	// It exists in this package in order to avoid circular dependency with the "company" package.
	CompanyInverseTable = "companies"
	// CompanyColumn is the table column denoting the company relation/edge.
	CompanyColumn = "company_inventory"
	// MovementsTable is the table that holds the movements relation/edge.
	MovementsTable = "inventory_movements"
	// MovementsInverseTable is the table name for the InventoryMovement entity.
	// It exists in this package in order to avoid circular dependency with the "inventorymovement" package.
	MovementsInverseTable = "inventory_movements"
	// MovementsColumn is the table column denoting the movements relation/edge.
	MovementsColumn = "inventory_movements"
)

// Columns holds all SQL columns for inventory fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldName,
	FieldCategory,
	FieldQuantity,
	FieldUnit,
	FieldMinimumLevel,
	FieldCurrentValue,
	FieldNotes,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "inventories"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"company_inventory",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// QuantityValidator is a validator for the "quantity" field. It is called by the builders before save.
	QuantityValidator func(float64) error
	// MinimumLevelValidator is a validator for the "minimumLevel" field. It is called by the builders before save.
	MinimumLevelValidator func(float64) error
	// CurrentValueValidator is a validator for the "currentValue" field. It is called by the builders before save.
	CurrentValueValidator func(float64) error
	// NotesValidator is a validator for the "notes" field. It is called by the builders before save.
	NotesValidator func(string) error
)

// Category defines the type for the "category" enum field.
type Category string

// Category values.
const (
	CategoryRAW_MATERIALS  Category = "RAW_MATERIALS"
	CategoryFINISHED_GOODS Category = "FINISHED_GOODS"
	CategoryMERCHANDISE    Category = "MERCHANDISE"
	CategorySUPPLIES       Category = "SUPPLIES"
	CategoryEQUIPMENT      Category = "EQUIPMENT"
	CategoryOTHER          Category = "OTHER"
)

func (c Category) String() string {
	return string(c)
}

// CategoryValidator is a validator for the "category" field enum values. It is called by the builders before save.
func CategoryValidator(c Category) error {
	switch c {
	case CategoryRAW_MATERIALS, CategoryFINISHED_GOODS, CategoryMERCHANDISE, CategorySUPPLIES, CategoryEQUIPMENT, CategoryOTHER:
		return nil
	default:
		return fmt.Errorf("inventory: invalid enum value for category field: %q", c)
	}
}

// OrderOption defines the ordering options for the Inventory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deletedAt field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByQuantity orders the results by the quantity field.
func ByQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuantity, opts...).ToFunc()
}

// ByUnit orders the results by the unit field.
func ByUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnit, opts...).ToFunc()
}

// ByMinimumLevel orders the results by the minimumLevel field.
func ByMinimumLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinimumLevel, opts...).ToFunc()
}

// ByCurrentValue orders the results by the currentValue field.
func ByCurrentValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentValue, opts...).ToFunc()
}

// ByNotes orders the results by the notes field.
func ByNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotes, opts...).ToFunc()
}

// ByCompanyField orders the results by company field.
func ByCompanyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompanyStep(), sql.OrderByField(field, opts...))
	}
}

// ByMovementsCount orders the results by movements count.
func ByMovementsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMovementsStep(), opts...)
	}
}

// ByMovements orders the results by movements terms.
func ByMovements(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMovementsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCompanyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompanyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
	)
}
func newMovementsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MovementsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MovementsTable, MovementsColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Category) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Category) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Category(str)
	if err := CategoryValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Category", str)
	}
	return nil
}
