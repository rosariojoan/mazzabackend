// Code generated by ent, DO NOT EDIT.

package treasury

import (
	"mazza/ent/generated/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Treasury {
	return predicate.Treasury(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Treasury {
	return predicate.Treasury(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Treasury {
	return predicate.Treasury(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Treasury {
	return predicate.Treasury(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Treasury {
	return predicate.Treasury(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Treasury {
	return predicate.Treasury(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Treasury {
	return predicate.Treasury(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Treasury {
	return predicate.Treasury(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Treasury {
	return predicate.Treasury(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Treasury {
	return predicate.Treasury(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Treasury {
	return predicate.Treasury(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deletedAt" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Treasury {
	return predicate.Treasury(sql.FieldEQ(FieldDeletedAt, v))
}

// AccountNumber applies equality check predicate on the "accountNumber" field. It's identical to AccountNumberEQ.
func AccountNumber(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldEQ(FieldAccountNumber, v))
}

// Balance applies equality check predicate on the "balance" field. It's identical to BalanceEQ.
func Balance(v float64) predicate.Treasury {
	return predicate.Treasury(sql.FieldEQ(FieldBalance, v))
}

// BankName applies equality check predicate on the "bankName" field. It's identical to BankNameEQ.
func BankName(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldEQ(FieldBankName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldEQ(FieldDescription, v))
}

// Iban applies equality check predicate on the "iban" field. It's identical to IbanEQ.
func Iban(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldEQ(FieldIban, v))
}

// IsDefault applies equality check predicate on the "isDefault" field. It's identical to IsDefaultEQ.
func IsDefault(v bool) predicate.Treasury {
	return predicate.Treasury(sql.FieldEQ(FieldIsDefault, v))
}

// IsMainAccount applies equality check predicate on the "isMainAccount" field. It's identical to IsMainAccountEQ.
func IsMainAccount(v bool) predicate.Treasury {
	return predicate.Treasury(sql.FieldEQ(FieldIsMainAccount, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldEQ(FieldName, v))
}

// SwiftCode applies equality check predicate on the "swiftCode" field. It's identical to SwiftCodeEQ.
func SwiftCode(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldEQ(FieldSwiftCode, v))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.Treasury {
	return predicate.Treasury(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.Treasury {
	return predicate.Treasury(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Treasury {
	return predicate.Treasury(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Treasury {
	return predicate.Treasury(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.Treasury {
	return predicate.Treasury(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.Treasury {
	return predicate.Treasury(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.Treasury {
	return predicate.Treasury(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.Treasury {
	return predicate.Treasury(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.Treasury {
	return predicate.Treasury(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.Treasury {
	return predicate.Treasury(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.Treasury {
	return predicate.Treasury(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Treasury {
	return predicate.Treasury(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.Treasury {
	return predicate.Treasury(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.Treasury {
	return predicate.Treasury(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.Treasury {
	return predicate.Treasury(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.Treasury {
	return predicate.Treasury(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deletedAt" field.
func DeletedAtEQ(v time.Time) predicate.Treasury {
	return predicate.Treasury(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deletedAt" field.
func DeletedAtNEQ(v time.Time) predicate.Treasury {
	return predicate.Treasury(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deletedAt" field.
func DeletedAtIn(vs ...time.Time) predicate.Treasury {
	return predicate.Treasury(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deletedAt" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Treasury {
	return predicate.Treasury(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deletedAt" field.
func DeletedAtGT(v time.Time) predicate.Treasury {
	return predicate.Treasury(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deletedAt" field.
func DeletedAtGTE(v time.Time) predicate.Treasury {
	return predicate.Treasury(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deletedAt" field.
func DeletedAtLT(v time.Time) predicate.Treasury {
	return predicate.Treasury(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deletedAt" field.
func DeletedAtLTE(v time.Time) predicate.Treasury {
	return predicate.Treasury(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deletedAt" field.
func DeletedAtIsNil() predicate.Treasury {
	return predicate.Treasury(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deletedAt" field.
func DeletedAtNotNil() predicate.Treasury {
	return predicate.Treasury(sql.FieldNotNull(FieldDeletedAt))
}

// AccountNumberEQ applies the EQ predicate on the "accountNumber" field.
func AccountNumberEQ(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldEQ(FieldAccountNumber, v))
}

// AccountNumberNEQ applies the NEQ predicate on the "accountNumber" field.
func AccountNumberNEQ(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldNEQ(FieldAccountNumber, v))
}

// AccountNumberIn applies the In predicate on the "accountNumber" field.
func AccountNumberIn(vs ...string) predicate.Treasury {
	return predicate.Treasury(sql.FieldIn(FieldAccountNumber, vs...))
}

// AccountNumberNotIn applies the NotIn predicate on the "accountNumber" field.
func AccountNumberNotIn(vs ...string) predicate.Treasury {
	return predicate.Treasury(sql.FieldNotIn(FieldAccountNumber, vs...))
}

// AccountNumberGT applies the GT predicate on the "accountNumber" field.
func AccountNumberGT(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldGT(FieldAccountNumber, v))
}

// AccountNumberGTE applies the GTE predicate on the "accountNumber" field.
func AccountNumberGTE(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldGTE(FieldAccountNumber, v))
}

// AccountNumberLT applies the LT predicate on the "accountNumber" field.
func AccountNumberLT(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldLT(FieldAccountNumber, v))
}

// AccountNumberLTE applies the LTE predicate on the "accountNumber" field.
func AccountNumberLTE(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldLTE(FieldAccountNumber, v))
}

// AccountNumberContains applies the Contains predicate on the "accountNumber" field.
func AccountNumberContains(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldContains(FieldAccountNumber, v))
}

// AccountNumberHasPrefix applies the HasPrefix predicate on the "accountNumber" field.
func AccountNumberHasPrefix(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldHasPrefix(FieldAccountNumber, v))
}

// AccountNumberHasSuffix applies the HasSuffix predicate on the "accountNumber" field.
func AccountNumberHasSuffix(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldHasSuffix(FieldAccountNumber, v))
}

// AccountNumberIsNil applies the IsNil predicate on the "accountNumber" field.
func AccountNumberIsNil() predicate.Treasury {
	return predicate.Treasury(sql.FieldIsNull(FieldAccountNumber))
}

// AccountNumberNotNil applies the NotNil predicate on the "accountNumber" field.
func AccountNumberNotNil() predicate.Treasury {
	return predicate.Treasury(sql.FieldNotNull(FieldAccountNumber))
}

// AccountNumberEqualFold applies the EqualFold predicate on the "accountNumber" field.
func AccountNumberEqualFold(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldEqualFold(FieldAccountNumber, v))
}

// AccountNumberContainsFold applies the ContainsFold predicate on the "accountNumber" field.
func AccountNumberContainsFold(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldContainsFold(FieldAccountNumber, v))
}

// BalanceEQ applies the EQ predicate on the "balance" field.
func BalanceEQ(v float64) predicate.Treasury {
	return predicate.Treasury(sql.FieldEQ(FieldBalance, v))
}

// BalanceNEQ applies the NEQ predicate on the "balance" field.
func BalanceNEQ(v float64) predicate.Treasury {
	return predicate.Treasury(sql.FieldNEQ(FieldBalance, v))
}

// BalanceIn applies the In predicate on the "balance" field.
func BalanceIn(vs ...float64) predicate.Treasury {
	return predicate.Treasury(sql.FieldIn(FieldBalance, vs...))
}

// BalanceNotIn applies the NotIn predicate on the "balance" field.
func BalanceNotIn(vs ...float64) predicate.Treasury {
	return predicate.Treasury(sql.FieldNotIn(FieldBalance, vs...))
}

// BalanceGT applies the GT predicate on the "balance" field.
func BalanceGT(v float64) predicate.Treasury {
	return predicate.Treasury(sql.FieldGT(FieldBalance, v))
}

// BalanceGTE applies the GTE predicate on the "balance" field.
func BalanceGTE(v float64) predicate.Treasury {
	return predicate.Treasury(sql.FieldGTE(FieldBalance, v))
}

// BalanceLT applies the LT predicate on the "balance" field.
func BalanceLT(v float64) predicate.Treasury {
	return predicate.Treasury(sql.FieldLT(FieldBalance, v))
}

// BalanceLTE applies the LTE predicate on the "balance" field.
func BalanceLTE(v float64) predicate.Treasury {
	return predicate.Treasury(sql.FieldLTE(FieldBalance, v))
}

// BankNameEQ applies the EQ predicate on the "bankName" field.
func BankNameEQ(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldEQ(FieldBankName, v))
}

// BankNameNEQ applies the NEQ predicate on the "bankName" field.
func BankNameNEQ(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldNEQ(FieldBankName, v))
}

// BankNameIn applies the In predicate on the "bankName" field.
func BankNameIn(vs ...string) predicate.Treasury {
	return predicate.Treasury(sql.FieldIn(FieldBankName, vs...))
}

// BankNameNotIn applies the NotIn predicate on the "bankName" field.
func BankNameNotIn(vs ...string) predicate.Treasury {
	return predicate.Treasury(sql.FieldNotIn(FieldBankName, vs...))
}

// BankNameGT applies the GT predicate on the "bankName" field.
func BankNameGT(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldGT(FieldBankName, v))
}

// BankNameGTE applies the GTE predicate on the "bankName" field.
func BankNameGTE(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldGTE(FieldBankName, v))
}

// BankNameLT applies the LT predicate on the "bankName" field.
func BankNameLT(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldLT(FieldBankName, v))
}

// BankNameLTE applies the LTE predicate on the "bankName" field.
func BankNameLTE(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldLTE(FieldBankName, v))
}

// BankNameContains applies the Contains predicate on the "bankName" field.
func BankNameContains(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldContains(FieldBankName, v))
}

// BankNameHasPrefix applies the HasPrefix predicate on the "bankName" field.
func BankNameHasPrefix(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldHasPrefix(FieldBankName, v))
}

// BankNameHasSuffix applies the HasSuffix predicate on the "bankName" field.
func BankNameHasSuffix(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldHasSuffix(FieldBankName, v))
}

// BankNameIsNil applies the IsNil predicate on the "bankName" field.
func BankNameIsNil() predicate.Treasury {
	return predicate.Treasury(sql.FieldIsNull(FieldBankName))
}

// BankNameNotNil applies the NotNil predicate on the "bankName" field.
func BankNameNotNil() predicate.Treasury {
	return predicate.Treasury(sql.FieldNotNull(FieldBankName))
}

// BankNameEqualFold applies the EqualFold predicate on the "bankName" field.
func BankNameEqualFold(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldEqualFold(FieldBankName, v))
}

// BankNameContainsFold applies the ContainsFold predicate on the "bankName" field.
func BankNameContainsFold(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldContainsFold(FieldBankName, v))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v Currency) predicate.Treasury {
	return predicate.Treasury(sql.FieldEQ(FieldCurrency, v))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v Currency) predicate.Treasury {
	return predicate.Treasury(sql.FieldNEQ(FieldCurrency, v))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...Currency) predicate.Treasury {
	return predicate.Treasury(sql.FieldIn(FieldCurrency, vs...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...Currency) predicate.Treasury {
	return predicate.Treasury(sql.FieldNotIn(FieldCurrency, vs...))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Treasury {
	return predicate.Treasury(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Treasury {
	return predicate.Treasury(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Treasury {
	return predicate.Treasury(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Treasury {
	return predicate.Treasury(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldContainsFold(FieldDescription, v))
}

// IbanEQ applies the EQ predicate on the "iban" field.
func IbanEQ(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldEQ(FieldIban, v))
}

// IbanNEQ applies the NEQ predicate on the "iban" field.
func IbanNEQ(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldNEQ(FieldIban, v))
}

// IbanIn applies the In predicate on the "iban" field.
func IbanIn(vs ...string) predicate.Treasury {
	return predicate.Treasury(sql.FieldIn(FieldIban, vs...))
}

// IbanNotIn applies the NotIn predicate on the "iban" field.
func IbanNotIn(vs ...string) predicate.Treasury {
	return predicate.Treasury(sql.FieldNotIn(FieldIban, vs...))
}

// IbanGT applies the GT predicate on the "iban" field.
func IbanGT(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldGT(FieldIban, v))
}

// IbanGTE applies the GTE predicate on the "iban" field.
func IbanGTE(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldGTE(FieldIban, v))
}

// IbanLT applies the LT predicate on the "iban" field.
func IbanLT(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldLT(FieldIban, v))
}

// IbanLTE applies the LTE predicate on the "iban" field.
func IbanLTE(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldLTE(FieldIban, v))
}

// IbanContains applies the Contains predicate on the "iban" field.
func IbanContains(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldContains(FieldIban, v))
}

// IbanHasPrefix applies the HasPrefix predicate on the "iban" field.
func IbanHasPrefix(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldHasPrefix(FieldIban, v))
}

// IbanHasSuffix applies the HasSuffix predicate on the "iban" field.
func IbanHasSuffix(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldHasSuffix(FieldIban, v))
}

// IbanIsNil applies the IsNil predicate on the "iban" field.
func IbanIsNil() predicate.Treasury {
	return predicate.Treasury(sql.FieldIsNull(FieldIban))
}

// IbanNotNil applies the NotNil predicate on the "iban" field.
func IbanNotNil() predicate.Treasury {
	return predicate.Treasury(sql.FieldNotNull(FieldIban))
}

// IbanEqualFold applies the EqualFold predicate on the "iban" field.
func IbanEqualFold(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldEqualFold(FieldIban, v))
}

// IbanContainsFold applies the ContainsFold predicate on the "iban" field.
func IbanContainsFold(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldContainsFold(FieldIban, v))
}

// IsDefaultEQ applies the EQ predicate on the "isDefault" field.
func IsDefaultEQ(v bool) predicate.Treasury {
	return predicate.Treasury(sql.FieldEQ(FieldIsDefault, v))
}

// IsDefaultNEQ applies the NEQ predicate on the "isDefault" field.
func IsDefaultNEQ(v bool) predicate.Treasury {
	return predicate.Treasury(sql.FieldNEQ(FieldIsDefault, v))
}

// IsDefaultIsNil applies the IsNil predicate on the "isDefault" field.
func IsDefaultIsNil() predicate.Treasury {
	return predicate.Treasury(sql.FieldIsNull(FieldIsDefault))
}

// IsDefaultNotNil applies the NotNil predicate on the "isDefault" field.
func IsDefaultNotNil() predicate.Treasury {
	return predicate.Treasury(sql.FieldNotNull(FieldIsDefault))
}

// IsMainAccountEQ applies the EQ predicate on the "isMainAccount" field.
func IsMainAccountEQ(v bool) predicate.Treasury {
	return predicate.Treasury(sql.FieldEQ(FieldIsMainAccount, v))
}

// IsMainAccountNEQ applies the NEQ predicate on the "isMainAccount" field.
func IsMainAccountNEQ(v bool) predicate.Treasury {
	return predicate.Treasury(sql.FieldNEQ(FieldIsMainAccount, v))
}

// IsMainAccountIsNil applies the IsNil predicate on the "isMainAccount" field.
func IsMainAccountIsNil() predicate.Treasury {
	return predicate.Treasury(sql.FieldIsNull(FieldIsMainAccount))
}

// IsMainAccountNotNil applies the NotNil predicate on the "isMainAccount" field.
func IsMainAccountNotNil() predicate.Treasury {
	return predicate.Treasury(sql.FieldNotNull(FieldIsMainAccount))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Treasury {
	return predicate.Treasury(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Treasury {
	return predicate.Treasury(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldContainsFold(FieldName, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v Category) predicate.Treasury {
	return predicate.Treasury(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v Category) predicate.Treasury {
	return predicate.Treasury(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...Category) predicate.Treasury {
	return predicate.Treasury(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...Category) predicate.Treasury {
	return predicate.Treasury(sql.FieldNotIn(FieldCategory, vs...))
}

// SwiftCodeEQ applies the EQ predicate on the "swiftCode" field.
func SwiftCodeEQ(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldEQ(FieldSwiftCode, v))
}

// SwiftCodeNEQ applies the NEQ predicate on the "swiftCode" field.
func SwiftCodeNEQ(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldNEQ(FieldSwiftCode, v))
}

// SwiftCodeIn applies the In predicate on the "swiftCode" field.
func SwiftCodeIn(vs ...string) predicate.Treasury {
	return predicate.Treasury(sql.FieldIn(FieldSwiftCode, vs...))
}

// SwiftCodeNotIn applies the NotIn predicate on the "swiftCode" field.
func SwiftCodeNotIn(vs ...string) predicate.Treasury {
	return predicate.Treasury(sql.FieldNotIn(FieldSwiftCode, vs...))
}

// SwiftCodeGT applies the GT predicate on the "swiftCode" field.
func SwiftCodeGT(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldGT(FieldSwiftCode, v))
}

// SwiftCodeGTE applies the GTE predicate on the "swiftCode" field.
func SwiftCodeGTE(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldGTE(FieldSwiftCode, v))
}

// SwiftCodeLT applies the LT predicate on the "swiftCode" field.
func SwiftCodeLT(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldLT(FieldSwiftCode, v))
}

// SwiftCodeLTE applies the LTE predicate on the "swiftCode" field.
func SwiftCodeLTE(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldLTE(FieldSwiftCode, v))
}

// SwiftCodeContains applies the Contains predicate on the "swiftCode" field.
func SwiftCodeContains(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldContains(FieldSwiftCode, v))
}

// SwiftCodeHasPrefix applies the HasPrefix predicate on the "swiftCode" field.
func SwiftCodeHasPrefix(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldHasPrefix(FieldSwiftCode, v))
}

// SwiftCodeHasSuffix applies the HasSuffix predicate on the "swiftCode" field.
func SwiftCodeHasSuffix(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldHasSuffix(FieldSwiftCode, v))
}

// SwiftCodeIsNil applies the IsNil predicate on the "swiftCode" field.
func SwiftCodeIsNil() predicate.Treasury {
	return predicate.Treasury(sql.FieldIsNull(FieldSwiftCode))
}

// SwiftCodeNotNil applies the NotNil predicate on the "swiftCode" field.
func SwiftCodeNotNil() predicate.Treasury {
	return predicate.Treasury(sql.FieldNotNull(FieldSwiftCode))
}

// SwiftCodeEqualFold applies the EqualFold predicate on the "swiftCode" field.
func SwiftCodeEqualFold(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldEqualFold(FieldSwiftCode, v))
}

// SwiftCodeContainsFold applies the ContainsFold predicate on the "swiftCode" field.
func SwiftCodeContainsFold(v string) predicate.Treasury {
	return predicate.Treasury(sql.FieldContainsFold(FieldSwiftCode, v))
}

// HasCompany applies the HasEdge predicate on the "company" edge.
func HasCompany() predicate.Treasury {
	return predicate.Treasury(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompanyWith applies the HasEdge predicate on the "company" edge with a given conditions (other predicates).
func HasCompanyWith(preds ...predicate.Company) predicate.Treasury {
	return predicate.Treasury(func(s *sql.Selector) {
		step := newCompanyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAccountingEntries applies the HasEdge predicate on the "accountingEntries" edge.
func HasAccountingEntries() predicate.Treasury {
	return predicate.Treasury(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AccountingEntriesTable, AccountingEntriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAccountingEntriesWith applies the HasEdge predicate on the "accountingEntries" edge with a given conditions (other predicates).
func HasAccountingEntriesWith(preds ...predicate.AccountingEntry) predicate.Treasury {
	return predicate.Treasury(func(s *sql.Selector) {
		step := newAccountingEntriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Treasury) predicate.Treasury {
	return predicate.Treasury(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Treasury) predicate.Treasury {
	return predicate.Treasury(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Treasury) predicate.Treasury {
	return predicate.Treasury(sql.NotPredicates(p))
}
