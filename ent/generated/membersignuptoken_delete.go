// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"mazza/ent/generated/membersignuptoken"
	"mazza/ent/generated/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberSignupTokenDelete is the builder for deleting a MemberSignupToken entity.
type MemberSignupTokenDelete struct {
	config
	hooks    []Hook
	mutation *MemberSignupTokenMutation
}

// Where appends a list predicates to the MemberSignupTokenDelete builder.
func (mstd *MemberSignupTokenDelete) Where(ps ...predicate.MemberSignupToken) *MemberSignupTokenDelete {
	mstd.mutation.Where(ps...)
	return mstd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mstd *MemberSignupTokenDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, mstd.sqlExec, mstd.mutation, mstd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mstd *MemberSignupTokenDelete) ExecX(ctx context.Context) int {
	n, err := mstd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mstd *MemberSignupTokenDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(membersignuptoken.Table, sqlgraph.NewFieldSpec(membersignuptoken.FieldID, field.TypeInt))
	if ps := mstd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mstd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mstd.mutation.done = true
	return affected, err
}

// MemberSignupTokenDeleteOne is the builder for deleting a single MemberSignupToken entity.
type MemberSignupTokenDeleteOne struct {
	mstd *MemberSignupTokenDelete
}

// Where appends a list predicates to the MemberSignupTokenDelete builder.
func (mstdo *MemberSignupTokenDeleteOne) Where(ps ...predicate.MemberSignupToken) *MemberSignupTokenDeleteOne {
	mstdo.mstd.mutation.Where(ps...)
	return mstdo
}

// Exec executes the deletion query.
func (mstdo *MemberSignupTokenDeleteOne) Exec(ctx context.Context) error {
	n, err := mstdo.mstd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{membersignuptoken.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mstdo *MemberSignupTokenDeleteOne) ExecX(ctx context.Context) {
	if err := mstdo.Exec(ctx); err != nil {
		panic(err)
	}
}
