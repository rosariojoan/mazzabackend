// Code generated by ent, DO NOT EDIT.

package company

import (
	"mazza/ent/generated/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deletedAt" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldDeletedAt, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldAddress, v))
}

// BaseCurrency applies equality check predicate on the "baseCurrency" field. It's identical to BaseCurrencyEQ.
func BaseCurrency(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldBaseCurrency, v))
}

// CeoName applies equality check predicate on the "ceoName" field. It's identical to CeoNameEQ.
func CeoName(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldCeoName, v))
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldCity, v))
}

// Country applies equality check predicate on the "country" field. It's identical to CountryEQ.
func Country(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldCountry, v))
}

// EstablishedAt applies equality check predicate on the "establishedAt" field. It's identical to EstablishedAtEQ.
func EstablishedAt(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldEstablishedAt, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldDescription, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldEmail, v))
}

// Industry applies equality check predicate on the "industry" field. It's identical to IndustryEQ.
func Industry(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldIndustry, v))
}

// LastEntryDate applies equality check predicate on the "lastEntryDate" field. It's identical to LastEntryDateEQ.
func LastEntryDate(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldLastEntryDate, v))
}

// LastInvoiceNumber applies equality check predicate on the "lastInvoiceNumber" field. It's identical to LastInvoiceNumberEQ.
func LastInvoiceNumber(v int32) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldLastInvoiceNumber, v))
}

// LogoURL applies equality check predicate on the "logoURL" field. It's identical to LogoURLEQ.
func LogoURL(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldLogoURL, v))
}

// LogoStorageURI applies equality check predicate on the "logoStorageURI" field. It's identical to LogoStorageURIEQ.
func LogoStorageURI(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldLogoStorageURI, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldName, v))
}

// NumberOfEmployees applies equality check predicate on the "numberOfEmployees" field. It's identical to NumberOfEmployeesEQ.
func NumberOfEmployees(v int32) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldNumberOfEmployees, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldPhone, v))
}

// TaxId applies equality check predicate on the "taxId" field. It's identical to TaxIdEQ.
func TaxId(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldTaxId, v))
}

// VatRate applies equality check predicate on the "vatRate" field. It's identical to VatRateEQ.
func VatRate(v float64) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldVatRate, v))
}

// Website applies equality check predicate on the "website" field. It's identical to WebsiteEQ.
func Website(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldWebsite, v))
}

// IncompleteSetup applies equality check predicate on the "incompleteSetup" field. It's identical to IncompleteSetupEQ.
func IncompleteSetup(v bool) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldIncompleteSetup, v))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deletedAt" field.
func DeletedAtEQ(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deletedAt" field.
func DeletedAtNEQ(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deletedAt" field.
func DeletedAtIn(vs ...time.Time) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deletedAt" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deletedAt" field.
func DeletedAtGT(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deletedAt" field.
func DeletedAtGTE(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deletedAt" field.
func DeletedAtLT(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deletedAt" field.
func DeletedAtLTE(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deletedAt" field.
func DeletedAtIsNil() predicate.Company {
	return predicate.Company(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deletedAt" field.
func DeletedAtNotNil() predicate.Company {
	return predicate.Company(sql.FieldNotNull(FieldDeletedAt))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressIsNil applies the IsNil predicate on the "address" field.
func AddressIsNil() predicate.Company {
	return predicate.Company(sql.FieldIsNull(FieldAddress))
}

// AddressNotNil applies the NotNil predicate on the "address" field.
func AddressNotNil() predicate.Company {
	return predicate.Company(sql.FieldNotNull(FieldAddress))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldAddress, v))
}

// BaseCurrencyEQ applies the EQ predicate on the "baseCurrency" field.
func BaseCurrencyEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldBaseCurrency, v))
}

// BaseCurrencyNEQ applies the NEQ predicate on the "baseCurrency" field.
func BaseCurrencyNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldBaseCurrency, v))
}

// BaseCurrencyIn applies the In predicate on the "baseCurrency" field.
func BaseCurrencyIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldBaseCurrency, vs...))
}

// BaseCurrencyNotIn applies the NotIn predicate on the "baseCurrency" field.
func BaseCurrencyNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldBaseCurrency, vs...))
}

// BaseCurrencyGT applies the GT predicate on the "baseCurrency" field.
func BaseCurrencyGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldBaseCurrency, v))
}

// BaseCurrencyGTE applies the GTE predicate on the "baseCurrency" field.
func BaseCurrencyGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldBaseCurrency, v))
}

// BaseCurrencyLT applies the LT predicate on the "baseCurrency" field.
func BaseCurrencyLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldBaseCurrency, v))
}

// BaseCurrencyLTE applies the LTE predicate on the "baseCurrency" field.
func BaseCurrencyLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldBaseCurrency, v))
}

// BaseCurrencyContains applies the Contains predicate on the "baseCurrency" field.
func BaseCurrencyContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldBaseCurrency, v))
}

// BaseCurrencyHasPrefix applies the HasPrefix predicate on the "baseCurrency" field.
func BaseCurrencyHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldBaseCurrency, v))
}

// BaseCurrencyHasSuffix applies the HasSuffix predicate on the "baseCurrency" field.
func BaseCurrencyHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldBaseCurrency, v))
}

// BaseCurrencyEqualFold applies the EqualFold predicate on the "baseCurrency" field.
func BaseCurrencyEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldBaseCurrency, v))
}

// BaseCurrencyContainsFold applies the ContainsFold predicate on the "baseCurrency" field.
func BaseCurrencyContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldBaseCurrency, v))
}

// CeoNameEQ applies the EQ predicate on the "ceoName" field.
func CeoNameEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldCeoName, v))
}

// CeoNameNEQ applies the NEQ predicate on the "ceoName" field.
func CeoNameNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldCeoName, v))
}

// CeoNameIn applies the In predicate on the "ceoName" field.
func CeoNameIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldCeoName, vs...))
}

// CeoNameNotIn applies the NotIn predicate on the "ceoName" field.
func CeoNameNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldCeoName, vs...))
}

// CeoNameGT applies the GT predicate on the "ceoName" field.
func CeoNameGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldCeoName, v))
}

// CeoNameGTE applies the GTE predicate on the "ceoName" field.
func CeoNameGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldCeoName, v))
}

// CeoNameLT applies the LT predicate on the "ceoName" field.
func CeoNameLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldCeoName, v))
}

// CeoNameLTE applies the LTE predicate on the "ceoName" field.
func CeoNameLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldCeoName, v))
}

// CeoNameContains applies the Contains predicate on the "ceoName" field.
func CeoNameContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldCeoName, v))
}

// CeoNameHasPrefix applies the HasPrefix predicate on the "ceoName" field.
func CeoNameHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldCeoName, v))
}

// CeoNameHasSuffix applies the HasSuffix predicate on the "ceoName" field.
func CeoNameHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldCeoName, v))
}

// CeoNameIsNil applies the IsNil predicate on the "ceoName" field.
func CeoNameIsNil() predicate.Company {
	return predicate.Company(sql.FieldIsNull(FieldCeoName))
}

// CeoNameNotNil applies the NotNil predicate on the "ceoName" field.
func CeoNameNotNil() predicate.Company {
	return predicate.Company(sql.FieldNotNull(FieldCeoName))
}

// CeoNameEqualFold applies the EqualFold predicate on the "ceoName" field.
func CeoNameEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldCeoName, v))
}

// CeoNameContainsFold applies the ContainsFold predicate on the "ceoName" field.
func CeoNameContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldCeoName, v))
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldCity, v))
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldCity, v))
}

// CountryEQ applies the EQ predicate on the "country" field.
func CountryEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldCountry, v))
}

// CountryNEQ applies the NEQ predicate on the "country" field.
func CountryNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldCountry, v))
}

// CountryIn applies the In predicate on the "country" field.
func CountryIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldCountry, vs...))
}

// CountryNotIn applies the NotIn predicate on the "country" field.
func CountryNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldCountry, vs...))
}

// CountryGT applies the GT predicate on the "country" field.
func CountryGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldCountry, v))
}

// CountryGTE applies the GTE predicate on the "country" field.
func CountryGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldCountry, v))
}

// CountryLT applies the LT predicate on the "country" field.
func CountryLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldCountry, v))
}

// CountryLTE applies the LTE predicate on the "country" field.
func CountryLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldCountry, v))
}

// CountryContains applies the Contains predicate on the "country" field.
func CountryContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldCountry, v))
}

// CountryHasPrefix applies the HasPrefix predicate on the "country" field.
func CountryHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldCountry, v))
}

// CountryHasSuffix applies the HasSuffix predicate on the "country" field.
func CountryHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldCountry, v))
}

// CountryEqualFold applies the EqualFold predicate on the "country" field.
func CountryEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldCountry, v))
}

// CountryContainsFold applies the ContainsFold predicate on the "country" field.
func CountryContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldCountry, v))
}

// EstablishedAtEQ applies the EQ predicate on the "establishedAt" field.
func EstablishedAtEQ(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldEstablishedAt, v))
}

// EstablishedAtNEQ applies the NEQ predicate on the "establishedAt" field.
func EstablishedAtNEQ(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldEstablishedAt, v))
}

// EstablishedAtIn applies the In predicate on the "establishedAt" field.
func EstablishedAtIn(vs ...time.Time) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldEstablishedAt, vs...))
}

// EstablishedAtNotIn applies the NotIn predicate on the "establishedAt" field.
func EstablishedAtNotIn(vs ...time.Time) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldEstablishedAt, vs...))
}

// EstablishedAtGT applies the GT predicate on the "establishedAt" field.
func EstablishedAtGT(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldEstablishedAt, v))
}

// EstablishedAtGTE applies the GTE predicate on the "establishedAt" field.
func EstablishedAtGTE(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldEstablishedAt, v))
}

// EstablishedAtLT applies the LT predicate on the "establishedAt" field.
func EstablishedAtLT(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldEstablishedAt, v))
}

// EstablishedAtLTE applies the LTE predicate on the "establishedAt" field.
func EstablishedAtLTE(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldEstablishedAt, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Company {
	return predicate.Company(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Company {
	return predicate.Company(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldDescription, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.Company {
	return predicate.Company(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.Company {
	return predicate.Company(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldEmail, v))
}

// IndustryEQ applies the EQ predicate on the "industry" field.
func IndustryEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldIndustry, v))
}

// IndustryNEQ applies the NEQ predicate on the "industry" field.
func IndustryNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldIndustry, v))
}

// IndustryIn applies the In predicate on the "industry" field.
func IndustryIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldIndustry, vs...))
}

// IndustryNotIn applies the NotIn predicate on the "industry" field.
func IndustryNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldIndustry, vs...))
}

// IndustryGT applies the GT predicate on the "industry" field.
func IndustryGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldIndustry, v))
}

// IndustryGTE applies the GTE predicate on the "industry" field.
func IndustryGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldIndustry, v))
}

// IndustryLT applies the LT predicate on the "industry" field.
func IndustryLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldIndustry, v))
}

// IndustryLTE applies the LTE predicate on the "industry" field.
func IndustryLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldIndustry, v))
}

// IndustryContains applies the Contains predicate on the "industry" field.
func IndustryContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldIndustry, v))
}

// IndustryHasPrefix applies the HasPrefix predicate on the "industry" field.
func IndustryHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldIndustry, v))
}

// IndustryHasSuffix applies the HasSuffix predicate on the "industry" field.
func IndustryHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldIndustry, v))
}

// IndustryIsNil applies the IsNil predicate on the "industry" field.
func IndustryIsNil() predicate.Company {
	return predicate.Company(sql.FieldIsNull(FieldIndustry))
}

// IndustryNotNil applies the NotNil predicate on the "industry" field.
func IndustryNotNil() predicate.Company {
	return predicate.Company(sql.FieldNotNull(FieldIndustry))
}

// IndustryEqualFold applies the EqualFold predicate on the "industry" field.
func IndustryEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldIndustry, v))
}

// IndustryContainsFold applies the ContainsFold predicate on the "industry" field.
func IndustryContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldIndustry, v))
}

// LastEntryDateEQ applies the EQ predicate on the "lastEntryDate" field.
func LastEntryDateEQ(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldLastEntryDate, v))
}

// LastEntryDateNEQ applies the NEQ predicate on the "lastEntryDate" field.
func LastEntryDateNEQ(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldLastEntryDate, v))
}

// LastEntryDateIn applies the In predicate on the "lastEntryDate" field.
func LastEntryDateIn(vs ...time.Time) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldLastEntryDate, vs...))
}

// LastEntryDateNotIn applies the NotIn predicate on the "lastEntryDate" field.
func LastEntryDateNotIn(vs ...time.Time) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldLastEntryDate, vs...))
}

// LastEntryDateGT applies the GT predicate on the "lastEntryDate" field.
func LastEntryDateGT(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldLastEntryDate, v))
}

// LastEntryDateGTE applies the GTE predicate on the "lastEntryDate" field.
func LastEntryDateGTE(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldLastEntryDate, v))
}

// LastEntryDateLT applies the LT predicate on the "lastEntryDate" field.
func LastEntryDateLT(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldLastEntryDate, v))
}

// LastEntryDateLTE applies the LTE predicate on the "lastEntryDate" field.
func LastEntryDateLTE(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldLastEntryDate, v))
}

// LastInvoiceNumberEQ applies the EQ predicate on the "lastInvoiceNumber" field.
func LastInvoiceNumberEQ(v int32) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldLastInvoiceNumber, v))
}

// LastInvoiceNumberNEQ applies the NEQ predicate on the "lastInvoiceNumber" field.
func LastInvoiceNumberNEQ(v int32) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldLastInvoiceNumber, v))
}

// LastInvoiceNumberIn applies the In predicate on the "lastInvoiceNumber" field.
func LastInvoiceNumberIn(vs ...int32) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldLastInvoiceNumber, vs...))
}

// LastInvoiceNumberNotIn applies the NotIn predicate on the "lastInvoiceNumber" field.
func LastInvoiceNumberNotIn(vs ...int32) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldLastInvoiceNumber, vs...))
}

// LastInvoiceNumberGT applies the GT predicate on the "lastInvoiceNumber" field.
func LastInvoiceNumberGT(v int32) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldLastInvoiceNumber, v))
}

// LastInvoiceNumberGTE applies the GTE predicate on the "lastInvoiceNumber" field.
func LastInvoiceNumberGTE(v int32) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldLastInvoiceNumber, v))
}

// LastInvoiceNumberLT applies the LT predicate on the "lastInvoiceNumber" field.
func LastInvoiceNumberLT(v int32) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldLastInvoiceNumber, v))
}

// LastInvoiceNumberLTE applies the LTE predicate on the "lastInvoiceNumber" field.
func LastInvoiceNumberLTE(v int32) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldLastInvoiceNumber, v))
}

// LastInvoiceNumberIsNil applies the IsNil predicate on the "lastInvoiceNumber" field.
func LastInvoiceNumberIsNil() predicate.Company {
	return predicate.Company(sql.FieldIsNull(FieldLastInvoiceNumber))
}

// LastInvoiceNumberNotNil applies the NotNil predicate on the "lastInvoiceNumber" field.
func LastInvoiceNumberNotNil() predicate.Company {
	return predicate.Company(sql.FieldNotNull(FieldLastInvoiceNumber))
}

// LogoURLEQ applies the EQ predicate on the "logoURL" field.
func LogoURLEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldLogoURL, v))
}

// LogoURLNEQ applies the NEQ predicate on the "logoURL" field.
func LogoURLNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldLogoURL, v))
}

// LogoURLIn applies the In predicate on the "logoURL" field.
func LogoURLIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldLogoURL, vs...))
}

// LogoURLNotIn applies the NotIn predicate on the "logoURL" field.
func LogoURLNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldLogoURL, vs...))
}

// LogoURLGT applies the GT predicate on the "logoURL" field.
func LogoURLGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldLogoURL, v))
}

// LogoURLGTE applies the GTE predicate on the "logoURL" field.
func LogoURLGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldLogoURL, v))
}

// LogoURLLT applies the LT predicate on the "logoURL" field.
func LogoURLLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldLogoURL, v))
}

// LogoURLLTE applies the LTE predicate on the "logoURL" field.
func LogoURLLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldLogoURL, v))
}

// LogoURLContains applies the Contains predicate on the "logoURL" field.
func LogoURLContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldLogoURL, v))
}

// LogoURLHasPrefix applies the HasPrefix predicate on the "logoURL" field.
func LogoURLHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldLogoURL, v))
}

// LogoURLHasSuffix applies the HasSuffix predicate on the "logoURL" field.
func LogoURLHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldLogoURL, v))
}

// LogoURLIsNil applies the IsNil predicate on the "logoURL" field.
func LogoURLIsNil() predicate.Company {
	return predicate.Company(sql.FieldIsNull(FieldLogoURL))
}

// LogoURLNotNil applies the NotNil predicate on the "logoURL" field.
func LogoURLNotNil() predicate.Company {
	return predicate.Company(sql.FieldNotNull(FieldLogoURL))
}

// LogoURLEqualFold applies the EqualFold predicate on the "logoURL" field.
func LogoURLEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldLogoURL, v))
}

// LogoURLContainsFold applies the ContainsFold predicate on the "logoURL" field.
func LogoURLContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldLogoURL, v))
}

// LogoStorageURIEQ applies the EQ predicate on the "logoStorageURI" field.
func LogoStorageURIEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldLogoStorageURI, v))
}

// LogoStorageURINEQ applies the NEQ predicate on the "logoStorageURI" field.
func LogoStorageURINEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldLogoStorageURI, v))
}

// LogoStorageURIIn applies the In predicate on the "logoStorageURI" field.
func LogoStorageURIIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldLogoStorageURI, vs...))
}

// LogoStorageURINotIn applies the NotIn predicate on the "logoStorageURI" field.
func LogoStorageURINotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldLogoStorageURI, vs...))
}

// LogoStorageURIGT applies the GT predicate on the "logoStorageURI" field.
func LogoStorageURIGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldLogoStorageURI, v))
}

// LogoStorageURIGTE applies the GTE predicate on the "logoStorageURI" field.
func LogoStorageURIGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldLogoStorageURI, v))
}

// LogoStorageURILT applies the LT predicate on the "logoStorageURI" field.
func LogoStorageURILT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldLogoStorageURI, v))
}

// LogoStorageURILTE applies the LTE predicate on the "logoStorageURI" field.
func LogoStorageURILTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldLogoStorageURI, v))
}

// LogoStorageURIContains applies the Contains predicate on the "logoStorageURI" field.
func LogoStorageURIContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldLogoStorageURI, v))
}

// LogoStorageURIHasPrefix applies the HasPrefix predicate on the "logoStorageURI" field.
func LogoStorageURIHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldLogoStorageURI, v))
}

// LogoStorageURIHasSuffix applies the HasSuffix predicate on the "logoStorageURI" field.
func LogoStorageURIHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldLogoStorageURI, v))
}

// LogoStorageURIIsNil applies the IsNil predicate on the "logoStorageURI" field.
func LogoStorageURIIsNil() predicate.Company {
	return predicate.Company(sql.FieldIsNull(FieldLogoStorageURI))
}

// LogoStorageURINotNil applies the NotNil predicate on the "logoStorageURI" field.
func LogoStorageURINotNil() predicate.Company {
	return predicate.Company(sql.FieldNotNull(FieldLogoStorageURI))
}

// LogoStorageURIEqualFold applies the EqualFold predicate on the "logoStorageURI" field.
func LogoStorageURIEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldLogoStorageURI, v))
}

// LogoStorageURIContainsFold applies the ContainsFold predicate on the "logoStorageURI" field.
func LogoStorageURIContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldLogoStorageURI, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldName, v))
}

// NumberOfEmployeesEQ applies the EQ predicate on the "numberOfEmployees" field.
func NumberOfEmployeesEQ(v int32) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldNumberOfEmployees, v))
}

// NumberOfEmployeesNEQ applies the NEQ predicate on the "numberOfEmployees" field.
func NumberOfEmployeesNEQ(v int32) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldNumberOfEmployees, v))
}

// NumberOfEmployeesIn applies the In predicate on the "numberOfEmployees" field.
func NumberOfEmployeesIn(vs ...int32) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldNumberOfEmployees, vs...))
}

// NumberOfEmployeesNotIn applies the NotIn predicate on the "numberOfEmployees" field.
func NumberOfEmployeesNotIn(vs ...int32) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldNumberOfEmployees, vs...))
}

// NumberOfEmployeesGT applies the GT predicate on the "numberOfEmployees" field.
func NumberOfEmployeesGT(v int32) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldNumberOfEmployees, v))
}

// NumberOfEmployeesGTE applies the GTE predicate on the "numberOfEmployees" field.
func NumberOfEmployeesGTE(v int32) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldNumberOfEmployees, v))
}

// NumberOfEmployeesLT applies the LT predicate on the "numberOfEmployees" field.
func NumberOfEmployeesLT(v int32) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldNumberOfEmployees, v))
}

// NumberOfEmployeesLTE applies the LTE predicate on the "numberOfEmployees" field.
func NumberOfEmployeesLTE(v int32) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldNumberOfEmployees, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneIsNil applies the IsNil predicate on the "phone" field.
func PhoneIsNil() predicate.Company {
	return predicate.Company(sql.FieldIsNull(FieldPhone))
}

// PhoneNotNil applies the NotNil predicate on the "phone" field.
func PhoneNotNil() predicate.Company {
	return predicate.Company(sql.FieldNotNull(FieldPhone))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldPhone, v))
}

// TaxIdEQ applies the EQ predicate on the "taxId" field.
func TaxIdEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldTaxId, v))
}

// TaxIdNEQ applies the NEQ predicate on the "taxId" field.
func TaxIdNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldTaxId, v))
}

// TaxIdIn applies the In predicate on the "taxId" field.
func TaxIdIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldTaxId, vs...))
}

// TaxIdNotIn applies the NotIn predicate on the "taxId" field.
func TaxIdNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldTaxId, vs...))
}

// TaxIdGT applies the GT predicate on the "taxId" field.
func TaxIdGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldTaxId, v))
}

// TaxIdGTE applies the GTE predicate on the "taxId" field.
func TaxIdGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldTaxId, v))
}

// TaxIdLT applies the LT predicate on the "taxId" field.
func TaxIdLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldTaxId, v))
}

// TaxIdLTE applies the LTE predicate on the "taxId" field.
func TaxIdLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldTaxId, v))
}

// TaxIdContains applies the Contains predicate on the "taxId" field.
func TaxIdContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldTaxId, v))
}

// TaxIdHasPrefix applies the HasPrefix predicate on the "taxId" field.
func TaxIdHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldTaxId, v))
}

// TaxIdHasSuffix applies the HasSuffix predicate on the "taxId" field.
func TaxIdHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldTaxId, v))
}

// TaxIdEqualFold applies the EqualFold predicate on the "taxId" field.
func TaxIdEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldTaxId, v))
}

// TaxIdContainsFold applies the ContainsFold predicate on the "taxId" field.
func TaxIdContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldTaxId, v))
}

// VatRateEQ applies the EQ predicate on the "vatRate" field.
func VatRateEQ(v float64) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldVatRate, v))
}

// VatRateNEQ applies the NEQ predicate on the "vatRate" field.
func VatRateNEQ(v float64) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldVatRate, v))
}

// VatRateIn applies the In predicate on the "vatRate" field.
func VatRateIn(vs ...float64) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldVatRate, vs...))
}

// VatRateNotIn applies the NotIn predicate on the "vatRate" field.
func VatRateNotIn(vs ...float64) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldVatRate, vs...))
}

// VatRateGT applies the GT predicate on the "vatRate" field.
func VatRateGT(v float64) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldVatRate, v))
}

// VatRateGTE applies the GTE predicate on the "vatRate" field.
func VatRateGTE(v float64) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldVatRate, v))
}

// VatRateLT applies the LT predicate on the "vatRate" field.
func VatRateLT(v float64) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldVatRate, v))
}

// VatRateLTE applies the LTE predicate on the "vatRate" field.
func VatRateLTE(v float64) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldVatRate, v))
}

// WebsiteEQ applies the EQ predicate on the "website" field.
func WebsiteEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldWebsite, v))
}

// WebsiteNEQ applies the NEQ predicate on the "website" field.
func WebsiteNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldWebsite, v))
}

// WebsiteIn applies the In predicate on the "website" field.
func WebsiteIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldWebsite, vs...))
}

// WebsiteNotIn applies the NotIn predicate on the "website" field.
func WebsiteNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldWebsite, vs...))
}

// WebsiteGT applies the GT predicate on the "website" field.
func WebsiteGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldWebsite, v))
}

// WebsiteGTE applies the GTE predicate on the "website" field.
func WebsiteGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldWebsite, v))
}

// WebsiteLT applies the LT predicate on the "website" field.
func WebsiteLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldWebsite, v))
}

// WebsiteLTE applies the LTE predicate on the "website" field.
func WebsiteLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldWebsite, v))
}

// WebsiteContains applies the Contains predicate on the "website" field.
func WebsiteContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldWebsite, v))
}

// WebsiteHasPrefix applies the HasPrefix predicate on the "website" field.
func WebsiteHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldWebsite, v))
}

// WebsiteHasSuffix applies the HasSuffix predicate on the "website" field.
func WebsiteHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldWebsite, v))
}

// WebsiteIsNil applies the IsNil predicate on the "website" field.
func WebsiteIsNil() predicate.Company {
	return predicate.Company(sql.FieldIsNull(FieldWebsite))
}

// WebsiteNotNil applies the NotNil predicate on the "website" field.
func WebsiteNotNil() predicate.Company {
	return predicate.Company(sql.FieldNotNull(FieldWebsite))
}

// WebsiteEqualFold applies the EqualFold predicate on the "website" field.
func WebsiteEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldWebsite, v))
}

// WebsiteContainsFold applies the ContainsFold predicate on the "website" field.
func WebsiteContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldWebsite, v))
}

// IncompleteSetupEQ applies the EQ predicate on the "incompleteSetup" field.
func IncompleteSetupEQ(v bool) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldIncompleteSetup, v))
}

// IncompleteSetupNEQ applies the NEQ predicate on the "incompleteSetup" field.
func IncompleteSetupNEQ(v bool) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldIncompleteSetup, v))
}

// IncompleteSetupIsNil applies the IsNil predicate on the "incompleteSetup" field.
func IncompleteSetupIsNil() predicate.Company {
	return predicate.Company(sql.FieldIsNull(FieldIncompleteSetup))
}

// IncompleteSetupNotNil applies the NotNil predicate on the "incompleteSetup" field.
func IncompleteSetupNotNil() predicate.Company {
	return predicate.Company(sql.FieldNotNull(FieldIncompleteSetup))
}

// HasAvailableRoles applies the HasEdge predicate on the "availableRoles" edge.
func HasAvailableRoles() predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AvailableRolesTable, AvailableRolesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAvailableRolesWith applies the HasEdge predicate on the "availableRoles" edge with a given conditions (other predicates).
func HasAvailableRolesWith(preds ...predicate.UserRole) predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := newAvailableRolesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAccountingEntries applies the HasEdge predicate on the "accountingEntries" edge.
func HasAccountingEntries() predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AccountingEntriesTable, AccountingEntriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAccountingEntriesWith applies the HasEdge predicate on the "accountingEntries" edge with a given conditions (other predicates).
func HasAccountingEntriesWith(preds ...predicate.AccountingEntry) predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := newAccountingEntriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCustomers applies the HasEdge predicate on the "customers" edge.
func HasCustomers() predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CustomersTable, CustomersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomersWith applies the HasEdge predicate on the "customers" edge with a given conditions (other predicates).
func HasCustomersWith(preds ...predicate.Customer) predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := newCustomersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDocuments applies the HasEdge predicate on the "documents" edge.
func HasDocuments() predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DocumentsTable, DocumentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDocumentsWith applies the HasEdge predicate on the "documents" edge with a given conditions (other predicates).
func HasDocumentsWith(preds ...predicate.CompanyDocument) predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := newDocumentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEmployees applies the HasEdge predicate on the "employees" edge.
func HasEmployees() predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EmployeesTable, EmployeesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmployeesWith applies the HasEdge predicate on the "employees" edge with a given conditions (other predicates).
func HasEmployeesWith(preds ...predicate.Employee) predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := newEmployeesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFiles applies the HasEdge predicate on the "files" edge.
func HasFiles() predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FilesTable, FilesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFilesWith applies the HasEdge predicate on the "files" edge with a given conditions (other predicates).
func HasFilesWith(preds ...predicate.File) predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := newFilesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMemberSignupTokens applies the HasEdge predicate on the "memberSignupTokens" edge.
func HasMemberSignupTokens() predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MemberSignupTokensTable, MemberSignupTokensColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMemberSignupTokensWith applies the HasEdge predicate on the "memberSignupTokens" edge with a given conditions (other predicates).
func HasMemberSignupTokensWith(preds ...predicate.MemberSignupToken) predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := newMemberSignupTokensStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProducts applies the HasEdge predicate on the "products" edge.
func HasProducts() predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductsTable, ProductsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductsWith applies the HasEdge predicate on the "products" edge with a given conditions (other predicates).
func HasProductsWith(preds ...predicate.Product) predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := newProductsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProjects applies the HasEdge predicate on the "projects" edge.
func HasProjects() predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProjectsTable, ProjectsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectsWith applies the HasEdge predicate on the "projects" edge with a given conditions (other predicates).
func HasProjectsWith(preds ...predicate.Project) predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := newProjectsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPayables applies the HasEdge predicate on the "payables" edge.
func HasPayables() predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PayablesTable, PayablesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPayablesWith applies the HasEdge predicate on the "payables" edge with a given conditions (other predicates).
func HasPayablesWith(preds ...predicate.Payable) predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := newPayablesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReceivables applies the HasEdge predicate on the "receivables" edge.
func HasReceivables() predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReceivablesTable, ReceivablesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReceivablesWith applies the HasEdge predicate on the "receivables" edge with a given conditions (other predicates).
func HasReceivablesWith(preds ...predicate.Receivable) predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := newReceivablesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSuppliers applies the HasEdge predicate on the "suppliers" edge.
func HasSuppliers() predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SuppliersTable, SuppliersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSuppliersWith applies the HasEdge predicate on the "suppliers" edge with a given conditions (other predicates).
func HasSuppliersWith(preds ...predicate.Supplier) predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := newSuppliersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTokens applies the HasEdge predicate on the "tokens" edge.
func HasTokens() predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TokensTable, TokensColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTokensWith applies the HasEdge predicate on the "tokens" edge with a given conditions (other predicates).
func HasTokensWith(preds ...predicate.Token) predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := newTokensStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTreasuries applies the HasEdge predicate on the "treasuries" edge.
func HasTreasuries() predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TreasuriesTable, TreasuriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTreasuriesWith applies the HasEdge predicate on the "treasuries" edge with a given conditions (other predicates).
func HasTreasuriesWith(preds ...predicate.Treasury) predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := newTreasuriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkShifts applies the HasEdge predicate on the "workShifts" edge.
func HasWorkShifts() predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkShiftsTable, WorkShiftsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkShiftsWith applies the HasEdge predicate on the "workShifts" edge with a given conditions (other predicates).
func HasWorkShiftsWith(preds ...predicate.Workshift) predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := newWorkShiftsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, UsersTable, UsersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDaughterCompanies applies the HasEdge predicate on the "daughterCompanies" edge.
func HasDaughterCompanies() predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DaughterCompaniesTable, DaughterCompaniesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDaughterCompaniesWith applies the HasEdge predicate on the "daughterCompanies" edge with a given conditions (other predicates).
func HasDaughterCompaniesWith(preds ...predicate.Company) predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := newDaughterCompaniesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParentCompany applies the HasEdge predicate on the "parentCompany" edge.
func HasParentCompany() predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentCompanyTable, ParentCompanyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentCompanyWith applies the HasEdge predicate on the "parentCompany" edge with a given conditions (other predicates).
func HasParentCompanyWith(preds ...predicate.Company) predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := newParentCompanyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Company) predicate.Company {
	return predicate.Company(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Company) predicate.Company {
	return predicate.Company(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Company) predicate.Company {
	return predicate.Company(sql.NotPredicates(p))
}
