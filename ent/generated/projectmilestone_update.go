// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"mazza/ent/generated/predicate"
	"mazza/ent/generated/project"
	"mazza/ent/generated/projectmilestone"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProjectMilestoneUpdate is the builder for updating ProjectMilestone entities.
type ProjectMilestoneUpdate struct {
	config
	hooks     []Hook
	mutation  *ProjectMilestoneMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ProjectMilestoneUpdate builder.
func (pmu *ProjectMilestoneUpdate) Where(ps ...predicate.ProjectMilestone) *ProjectMilestoneUpdate {
	pmu.mutation.Where(ps...)
	return pmu
}

// SetName sets the "name" field.
func (pmu *ProjectMilestoneUpdate) SetName(s string) *ProjectMilestoneUpdate {
	pmu.mutation.SetName(s)
	return pmu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pmu *ProjectMilestoneUpdate) SetNillableName(s *string) *ProjectMilestoneUpdate {
	if s != nil {
		pmu.SetName(*s)
	}
	return pmu
}

// SetDueDate sets the "dueDate" field.
func (pmu *ProjectMilestoneUpdate) SetDueDate(t time.Time) *ProjectMilestoneUpdate {
	pmu.mutation.SetDueDate(t)
	return pmu
}

// SetNillableDueDate sets the "dueDate" field if the given value is not nil.
func (pmu *ProjectMilestoneUpdate) SetNillableDueDate(t *time.Time) *ProjectMilestoneUpdate {
	if t != nil {
		pmu.SetDueDate(*t)
	}
	return pmu
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (pmu *ProjectMilestoneUpdate) SetProjectID(id int) *ProjectMilestoneUpdate {
	pmu.mutation.SetProjectID(id)
	return pmu
}

// SetProject sets the "project" edge to the Project entity.
func (pmu *ProjectMilestoneUpdate) SetProject(p *Project) *ProjectMilestoneUpdate {
	return pmu.SetProjectID(p.ID)
}

// Mutation returns the ProjectMilestoneMutation object of the builder.
func (pmu *ProjectMilestoneUpdate) Mutation() *ProjectMilestoneMutation {
	return pmu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (pmu *ProjectMilestoneUpdate) ClearProject() *ProjectMilestoneUpdate {
	pmu.mutation.ClearProject()
	return pmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pmu *ProjectMilestoneUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pmu.sqlSave, pmu.mutation, pmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pmu *ProjectMilestoneUpdate) SaveX(ctx context.Context) int {
	affected, err := pmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pmu *ProjectMilestoneUpdate) Exec(ctx context.Context) error {
	_, err := pmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmu *ProjectMilestoneUpdate) ExecX(ctx context.Context) {
	if err := pmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmu *ProjectMilestoneUpdate) check() error {
	if v, ok := pmu.mutation.Name(); ok {
		if err := projectmilestone.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "ProjectMilestone.name": %w`, err)}
		}
	}
	if pmu.mutation.ProjectCleared() && len(pmu.mutation.ProjectIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "ProjectMilestone.project"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pmu *ProjectMilestoneUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProjectMilestoneUpdate {
	pmu.modifiers = append(pmu.modifiers, modifiers...)
	return pmu
}

func (pmu *ProjectMilestoneUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(projectmilestone.Table, projectmilestone.Columns, sqlgraph.NewFieldSpec(projectmilestone.FieldID, field.TypeInt))
	if ps := pmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmu.mutation.Name(); ok {
		_spec.SetField(projectmilestone.FieldName, field.TypeString, value)
	}
	if value, ok := pmu.mutation.DueDate(); ok {
		_spec.SetField(projectmilestone.FieldDueDate, field.TypeTime, value)
	}
	if pmu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectmilestone.ProjectTable,
			Columns: []string{projectmilestone.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectmilestone.ProjectTable,
			Columns: []string{projectmilestone.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pmu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectmilestone.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pmu.mutation.done = true
	return n, nil
}

// ProjectMilestoneUpdateOne is the builder for updating a single ProjectMilestone entity.
type ProjectMilestoneUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ProjectMilestoneMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (pmuo *ProjectMilestoneUpdateOne) SetName(s string) *ProjectMilestoneUpdateOne {
	pmuo.mutation.SetName(s)
	return pmuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pmuo *ProjectMilestoneUpdateOne) SetNillableName(s *string) *ProjectMilestoneUpdateOne {
	if s != nil {
		pmuo.SetName(*s)
	}
	return pmuo
}

// SetDueDate sets the "dueDate" field.
func (pmuo *ProjectMilestoneUpdateOne) SetDueDate(t time.Time) *ProjectMilestoneUpdateOne {
	pmuo.mutation.SetDueDate(t)
	return pmuo
}

// SetNillableDueDate sets the "dueDate" field if the given value is not nil.
func (pmuo *ProjectMilestoneUpdateOne) SetNillableDueDate(t *time.Time) *ProjectMilestoneUpdateOne {
	if t != nil {
		pmuo.SetDueDate(*t)
	}
	return pmuo
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (pmuo *ProjectMilestoneUpdateOne) SetProjectID(id int) *ProjectMilestoneUpdateOne {
	pmuo.mutation.SetProjectID(id)
	return pmuo
}

// SetProject sets the "project" edge to the Project entity.
func (pmuo *ProjectMilestoneUpdateOne) SetProject(p *Project) *ProjectMilestoneUpdateOne {
	return pmuo.SetProjectID(p.ID)
}

// Mutation returns the ProjectMilestoneMutation object of the builder.
func (pmuo *ProjectMilestoneUpdateOne) Mutation() *ProjectMilestoneMutation {
	return pmuo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (pmuo *ProjectMilestoneUpdateOne) ClearProject() *ProjectMilestoneUpdateOne {
	pmuo.mutation.ClearProject()
	return pmuo
}

// Where appends a list predicates to the ProjectMilestoneUpdate builder.
func (pmuo *ProjectMilestoneUpdateOne) Where(ps ...predicate.ProjectMilestone) *ProjectMilestoneUpdateOne {
	pmuo.mutation.Where(ps...)
	return pmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pmuo *ProjectMilestoneUpdateOne) Select(field string, fields ...string) *ProjectMilestoneUpdateOne {
	pmuo.fields = append([]string{field}, fields...)
	return pmuo
}

// Save executes the query and returns the updated ProjectMilestone entity.
func (pmuo *ProjectMilestoneUpdateOne) Save(ctx context.Context) (*ProjectMilestone, error) {
	return withHooks(ctx, pmuo.sqlSave, pmuo.mutation, pmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pmuo *ProjectMilestoneUpdateOne) SaveX(ctx context.Context) *ProjectMilestone {
	node, err := pmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pmuo *ProjectMilestoneUpdateOne) Exec(ctx context.Context) error {
	_, err := pmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmuo *ProjectMilestoneUpdateOne) ExecX(ctx context.Context) {
	if err := pmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmuo *ProjectMilestoneUpdateOne) check() error {
	if v, ok := pmuo.mutation.Name(); ok {
		if err := projectmilestone.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "ProjectMilestone.name": %w`, err)}
		}
	}
	if pmuo.mutation.ProjectCleared() && len(pmuo.mutation.ProjectIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "ProjectMilestone.project"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pmuo *ProjectMilestoneUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProjectMilestoneUpdateOne {
	pmuo.modifiers = append(pmuo.modifiers, modifiers...)
	return pmuo
}

func (pmuo *ProjectMilestoneUpdateOne) sqlSave(ctx context.Context) (_node *ProjectMilestone, err error) {
	if err := pmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(projectmilestone.Table, projectmilestone.Columns, sqlgraph.NewFieldSpec(projectmilestone.FieldID, field.TypeInt))
	id, ok := pmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ProjectMilestone.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projectmilestone.FieldID)
		for _, f := range fields {
			if !projectmilestone.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != projectmilestone.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmuo.mutation.Name(); ok {
		_spec.SetField(projectmilestone.FieldName, field.TypeString, value)
	}
	if value, ok := pmuo.mutation.DueDate(); ok {
		_spec.SetField(projectmilestone.FieldDueDate, field.TypeTime, value)
	}
	if pmuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectmilestone.ProjectTable,
			Columns: []string{projectmilestone.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectmilestone.ProjectTable,
			Columns: []string{projectmilestone.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pmuo.modifiers...)
	_node = &ProjectMilestone{config: pmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectmilestone.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pmuo.mutation.done = true
	return _node, nil
}
