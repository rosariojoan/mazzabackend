// Code generated by ent, DO NOT EDIT.

package productmovement

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the productmovement type in the database.
	Label = "product_movement"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deletedat field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldEntryGroup holds the string denoting the entrygroup field in the database.
	FieldEntryGroup = "entry_group"
	// FieldAverageCost holds the string denoting the averagecost field in the database.
	FieldAverageCost = "average_cost"
	// FieldUnitCost holds the string denoting the unitcost field in the database.
	FieldUnitCost = "unit_cost"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldQuantity holds the string denoting the quantity field in the database.
	FieldQuantity = "quantity"
	// EdgeProduct holds the string denoting the product edge name in mutations.
	EdgeProduct = "product"
	// Table holds the table name of the productmovement in the database.
	Table = "product_movements"
	// ProductTable is the table that holds the product relation/edge.
	ProductTable = "product_movements"
	// ProductInverseTable is the table name for the Product entity.
	// It exists in this package in order to avoid circular dependency with the "product" package.
	ProductInverseTable = "products"
	// ProductColumn is the table column denoting the product relation/edge.
	ProductColumn = "product_product_movements"
)

// Columns holds all SQL columns for productmovement fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldEntryGroup,
	FieldAverageCost,
	FieldUnitCost,
	FieldPrice,
	FieldQuantity,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "product_movements"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"product_product_movements",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
	// EntryGroupValidator is a validator for the "entryGroup" field. It is called by the builders before save.
	EntryGroupValidator func(int) error
	// AverageCostValidator is a validator for the "averageCost" field. It is called by the builders before save.
	AverageCostValidator func(float64) error
	// UnitCostValidator is a validator for the "unitCost" field. It is called by the builders before save.
	UnitCostValidator func(float64) error
	// DefaultPrice holds the default value on creation for the "price" field.
	DefaultPrice float64
	// PriceValidator is a validator for the "price" field. It is called by the builders before save.
	PriceValidator func(float64) error
)

// OrderOption defines the ordering options for the ProductMovement queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deletedAt field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByEntryGroup orders the results by the entryGroup field.
func ByEntryGroup(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntryGroup, opts...).ToFunc()
}

// ByAverageCost orders the results by the averageCost field.
func ByAverageCost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAverageCost, opts...).ToFunc()
}

// ByUnitCost orders the results by the unitCost field.
func ByUnitCost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnitCost, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByQuantity orders the results by the quantity field.
func ByQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuantity, opts...).ToFunc()
}

// ByProductField orders the results by product field.
func ByProductField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductStep(), sql.OrderByField(field, opts...))
	}
}
func newProductStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
	)
}
