// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"mazza/ent/generated/company"
	"mazza/ent/generated/employee"
	"mazza/ent/generated/user"
	"mazza/ent/generated/workshift"
	"mazza/ent/generated/worktag"
	"mazza/ent/generated/worktask"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorktaskCreate is the builder for creating a Worktask entity.
type WorktaskCreate struct {
	config
	mutation *WorktaskMutation
	hooks    []Hook
}

// SetCreatedAt sets the "createdAt" field.
func (wc *WorktaskCreate) SetCreatedAt(t time.Time) *WorktaskCreate {
	wc.mutation.SetCreatedAt(t)
	return wc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (wc *WorktaskCreate) SetNillableCreatedAt(t *time.Time) *WorktaskCreate {
	if t != nil {
		wc.SetCreatedAt(*t)
	}
	return wc
}

// SetUpdatedAt sets the "updatedAt" field.
func (wc *WorktaskCreate) SetUpdatedAt(t time.Time) *WorktaskCreate {
	wc.mutation.SetUpdatedAt(t)
	return wc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (wc *WorktaskCreate) SetNillableUpdatedAt(t *time.Time) *WorktaskCreate {
	if t != nil {
		wc.SetUpdatedAt(*t)
	}
	return wc
}

// SetDeletedAt sets the "deletedAt" field.
func (wc *WorktaskCreate) SetDeletedAt(t time.Time) *WorktaskCreate {
	wc.mutation.SetDeletedAt(t)
	return wc
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (wc *WorktaskCreate) SetNillableDeletedAt(t *time.Time) *WorktaskCreate {
	if t != nil {
		wc.SetDeletedAt(*t)
	}
	return wc
}

// SetDescription sets the "description" field.
func (wc *WorktaskCreate) SetDescription(s string) *WorktaskCreate {
	wc.mutation.SetDescription(s)
	return wc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wc *WorktaskCreate) SetNillableDescription(s *string) *WorktaskCreate {
	if s != nil {
		wc.SetDescription(*s)
	}
	return wc
}

// SetStatus sets the "status" field.
func (wc *WorktaskCreate) SetStatus(w worktask.Status) *WorktaskCreate {
	wc.mutation.SetStatus(w)
	return wc
}

// SetSubtasks sets the "subtasks" field.
func (wc *WorktaskCreate) SetSubtasks(s []string) *WorktaskCreate {
	wc.mutation.SetSubtasks(s)
	return wc
}

// SetTitle sets the "title" field.
func (wc *WorktaskCreate) SetTitle(s string) *WorktaskCreate {
	wc.mutation.SetTitle(s)
	return wc
}

// SetStartTime sets the "startTime" field.
func (wc *WorktaskCreate) SetStartTime(t time.Time) *WorktaskCreate {
	wc.mutation.SetStartTime(t)
	return wc
}

// SetEndTime sets the "endTime" field.
func (wc *WorktaskCreate) SetEndTime(t time.Time) *WorktaskCreate {
	wc.mutation.SetEndTime(t)
	return wc
}

// SetNillableEndTime sets the "endTime" field if the given value is not nil.
func (wc *WorktaskCreate) SetNillableEndTime(t *time.Time) *WorktaskCreate {
	if t != nil {
		wc.SetEndTime(*t)
	}
	return wc
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (wc *WorktaskCreate) SetCompanyID(id int) *WorktaskCreate {
	wc.mutation.SetCompanyID(id)
	return wc
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (wc *WorktaskCreate) SetNillableCompanyID(id *int) *WorktaskCreate {
	if id != nil {
		wc = wc.SetCompanyID(*id)
	}
	return wc
}

// SetCompany sets the "company" edge to the Company entity.
func (wc *WorktaskCreate) SetCompany(c *Company) *WorktaskCreate {
	return wc.SetCompanyID(c.ID)
}

// SetCreatedByID sets the "createdBy" edge to the User entity by ID.
func (wc *WorktaskCreate) SetCreatedByID(id int) *WorktaskCreate {
	wc.mutation.SetCreatedByID(id)
	return wc
}

// SetNillableCreatedByID sets the "createdBy" edge to the User entity by ID if the given value is not nil.
func (wc *WorktaskCreate) SetNillableCreatedByID(id *int) *WorktaskCreate {
	if id != nil {
		wc = wc.SetCreatedByID(*id)
	}
	return wc
}

// SetCreatedBy sets the "createdBy" edge to the User entity.
func (wc *WorktaskCreate) SetCreatedBy(u *User) *WorktaskCreate {
	return wc.SetCreatedByID(u.ID)
}

// AddAssignedToIDs adds the "assignedTo" edge to the Employee entity by IDs.
func (wc *WorktaskCreate) AddAssignedToIDs(ids ...int) *WorktaskCreate {
	wc.mutation.AddAssignedToIDs(ids...)
	return wc
}

// AddAssignedTo adds the "assignedTo" edges to the Employee entity.
func (wc *WorktaskCreate) AddAssignedTo(e ...*Employee) *WorktaskCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return wc.AddAssignedToIDs(ids...)
}

// AddWorkShiftIDs adds the "workShifts" edge to the Workshift entity by IDs.
func (wc *WorktaskCreate) AddWorkShiftIDs(ids ...int) *WorktaskCreate {
	wc.mutation.AddWorkShiftIDs(ids...)
	return wc
}

// AddWorkShifts adds the "workShifts" edges to the Workshift entity.
func (wc *WorktaskCreate) AddWorkShifts(w ...*Workshift) *WorktaskCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wc.AddWorkShiftIDs(ids...)
}

// AddWorkTagIDs adds the "workTags" edge to the Worktag entity by IDs.
func (wc *WorktaskCreate) AddWorkTagIDs(ids ...int) *WorktaskCreate {
	wc.mutation.AddWorkTagIDs(ids...)
	return wc
}

// AddWorkTags adds the "workTags" edges to the Worktag entity.
func (wc *WorktaskCreate) AddWorkTags(w ...*Worktag) *WorktaskCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wc.AddWorkTagIDs(ids...)
}

// Mutation returns the WorktaskMutation object of the builder.
func (wc *WorktaskCreate) Mutation() *WorktaskMutation {
	return wc.mutation
}

// Save creates the Worktask in the database.
func (wc *WorktaskCreate) Save(ctx context.Context) (*Worktask, error) {
	if err := wc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, wc.sqlSave, wc.mutation, wc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WorktaskCreate) SaveX(ctx context.Context) *Worktask {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *WorktaskCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *WorktaskCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wc *WorktaskCreate) defaults() error {
	if _, ok := wc.mutation.CreatedAt(); !ok {
		if worktask.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized worktask.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := worktask.DefaultCreatedAt()
		wc.mutation.SetCreatedAt(v)
	}
	if _, ok := wc.mutation.UpdatedAt(); !ok {
		if worktask.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized worktask.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := worktask.DefaultUpdatedAt()
		wc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wc *WorktaskCreate) check() error {
	if _, ok := wc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`generated: missing required field "Worktask.createdAt"`)}
	}
	if _, ok := wc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`generated: missing required field "Worktask.updatedAt"`)}
	}
	if _, ok := wc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`generated: missing required field "Worktask.status"`)}
	}
	if v, ok := wc.mutation.Status(); ok {
		if err := worktask.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Worktask.status": %w`, err)}
		}
	}
	if _, ok := wc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`generated: missing required field "Worktask.title"`)}
	}
	if _, ok := wc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "startTime", err: errors.New(`generated: missing required field "Worktask.startTime"`)}
	}
	return nil
}

func (wc *WorktaskCreate) sqlSave(ctx context.Context) (*Worktask, error) {
	if err := wc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	wc.mutation.id = &_node.ID
	wc.mutation.done = true
	return _node, nil
}

func (wc *WorktaskCreate) createSpec() (*Worktask, *sqlgraph.CreateSpec) {
	var (
		_node = &Worktask{config: wc.config}
		_spec = sqlgraph.NewCreateSpec(worktask.Table, sqlgraph.NewFieldSpec(worktask.FieldID, field.TypeInt))
	)
	if value, ok := wc.mutation.CreatedAt(); ok {
		_spec.SetField(worktask.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wc.mutation.UpdatedAt(); ok {
		_spec.SetField(worktask.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := wc.mutation.DeletedAt(); ok {
		_spec.SetField(worktask.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := wc.mutation.Description(); ok {
		_spec.SetField(worktask.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := wc.mutation.Status(); ok {
		_spec.SetField(worktask.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := wc.mutation.Subtasks(); ok {
		_spec.SetField(worktask.FieldSubtasks, field.TypeJSON, value)
		_node.Subtasks = value
	}
	if value, ok := wc.mutation.Title(); ok {
		_spec.SetField(worktask.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := wc.mutation.StartTime(); ok {
		_spec.SetField(worktask.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := wc.mutation.EndTime(); ok {
		_spec.SetField(worktask.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if nodes := wc.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   worktask.CompanyTable,
			Columns: []string{worktask.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.company_work_tasks = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   worktask.CreatedByTable,
			Columns: []string{worktask.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_created_tasks = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.AssignedToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   worktask.AssignedToTable,
			Columns: worktask.AssignedToPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.WorkShiftsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   worktask.WorkShiftsTable,
			Columns: []string{worktask.WorkShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.WorkTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   worktask.WorkTagsTable,
			Columns: worktask.WorkTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worktag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WorktaskCreateBulk is the builder for creating many Worktask entities in bulk.
type WorktaskCreateBulk struct {
	config
	err      error
	builders []*WorktaskCreate
}

// Save creates the Worktask entities in the database.
func (wcb *WorktaskCreateBulk) Save(ctx context.Context) ([]*Worktask, error) {
	if wcb.err != nil {
		return nil, wcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Worktask, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorktaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WorktaskCreateBulk) SaveX(ctx context.Context) []*Worktask {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *WorktaskCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *WorktaskCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}
