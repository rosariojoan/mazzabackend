// Code generated by ent, DO NOT EDIT.

package user

import (
	"mazza/ent/generated/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deletedAt" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDeletedAt, v))
}

// FirebaseUID applies equality check predicate on the "firebaseUID" field. It's identical to FirebaseUIDEQ.
func FirebaseUID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFirebaseUID, v))
}

// FcmToken applies equality check predicate on the "fcmToken" field. It's identical to FcmTokenEQ.
func FcmToken(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFcmToken, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhone, v))
}

// Birthdate applies equality check predicate on the "birthdate" field. It's identical to BirthdateEQ.
func Birthdate(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBirthdate, v))
}

// Disabled applies equality check predicate on the "disabled" field. It's identical to DisabledEQ.
func Disabled(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDisabled, v))
}

// NotVerified applies equality check predicate on the "notVerified" field. It's identical to NotVerifiedEQ.
func NotVerified(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNotVerified, v))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deletedAt" field.
func DeletedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deletedAt" field.
func DeletedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deletedAt" field.
func DeletedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deletedAt" field.
func DeletedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deletedAt" field.
func DeletedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deletedAt" field.
func DeletedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deletedAt" field.
func DeletedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deletedAt" field.
func DeletedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deletedAt" field.
func DeletedAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deletedAt" field.
func DeletedAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldDeletedAt))
}

// FirebaseUIDEQ applies the EQ predicate on the "firebaseUID" field.
func FirebaseUIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFirebaseUID, v))
}

// FirebaseUIDNEQ applies the NEQ predicate on the "firebaseUID" field.
func FirebaseUIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldFirebaseUID, v))
}

// FirebaseUIDIn applies the In predicate on the "firebaseUID" field.
func FirebaseUIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldFirebaseUID, vs...))
}

// FirebaseUIDNotIn applies the NotIn predicate on the "firebaseUID" field.
func FirebaseUIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldFirebaseUID, vs...))
}

// FirebaseUIDGT applies the GT predicate on the "firebaseUID" field.
func FirebaseUIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldFirebaseUID, v))
}

// FirebaseUIDGTE applies the GTE predicate on the "firebaseUID" field.
func FirebaseUIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldFirebaseUID, v))
}

// FirebaseUIDLT applies the LT predicate on the "firebaseUID" field.
func FirebaseUIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldFirebaseUID, v))
}

// FirebaseUIDLTE applies the LTE predicate on the "firebaseUID" field.
func FirebaseUIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldFirebaseUID, v))
}

// FirebaseUIDContains applies the Contains predicate on the "firebaseUID" field.
func FirebaseUIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldFirebaseUID, v))
}

// FirebaseUIDHasPrefix applies the HasPrefix predicate on the "firebaseUID" field.
func FirebaseUIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldFirebaseUID, v))
}

// FirebaseUIDHasSuffix applies the HasSuffix predicate on the "firebaseUID" field.
func FirebaseUIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldFirebaseUID, v))
}

// FirebaseUIDEqualFold applies the EqualFold predicate on the "firebaseUID" field.
func FirebaseUIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldFirebaseUID, v))
}

// FirebaseUIDContainsFold applies the ContainsFold predicate on the "firebaseUID" field.
func FirebaseUIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldFirebaseUID, v))
}

// FcmTokenEQ applies the EQ predicate on the "fcmToken" field.
func FcmTokenEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFcmToken, v))
}

// FcmTokenNEQ applies the NEQ predicate on the "fcmToken" field.
func FcmTokenNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldFcmToken, v))
}

// FcmTokenIn applies the In predicate on the "fcmToken" field.
func FcmTokenIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldFcmToken, vs...))
}

// FcmTokenNotIn applies the NotIn predicate on the "fcmToken" field.
func FcmTokenNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldFcmToken, vs...))
}

// FcmTokenGT applies the GT predicate on the "fcmToken" field.
func FcmTokenGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldFcmToken, v))
}

// FcmTokenGTE applies the GTE predicate on the "fcmToken" field.
func FcmTokenGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldFcmToken, v))
}

// FcmTokenLT applies the LT predicate on the "fcmToken" field.
func FcmTokenLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldFcmToken, v))
}

// FcmTokenLTE applies the LTE predicate on the "fcmToken" field.
func FcmTokenLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldFcmToken, v))
}

// FcmTokenContains applies the Contains predicate on the "fcmToken" field.
func FcmTokenContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldFcmToken, v))
}

// FcmTokenHasPrefix applies the HasPrefix predicate on the "fcmToken" field.
func FcmTokenHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldFcmToken, v))
}

// FcmTokenHasSuffix applies the HasSuffix predicate on the "fcmToken" field.
func FcmTokenHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldFcmToken, v))
}

// FcmTokenIsNil applies the IsNil predicate on the "fcmToken" field.
func FcmTokenIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldFcmToken))
}

// FcmTokenNotNil applies the NotNil predicate on the "fcmToken" field.
func FcmTokenNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldFcmToken))
}

// FcmTokenEqualFold applies the EqualFold predicate on the "fcmToken" field.
func FcmTokenEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldFcmToken, v))
}

// FcmTokenContainsFold applies the ContainsFold predicate on the "fcmToken" field.
func FcmTokenContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldFcmToken, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldName, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneIsNil applies the IsNil predicate on the "phone" field.
func PhoneIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPhone))
}

// PhoneNotNil applies the NotNil predicate on the "phone" field.
func PhoneNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPhone))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPhone, v))
}

// BirthdateEQ applies the EQ predicate on the "birthdate" field.
func BirthdateEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBirthdate, v))
}

// BirthdateNEQ applies the NEQ predicate on the "birthdate" field.
func BirthdateNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBirthdate, v))
}

// BirthdateIn applies the In predicate on the "birthdate" field.
func BirthdateIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldBirthdate, vs...))
}

// BirthdateNotIn applies the NotIn predicate on the "birthdate" field.
func BirthdateNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBirthdate, vs...))
}

// BirthdateGT applies the GT predicate on the "birthdate" field.
func BirthdateGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldBirthdate, v))
}

// BirthdateGTE applies the GTE predicate on the "birthdate" field.
func BirthdateGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldBirthdate, v))
}

// BirthdateLT applies the LT predicate on the "birthdate" field.
func BirthdateLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldBirthdate, v))
}

// BirthdateLTE applies the LTE predicate on the "birthdate" field.
func BirthdateLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldBirthdate, v))
}

// BirthdateIsNil applies the IsNil predicate on the "birthdate" field.
func BirthdateIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldBirthdate))
}

// BirthdateNotNil applies the NotNil predicate on the "birthdate" field.
func BirthdateNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldBirthdate))
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v Gender) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGender, v))
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v Gender) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldGender, v))
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...Gender) predicate.User {
	return predicate.User(sql.FieldIn(FieldGender, vs...))
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...Gender) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldGender, vs...))
}

// DisabledEQ applies the EQ predicate on the "disabled" field.
func DisabledEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDisabled, v))
}

// DisabledNEQ applies the NEQ predicate on the "disabled" field.
func DisabledNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDisabled, v))
}

// DisabledIsNil applies the IsNil predicate on the "disabled" field.
func DisabledIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldDisabled))
}

// DisabledNotNil applies the NotNil predicate on the "disabled" field.
func DisabledNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldDisabled))
}

// NotVerifiedEQ applies the EQ predicate on the "notVerified" field.
func NotVerifiedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNotVerified, v))
}

// NotVerifiedNEQ applies the NEQ predicate on the "notVerified" field.
func NotVerifiedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldNotVerified, v))
}

// NotVerifiedIsNil applies the IsNil predicate on the "notVerified" field.
func NotVerifiedIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldNotVerified))
}

// NotVerifiedNotNil applies the NotNil predicate on the "notVerified" field.
func NotVerifiedNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldNotVerified))
}

// HasAccountingEntries applies the HasEdge predicate on the "accountingEntries" edge.
func HasAccountingEntries() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AccountingEntriesTable, AccountingEntriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAccountingEntriesWith applies the HasEdge predicate on the "accountingEntries" edge with a given conditions (other predicates).
func HasAccountingEntriesWith(preds ...predicate.AccountingEntry) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newAccountingEntriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCompany applies the HasEdge predicate on the "company" edge.
func HasCompany() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CompanyTable, CompanyPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompanyWith applies the HasEdge predicate on the "company" edge with a given conditions (other predicates).
func HasCompanyWith(preds ...predicate.Company) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newCompanyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAssignedRoles applies the HasEdge predicate on the "assignedRoles" edge.
func HasAssignedRoles() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, AssignedRolesTable, AssignedRolesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssignedRolesWith applies the HasEdge predicate on the "assignedRoles" edge with a given conditions (other predicates).
func HasAssignedRolesWith(preds ...predicate.UserRole) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newAssignedRolesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubordinates applies the HasEdge predicate on the "subordinates" edge.
func HasSubordinates() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SubordinatesTable, SubordinatesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubordinatesWith applies the HasEdge predicate on the "subordinates" edge with a given conditions (other predicates).
func HasSubordinatesWith(preds ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newSubordinatesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLeader applies the HasEdge predicate on the "leader" edge.
func HasLeader() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LeaderTable, LeaderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLeaderWith applies the HasEdge predicate on the "leader" edge with a given conditions (other predicates).
func HasLeaderWith(preds ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newLeaderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEmployee applies the HasEdge predicate on the "employee" edge.
func HasEmployee() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmployeeWith applies the HasEdge predicate on the "employee" edge with a given conditions (other predicates).
func HasEmployeeWith(preds ...predicate.Employee) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newEmployeeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreatedProjects applies the HasEdge predicate on the "createdProjects" edge.
func HasCreatedProjects() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CreatedProjectsTable, CreatedProjectsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatedProjectsWith applies the HasEdge predicate on the "createdProjects" edge with a given conditions (other predicates).
func HasCreatedProjectsWith(preds ...predicate.Project) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newCreatedProjectsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLeaderedProjects applies the HasEdge predicate on the "leaderedProjects" edge.
func HasLeaderedProjects() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LeaderedProjectsTable, LeaderedProjectsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLeaderedProjectsWith applies the HasEdge predicate on the "leaderedProjects" edge with a given conditions (other predicates).
func HasLeaderedProjectsWith(preds ...predicate.Project) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newLeaderedProjectsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAssignedProjectTasks applies the HasEdge predicate on the "assignedProjectTasks" edge.
func HasAssignedProjectTasks() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AssignedProjectTasksTable, AssignedProjectTasksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssignedProjectTasksWith applies the HasEdge predicate on the "assignedProjectTasks" edge with a given conditions (other predicates).
func HasAssignedProjectTasksWith(preds ...predicate.ProjectTask) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newAssignedProjectTasksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParticipatedProjectTasks applies the HasEdge predicate on the "participatedProjectTasks" edge.
func HasParticipatedProjectTasks() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ParticipatedProjectTasksTable, ParticipatedProjectTasksPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParticipatedProjectTasksWith applies the HasEdge predicate on the "participatedProjectTasks" edge with a given conditions (other predicates).
func HasParticipatedProjectTasksWith(preds ...predicate.ProjectTask) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newParticipatedProjectTasksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreatedTasks applies the HasEdge predicate on the "createdTasks" edge.
func HasCreatedTasks() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CreatedTasksTable, CreatedTasksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatedTasksWith applies the HasEdge predicate on the "createdTasks" edge with a given conditions (other predicates).
func HasCreatedTasksWith(preds ...predicate.ProjectTask) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newCreatedTasksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTokens applies the HasEdge predicate on the "tokens" edge.
func HasTokens() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TokensTable, TokensColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTokensWith applies the HasEdge predicate on the "tokens" edge with a given conditions (other predicates).
func HasTokensWith(preds ...predicate.Token) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newTokensStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasApprovedWorkShifts applies the HasEdge predicate on the "approvedWorkShifts" edge.
func HasApprovedWorkShifts() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ApprovedWorkShiftsTable, ApprovedWorkShiftsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApprovedWorkShiftsWith applies the HasEdge predicate on the "approvedWorkShifts" edge with a given conditions (other predicates).
func HasApprovedWorkShiftsWith(preds ...predicate.Workshift) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newApprovedWorkShiftsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkShifts applies the HasEdge predicate on the "workShifts" edge.
func HasWorkShifts() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkShiftsTable, WorkShiftsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkShiftsWith applies the HasEdge predicate on the "workShifts" edge with a given conditions (other predicates).
func HasWorkShiftsWith(preds ...predicate.Workshift) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newWorkShiftsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUploadedDocuments applies the HasEdge predicate on the "uploadedDocuments" edge.
func HasUploadedDocuments() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UploadedDocumentsTable, UploadedDocumentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUploadedDocumentsWith applies the HasEdge predicate on the "uploadedDocuments" edge with a given conditions (other predicates).
func HasUploadedDocumentsWith(preds ...predicate.CompanyDocument) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newUploadedDocumentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasApprovedDocuments applies the HasEdge predicate on the "approvedDocuments" edge.
func HasApprovedDocuments() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ApprovedDocumentsTable, ApprovedDocumentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApprovedDocumentsWith applies the HasEdge predicate on the "approvedDocuments" edge with a given conditions (other predicates).
func HasApprovedDocumentsWith(preds ...predicate.CompanyDocument) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newApprovedDocumentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
