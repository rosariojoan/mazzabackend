// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"mazza/ent/generated/accountingentry"
	"mazza/ent/generated/company"
	"mazza/ent/generated/companydocument"
	"mazza/ent/generated/employee"
	"mazza/ent/generated/predicate"
	"mazza/ent/generated/project"
	"mazza/ent/generated/projecttask"
	"mazza/ent/generated/token"
	"mazza/ent/generated/user"
	"mazza/ent/generated/userrole"
	"mazza/ent/generated/workshift"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserQuery is the builder for querying User entities.
type UserQuery struct {
	config
	ctx                               *QueryContext
	order                             []user.OrderOption
	inters                            []Interceptor
	predicates                        []predicate.User
	withAccountingEntries             *AccountingEntryQuery
	withCompany                       *CompanyQuery
	withAssignedRoles                 *UserRoleQuery
	withSubordinates                  *UserQuery
	withLeader                        *UserQuery
	withEmployee                      *EmployeeQuery
	withCreatedProjects               *ProjectQuery
	withLeaderedProjects              *ProjectQuery
	withAssignedProjectTasks          *ProjectTaskQuery
	withParticipatedProjectTasks      *ProjectTaskQuery
	withCreatedTasks                  *ProjectTaskQuery
	withTokens                        *TokenQuery
	withApprovedWorkShifts            *WorkshiftQuery
	withWorkShifts                    *WorkshiftQuery
	withUploadedDocuments             *CompanyDocumentQuery
	withApprovedDocuments             *CompanyDocumentQuery
	withFKs                           bool
	loadTotal                         []func(context.Context, []*User) error
	modifiers                         []func(*sql.Selector)
	withNamedAccountingEntries        map[string]*AccountingEntryQuery
	withNamedCompany                  map[string]*CompanyQuery
	withNamedAssignedRoles            map[string]*UserRoleQuery
	withNamedSubordinates             map[string]*UserQuery
	withNamedCreatedProjects          map[string]*ProjectQuery
	withNamedLeaderedProjects         map[string]*ProjectQuery
	withNamedAssignedProjectTasks     map[string]*ProjectTaskQuery
	withNamedParticipatedProjectTasks map[string]*ProjectTaskQuery
	withNamedCreatedTasks             map[string]*ProjectTaskQuery
	withNamedTokens                   map[string]*TokenQuery
	withNamedApprovedWorkShifts       map[string]*WorkshiftQuery
	withNamedWorkShifts               map[string]*WorkshiftQuery
	withNamedUploadedDocuments        map[string]*CompanyDocumentQuery
	withNamedApprovedDocuments        map[string]*CompanyDocumentQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserQuery builder.
func (uq *UserQuery) Where(ps ...predicate.User) *UserQuery {
	uq.predicates = append(uq.predicates, ps...)
	return uq
}

// Limit the number of records to be returned by this query.
func (uq *UserQuery) Limit(limit int) *UserQuery {
	uq.ctx.Limit = &limit
	return uq
}

// Offset to start from.
func (uq *UserQuery) Offset(offset int) *UserQuery {
	uq.ctx.Offset = &offset
	return uq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (uq *UserQuery) Unique(unique bool) *UserQuery {
	uq.ctx.Unique = &unique
	return uq
}

// Order specifies how the records should be ordered.
func (uq *UserQuery) Order(o ...user.OrderOption) *UserQuery {
	uq.order = append(uq.order, o...)
	return uq
}

// QueryAccountingEntries chains the current query on the "accountingEntries" edge.
func (uq *UserQuery) QueryAccountingEntries() *AccountingEntryQuery {
	query := (&AccountingEntryClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(accountingentry.Table, accountingentry.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AccountingEntriesTable, user.AccountingEntriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCompany chains the current query on the "company" edge.
func (uq *UserQuery) QueryCompany() *CompanyQuery {
	query := (&CompanyClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(company.Table, company.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.CompanyTable, user.CompanyPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAssignedRoles chains the current query on the "assignedRoles" edge.
func (uq *UserQuery) QueryAssignedRoles() *UserRoleQuery {
	query := (&UserRoleClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(userrole.Table, userrole.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.AssignedRolesTable, user.AssignedRolesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubordinates chains the current query on the "subordinates" edge.
func (uq *UserQuery) QuerySubordinates() *UserQuery {
	query := (&UserClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SubordinatesTable, user.SubordinatesColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLeader chains the current query on the "leader" edge.
func (uq *UserQuery) QueryLeader() *UserQuery {
	query := (&UserClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.LeaderTable, user.LeaderColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEmployee chains the current query on the "employee" edge.
func (uq *UserQuery) QueryEmployee() *EmployeeQuery {
	query := (&EmployeeClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.EmployeeTable, user.EmployeeColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreatedProjects chains the current query on the "createdProjects" edge.
func (uq *UserQuery) QueryCreatedProjects() *ProjectQuery {
	query := (&ProjectClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CreatedProjectsTable, user.CreatedProjectsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLeaderedProjects chains the current query on the "leaderedProjects" edge.
func (uq *UserQuery) QueryLeaderedProjects() *ProjectQuery {
	query := (&ProjectClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.LeaderedProjectsTable, user.LeaderedProjectsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAssignedProjectTasks chains the current query on the "assignedProjectTasks" edge.
func (uq *UserQuery) QueryAssignedProjectTasks() *ProjectTaskQuery {
	query := (&ProjectTaskClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(projecttask.Table, projecttask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AssignedProjectTasksTable, user.AssignedProjectTasksColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParticipatedProjectTasks chains the current query on the "participatedProjectTasks" edge.
func (uq *UserQuery) QueryParticipatedProjectTasks() *ProjectTaskQuery {
	query := (&ProjectTaskClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(projecttask.Table, projecttask.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.ParticipatedProjectTasksTable, user.ParticipatedProjectTasksPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreatedTasks chains the current query on the "createdTasks" edge.
func (uq *UserQuery) QueryCreatedTasks() *ProjectTaskQuery {
	query := (&ProjectTaskClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(projecttask.Table, projecttask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CreatedTasksTable, user.CreatedTasksColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTokens chains the current query on the "tokens" edge.
func (uq *UserQuery) QueryTokens() *TokenQuery {
	query := (&TokenClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(token.Table, token.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.TokensTable, user.TokensColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryApprovedWorkShifts chains the current query on the "approvedWorkShifts" edge.
func (uq *UserQuery) QueryApprovedWorkShifts() *WorkshiftQuery {
	query := (&WorkshiftClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(workshift.Table, workshift.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ApprovedWorkShiftsTable, user.ApprovedWorkShiftsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkShifts chains the current query on the "workShifts" edge.
func (uq *UserQuery) QueryWorkShifts() *WorkshiftQuery {
	query := (&WorkshiftClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(workshift.Table, workshift.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.WorkShiftsTable, user.WorkShiftsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUploadedDocuments chains the current query on the "uploadedDocuments" edge.
func (uq *UserQuery) QueryUploadedDocuments() *CompanyDocumentQuery {
	query := (&CompanyDocumentClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(companydocument.Table, companydocument.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UploadedDocumentsTable, user.UploadedDocumentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryApprovedDocuments chains the current query on the "approvedDocuments" edge.
func (uq *UserQuery) QueryApprovedDocuments() *CompanyDocumentQuery {
	query := (&CompanyDocumentClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(companydocument.Table, companydocument.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ApprovedDocumentsTable, user.ApprovedDocumentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first User entity from the query.
// Returns a *NotFoundError when no User was found.
func (uq *UserQuery) First(ctx context.Context) (*User, error) {
	nodes, err := uq.Limit(1).All(setContextOp(ctx, uq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{user.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (uq *UserQuery) FirstX(ctx context.Context) *User {
	node, err := uq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first User ID from the query.
// Returns a *NotFoundError when no User ID was found.
func (uq *UserQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = uq.Limit(1).IDs(setContextOp(ctx, uq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{user.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (uq *UserQuery) FirstIDX(ctx context.Context) int {
	id, err := uq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single User entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one User entity is found.
// Returns a *NotFoundError when no User entities are found.
func (uq *UserQuery) Only(ctx context.Context) (*User, error) {
	nodes, err := uq.Limit(2).All(setContextOp(ctx, uq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{user.Label}
	default:
		return nil, &NotSingularError{user.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (uq *UserQuery) OnlyX(ctx context.Context) *User {
	node, err := uq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only User ID in the query.
// Returns a *NotSingularError when more than one User ID is found.
// Returns a *NotFoundError when no entities are found.
func (uq *UserQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = uq.Limit(2).IDs(setContextOp(ctx, uq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{user.Label}
	default:
		err = &NotSingularError{user.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (uq *UserQuery) OnlyIDX(ctx context.Context) int {
	id, err := uq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Users.
func (uq *UserQuery) All(ctx context.Context) ([]*User, error) {
	ctx = setContextOp(ctx, uq.ctx, ent.OpQueryAll)
	if err := uq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*User, *UserQuery]()
	return withInterceptors[[]*User](ctx, uq, qr, uq.inters)
}

// AllX is like All, but panics if an error occurs.
func (uq *UserQuery) AllX(ctx context.Context) []*User {
	nodes, err := uq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of User IDs.
func (uq *UserQuery) IDs(ctx context.Context) (ids []int, err error) {
	if uq.ctx.Unique == nil && uq.path != nil {
		uq.Unique(true)
	}
	ctx = setContextOp(ctx, uq.ctx, ent.OpQueryIDs)
	if err = uq.Select(user.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (uq *UserQuery) IDsX(ctx context.Context) []int {
	ids, err := uq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (uq *UserQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, uq.ctx, ent.OpQueryCount)
	if err := uq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, uq, querierCount[*UserQuery](), uq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (uq *UserQuery) CountX(ctx context.Context) int {
	count, err := uq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (uq *UserQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, uq.ctx, ent.OpQueryExist)
	switch _, err := uq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (uq *UserQuery) ExistX(ctx context.Context) bool {
	exist, err := uq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (uq *UserQuery) Clone() *UserQuery {
	if uq == nil {
		return nil
	}
	return &UserQuery{
		config:                       uq.config,
		ctx:                          uq.ctx.Clone(),
		order:                        append([]user.OrderOption{}, uq.order...),
		inters:                       append([]Interceptor{}, uq.inters...),
		predicates:                   append([]predicate.User{}, uq.predicates...),
		withAccountingEntries:        uq.withAccountingEntries.Clone(),
		withCompany:                  uq.withCompany.Clone(),
		withAssignedRoles:            uq.withAssignedRoles.Clone(),
		withSubordinates:             uq.withSubordinates.Clone(),
		withLeader:                   uq.withLeader.Clone(),
		withEmployee:                 uq.withEmployee.Clone(),
		withCreatedProjects:          uq.withCreatedProjects.Clone(),
		withLeaderedProjects:         uq.withLeaderedProjects.Clone(),
		withAssignedProjectTasks:     uq.withAssignedProjectTasks.Clone(),
		withParticipatedProjectTasks: uq.withParticipatedProjectTasks.Clone(),
		withCreatedTasks:             uq.withCreatedTasks.Clone(),
		withTokens:                   uq.withTokens.Clone(),
		withApprovedWorkShifts:       uq.withApprovedWorkShifts.Clone(),
		withWorkShifts:               uq.withWorkShifts.Clone(),
		withUploadedDocuments:        uq.withUploadedDocuments.Clone(),
		withApprovedDocuments:        uq.withApprovedDocuments.Clone(),
		// clone intermediate query.
		sql:       uq.sql.Clone(),
		path:      uq.path,
		modifiers: append([]func(*sql.Selector){}, uq.modifiers...),
	}
}

// WithAccountingEntries tells the query-builder to eager-load the nodes that are connected to
// the "accountingEntries" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithAccountingEntries(opts ...func(*AccountingEntryQuery)) *UserQuery {
	query := (&AccountingEntryClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withAccountingEntries = query
	return uq
}

// WithCompany tells the query-builder to eager-load the nodes that are connected to
// the "company" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithCompany(opts ...func(*CompanyQuery)) *UserQuery {
	query := (&CompanyClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withCompany = query
	return uq
}

// WithAssignedRoles tells the query-builder to eager-load the nodes that are connected to
// the "assignedRoles" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithAssignedRoles(opts ...func(*UserRoleQuery)) *UserQuery {
	query := (&UserRoleClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withAssignedRoles = query
	return uq
}

// WithSubordinates tells the query-builder to eager-load the nodes that are connected to
// the "subordinates" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithSubordinates(opts ...func(*UserQuery)) *UserQuery {
	query := (&UserClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withSubordinates = query
	return uq
}

// WithLeader tells the query-builder to eager-load the nodes that are connected to
// the "leader" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithLeader(opts ...func(*UserQuery)) *UserQuery {
	query := (&UserClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withLeader = query
	return uq
}

// WithEmployee tells the query-builder to eager-load the nodes that are connected to
// the "employee" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithEmployee(opts ...func(*EmployeeQuery)) *UserQuery {
	query := (&EmployeeClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withEmployee = query
	return uq
}

// WithCreatedProjects tells the query-builder to eager-load the nodes that are connected to
// the "createdProjects" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithCreatedProjects(opts ...func(*ProjectQuery)) *UserQuery {
	query := (&ProjectClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withCreatedProjects = query
	return uq
}

// WithLeaderedProjects tells the query-builder to eager-load the nodes that are connected to
// the "leaderedProjects" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithLeaderedProjects(opts ...func(*ProjectQuery)) *UserQuery {
	query := (&ProjectClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withLeaderedProjects = query
	return uq
}

// WithAssignedProjectTasks tells the query-builder to eager-load the nodes that are connected to
// the "assignedProjectTasks" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithAssignedProjectTasks(opts ...func(*ProjectTaskQuery)) *UserQuery {
	query := (&ProjectTaskClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withAssignedProjectTasks = query
	return uq
}

// WithParticipatedProjectTasks tells the query-builder to eager-load the nodes that are connected to
// the "participatedProjectTasks" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithParticipatedProjectTasks(opts ...func(*ProjectTaskQuery)) *UserQuery {
	query := (&ProjectTaskClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withParticipatedProjectTasks = query
	return uq
}

// WithCreatedTasks tells the query-builder to eager-load the nodes that are connected to
// the "createdTasks" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithCreatedTasks(opts ...func(*ProjectTaskQuery)) *UserQuery {
	query := (&ProjectTaskClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withCreatedTasks = query
	return uq
}

// WithTokens tells the query-builder to eager-load the nodes that are connected to
// the "tokens" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithTokens(opts ...func(*TokenQuery)) *UserQuery {
	query := (&TokenClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withTokens = query
	return uq
}

// WithApprovedWorkShifts tells the query-builder to eager-load the nodes that are connected to
// the "approvedWorkShifts" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithApprovedWorkShifts(opts ...func(*WorkshiftQuery)) *UserQuery {
	query := (&WorkshiftClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withApprovedWorkShifts = query
	return uq
}

// WithWorkShifts tells the query-builder to eager-load the nodes that are connected to
// the "workShifts" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithWorkShifts(opts ...func(*WorkshiftQuery)) *UserQuery {
	query := (&WorkshiftClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withWorkShifts = query
	return uq
}

// WithUploadedDocuments tells the query-builder to eager-load the nodes that are connected to
// the "uploadedDocuments" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithUploadedDocuments(opts ...func(*CompanyDocumentQuery)) *UserQuery {
	query := (&CompanyDocumentClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withUploadedDocuments = query
	return uq
}

// WithApprovedDocuments tells the query-builder to eager-load the nodes that are connected to
// the "approvedDocuments" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithApprovedDocuments(opts ...func(*CompanyDocumentQuery)) *UserQuery {
	query := (&CompanyDocumentClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withApprovedDocuments = query
	return uq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.User.Query().
//		GroupBy(user.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (uq *UserQuery) GroupBy(field string, fields ...string) *UserGroupBy {
	uq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserGroupBy{build: uq}
	grbuild.flds = &uq.ctx.Fields
	grbuild.label = user.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt,omitempty"`
//	}
//
//	client.User.Query().
//		Select(user.FieldCreatedAt).
//		Scan(ctx, &v)
func (uq *UserQuery) Select(fields ...string) *UserSelect {
	uq.ctx.Fields = append(uq.ctx.Fields, fields...)
	sbuild := &UserSelect{UserQuery: uq}
	sbuild.label = user.Label
	sbuild.flds, sbuild.scan = &uq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserSelect configured with the given aggregations.
func (uq *UserQuery) Aggregate(fns ...AggregateFunc) *UserSelect {
	return uq.Select().Aggregate(fns...)
}

func (uq *UserQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range uq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, uq); err != nil {
				return err
			}
		}
	}
	for _, f := range uq.ctx.Fields {
		if !user.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if uq.path != nil {
		prev, err := uq.path(ctx)
		if err != nil {
			return err
		}
		uq.sql = prev
	}
	return nil
}

func (uq *UserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*User, error) {
	var (
		nodes       = []*User{}
		withFKs     = uq.withFKs
		_spec       = uq.querySpec()
		loadedTypes = [16]bool{
			uq.withAccountingEntries != nil,
			uq.withCompany != nil,
			uq.withAssignedRoles != nil,
			uq.withSubordinates != nil,
			uq.withLeader != nil,
			uq.withEmployee != nil,
			uq.withCreatedProjects != nil,
			uq.withLeaderedProjects != nil,
			uq.withAssignedProjectTasks != nil,
			uq.withParticipatedProjectTasks != nil,
			uq.withCreatedTasks != nil,
			uq.withTokens != nil,
			uq.withApprovedWorkShifts != nil,
			uq.withWorkShifts != nil,
			uq.withUploadedDocuments != nil,
			uq.withApprovedDocuments != nil,
		}
	)
	if uq.withLeader != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, user.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*User).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &User{config: uq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(uq.modifiers) > 0 {
		_spec.Modifiers = uq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, uq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := uq.withAccountingEntries; query != nil {
		if err := uq.loadAccountingEntries(ctx, query, nodes,
			func(n *User) { n.Edges.AccountingEntries = []*AccountingEntry{} },
			func(n *User, e *AccountingEntry) { n.Edges.AccountingEntries = append(n.Edges.AccountingEntries, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withCompany; query != nil {
		if err := uq.loadCompany(ctx, query, nodes,
			func(n *User) { n.Edges.Company = []*Company{} },
			func(n *User, e *Company) { n.Edges.Company = append(n.Edges.Company, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withAssignedRoles; query != nil {
		if err := uq.loadAssignedRoles(ctx, query, nodes,
			func(n *User) { n.Edges.AssignedRoles = []*UserRole{} },
			func(n *User, e *UserRole) { n.Edges.AssignedRoles = append(n.Edges.AssignedRoles, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withSubordinates; query != nil {
		if err := uq.loadSubordinates(ctx, query, nodes,
			func(n *User) { n.Edges.Subordinates = []*User{} },
			func(n *User, e *User) { n.Edges.Subordinates = append(n.Edges.Subordinates, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withLeader; query != nil {
		if err := uq.loadLeader(ctx, query, nodes, nil,
			func(n *User, e *User) { n.Edges.Leader = e }); err != nil {
			return nil, err
		}
	}
	if query := uq.withEmployee; query != nil {
		if err := uq.loadEmployee(ctx, query, nodes, nil,
			func(n *User, e *Employee) { n.Edges.Employee = e }); err != nil {
			return nil, err
		}
	}
	if query := uq.withCreatedProjects; query != nil {
		if err := uq.loadCreatedProjects(ctx, query, nodes,
			func(n *User) { n.Edges.CreatedProjects = []*Project{} },
			func(n *User, e *Project) { n.Edges.CreatedProjects = append(n.Edges.CreatedProjects, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withLeaderedProjects; query != nil {
		if err := uq.loadLeaderedProjects(ctx, query, nodes,
			func(n *User) { n.Edges.LeaderedProjects = []*Project{} },
			func(n *User, e *Project) { n.Edges.LeaderedProjects = append(n.Edges.LeaderedProjects, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withAssignedProjectTasks; query != nil {
		if err := uq.loadAssignedProjectTasks(ctx, query, nodes,
			func(n *User) { n.Edges.AssignedProjectTasks = []*ProjectTask{} },
			func(n *User, e *ProjectTask) { n.Edges.AssignedProjectTasks = append(n.Edges.AssignedProjectTasks, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withParticipatedProjectTasks; query != nil {
		if err := uq.loadParticipatedProjectTasks(ctx, query, nodes,
			func(n *User) { n.Edges.ParticipatedProjectTasks = []*ProjectTask{} },
			func(n *User, e *ProjectTask) {
				n.Edges.ParticipatedProjectTasks = append(n.Edges.ParticipatedProjectTasks, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := uq.withCreatedTasks; query != nil {
		if err := uq.loadCreatedTasks(ctx, query, nodes,
			func(n *User) { n.Edges.CreatedTasks = []*ProjectTask{} },
			func(n *User, e *ProjectTask) { n.Edges.CreatedTasks = append(n.Edges.CreatedTasks, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withTokens; query != nil {
		if err := uq.loadTokens(ctx, query, nodes,
			func(n *User) { n.Edges.Tokens = []*Token{} },
			func(n *User, e *Token) { n.Edges.Tokens = append(n.Edges.Tokens, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withApprovedWorkShifts; query != nil {
		if err := uq.loadApprovedWorkShifts(ctx, query, nodes,
			func(n *User) { n.Edges.ApprovedWorkShifts = []*Workshift{} },
			func(n *User, e *Workshift) { n.Edges.ApprovedWorkShifts = append(n.Edges.ApprovedWorkShifts, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withWorkShifts; query != nil {
		if err := uq.loadWorkShifts(ctx, query, nodes,
			func(n *User) { n.Edges.WorkShifts = []*Workshift{} },
			func(n *User, e *Workshift) { n.Edges.WorkShifts = append(n.Edges.WorkShifts, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withUploadedDocuments; query != nil {
		if err := uq.loadUploadedDocuments(ctx, query, nodes,
			func(n *User) { n.Edges.UploadedDocuments = []*CompanyDocument{} },
			func(n *User, e *CompanyDocument) { n.Edges.UploadedDocuments = append(n.Edges.UploadedDocuments, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withApprovedDocuments; query != nil {
		if err := uq.loadApprovedDocuments(ctx, query, nodes,
			func(n *User) { n.Edges.ApprovedDocuments = []*CompanyDocument{} },
			func(n *User, e *CompanyDocument) { n.Edges.ApprovedDocuments = append(n.Edges.ApprovedDocuments, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedAccountingEntries {
		if err := uq.loadAccountingEntries(ctx, query, nodes,
			func(n *User) { n.appendNamedAccountingEntries(name) },
			func(n *User, e *AccountingEntry) { n.appendNamedAccountingEntries(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedCompany {
		if err := uq.loadCompany(ctx, query, nodes,
			func(n *User) { n.appendNamedCompany(name) },
			func(n *User, e *Company) { n.appendNamedCompany(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedAssignedRoles {
		if err := uq.loadAssignedRoles(ctx, query, nodes,
			func(n *User) { n.appendNamedAssignedRoles(name) },
			func(n *User, e *UserRole) { n.appendNamedAssignedRoles(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedSubordinates {
		if err := uq.loadSubordinates(ctx, query, nodes,
			func(n *User) { n.appendNamedSubordinates(name) },
			func(n *User, e *User) { n.appendNamedSubordinates(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedCreatedProjects {
		if err := uq.loadCreatedProjects(ctx, query, nodes,
			func(n *User) { n.appendNamedCreatedProjects(name) },
			func(n *User, e *Project) { n.appendNamedCreatedProjects(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedLeaderedProjects {
		if err := uq.loadLeaderedProjects(ctx, query, nodes,
			func(n *User) { n.appendNamedLeaderedProjects(name) },
			func(n *User, e *Project) { n.appendNamedLeaderedProjects(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedAssignedProjectTasks {
		if err := uq.loadAssignedProjectTasks(ctx, query, nodes,
			func(n *User) { n.appendNamedAssignedProjectTasks(name) },
			func(n *User, e *ProjectTask) { n.appendNamedAssignedProjectTasks(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedParticipatedProjectTasks {
		if err := uq.loadParticipatedProjectTasks(ctx, query, nodes,
			func(n *User) { n.appendNamedParticipatedProjectTasks(name) },
			func(n *User, e *ProjectTask) { n.appendNamedParticipatedProjectTasks(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedCreatedTasks {
		if err := uq.loadCreatedTasks(ctx, query, nodes,
			func(n *User) { n.appendNamedCreatedTasks(name) },
			func(n *User, e *ProjectTask) { n.appendNamedCreatedTasks(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedTokens {
		if err := uq.loadTokens(ctx, query, nodes,
			func(n *User) { n.appendNamedTokens(name) },
			func(n *User, e *Token) { n.appendNamedTokens(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedApprovedWorkShifts {
		if err := uq.loadApprovedWorkShifts(ctx, query, nodes,
			func(n *User) { n.appendNamedApprovedWorkShifts(name) },
			func(n *User, e *Workshift) { n.appendNamedApprovedWorkShifts(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedWorkShifts {
		if err := uq.loadWorkShifts(ctx, query, nodes,
			func(n *User) { n.appendNamedWorkShifts(name) },
			func(n *User, e *Workshift) { n.appendNamedWorkShifts(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedUploadedDocuments {
		if err := uq.loadUploadedDocuments(ctx, query, nodes,
			func(n *User) { n.appendNamedUploadedDocuments(name) },
			func(n *User, e *CompanyDocument) { n.appendNamedUploadedDocuments(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedApprovedDocuments {
		if err := uq.loadApprovedDocuments(ctx, query, nodes,
			func(n *User) { n.appendNamedApprovedDocuments(name) },
			func(n *User, e *CompanyDocument) { n.appendNamedApprovedDocuments(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range uq.loadTotal {
		if err := uq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (uq *UserQuery) loadAccountingEntries(ctx context.Context, query *AccountingEntryQuery, nodes []*User, init func(*User), assign func(*User, *AccountingEntry)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.AccountingEntry(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.AccountingEntriesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_accounting_entries
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_accounting_entries" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_accounting_entries" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadCompany(ctx context.Context, query *CompanyQuery, nodes []*User, init func(*User), assign func(*User, *Company)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*User)
	nids := make(map[int]map[*User]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(user.CompanyTable)
		s.Join(joinT).On(s.C(company.FieldID), joinT.C(user.CompanyPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(user.CompanyPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(user.CompanyPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*User]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Company](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "company" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (uq *UserQuery) loadAssignedRoles(ctx context.Context, query *UserRoleQuery, nodes []*User, init func(*User), assign func(*User, *UserRole)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*User)
	nids := make(map[int]map[*User]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(user.AssignedRolesTable)
		s.Join(joinT).On(s.C(userrole.FieldID), joinT.C(user.AssignedRolesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(user.AssignedRolesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(user.AssignedRolesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*User]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*UserRole](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "assignedRoles" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (uq *UserQuery) loadSubordinates(ctx context.Context, query *UserQuery, nodes []*User, init func(*User), assign func(*User, *User)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.User(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.SubordinatesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_subordinates
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_subordinates" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_subordinates" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadLeader(ctx context.Context, query *UserQuery, nodes []*User, init func(*User), assign func(*User, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*User)
	for i := range nodes {
		if nodes[i].user_subordinates == nil {
			continue
		}
		fk := *nodes[i].user_subordinates
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_subordinates" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (uq *UserQuery) loadEmployee(ctx context.Context, query *EmployeeQuery, nodes []*User, init func(*User), assign func(*User, *Employee)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.EmployeeColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_employee
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_employee" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_employee" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadCreatedProjects(ctx context.Context, query *ProjectQuery, nodes []*User, init func(*User), assign func(*User, *Project)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Project(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.CreatedProjectsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_created_projects
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_created_projects" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_created_projects" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadLeaderedProjects(ctx context.Context, query *ProjectQuery, nodes []*User, init func(*User), assign func(*User, *Project)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Project(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.LeaderedProjectsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_leadered_projects
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_leadered_projects" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_leadered_projects" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadAssignedProjectTasks(ctx context.Context, query *ProjectTaskQuery, nodes []*User, init func(*User), assign func(*User, *ProjectTask)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ProjectTask(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.AssignedProjectTasksColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_assigned_project_tasks
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_assigned_project_tasks" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_assigned_project_tasks" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadParticipatedProjectTasks(ctx context.Context, query *ProjectTaskQuery, nodes []*User, init func(*User), assign func(*User, *ProjectTask)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*User)
	nids := make(map[int]map[*User]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(user.ParticipatedProjectTasksTable)
		s.Join(joinT).On(s.C(projecttask.FieldID), joinT.C(user.ParticipatedProjectTasksPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(user.ParticipatedProjectTasksPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(user.ParticipatedProjectTasksPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*User]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*ProjectTask](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "participatedProjectTasks" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (uq *UserQuery) loadCreatedTasks(ctx context.Context, query *ProjectTaskQuery, nodes []*User, init func(*User), assign func(*User, *ProjectTask)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ProjectTask(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.CreatedTasksColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_created_tasks
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_created_tasks" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_created_tasks" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadTokens(ctx context.Context, query *TokenQuery, nodes []*User, init func(*User), assign func(*User, *Token)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Token(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.TokensColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_tokens
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_tokens" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_tokens" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadApprovedWorkShifts(ctx context.Context, query *WorkshiftQuery, nodes []*User, init func(*User), assign func(*User, *Workshift)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Workshift(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.ApprovedWorkShiftsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_approved_work_shifts
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_approved_work_shifts" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_approved_work_shifts" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadWorkShifts(ctx context.Context, query *WorkshiftQuery, nodes []*User, init func(*User), assign func(*User, *Workshift)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Workshift(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.WorkShiftsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_work_shifts
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_work_shifts" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_work_shifts" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadUploadedDocuments(ctx context.Context, query *CompanyDocumentQuery, nodes []*User, init func(*User), assign func(*User, *CompanyDocument)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.CompanyDocument(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.UploadedDocumentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_uploaded_documents
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_uploaded_documents" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_uploaded_documents" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadApprovedDocuments(ctx context.Context, query *CompanyDocumentQuery, nodes []*User, init func(*User), assign func(*User, *CompanyDocument)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.CompanyDocument(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.ApprovedDocumentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_approved_documents
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_approved_documents" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_approved_documents" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (uq *UserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := uq.querySpec()
	if len(uq.modifiers) > 0 {
		_spec.Modifiers = uq.modifiers
	}
	_spec.Node.Columns = uq.ctx.Fields
	if len(uq.ctx.Fields) > 0 {
		_spec.Unique = uq.ctx.Unique != nil && *uq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, uq.driver, _spec)
}

func (uq *UserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	_spec.From = uq.sql
	if unique := uq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if uq.path != nil {
		_spec.Unique = true
	}
	if fields := uq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for i := range fields {
			if fields[i] != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := uq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := uq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := uq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := uq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (uq *UserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(uq.driver.Dialect())
	t1 := builder.Table(user.Table)
	columns := uq.ctx.Fields
	if len(columns) == 0 {
		columns = user.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if uq.sql != nil {
		selector = uq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if uq.ctx.Unique != nil && *uq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range uq.modifiers {
		m(selector)
	}
	for _, p := range uq.predicates {
		p(selector)
	}
	for _, p := range uq.order {
		p(selector)
	}
	if offset := uq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := uq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (uq *UserQuery) Modify(modifiers ...func(s *sql.Selector)) *UserSelect {
	uq.modifiers = append(uq.modifiers, modifiers...)
	return uq.Select()
}

// WithNamedAccountingEntries tells the query-builder to eager-load the nodes that are connected to the "accountingEntries"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedAccountingEntries(name string, opts ...func(*AccountingEntryQuery)) *UserQuery {
	query := (&AccountingEntryClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedAccountingEntries == nil {
		uq.withNamedAccountingEntries = make(map[string]*AccountingEntryQuery)
	}
	uq.withNamedAccountingEntries[name] = query
	return uq
}

// WithNamedCompany tells the query-builder to eager-load the nodes that are connected to the "company"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedCompany(name string, opts ...func(*CompanyQuery)) *UserQuery {
	query := (&CompanyClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedCompany == nil {
		uq.withNamedCompany = make(map[string]*CompanyQuery)
	}
	uq.withNamedCompany[name] = query
	return uq
}

// WithNamedAssignedRoles tells the query-builder to eager-load the nodes that are connected to the "assignedRoles"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedAssignedRoles(name string, opts ...func(*UserRoleQuery)) *UserQuery {
	query := (&UserRoleClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedAssignedRoles == nil {
		uq.withNamedAssignedRoles = make(map[string]*UserRoleQuery)
	}
	uq.withNamedAssignedRoles[name] = query
	return uq
}

// WithNamedSubordinates tells the query-builder to eager-load the nodes that are connected to the "subordinates"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedSubordinates(name string, opts ...func(*UserQuery)) *UserQuery {
	query := (&UserClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedSubordinates == nil {
		uq.withNamedSubordinates = make(map[string]*UserQuery)
	}
	uq.withNamedSubordinates[name] = query
	return uq
}

// WithNamedCreatedProjects tells the query-builder to eager-load the nodes that are connected to the "createdProjects"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedCreatedProjects(name string, opts ...func(*ProjectQuery)) *UserQuery {
	query := (&ProjectClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedCreatedProjects == nil {
		uq.withNamedCreatedProjects = make(map[string]*ProjectQuery)
	}
	uq.withNamedCreatedProjects[name] = query
	return uq
}

// WithNamedLeaderedProjects tells the query-builder to eager-load the nodes that are connected to the "leaderedProjects"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedLeaderedProjects(name string, opts ...func(*ProjectQuery)) *UserQuery {
	query := (&ProjectClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedLeaderedProjects == nil {
		uq.withNamedLeaderedProjects = make(map[string]*ProjectQuery)
	}
	uq.withNamedLeaderedProjects[name] = query
	return uq
}

// WithNamedAssignedProjectTasks tells the query-builder to eager-load the nodes that are connected to the "assignedProjectTasks"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedAssignedProjectTasks(name string, opts ...func(*ProjectTaskQuery)) *UserQuery {
	query := (&ProjectTaskClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedAssignedProjectTasks == nil {
		uq.withNamedAssignedProjectTasks = make(map[string]*ProjectTaskQuery)
	}
	uq.withNamedAssignedProjectTasks[name] = query
	return uq
}

// WithNamedParticipatedProjectTasks tells the query-builder to eager-load the nodes that are connected to the "participatedProjectTasks"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedParticipatedProjectTasks(name string, opts ...func(*ProjectTaskQuery)) *UserQuery {
	query := (&ProjectTaskClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedParticipatedProjectTasks == nil {
		uq.withNamedParticipatedProjectTasks = make(map[string]*ProjectTaskQuery)
	}
	uq.withNamedParticipatedProjectTasks[name] = query
	return uq
}

// WithNamedCreatedTasks tells the query-builder to eager-load the nodes that are connected to the "createdTasks"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedCreatedTasks(name string, opts ...func(*ProjectTaskQuery)) *UserQuery {
	query := (&ProjectTaskClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedCreatedTasks == nil {
		uq.withNamedCreatedTasks = make(map[string]*ProjectTaskQuery)
	}
	uq.withNamedCreatedTasks[name] = query
	return uq
}

// WithNamedTokens tells the query-builder to eager-load the nodes that are connected to the "tokens"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedTokens(name string, opts ...func(*TokenQuery)) *UserQuery {
	query := (&TokenClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedTokens == nil {
		uq.withNamedTokens = make(map[string]*TokenQuery)
	}
	uq.withNamedTokens[name] = query
	return uq
}

// WithNamedApprovedWorkShifts tells the query-builder to eager-load the nodes that are connected to the "approvedWorkShifts"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedApprovedWorkShifts(name string, opts ...func(*WorkshiftQuery)) *UserQuery {
	query := (&WorkshiftClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedApprovedWorkShifts == nil {
		uq.withNamedApprovedWorkShifts = make(map[string]*WorkshiftQuery)
	}
	uq.withNamedApprovedWorkShifts[name] = query
	return uq
}

// WithNamedWorkShifts tells the query-builder to eager-load the nodes that are connected to the "workShifts"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedWorkShifts(name string, opts ...func(*WorkshiftQuery)) *UserQuery {
	query := (&WorkshiftClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedWorkShifts == nil {
		uq.withNamedWorkShifts = make(map[string]*WorkshiftQuery)
	}
	uq.withNamedWorkShifts[name] = query
	return uq
}

// WithNamedUploadedDocuments tells the query-builder to eager-load the nodes that are connected to the "uploadedDocuments"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedUploadedDocuments(name string, opts ...func(*CompanyDocumentQuery)) *UserQuery {
	query := (&CompanyDocumentClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedUploadedDocuments == nil {
		uq.withNamedUploadedDocuments = make(map[string]*CompanyDocumentQuery)
	}
	uq.withNamedUploadedDocuments[name] = query
	return uq
}

// WithNamedApprovedDocuments tells the query-builder to eager-load the nodes that are connected to the "approvedDocuments"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedApprovedDocuments(name string, opts ...func(*CompanyDocumentQuery)) *UserQuery {
	query := (&CompanyDocumentClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedApprovedDocuments == nil {
		uq.withNamedApprovedDocuments = make(map[string]*CompanyDocumentQuery)
	}
	uq.withNamedApprovedDocuments[name] = query
	return uq
}

// UserGroupBy is the group-by builder for User entities.
type UserGroupBy struct {
	selector
	build *UserQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ugb *UserGroupBy) Aggregate(fns ...AggregateFunc) *UserGroupBy {
	ugb.fns = append(ugb.fns, fns...)
	return ugb
}

// Scan applies the selector query and scans the result into the given value.
func (ugb *UserGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ugb.build.ctx, ent.OpQueryGroupBy)
	if err := ugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserQuery, *UserGroupBy](ctx, ugb.build, ugb, ugb.build.inters, v)
}

func (ugb *UserGroupBy) sqlScan(ctx context.Context, root *UserQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ugb.fns))
	for _, fn := range ugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ugb.flds)+len(ugb.fns))
		for _, f := range *ugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserSelect is the builder for selecting fields of User entities.
type UserSelect struct {
	*UserQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (us *UserSelect) Aggregate(fns ...AggregateFunc) *UserSelect {
	us.fns = append(us.fns, fns...)
	return us
}

// Scan applies the selector query and scans the result into the given value.
func (us *UserSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, us.ctx, ent.OpQuerySelect)
	if err := us.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserQuery, *UserSelect](ctx, us.UserQuery, us, us.inters, v)
}

func (us *UserSelect) sqlScan(ctx context.Context, root *UserQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(us.fns))
	for _, fn := range us.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*us.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := us.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (us *UserSelect) Modify(modifiers ...func(s *sql.Selector)) *UserSelect {
	us.modifiers = append(us.modifiers, modifiers...)
	return us
}
