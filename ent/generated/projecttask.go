// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"mazza/ent/generated/project"
	"mazza/ent/generated/projecttask"
	"mazza/ent/generated/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProjectTask is the model entity for the ProjectTask schema.
type ProjectTask struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// AssigneeName holds the value of the "assigneeName" field.
	AssigneeName string `json:"assigneeName,omitempty"`
	// Where is task will be executed
	Location string `json:"location,omitempty"`
	// DueDate holds the value of the "dueDate" field.
	DueDate time.Time `json:"dueDate,omitempty"`
	// StartDate holds the value of the "startDate" field.
	StartDate time.Time `json:"startDate,omitempty"`
	// EndDate holds the value of the "endDate" field.
	EndDate time.Time `json:"endDate,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Status holds the value of the "status" field.
	Status projecttask.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectTaskQuery when eager-loading is set.
	Edges                       ProjectTaskEdges `json:"edges"`
	project_tasks               *int
	user_assigned_project_tasks *int
	selectValues                sql.SelectValues
}

// ProjectTaskEdges holds the relations/edges for other nodes in the graph.
type ProjectTaskEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// Assignee holds the value of the assignee edge.
	Assignee *User `json:"assignee,omitempty"`
	// Participants holds the value of the participants edge.
	Participants []*User `json:"participants,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedParticipants map[string][]*User
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectTaskEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// AssigneeOrErr returns the Assignee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectTaskEdges) AssigneeOrErr() (*User, error) {
	if e.Assignee != nil {
		return e.Assignee, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "assignee"}
}

// ParticipantsOrErr returns the Participants value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectTaskEdges) ParticipantsOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.Participants, nil
	}
	return nil, &NotLoadedError{edge: "participants"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProjectTask) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case projecttask.FieldID:
			values[i] = new(sql.NullInt64)
		case projecttask.FieldName, projecttask.FieldAssigneeName, projecttask.FieldLocation, projecttask.FieldDescription, projecttask.FieldStatus:
			values[i] = new(sql.NullString)
		case projecttask.FieldDueDate, projecttask.FieldStartDate, projecttask.FieldEndDate:
			values[i] = new(sql.NullTime)
		case projecttask.ForeignKeys[0]: // project_tasks
			values[i] = new(sql.NullInt64)
		case projecttask.ForeignKeys[1]: // user_assigned_project_tasks
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProjectTask fields.
func (pt *ProjectTask) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case projecttask.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pt.ID = int(value.Int64)
		case projecttask.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pt.Name = value.String
			}
		case projecttask.FieldAssigneeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field assigneeName", values[i])
			} else if value.Valid {
				pt.AssigneeName = value.String
			}
		case projecttask.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				pt.Location = value.String
			}
		case projecttask.FieldDueDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field dueDate", values[i])
			} else if value.Valid {
				pt.DueDate = value.Time
			}
		case projecttask.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field startDate", values[i])
			} else if value.Valid {
				pt.StartDate = value.Time
			}
		case projecttask.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field endDate", values[i])
			} else if value.Valid {
				pt.EndDate = value.Time
			}
		case projecttask.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pt.Description = value.String
			}
		case projecttask.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pt.Status = projecttask.Status(value.String)
			}
		case projecttask.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field project_tasks", value)
			} else if value.Valid {
				pt.project_tasks = new(int)
				*pt.project_tasks = int(value.Int64)
			}
		case projecttask.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_assigned_project_tasks", value)
			} else if value.Valid {
				pt.user_assigned_project_tasks = new(int)
				*pt.user_assigned_project_tasks = int(value.Int64)
			}
		default:
			pt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProjectTask.
// This includes values selected through modifiers, order, etc.
func (pt *ProjectTask) Value(name string) (ent.Value, error) {
	return pt.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the ProjectTask entity.
func (pt *ProjectTask) QueryProject() *ProjectQuery {
	return NewProjectTaskClient(pt.config).QueryProject(pt)
}

// QueryAssignee queries the "assignee" edge of the ProjectTask entity.
func (pt *ProjectTask) QueryAssignee() *UserQuery {
	return NewProjectTaskClient(pt.config).QueryAssignee(pt)
}

// QueryParticipants queries the "participants" edge of the ProjectTask entity.
func (pt *ProjectTask) QueryParticipants() *UserQuery {
	return NewProjectTaskClient(pt.config).QueryParticipants(pt)
}

// Update returns a builder for updating this ProjectTask.
// Note that you need to call ProjectTask.Unwrap() before calling this method if this ProjectTask
// was returned from a transaction, and the transaction was committed or rolled back.
func (pt *ProjectTask) Update() *ProjectTaskUpdateOne {
	return NewProjectTaskClient(pt.config).UpdateOne(pt)
}

// Unwrap unwraps the ProjectTask entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pt *ProjectTask) Unwrap() *ProjectTask {
	_tx, ok := pt.config.driver.(*txDriver)
	if !ok {
		panic("generated: ProjectTask is not a transactional entity")
	}
	pt.config.driver = _tx.drv
	return pt
}

// String implements the fmt.Stringer.
func (pt *ProjectTask) String() string {
	var builder strings.Builder
	builder.WriteString("ProjectTask(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pt.ID))
	builder.WriteString("name=")
	builder.WriteString(pt.Name)
	builder.WriteString(", ")
	builder.WriteString("assigneeName=")
	builder.WriteString(pt.AssigneeName)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(pt.Location)
	builder.WriteString(", ")
	builder.WriteString("dueDate=")
	builder.WriteString(pt.DueDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("startDate=")
	builder.WriteString(pt.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("endDate=")
	builder.WriteString(pt.EndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pt.Description)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pt.Status))
	builder.WriteByte(')')
	return builder.String()
}

// NamedParticipants returns the Participants named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pt *ProjectTask) NamedParticipants(name string) ([]*User, error) {
	if pt.Edges.namedParticipants == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pt.Edges.namedParticipants[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pt *ProjectTask) appendNamedParticipants(name string, edges ...*User) {
	if pt.Edges.namedParticipants == nil {
		pt.Edges.namedParticipants = make(map[string][]*User)
	}
	if len(edges) == 0 {
		pt.Edges.namedParticipants[name] = []*User{}
	} else {
		pt.Edges.namedParticipants[name] = append(pt.Edges.namedParticipants[name], edges...)
	}
}

// ProjectTasks is a parsable slice of ProjectTask.
type ProjectTasks []*ProjectTask
