// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"mazza/ent/generated/cashmovement"
	"mazza/ent/generated/company"
	"mazza/ent/generated/predicate"
	"mazza/ent/generated/treasury"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TreasuryUpdate is the builder for updating Treasury entities.
type TreasuryUpdate struct {
	config
	hooks     []Hook
	mutation  *TreasuryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TreasuryUpdate builder.
func (tu *TreasuryUpdate) Where(ps ...predicate.Treasury) *TreasuryUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdatedAt sets the "updatedAt" field.
func (tu *TreasuryUpdate) SetUpdatedAt(t time.Time) *TreasuryUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetDeletedAt sets the "deletedAt" field.
func (tu *TreasuryUpdate) SetDeletedAt(t time.Time) *TreasuryUpdate {
	tu.mutation.SetDeletedAt(t)
	return tu
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (tu *TreasuryUpdate) SetNillableDeletedAt(t *time.Time) *TreasuryUpdate {
	if t != nil {
		tu.SetDeletedAt(*t)
	}
	return tu
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (tu *TreasuryUpdate) ClearDeletedAt() *TreasuryUpdate {
	tu.mutation.ClearDeletedAt()
	return tu
}

// SetAccountNumber sets the "accountNumber" field.
func (tu *TreasuryUpdate) SetAccountNumber(s string) *TreasuryUpdate {
	tu.mutation.SetAccountNumber(s)
	return tu
}

// SetNillableAccountNumber sets the "accountNumber" field if the given value is not nil.
func (tu *TreasuryUpdate) SetNillableAccountNumber(s *string) *TreasuryUpdate {
	if s != nil {
		tu.SetAccountNumber(*s)
	}
	return tu
}

// ClearAccountNumber clears the value of the "accountNumber" field.
func (tu *TreasuryUpdate) ClearAccountNumber() *TreasuryUpdate {
	tu.mutation.ClearAccountNumber()
	return tu
}

// SetBalance sets the "balance" field.
func (tu *TreasuryUpdate) SetBalance(f float64) *TreasuryUpdate {
	tu.mutation.ResetBalance()
	tu.mutation.SetBalance(f)
	return tu
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (tu *TreasuryUpdate) SetNillableBalance(f *float64) *TreasuryUpdate {
	if f != nil {
		tu.SetBalance(*f)
	}
	return tu
}

// AddBalance adds f to the "balance" field.
func (tu *TreasuryUpdate) AddBalance(f float64) *TreasuryUpdate {
	tu.mutation.AddBalance(f)
	return tu
}

// SetBankName sets the "bankName" field.
func (tu *TreasuryUpdate) SetBankName(s string) *TreasuryUpdate {
	tu.mutation.SetBankName(s)
	return tu
}

// SetNillableBankName sets the "bankName" field if the given value is not nil.
func (tu *TreasuryUpdate) SetNillableBankName(s *string) *TreasuryUpdate {
	if s != nil {
		tu.SetBankName(*s)
	}
	return tu
}

// ClearBankName clears the value of the "bankName" field.
func (tu *TreasuryUpdate) ClearBankName() *TreasuryUpdate {
	tu.mutation.ClearBankName()
	return tu
}

// SetCurrency sets the "currency" field.
func (tu *TreasuryUpdate) SetCurrency(t treasury.Currency) *TreasuryUpdate {
	tu.mutation.SetCurrency(t)
	return tu
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (tu *TreasuryUpdate) SetNillableCurrency(t *treasury.Currency) *TreasuryUpdate {
	if t != nil {
		tu.SetCurrency(*t)
	}
	return tu
}

// SetDescription sets the "description" field.
func (tu *TreasuryUpdate) SetDescription(s string) *TreasuryUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TreasuryUpdate) SetNillableDescription(s *string) *TreasuryUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// ClearDescription clears the value of the "description" field.
func (tu *TreasuryUpdate) ClearDescription() *TreasuryUpdate {
	tu.mutation.ClearDescription()
	return tu
}

// SetIban sets the "iban" field.
func (tu *TreasuryUpdate) SetIban(s string) *TreasuryUpdate {
	tu.mutation.SetIban(s)
	return tu
}

// SetNillableIban sets the "iban" field if the given value is not nil.
func (tu *TreasuryUpdate) SetNillableIban(s *string) *TreasuryUpdate {
	if s != nil {
		tu.SetIban(*s)
	}
	return tu
}

// ClearIban clears the value of the "iban" field.
func (tu *TreasuryUpdate) ClearIban() *TreasuryUpdate {
	tu.mutation.ClearIban()
	return tu
}

// SetIsDefault sets the "isDefault" field.
func (tu *TreasuryUpdate) SetIsDefault(b bool) *TreasuryUpdate {
	tu.mutation.SetIsDefault(b)
	return tu
}

// SetNillableIsDefault sets the "isDefault" field if the given value is not nil.
func (tu *TreasuryUpdate) SetNillableIsDefault(b *bool) *TreasuryUpdate {
	if b != nil {
		tu.SetIsDefault(*b)
	}
	return tu
}

// ClearIsDefault clears the value of the "isDefault" field.
func (tu *TreasuryUpdate) ClearIsDefault() *TreasuryUpdate {
	tu.mutation.ClearIsDefault()
	return tu
}

// SetIsMainAccount sets the "isMainAccount" field.
func (tu *TreasuryUpdate) SetIsMainAccount(b bool) *TreasuryUpdate {
	tu.mutation.SetIsMainAccount(b)
	return tu
}

// SetNillableIsMainAccount sets the "isMainAccount" field if the given value is not nil.
func (tu *TreasuryUpdate) SetNillableIsMainAccount(b *bool) *TreasuryUpdate {
	if b != nil {
		tu.SetIsMainAccount(*b)
	}
	return tu
}

// ClearIsMainAccount clears the value of the "isMainAccount" field.
func (tu *TreasuryUpdate) ClearIsMainAccount() *TreasuryUpdate {
	tu.mutation.ClearIsMainAccount()
	return tu
}

// SetName sets the "name" field.
func (tu *TreasuryUpdate) SetName(s string) *TreasuryUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TreasuryUpdate) SetNillableName(s *string) *TreasuryUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// SetCategory sets the "category" field.
func (tu *TreasuryUpdate) SetCategory(t treasury.Category) *TreasuryUpdate {
	tu.mutation.SetCategory(t)
	return tu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (tu *TreasuryUpdate) SetNillableCategory(t *treasury.Category) *TreasuryUpdate {
	if t != nil {
		tu.SetCategory(*t)
	}
	return tu
}

// SetSwiftCode sets the "swiftCode" field.
func (tu *TreasuryUpdate) SetSwiftCode(s string) *TreasuryUpdate {
	tu.mutation.SetSwiftCode(s)
	return tu
}

// SetNillableSwiftCode sets the "swiftCode" field if the given value is not nil.
func (tu *TreasuryUpdate) SetNillableSwiftCode(s *string) *TreasuryUpdate {
	if s != nil {
		tu.SetSwiftCode(*s)
	}
	return tu
}

// ClearSwiftCode clears the value of the "swiftCode" field.
func (tu *TreasuryUpdate) ClearSwiftCode() *TreasuryUpdate {
	tu.mutation.ClearSwiftCode()
	return tu
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (tu *TreasuryUpdate) SetCompanyID(id int) *TreasuryUpdate {
	tu.mutation.SetCompanyID(id)
	return tu
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (tu *TreasuryUpdate) SetNillableCompanyID(id *int) *TreasuryUpdate {
	if id != nil {
		tu = tu.SetCompanyID(*id)
	}
	return tu
}

// SetCompany sets the "company" edge to the Company entity.
func (tu *TreasuryUpdate) SetCompany(c *Company) *TreasuryUpdate {
	return tu.SetCompanyID(c.ID)
}

// AddCashMovementIDs adds the "cashMovements" edge to the CashMovement entity by IDs.
func (tu *TreasuryUpdate) AddCashMovementIDs(ids ...int) *TreasuryUpdate {
	tu.mutation.AddCashMovementIDs(ids...)
	return tu
}

// AddCashMovements adds the "cashMovements" edges to the CashMovement entity.
func (tu *TreasuryUpdate) AddCashMovements(c ...*CashMovement) *TreasuryUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.AddCashMovementIDs(ids...)
}

// Mutation returns the TreasuryMutation object of the builder.
func (tu *TreasuryUpdate) Mutation() *TreasuryMutation {
	return tu.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (tu *TreasuryUpdate) ClearCompany() *TreasuryUpdate {
	tu.mutation.ClearCompany()
	return tu
}

// ClearCashMovements clears all "cashMovements" edges to the CashMovement entity.
func (tu *TreasuryUpdate) ClearCashMovements() *TreasuryUpdate {
	tu.mutation.ClearCashMovements()
	return tu
}

// RemoveCashMovementIDs removes the "cashMovements" edge to CashMovement entities by IDs.
func (tu *TreasuryUpdate) RemoveCashMovementIDs(ids ...int) *TreasuryUpdate {
	tu.mutation.RemoveCashMovementIDs(ids...)
	return tu
}

// RemoveCashMovements removes "cashMovements" edges to CashMovement entities.
func (tu *TreasuryUpdate) RemoveCashMovements(c ...*CashMovement) *TreasuryUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.RemoveCashMovementIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TreasuryUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TreasuryUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TreasuryUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TreasuryUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TreasuryUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := treasury.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TreasuryUpdate) check() error {
	if v, ok := tu.mutation.Currency(); ok {
		if err := treasury.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`generated: validator failed for field "Treasury.currency": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Name(); ok {
		if err := treasury.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Treasury.name": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Category(); ok {
		if err := treasury.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`generated: validator failed for field "Treasury.category": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tu *TreasuryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TreasuryUpdate {
	tu.modifiers = append(tu.modifiers, modifiers...)
	return tu
}

func (tu *TreasuryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(treasury.Table, treasury.Columns, sqlgraph.NewFieldSpec(treasury.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(treasury.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.DeletedAt(); ok {
		_spec.SetField(treasury.FieldDeletedAt, field.TypeTime, value)
	}
	if tu.mutation.DeletedAtCleared() {
		_spec.ClearField(treasury.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tu.mutation.AccountNumber(); ok {
		_spec.SetField(treasury.FieldAccountNumber, field.TypeString, value)
	}
	if tu.mutation.AccountNumberCleared() {
		_spec.ClearField(treasury.FieldAccountNumber, field.TypeString)
	}
	if value, ok := tu.mutation.Balance(); ok {
		_spec.SetField(treasury.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedBalance(); ok {
		_spec.AddField(treasury.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.BankName(); ok {
		_spec.SetField(treasury.FieldBankName, field.TypeString, value)
	}
	if tu.mutation.BankNameCleared() {
		_spec.ClearField(treasury.FieldBankName, field.TypeString)
	}
	if value, ok := tu.mutation.Currency(); ok {
		_spec.SetField(treasury.FieldCurrency, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(treasury.FieldDescription, field.TypeString, value)
	}
	if tu.mutation.DescriptionCleared() {
		_spec.ClearField(treasury.FieldDescription, field.TypeString)
	}
	if value, ok := tu.mutation.Iban(); ok {
		_spec.SetField(treasury.FieldIban, field.TypeString, value)
	}
	if tu.mutation.IbanCleared() {
		_spec.ClearField(treasury.FieldIban, field.TypeString)
	}
	if value, ok := tu.mutation.IsDefault(); ok {
		_spec.SetField(treasury.FieldIsDefault, field.TypeBool, value)
	}
	if tu.mutation.IsDefaultCleared() {
		_spec.ClearField(treasury.FieldIsDefault, field.TypeBool)
	}
	if value, ok := tu.mutation.IsMainAccount(); ok {
		_spec.SetField(treasury.FieldIsMainAccount, field.TypeBool, value)
	}
	if tu.mutation.IsMainAccountCleared() {
		_spec.ClearField(treasury.FieldIsMainAccount, field.TypeBool)
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(treasury.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.Category(); ok {
		_spec.SetField(treasury.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.SwiftCode(); ok {
		_spec.SetField(treasury.FieldSwiftCode, field.TypeString, value)
	}
	if tu.mutation.SwiftCodeCleared() {
		_spec.ClearField(treasury.FieldSwiftCode, field.TypeString)
	}
	if tu.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treasury.CompanyTable,
			Columns: []string{treasury.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treasury.CompanyTable,
			Columns: []string{treasury.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.CashMovementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   treasury.CashMovementsTable,
			Columns: []string{treasury.CashMovementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cashmovement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedCashMovementsIDs(); len(nodes) > 0 && !tu.mutation.CashMovementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   treasury.CashMovementsTable,
			Columns: []string{treasury.CashMovementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cashmovement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CashMovementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   treasury.CashMovementsTable,
			Columns: []string{treasury.CashMovementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cashmovement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{treasury.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TreasuryUpdateOne is the builder for updating a single Treasury entity.
type TreasuryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TreasuryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updatedAt" field.
func (tuo *TreasuryUpdateOne) SetUpdatedAt(t time.Time) *TreasuryUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetDeletedAt sets the "deletedAt" field.
func (tuo *TreasuryUpdateOne) SetDeletedAt(t time.Time) *TreasuryUpdateOne {
	tuo.mutation.SetDeletedAt(t)
	return tuo
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (tuo *TreasuryUpdateOne) SetNillableDeletedAt(t *time.Time) *TreasuryUpdateOne {
	if t != nil {
		tuo.SetDeletedAt(*t)
	}
	return tuo
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (tuo *TreasuryUpdateOne) ClearDeletedAt() *TreasuryUpdateOne {
	tuo.mutation.ClearDeletedAt()
	return tuo
}

// SetAccountNumber sets the "accountNumber" field.
func (tuo *TreasuryUpdateOne) SetAccountNumber(s string) *TreasuryUpdateOne {
	tuo.mutation.SetAccountNumber(s)
	return tuo
}

// SetNillableAccountNumber sets the "accountNumber" field if the given value is not nil.
func (tuo *TreasuryUpdateOne) SetNillableAccountNumber(s *string) *TreasuryUpdateOne {
	if s != nil {
		tuo.SetAccountNumber(*s)
	}
	return tuo
}

// ClearAccountNumber clears the value of the "accountNumber" field.
func (tuo *TreasuryUpdateOne) ClearAccountNumber() *TreasuryUpdateOne {
	tuo.mutation.ClearAccountNumber()
	return tuo
}

// SetBalance sets the "balance" field.
func (tuo *TreasuryUpdateOne) SetBalance(f float64) *TreasuryUpdateOne {
	tuo.mutation.ResetBalance()
	tuo.mutation.SetBalance(f)
	return tuo
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (tuo *TreasuryUpdateOne) SetNillableBalance(f *float64) *TreasuryUpdateOne {
	if f != nil {
		tuo.SetBalance(*f)
	}
	return tuo
}

// AddBalance adds f to the "balance" field.
func (tuo *TreasuryUpdateOne) AddBalance(f float64) *TreasuryUpdateOne {
	tuo.mutation.AddBalance(f)
	return tuo
}

// SetBankName sets the "bankName" field.
func (tuo *TreasuryUpdateOne) SetBankName(s string) *TreasuryUpdateOne {
	tuo.mutation.SetBankName(s)
	return tuo
}

// SetNillableBankName sets the "bankName" field if the given value is not nil.
func (tuo *TreasuryUpdateOne) SetNillableBankName(s *string) *TreasuryUpdateOne {
	if s != nil {
		tuo.SetBankName(*s)
	}
	return tuo
}

// ClearBankName clears the value of the "bankName" field.
func (tuo *TreasuryUpdateOne) ClearBankName() *TreasuryUpdateOne {
	tuo.mutation.ClearBankName()
	return tuo
}

// SetCurrency sets the "currency" field.
func (tuo *TreasuryUpdateOne) SetCurrency(t treasury.Currency) *TreasuryUpdateOne {
	tuo.mutation.SetCurrency(t)
	return tuo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (tuo *TreasuryUpdateOne) SetNillableCurrency(t *treasury.Currency) *TreasuryUpdateOne {
	if t != nil {
		tuo.SetCurrency(*t)
	}
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TreasuryUpdateOne) SetDescription(s string) *TreasuryUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TreasuryUpdateOne) SetNillableDescription(s *string) *TreasuryUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// ClearDescription clears the value of the "description" field.
func (tuo *TreasuryUpdateOne) ClearDescription() *TreasuryUpdateOne {
	tuo.mutation.ClearDescription()
	return tuo
}

// SetIban sets the "iban" field.
func (tuo *TreasuryUpdateOne) SetIban(s string) *TreasuryUpdateOne {
	tuo.mutation.SetIban(s)
	return tuo
}

// SetNillableIban sets the "iban" field if the given value is not nil.
func (tuo *TreasuryUpdateOne) SetNillableIban(s *string) *TreasuryUpdateOne {
	if s != nil {
		tuo.SetIban(*s)
	}
	return tuo
}

// ClearIban clears the value of the "iban" field.
func (tuo *TreasuryUpdateOne) ClearIban() *TreasuryUpdateOne {
	tuo.mutation.ClearIban()
	return tuo
}

// SetIsDefault sets the "isDefault" field.
func (tuo *TreasuryUpdateOne) SetIsDefault(b bool) *TreasuryUpdateOne {
	tuo.mutation.SetIsDefault(b)
	return tuo
}

// SetNillableIsDefault sets the "isDefault" field if the given value is not nil.
func (tuo *TreasuryUpdateOne) SetNillableIsDefault(b *bool) *TreasuryUpdateOne {
	if b != nil {
		tuo.SetIsDefault(*b)
	}
	return tuo
}

// ClearIsDefault clears the value of the "isDefault" field.
func (tuo *TreasuryUpdateOne) ClearIsDefault() *TreasuryUpdateOne {
	tuo.mutation.ClearIsDefault()
	return tuo
}

// SetIsMainAccount sets the "isMainAccount" field.
func (tuo *TreasuryUpdateOne) SetIsMainAccount(b bool) *TreasuryUpdateOne {
	tuo.mutation.SetIsMainAccount(b)
	return tuo
}

// SetNillableIsMainAccount sets the "isMainAccount" field if the given value is not nil.
func (tuo *TreasuryUpdateOne) SetNillableIsMainAccount(b *bool) *TreasuryUpdateOne {
	if b != nil {
		tuo.SetIsMainAccount(*b)
	}
	return tuo
}

// ClearIsMainAccount clears the value of the "isMainAccount" field.
func (tuo *TreasuryUpdateOne) ClearIsMainAccount() *TreasuryUpdateOne {
	tuo.mutation.ClearIsMainAccount()
	return tuo
}

// SetName sets the "name" field.
func (tuo *TreasuryUpdateOne) SetName(s string) *TreasuryUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TreasuryUpdateOne) SetNillableName(s *string) *TreasuryUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// SetCategory sets the "category" field.
func (tuo *TreasuryUpdateOne) SetCategory(t treasury.Category) *TreasuryUpdateOne {
	tuo.mutation.SetCategory(t)
	return tuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (tuo *TreasuryUpdateOne) SetNillableCategory(t *treasury.Category) *TreasuryUpdateOne {
	if t != nil {
		tuo.SetCategory(*t)
	}
	return tuo
}

// SetSwiftCode sets the "swiftCode" field.
func (tuo *TreasuryUpdateOne) SetSwiftCode(s string) *TreasuryUpdateOne {
	tuo.mutation.SetSwiftCode(s)
	return tuo
}

// SetNillableSwiftCode sets the "swiftCode" field if the given value is not nil.
func (tuo *TreasuryUpdateOne) SetNillableSwiftCode(s *string) *TreasuryUpdateOne {
	if s != nil {
		tuo.SetSwiftCode(*s)
	}
	return tuo
}

// ClearSwiftCode clears the value of the "swiftCode" field.
func (tuo *TreasuryUpdateOne) ClearSwiftCode() *TreasuryUpdateOne {
	tuo.mutation.ClearSwiftCode()
	return tuo
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (tuo *TreasuryUpdateOne) SetCompanyID(id int) *TreasuryUpdateOne {
	tuo.mutation.SetCompanyID(id)
	return tuo
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (tuo *TreasuryUpdateOne) SetNillableCompanyID(id *int) *TreasuryUpdateOne {
	if id != nil {
		tuo = tuo.SetCompanyID(*id)
	}
	return tuo
}

// SetCompany sets the "company" edge to the Company entity.
func (tuo *TreasuryUpdateOne) SetCompany(c *Company) *TreasuryUpdateOne {
	return tuo.SetCompanyID(c.ID)
}

// AddCashMovementIDs adds the "cashMovements" edge to the CashMovement entity by IDs.
func (tuo *TreasuryUpdateOne) AddCashMovementIDs(ids ...int) *TreasuryUpdateOne {
	tuo.mutation.AddCashMovementIDs(ids...)
	return tuo
}

// AddCashMovements adds the "cashMovements" edges to the CashMovement entity.
func (tuo *TreasuryUpdateOne) AddCashMovements(c ...*CashMovement) *TreasuryUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.AddCashMovementIDs(ids...)
}

// Mutation returns the TreasuryMutation object of the builder.
func (tuo *TreasuryUpdateOne) Mutation() *TreasuryMutation {
	return tuo.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (tuo *TreasuryUpdateOne) ClearCompany() *TreasuryUpdateOne {
	tuo.mutation.ClearCompany()
	return tuo
}

// ClearCashMovements clears all "cashMovements" edges to the CashMovement entity.
func (tuo *TreasuryUpdateOne) ClearCashMovements() *TreasuryUpdateOne {
	tuo.mutation.ClearCashMovements()
	return tuo
}

// RemoveCashMovementIDs removes the "cashMovements" edge to CashMovement entities by IDs.
func (tuo *TreasuryUpdateOne) RemoveCashMovementIDs(ids ...int) *TreasuryUpdateOne {
	tuo.mutation.RemoveCashMovementIDs(ids...)
	return tuo
}

// RemoveCashMovements removes "cashMovements" edges to CashMovement entities.
func (tuo *TreasuryUpdateOne) RemoveCashMovements(c ...*CashMovement) *TreasuryUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.RemoveCashMovementIDs(ids...)
}

// Where appends a list predicates to the TreasuryUpdate builder.
func (tuo *TreasuryUpdateOne) Where(ps ...predicate.Treasury) *TreasuryUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TreasuryUpdateOne) Select(field string, fields ...string) *TreasuryUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Treasury entity.
func (tuo *TreasuryUpdateOne) Save(ctx context.Context) (*Treasury, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TreasuryUpdateOne) SaveX(ctx context.Context) *Treasury {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TreasuryUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TreasuryUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TreasuryUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := treasury.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TreasuryUpdateOne) check() error {
	if v, ok := tuo.mutation.Currency(); ok {
		if err := treasury.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`generated: validator failed for field "Treasury.currency": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Name(); ok {
		if err := treasury.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Treasury.name": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Category(); ok {
		if err := treasury.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`generated: validator failed for field "Treasury.category": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuo *TreasuryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TreasuryUpdateOne {
	tuo.modifiers = append(tuo.modifiers, modifiers...)
	return tuo
}

func (tuo *TreasuryUpdateOne) sqlSave(ctx context.Context) (_node *Treasury, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(treasury.Table, treasury.Columns, sqlgraph.NewFieldSpec(treasury.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Treasury.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, treasury.FieldID)
		for _, f := range fields {
			if !treasury.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != treasury.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(treasury.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.DeletedAt(); ok {
		_spec.SetField(treasury.FieldDeletedAt, field.TypeTime, value)
	}
	if tuo.mutation.DeletedAtCleared() {
		_spec.ClearField(treasury.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.AccountNumber(); ok {
		_spec.SetField(treasury.FieldAccountNumber, field.TypeString, value)
	}
	if tuo.mutation.AccountNumberCleared() {
		_spec.ClearField(treasury.FieldAccountNumber, field.TypeString)
	}
	if value, ok := tuo.mutation.Balance(); ok {
		_spec.SetField(treasury.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedBalance(); ok {
		_spec.AddField(treasury.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.BankName(); ok {
		_spec.SetField(treasury.FieldBankName, field.TypeString, value)
	}
	if tuo.mutation.BankNameCleared() {
		_spec.ClearField(treasury.FieldBankName, field.TypeString)
	}
	if value, ok := tuo.mutation.Currency(); ok {
		_spec.SetField(treasury.FieldCurrency, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(treasury.FieldDescription, field.TypeString, value)
	}
	if tuo.mutation.DescriptionCleared() {
		_spec.ClearField(treasury.FieldDescription, field.TypeString)
	}
	if value, ok := tuo.mutation.Iban(); ok {
		_spec.SetField(treasury.FieldIban, field.TypeString, value)
	}
	if tuo.mutation.IbanCleared() {
		_spec.ClearField(treasury.FieldIban, field.TypeString)
	}
	if value, ok := tuo.mutation.IsDefault(); ok {
		_spec.SetField(treasury.FieldIsDefault, field.TypeBool, value)
	}
	if tuo.mutation.IsDefaultCleared() {
		_spec.ClearField(treasury.FieldIsDefault, field.TypeBool)
	}
	if value, ok := tuo.mutation.IsMainAccount(); ok {
		_spec.SetField(treasury.FieldIsMainAccount, field.TypeBool, value)
	}
	if tuo.mutation.IsMainAccountCleared() {
		_spec.ClearField(treasury.FieldIsMainAccount, field.TypeBool)
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(treasury.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Category(); ok {
		_spec.SetField(treasury.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.SwiftCode(); ok {
		_spec.SetField(treasury.FieldSwiftCode, field.TypeString, value)
	}
	if tuo.mutation.SwiftCodeCleared() {
		_spec.ClearField(treasury.FieldSwiftCode, field.TypeString)
	}
	if tuo.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treasury.CompanyTable,
			Columns: []string{treasury.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treasury.CompanyTable,
			Columns: []string{treasury.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.CashMovementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   treasury.CashMovementsTable,
			Columns: []string{treasury.CashMovementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cashmovement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedCashMovementsIDs(); len(nodes) > 0 && !tuo.mutation.CashMovementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   treasury.CashMovementsTable,
			Columns: []string{treasury.CashMovementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cashmovement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CashMovementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   treasury.CashMovementsTable,
			Columns: []string{treasury.CashMovementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cashmovement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tuo.modifiers...)
	_node = &Treasury{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{treasury.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
