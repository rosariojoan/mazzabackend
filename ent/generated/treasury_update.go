// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"mazza/ent/generated/company"
	"mazza/ent/generated/predicate"
	"mazza/ent/generated/treasury"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TreasuryUpdate is the builder for updating Treasury entities.
type TreasuryUpdate struct {
	config
	hooks     []Hook
	mutation  *TreasuryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TreasuryUpdate builder.
func (tu *TreasuryUpdate) Where(ps ...predicate.Treasury) *TreasuryUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdatedAt sets the "updatedAt" field.
func (tu *TreasuryUpdate) SetUpdatedAt(t time.Time) *TreasuryUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetDeletedAt sets the "deletedAt" field.
func (tu *TreasuryUpdate) SetDeletedAt(t time.Time) *TreasuryUpdate {
	tu.mutation.SetDeletedAt(t)
	return tu
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (tu *TreasuryUpdate) SetNillableDeletedAt(t *time.Time) *TreasuryUpdate {
	if t != nil {
		tu.SetDeletedAt(*t)
	}
	return tu
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (tu *TreasuryUpdate) ClearDeletedAt() *TreasuryUpdate {
	tu.mutation.ClearDeletedAt()
	return tu
}

// SetBalance sets the "balance" field.
func (tu *TreasuryUpdate) SetBalance(f float64) *TreasuryUpdate {
	tu.mutation.ResetBalance()
	tu.mutation.SetBalance(f)
	return tu
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (tu *TreasuryUpdate) SetNillableBalance(f *float64) *TreasuryUpdate {
	if f != nil {
		tu.SetBalance(*f)
	}
	return tu
}

// AddBalance adds f to the "balance" field.
func (tu *TreasuryUpdate) AddBalance(f float64) *TreasuryUpdate {
	tu.mutation.AddBalance(f)
	return tu
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (tu *TreasuryUpdate) SetCompanyID(id int) *TreasuryUpdate {
	tu.mutation.SetCompanyID(id)
	return tu
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (tu *TreasuryUpdate) SetNillableCompanyID(id *int) *TreasuryUpdate {
	if id != nil {
		tu = tu.SetCompanyID(*id)
	}
	return tu
}

// SetCompany sets the "company" edge to the Company entity.
func (tu *TreasuryUpdate) SetCompany(c *Company) *TreasuryUpdate {
	return tu.SetCompanyID(c.ID)
}

// Mutation returns the TreasuryMutation object of the builder.
func (tu *TreasuryUpdate) Mutation() *TreasuryMutation {
	return tu.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (tu *TreasuryUpdate) ClearCompany() *TreasuryUpdate {
	tu.mutation.ClearCompany()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TreasuryUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TreasuryUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TreasuryUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TreasuryUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TreasuryUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := treasury.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tu *TreasuryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TreasuryUpdate {
	tu.modifiers = append(tu.modifiers, modifiers...)
	return tu
}

func (tu *TreasuryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(treasury.Table, treasury.Columns, sqlgraph.NewFieldSpec(treasury.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(treasury.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.DeletedAt(); ok {
		_spec.SetField(treasury.FieldDeletedAt, field.TypeTime, value)
	}
	if tu.mutation.DeletedAtCleared() {
		_spec.ClearField(treasury.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tu.mutation.Balance(); ok {
		_spec.SetField(treasury.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedBalance(); ok {
		_spec.AddField(treasury.FieldBalance, field.TypeFloat64, value)
	}
	if tu.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treasury.CompanyTable,
			Columns: []string{treasury.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treasury.CompanyTable,
			Columns: []string{treasury.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{treasury.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TreasuryUpdateOne is the builder for updating a single Treasury entity.
type TreasuryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TreasuryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updatedAt" field.
func (tuo *TreasuryUpdateOne) SetUpdatedAt(t time.Time) *TreasuryUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetDeletedAt sets the "deletedAt" field.
func (tuo *TreasuryUpdateOne) SetDeletedAt(t time.Time) *TreasuryUpdateOne {
	tuo.mutation.SetDeletedAt(t)
	return tuo
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (tuo *TreasuryUpdateOne) SetNillableDeletedAt(t *time.Time) *TreasuryUpdateOne {
	if t != nil {
		tuo.SetDeletedAt(*t)
	}
	return tuo
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (tuo *TreasuryUpdateOne) ClearDeletedAt() *TreasuryUpdateOne {
	tuo.mutation.ClearDeletedAt()
	return tuo
}

// SetBalance sets the "balance" field.
func (tuo *TreasuryUpdateOne) SetBalance(f float64) *TreasuryUpdateOne {
	tuo.mutation.ResetBalance()
	tuo.mutation.SetBalance(f)
	return tuo
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (tuo *TreasuryUpdateOne) SetNillableBalance(f *float64) *TreasuryUpdateOne {
	if f != nil {
		tuo.SetBalance(*f)
	}
	return tuo
}

// AddBalance adds f to the "balance" field.
func (tuo *TreasuryUpdateOne) AddBalance(f float64) *TreasuryUpdateOne {
	tuo.mutation.AddBalance(f)
	return tuo
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (tuo *TreasuryUpdateOne) SetCompanyID(id int) *TreasuryUpdateOne {
	tuo.mutation.SetCompanyID(id)
	return tuo
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (tuo *TreasuryUpdateOne) SetNillableCompanyID(id *int) *TreasuryUpdateOne {
	if id != nil {
		tuo = tuo.SetCompanyID(*id)
	}
	return tuo
}

// SetCompany sets the "company" edge to the Company entity.
func (tuo *TreasuryUpdateOne) SetCompany(c *Company) *TreasuryUpdateOne {
	return tuo.SetCompanyID(c.ID)
}

// Mutation returns the TreasuryMutation object of the builder.
func (tuo *TreasuryUpdateOne) Mutation() *TreasuryMutation {
	return tuo.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (tuo *TreasuryUpdateOne) ClearCompany() *TreasuryUpdateOne {
	tuo.mutation.ClearCompany()
	return tuo
}

// Where appends a list predicates to the TreasuryUpdate builder.
func (tuo *TreasuryUpdateOne) Where(ps ...predicate.Treasury) *TreasuryUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TreasuryUpdateOne) Select(field string, fields ...string) *TreasuryUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Treasury entity.
func (tuo *TreasuryUpdateOne) Save(ctx context.Context) (*Treasury, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TreasuryUpdateOne) SaveX(ctx context.Context) *Treasury {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TreasuryUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TreasuryUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TreasuryUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := treasury.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuo *TreasuryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TreasuryUpdateOne {
	tuo.modifiers = append(tuo.modifiers, modifiers...)
	return tuo
}

func (tuo *TreasuryUpdateOne) sqlSave(ctx context.Context) (_node *Treasury, err error) {
	_spec := sqlgraph.NewUpdateSpec(treasury.Table, treasury.Columns, sqlgraph.NewFieldSpec(treasury.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Treasury.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, treasury.FieldID)
		for _, f := range fields {
			if !treasury.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != treasury.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(treasury.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.DeletedAt(); ok {
		_spec.SetField(treasury.FieldDeletedAt, field.TypeTime, value)
	}
	if tuo.mutation.DeletedAtCleared() {
		_spec.ClearField(treasury.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.Balance(); ok {
		_spec.SetField(treasury.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedBalance(); ok {
		_spec.AddField(treasury.FieldBalance, field.TypeFloat64, value)
	}
	if tuo.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treasury.CompanyTable,
			Columns: []string{treasury.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treasury.CompanyTable,
			Columns: []string{treasury.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tuo.modifiers...)
	_node = &Treasury{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{treasury.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
