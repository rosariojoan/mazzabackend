// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"mazza/ent/generated/company"
	"mazza/ent/generated/companydocument"
	"mazza/ent/generated/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CompanyDocumentCreate is the builder for creating a CompanyDocument entity.
type CompanyDocumentCreate struct {
	config
	mutation *CompanyDocumentMutation
	hooks    []Hook
}

// SetCreatedAt sets the "createdAt" field.
func (cdc *CompanyDocumentCreate) SetCreatedAt(t time.Time) *CompanyDocumentCreate {
	cdc.mutation.SetCreatedAt(t)
	return cdc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (cdc *CompanyDocumentCreate) SetNillableCreatedAt(t *time.Time) *CompanyDocumentCreate {
	if t != nil {
		cdc.SetCreatedAt(*t)
	}
	return cdc
}

// SetUpdatedAt sets the "updatedAt" field.
func (cdc *CompanyDocumentCreate) SetUpdatedAt(t time.Time) *CompanyDocumentCreate {
	cdc.mutation.SetUpdatedAt(t)
	return cdc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (cdc *CompanyDocumentCreate) SetNillableUpdatedAt(t *time.Time) *CompanyDocumentCreate {
	if t != nil {
		cdc.SetUpdatedAt(*t)
	}
	return cdc
}

// SetDeletedAt sets the "deletedAt" field.
func (cdc *CompanyDocumentCreate) SetDeletedAt(t time.Time) *CompanyDocumentCreate {
	cdc.mutation.SetDeletedAt(t)
	return cdc
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (cdc *CompanyDocumentCreate) SetNillableDeletedAt(t *time.Time) *CompanyDocumentCreate {
	if t != nil {
		cdc.SetDeletedAt(*t)
	}
	return cdc
}

// SetFilename sets the "filename" field.
func (cdc *CompanyDocumentCreate) SetFilename(s string) *CompanyDocumentCreate {
	cdc.mutation.SetFilename(s)
	return cdc
}

// SetTitle sets the "title" field.
func (cdc *CompanyDocumentCreate) SetTitle(s string) *CompanyDocumentCreate {
	cdc.mutation.SetTitle(s)
	return cdc
}

// SetKeywords sets the "keywords" field.
func (cdc *CompanyDocumentCreate) SetKeywords(s string) *CompanyDocumentCreate {
	cdc.mutation.SetKeywords(s)
	return cdc
}

// SetCategory sets the "category" field.
func (cdc *CompanyDocumentCreate) SetCategory(c companydocument.Category) *CompanyDocumentCreate {
	cdc.mutation.SetCategory(c)
	return cdc
}

// SetSize sets the "size" field.
func (cdc *CompanyDocumentCreate) SetSize(i int) *CompanyDocumentCreate {
	cdc.mutation.SetSize(i)
	return cdc
}

// SetFileType sets the "fileType" field.
func (cdc *CompanyDocumentCreate) SetFileType(s string) *CompanyDocumentCreate {
	cdc.mutation.SetFileType(s)
	return cdc
}

// SetStatus sets the "status" field.
func (cdc *CompanyDocumentCreate) SetStatus(c companydocument.Status) *CompanyDocumentCreate {
	cdc.mutation.SetStatus(c)
	return cdc
}

// SetURL sets the "url" field.
func (cdc *CompanyDocumentCreate) SetURL(s string) *CompanyDocumentCreate {
	cdc.mutation.SetURL(s)
	return cdc
}

// SetStorageURI sets the "storageURI" field.
func (cdc *CompanyDocumentCreate) SetStorageURI(s string) *CompanyDocumentCreate {
	cdc.mutation.SetStorageURI(s)
	return cdc
}

// SetThumbnail sets the "thumbnail" field.
func (cdc *CompanyDocumentCreate) SetThumbnail(s string) *CompanyDocumentCreate {
	cdc.mutation.SetThumbnail(s)
	return cdc
}

// SetNillableThumbnail sets the "thumbnail" field if the given value is not nil.
func (cdc *CompanyDocumentCreate) SetNillableThumbnail(s *string) *CompanyDocumentCreate {
	if s != nil {
		cdc.SetThumbnail(*s)
	}
	return cdc
}

// SetExpiryDate sets the "expiryDate" field.
func (cdc *CompanyDocumentCreate) SetExpiryDate(t time.Time) *CompanyDocumentCreate {
	cdc.mutation.SetExpiryDate(t)
	return cdc
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (cdc *CompanyDocumentCreate) SetCompanyID(id int) *CompanyDocumentCreate {
	cdc.mutation.SetCompanyID(id)
	return cdc
}

// SetCompany sets the "company" edge to the Company entity.
func (cdc *CompanyDocumentCreate) SetCompany(c *Company) *CompanyDocumentCreate {
	return cdc.SetCompanyID(c.ID)
}

// SetUploadedByID sets the "uploadedBy" edge to the User entity by ID.
func (cdc *CompanyDocumentCreate) SetUploadedByID(id int) *CompanyDocumentCreate {
	cdc.mutation.SetUploadedByID(id)
	return cdc
}

// SetNillableUploadedByID sets the "uploadedBy" edge to the User entity by ID if the given value is not nil.
func (cdc *CompanyDocumentCreate) SetNillableUploadedByID(id *int) *CompanyDocumentCreate {
	if id != nil {
		cdc = cdc.SetUploadedByID(*id)
	}
	return cdc
}

// SetUploadedBy sets the "uploadedBy" edge to the User entity.
func (cdc *CompanyDocumentCreate) SetUploadedBy(u *User) *CompanyDocumentCreate {
	return cdc.SetUploadedByID(u.ID)
}

// SetApprovedByID sets the "approvedBy" edge to the User entity by ID.
func (cdc *CompanyDocumentCreate) SetApprovedByID(id int) *CompanyDocumentCreate {
	cdc.mutation.SetApprovedByID(id)
	return cdc
}

// SetNillableApprovedByID sets the "approvedBy" edge to the User entity by ID if the given value is not nil.
func (cdc *CompanyDocumentCreate) SetNillableApprovedByID(id *int) *CompanyDocumentCreate {
	if id != nil {
		cdc = cdc.SetApprovedByID(*id)
	}
	return cdc
}

// SetApprovedBy sets the "approvedBy" edge to the User entity.
func (cdc *CompanyDocumentCreate) SetApprovedBy(u *User) *CompanyDocumentCreate {
	return cdc.SetApprovedByID(u.ID)
}

// Mutation returns the CompanyDocumentMutation object of the builder.
func (cdc *CompanyDocumentCreate) Mutation() *CompanyDocumentMutation {
	return cdc.mutation
}

// Save creates the CompanyDocument in the database.
func (cdc *CompanyDocumentCreate) Save(ctx context.Context) (*CompanyDocument, error) {
	cdc.defaults()
	return withHooks(ctx, cdc.sqlSave, cdc.mutation, cdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cdc *CompanyDocumentCreate) SaveX(ctx context.Context) *CompanyDocument {
	v, err := cdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cdc *CompanyDocumentCreate) Exec(ctx context.Context) error {
	_, err := cdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdc *CompanyDocumentCreate) ExecX(ctx context.Context) {
	if err := cdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cdc *CompanyDocumentCreate) defaults() {
	if _, ok := cdc.mutation.CreatedAt(); !ok {
		v := companydocument.DefaultCreatedAt()
		cdc.mutation.SetCreatedAt(v)
	}
	if _, ok := cdc.mutation.UpdatedAt(); !ok {
		v := companydocument.DefaultUpdatedAt()
		cdc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cdc *CompanyDocumentCreate) check() error {
	if _, ok := cdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`generated: missing required field "CompanyDocument.createdAt"`)}
	}
	if _, ok := cdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`generated: missing required field "CompanyDocument.updatedAt"`)}
	}
	if _, ok := cdc.mutation.Filename(); !ok {
		return &ValidationError{Name: "filename", err: errors.New(`generated: missing required field "CompanyDocument.filename"`)}
	}
	if v, ok := cdc.mutation.Filename(); ok {
		if err := companydocument.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`generated: validator failed for field "CompanyDocument.filename": %w`, err)}
		}
	}
	if _, ok := cdc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`generated: missing required field "CompanyDocument.title"`)}
	}
	if v, ok := cdc.mutation.Title(); ok {
		if err := companydocument.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`generated: validator failed for field "CompanyDocument.title": %w`, err)}
		}
	}
	if _, ok := cdc.mutation.Keywords(); !ok {
		return &ValidationError{Name: "keywords", err: errors.New(`generated: missing required field "CompanyDocument.keywords"`)}
	}
	if v, ok := cdc.mutation.Keywords(); ok {
		if err := companydocument.KeywordsValidator(v); err != nil {
			return &ValidationError{Name: "keywords", err: fmt.Errorf(`generated: validator failed for field "CompanyDocument.keywords": %w`, err)}
		}
	}
	if _, ok := cdc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`generated: missing required field "CompanyDocument.category"`)}
	}
	if v, ok := cdc.mutation.Category(); ok {
		if err := companydocument.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`generated: validator failed for field "CompanyDocument.category": %w`, err)}
		}
	}
	if _, ok := cdc.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`generated: missing required field "CompanyDocument.size"`)}
	}
	if v, ok := cdc.mutation.Size(); ok {
		if err := companydocument.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`generated: validator failed for field "CompanyDocument.size": %w`, err)}
		}
	}
	if _, ok := cdc.mutation.FileType(); !ok {
		return &ValidationError{Name: "fileType", err: errors.New(`generated: missing required field "CompanyDocument.fileType"`)}
	}
	if _, ok := cdc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`generated: missing required field "CompanyDocument.status"`)}
	}
	if v, ok := cdc.mutation.Status(); ok {
		if err := companydocument.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "CompanyDocument.status": %w`, err)}
		}
	}
	if _, ok := cdc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`generated: missing required field "CompanyDocument.url"`)}
	}
	if v, ok := cdc.mutation.URL(); ok {
		if err := companydocument.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`generated: validator failed for field "CompanyDocument.url": %w`, err)}
		}
	}
	if _, ok := cdc.mutation.StorageURI(); !ok {
		return &ValidationError{Name: "storageURI", err: errors.New(`generated: missing required field "CompanyDocument.storageURI"`)}
	}
	if v, ok := cdc.mutation.StorageURI(); ok {
		if err := companydocument.StorageURIValidator(v); err != nil {
			return &ValidationError{Name: "storageURI", err: fmt.Errorf(`generated: validator failed for field "CompanyDocument.storageURI": %w`, err)}
		}
	}
	if _, ok := cdc.mutation.ExpiryDate(); !ok {
		return &ValidationError{Name: "expiryDate", err: errors.New(`generated: missing required field "CompanyDocument.expiryDate"`)}
	}
	if len(cdc.mutation.CompanyIDs()) == 0 {
		return &ValidationError{Name: "company", err: errors.New(`generated: missing required edge "CompanyDocument.company"`)}
	}
	return nil
}

func (cdc *CompanyDocumentCreate) sqlSave(ctx context.Context) (*CompanyDocument, error) {
	if err := cdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cdc.mutation.id = &_node.ID
	cdc.mutation.done = true
	return _node, nil
}

func (cdc *CompanyDocumentCreate) createSpec() (*CompanyDocument, *sqlgraph.CreateSpec) {
	var (
		_node = &CompanyDocument{config: cdc.config}
		_spec = sqlgraph.NewCreateSpec(companydocument.Table, sqlgraph.NewFieldSpec(companydocument.FieldID, field.TypeInt))
	)
	if value, ok := cdc.mutation.CreatedAt(); ok {
		_spec.SetField(companydocument.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cdc.mutation.UpdatedAt(); ok {
		_spec.SetField(companydocument.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cdc.mutation.DeletedAt(); ok {
		_spec.SetField(companydocument.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := cdc.mutation.Filename(); ok {
		_spec.SetField(companydocument.FieldFilename, field.TypeString, value)
		_node.Filename = value
	}
	if value, ok := cdc.mutation.Title(); ok {
		_spec.SetField(companydocument.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := cdc.mutation.Keywords(); ok {
		_spec.SetField(companydocument.FieldKeywords, field.TypeString, value)
		_node.Keywords = value
	}
	if value, ok := cdc.mutation.Category(); ok {
		_spec.SetField(companydocument.FieldCategory, field.TypeEnum, value)
		_node.Category = value
	}
	if value, ok := cdc.mutation.Size(); ok {
		_spec.SetField(companydocument.FieldSize, field.TypeInt, value)
		_node.Size = value
	}
	if value, ok := cdc.mutation.FileType(); ok {
		_spec.SetField(companydocument.FieldFileType, field.TypeString, value)
		_node.FileType = &value
	}
	if value, ok := cdc.mutation.Status(); ok {
		_spec.SetField(companydocument.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := cdc.mutation.URL(); ok {
		_spec.SetField(companydocument.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := cdc.mutation.StorageURI(); ok {
		_spec.SetField(companydocument.FieldStorageURI, field.TypeString, value)
		_node.StorageURI = value
	}
	if value, ok := cdc.mutation.Thumbnail(); ok {
		_spec.SetField(companydocument.FieldThumbnail, field.TypeString, value)
		_node.Thumbnail = &value
	}
	if value, ok := cdc.mutation.ExpiryDate(); ok {
		_spec.SetField(companydocument.FieldExpiryDate, field.TypeTime, value)
		_node.ExpiryDate = &value
	}
	if nodes := cdc.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   companydocument.CompanyTable,
			Columns: []string{companydocument.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.company_documents = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cdc.mutation.UploadedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   companydocument.UploadedByTable,
			Columns: []string{companydocument.UploadedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_uploaded_documents = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cdc.mutation.ApprovedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   companydocument.ApprovedByTable,
			Columns: []string{companydocument.ApprovedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_approved_documents = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CompanyDocumentCreateBulk is the builder for creating many CompanyDocument entities in bulk.
type CompanyDocumentCreateBulk struct {
	config
	err      error
	builders []*CompanyDocumentCreate
}

// Save creates the CompanyDocument entities in the database.
func (cdcb *CompanyDocumentCreateBulk) Save(ctx context.Context) ([]*CompanyDocument, error) {
	if cdcb.err != nil {
		return nil, cdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cdcb.builders))
	nodes := make([]*CompanyDocument, len(cdcb.builders))
	mutators := make([]Mutator, len(cdcb.builders))
	for i := range cdcb.builders {
		func(i int, root context.Context) {
			builder := cdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CompanyDocumentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cdcb *CompanyDocumentCreateBulk) SaveX(ctx context.Context) []*CompanyDocument {
	v, err := cdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cdcb *CompanyDocumentCreateBulk) Exec(ctx context.Context) error {
	_, err := cdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdcb *CompanyDocumentCreateBulk) ExecX(ctx context.Context) {
	if err := cdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
