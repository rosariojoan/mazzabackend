// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"mazza/ent/generated/accountingentry"
	"mazza/ent/generated/company"
	"mazza/ent/generated/predicate"
	"mazza/ent/generated/product"
	"mazza/ent/generated/treasury"
	"mazza/ent/generated/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccountingEntryUpdate is the builder for updating AccountingEntry entities.
type AccountingEntryUpdate struct {
	config
	hooks     []Hook
	mutation  *AccountingEntryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AccountingEntryUpdate builder.
func (aeu *AccountingEntryUpdate) Where(ps ...predicate.AccountingEntry) *AccountingEntryUpdate {
	aeu.mutation.Where(ps...)
	return aeu
}

// SetUpdatedAt sets the "updatedAt" field.
func (aeu *AccountingEntryUpdate) SetUpdatedAt(t time.Time) *AccountingEntryUpdate {
	aeu.mutation.SetUpdatedAt(t)
	return aeu
}

// SetDeletedAt sets the "deletedAt" field.
func (aeu *AccountingEntryUpdate) SetDeletedAt(t time.Time) *AccountingEntryUpdate {
	aeu.mutation.SetDeletedAt(t)
	return aeu
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (aeu *AccountingEntryUpdate) SetNillableDeletedAt(t *time.Time) *AccountingEntryUpdate {
	if t != nil {
		aeu.SetDeletedAt(*t)
	}
	return aeu
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (aeu *AccountingEntryUpdate) ClearDeletedAt() *AccountingEntryUpdate {
	aeu.mutation.ClearDeletedAt()
	return aeu
}

// SetNumber sets the "number" field.
func (aeu *AccountingEntryUpdate) SetNumber(i int) *AccountingEntryUpdate {
	aeu.mutation.ResetNumber()
	aeu.mutation.SetNumber(i)
	return aeu
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (aeu *AccountingEntryUpdate) SetNillableNumber(i *int) *AccountingEntryUpdate {
	if i != nil {
		aeu.SetNumber(*i)
	}
	return aeu
}

// AddNumber adds i to the "number" field.
func (aeu *AccountingEntryUpdate) AddNumber(i int) *AccountingEntryUpdate {
	aeu.mutation.AddNumber(i)
	return aeu
}

// SetGroup sets the "group" field.
func (aeu *AccountingEntryUpdate) SetGroup(i int) *AccountingEntryUpdate {
	aeu.mutation.ResetGroup()
	aeu.mutation.SetGroup(i)
	return aeu
}

// SetNillableGroup sets the "group" field if the given value is not nil.
func (aeu *AccountingEntryUpdate) SetNillableGroup(i *int) *AccountingEntryUpdate {
	if i != nil {
		aeu.SetGroup(*i)
	}
	return aeu
}

// AddGroup adds i to the "group" field.
func (aeu *AccountingEntryUpdate) AddGroup(i int) *AccountingEntryUpdate {
	aeu.mutation.AddGroup(i)
	return aeu
}

// SetDate sets the "date" field.
func (aeu *AccountingEntryUpdate) SetDate(t time.Time) *AccountingEntryUpdate {
	aeu.mutation.SetDate(t)
	return aeu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (aeu *AccountingEntryUpdate) SetNillableDate(t *time.Time) *AccountingEntryUpdate {
	if t != nil {
		aeu.SetDate(*t)
	}
	return aeu
}

// SetAccount sets the "account" field.
func (aeu *AccountingEntryUpdate) SetAccount(s string) *AccountingEntryUpdate {
	aeu.mutation.SetAccount(s)
	return aeu
}

// SetNillableAccount sets the "account" field if the given value is not nil.
func (aeu *AccountingEntryUpdate) SetNillableAccount(s *string) *AccountingEntryUpdate {
	if s != nil {
		aeu.SetAccount(*s)
	}
	return aeu
}

// SetLabel sets the "label" field.
func (aeu *AccountingEntryUpdate) SetLabel(s string) *AccountingEntryUpdate {
	aeu.mutation.SetLabel(s)
	return aeu
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (aeu *AccountingEntryUpdate) SetNillableLabel(s *string) *AccountingEntryUpdate {
	if s != nil {
		aeu.SetLabel(*s)
	}
	return aeu
}

// SetAmount sets the "amount" field.
func (aeu *AccountingEntryUpdate) SetAmount(f float64) *AccountingEntryUpdate {
	aeu.mutation.ResetAmount()
	aeu.mutation.SetAmount(f)
	return aeu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (aeu *AccountingEntryUpdate) SetNillableAmount(f *float64) *AccountingEntryUpdate {
	if f != nil {
		aeu.SetAmount(*f)
	}
	return aeu
}

// AddAmount adds f to the "amount" field.
func (aeu *AccountingEntryUpdate) AddAmount(f float64) *AccountingEntryUpdate {
	aeu.mutation.AddAmount(f)
	return aeu
}

// SetDescription sets the "description" field.
func (aeu *AccountingEntryUpdate) SetDescription(s string) *AccountingEntryUpdate {
	aeu.mutation.SetDescription(s)
	return aeu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (aeu *AccountingEntryUpdate) SetNillableDescription(s *string) *AccountingEntryUpdate {
	if s != nil {
		aeu.SetDescription(*s)
	}
	return aeu
}

// SetAccountType sets the "accountType" field.
func (aeu *AccountingEntryUpdate) SetAccountType(at accountingentry.AccountType) *AccountingEntryUpdate {
	aeu.mutation.SetAccountType(at)
	return aeu
}

// SetNillableAccountType sets the "accountType" field if the given value is not nil.
func (aeu *AccountingEntryUpdate) SetNillableAccountType(at *accountingentry.AccountType) *AccountingEntryUpdate {
	if at != nil {
		aeu.SetAccountType(*at)
	}
	return aeu
}

// SetIsDebit sets the "isDebit" field.
func (aeu *AccountingEntryUpdate) SetIsDebit(b bool) *AccountingEntryUpdate {
	aeu.mutation.SetIsDebit(b)
	return aeu
}

// SetNillableIsDebit sets the "isDebit" field if the given value is not nil.
func (aeu *AccountingEntryUpdate) SetNillableIsDebit(b *bool) *AccountingEntryUpdate {
	if b != nil {
		aeu.SetIsDebit(*b)
	}
	return aeu
}

// SetIsReversal sets the "isReversal" field.
func (aeu *AccountingEntryUpdate) SetIsReversal(b bool) *AccountingEntryUpdate {
	aeu.mutation.SetIsReversal(b)
	return aeu
}

// SetNillableIsReversal sets the "isReversal" field if the given value is not nil.
func (aeu *AccountingEntryUpdate) SetNillableIsReversal(b *bool) *AccountingEntryUpdate {
	if b != nil {
		aeu.SetIsReversal(*b)
	}
	return aeu
}

// SetReversed sets the "reversed" field.
func (aeu *AccountingEntryUpdate) SetReversed(b bool) *AccountingEntryUpdate {
	aeu.mutation.SetReversed(b)
	return aeu
}

// SetNillableReversed sets the "reversed" field if the given value is not nil.
func (aeu *AccountingEntryUpdate) SetNillableReversed(b *bool) *AccountingEntryUpdate {
	if b != nil {
		aeu.SetReversed(*b)
	}
	return aeu
}

// SetQuantity sets the "quantity" field.
func (aeu *AccountingEntryUpdate) SetQuantity(i int) *AccountingEntryUpdate {
	aeu.mutation.ResetQuantity()
	aeu.mutation.SetQuantity(i)
	return aeu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (aeu *AccountingEntryUpdate) SetNillableQuantity(i *int) *AccountingEntryUpdate {
	if i != nil {
		aeu.SetQuantity(*i)
	}
	return aeu
}

// AddQuantity adds i to the "quantity" field.
func (aeu *AccountingEntryUpdate) AddQuantity(i int) *AccountingEntryUpdate {
	aeu.mutation.AddQuantity(i)
	return aeu
}

// ClearQuantity clears the value of the "quantity" field.
func (aeu *AccountingEntryUpdate) ClearQuantity() *AccountingEntryUpdate {
	aeu.mutation.ClearQuantity()
	return aeu
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (aeu *AccountingEntryUpdate) SetCompanyID(id int) *AccountingEntryUpdate {
	aeu.mutation.SetCompanyID(id)
	return aeu
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (aeu *AccountingEntryUpdate) SetNillableCompanyID(id *int) *AccountingEntryUpdate {
	if id != nil {
		aeu = aeu.SetCompanyID(*id)
	}
	return aeu
}

// SetCompany sets the "company" edge to the Company entity.
func (aeu *AccountingEntryUpdate) SetCompany(c *Company) *AccountingEntryUpdate {
	return aeu.SetCompanyID(c.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (aeu *AccountingEntryUpdate) SetUserID(id int) *AccountingEntryUpdate {
	aeu.mutation.SetUserID(id)
	return aeu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (aeu *AccountingEntryUpdate) SetNillableUserID(id *int) *AccountingEntryUpdate {
	if id != nil {
		aeu = aeu.SetUserID(*id)
	}
	return aeu
}

// SetUser sets the "user" edge to the User entity.
func (aeu *AccountingEntryUpdate) SetUser(u *User) *AccountingEntryUpdate {
	return aeu.SetUserID(u.ID)
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (aeu *AccountingEntryUpdate) SetProductID(id int) *AccountingEntryUpdate {
	aeu.mutation.SetProductID(id)
	return aeu
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (aeu *AccountingEntryUpdate) SetNillableProductID(id *int) *AccountingEntryUpdate {
	if id != nil {
		aeu = aeu.SetProductID(*id)
	}
	return aeu
}

// SetProduct sets the "product" edge to the Product entity.
func (aeu *AccountingEntryUpdate) SetProduct(p *Product) *AccountingEntryUpdate {
	return aeu.SetProductID(p.ID)
}

// SetTreasuryID sets the "treasury" edge to the Treasury entity by ID.
func (aeu *AccountingEntryUpdate) SetTreasuryID(id int) *AccountingEntryUpdate {
	aeu.mutation.SetTreasuryID(id)
	return aeu
}

// SetNillableTreasuryID sets the "treasury" edge to the Treasury entity by ID if the given value is not nil.
func (aeu *AccountingEntryUpdate) SetNillableTreasuryID(id *int) *AccountingEntryUpdate {
	if id != nil {
		aeu = aeu.SetTreasuryID(*id)
	}
	return aeu
}

// SetTreasury sets the "treasury" edge to the Treasury entity.
func (aeu *AccountingEntryUpdate) SetTreasury(t *Treasury) *AccountingEntryUpdate {
	return aeu.SetTreasuryID(t.ID)
}

// Mutation returns the AccountingEntryMutation object of the builder.
func (aeu *AccountingEntryUpdate) Mutation() *AccountingEntryMutation {
	return aeu.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (aeu *AccountingEntryUpdate) ClearCompany() *AccountingEntryUpdate {
	aeu.mutation.ClearCompany()
	return aeu
}

// ClearUser clears the "user" edge to the User entity.
func (aeu *AccountingEntryUpdate) ClearUser() *AccountingEntryUpdate {
	aeu.mutation.ClearUser()
	return aeu
}

// ClearProduct clears the "product" edge to the Product entity.
func (aeu *AccountingEntryUpdate) ClearProduct() *AccountingEntryUpdate {
	aeu.mutation.ClearProduct()
	return aeu
}

// ClearTreasury clears the "treasury" edge to the Treasury entity.
func (aeu *AccountingEntryUpdate) ClearTreasury() *AccountingEntryUpdate {
	aeu.mutation.ClearTreasury()
	return aeu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aeu *AccountingEntryUpdate) Save(ctx context.Context) (int, error) {
	aeu.defaults()
	return withHooks(ctx, aeu.sqlSave, aeu.mutation, aeu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aeu *AccountingEntryUpdate) SaveX(ctx context.Context) int {
	affected, err := aeu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aeu *AccountingEntryUpdate) Exec(ctx context.Context) error {
	_, err := aeu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aeu *AccountingEntryUpdate) ExecX(ctx context.Context) {
	if err := aeu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aeu *AccountingEntryUpdate) defaults() {
	if _, ok := aeu.mutation.UpdatedAt(); !ok {
		v := accountingentry.UpdateDefaultUpdatedAt()
		aeu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aeu *AccountingEntryUpdate) check() error {
	if v, ok := aeu.mutation.Number(); ok {
		if err := accountingentry.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`generated: validator failed for field "AccountingEntry.number": %w`, err)}
		}
	}
	if v, ok := aeu.mutation.Group(); ok {
		if err := accountingentry.GroupValidator(v); err != nil {
			return &ValidationError{Name: "group", err: fmt.Errorf(`generated: validator failed for field "AccountingEntry.group": %w`, err)}
		}
	}
	if v, ok := aeu.mutation.Account(); ok {
		if err := accountingentry.AccountValidator(v); err != nil {
			return &ValidationError{Name: "account", err: fmt.Errorf(`generated: validator failed for field "AccountingEntry.account": %w`, err)}
		}
	}
	if v, ok := aeu.mutation.AccountType(); ok {
		if err := accountingentry.AccountTypeValidator(v); err != nil {
			return &ValidationError{Name: "accountType", err: fmt.Errorf(`generated: validator failed for field "AccountingEntry.accountType": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aeu *AccountingEntryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AccountingEntryUpdate {
	aeu.modifiers = append(aeu.modifiers, modifiers...)
	return aeu
}

func (aeu *AccountingEntryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := aeu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(accountingentry.Table, accountingentry.Columns, sqlgraph.NewFieldSpec(accountingentry.FieldID, field.TypeInt))
	if ps := aeu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aeu.mutation.UpdatedAt(); ok {
		_spec.SetField(accountingentry.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aeu.mutation.DeletedAt(); ok {
		_spec.SetField(accountingentry.FieldDeletedAt, field.TypeTime, value)
	}
	if aeu.mutation.DeletedAtCleared() {
		_spec.ClearField(accountingentry.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := aeu.mutation.Number(); ok {
		_spec.SetField(accountingentry.FieldNumber, field.TypeInt, value)
	}
	if value, ok := aeu.mutation.AddedNumber(); ok {
		_spec.AddField(accountingentry.FieldNumber, field.TypeInt, value)
	}
	if value, ok := aeu.mutation.Group(); ok {
		_spec.SetField(accountingentry.FieldGroup, field.TypeInt, value)
	}
	if value, ok := aeu.mutation.AddedGroup(); ok {
		_spec.AddField(accountingentry.FieldGroup, field.TypeInt, value)
	}
	if value, ok := aeu.mutation.Date(); ok {
		_spec.SetField(accountingentry.FieldDate, field.TypeTime, value)
	}
	if value, ok := aeu.mutation.Account(); ok {
		_spec.SetField(accountingentry.FieldAccount, field.TypeString, value)
	}
	if value, ok := aeu.mutation.Label(); ok {
		_spec.SetField(accountingentry.FieldLabel, field.TypeString, value)
	}
	if value, ok := aeu.mutation.Amount(); ok {
		_spec.SetField(accountingentry.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := aeu.mutation.AddedAmount(); ok {
		_spec.AddField(accountingentry.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := aeu.mutation.Description(); ok {
		_spec.SetField(accountingentry.FieldDescription, field.TypeString, value)
	}
	if value, ok := aeu.mutation.AccountType(); ok {
		_spec.SetField(accountingentry.FieldAccountType, field.TypeEnum, value)
	}
	if value, ok := aeu.mutation.IsDebit(); ok {
		_spec.SetField(accountingentry.FieldIsDebit, field.TypeBool, value)
	}
	if value, ok := aeu.mutation.IsReversal(); ok {
		_spec.SetField(accountingentry.FieldIsReversal, field.TypeBool, value)
	}
	if value, ok := aeu.mutation.Reversed(); ok {
		_spec.SetField(accountingentry.FieldReversed, field.TypeBool, value)
	}
	if value, ok := aeu.mutation.Quantity(); ok {
		_spec.SetField(accountingentry.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := aeu.mutation.AddedQuantity(); ok {
		_spec.AddField(accountingentry.FieldQuantity, field.TypeInt, value)
	}
	if aeu.mutation.QuantityCleared() {
		_spec.ClearField(accountingentry.FieldQuantity, field.TypeInt)
	}
	if aeu.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountingentry.CompanyTable,
			Columns: []string{accountingentry.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aeu.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountingentry.CompanyTable,
			Columns: []string{accountingentry.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aeu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountingentry.UserTable,
			Columns: []string{accountingentry.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aeu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountingentry.UserTable,
			Columns: []string{accountingentry.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aeu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountingentry.ProductTable,
			Columns: []string{accountingentry.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aeu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountingentry.ProductTable,
			Columns: []string{accountingentry.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aeu.mutation.TreasuryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountingentry.TreasuryTable,
			Columns: []string{accountingentry.TreasuryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(treasury.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aeu.mutation.TreasuryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountingentry.TreasuryTable,
			Columns: []string{accountingentry.TreasuryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(treasury.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(aeu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, aeu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountingentry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aeu.mutation.done = true
	return n, nil
}

// AccountingEntryUpdateOne is the builder for updating a single AccountingEntry entity.
type AccountingEntryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AccountingEntryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updatedAt" field.
func (aeuo *AccountingEntryUpdateOne) SetUpdatedAt(t time.Time) *AccountingEntryUpdateOne {
	aeuo.mutation.SetUpdatedAt(t)
	return aeuo
}

// SetDeletedAt sets the "deletedAt" field.
func (aeuo *AccountingEntryUpdateOne) SetDeletedAt(t time.Time) *AccountingEntryUpdateOne {
	aeuo.mutation.SetDeletedAt(t)
	return aeuo
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (aeuo *AccountingEntryUpdateOne) SetNillableDeletedAt(t *time.Time) *AccountingEntryUpdateOne {
	if t != nil {
		aeuo.SetDeletedAt(*t)
	}
	return aeuo
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (aeuo *AccountingEntryUpdateOne) ClearDeletedAt() *AccountingEntryUpdateOne {
	aeuo.mutation.ClearDeletedAt()
	return aeuo
}

// SetNumber sets the "number" field.
func (aeuo *AccountingEntryUpdateOne) SetNumber(i int) *AccountingEntryUpdateOne {
	aeuo.mutation.ResetNumber()
	aeuo.mutation.SetNumber(i)
	return aeuo
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (aeuo *AccountingEntryUpdateOne) SetNillableNumber(i *int) *AccountingEntryUpdateOne {
	if i != nil {
		aeuo.SetNumber(*i)
	}
	return aeuo
}

// AddNumber adds i to the "number" field.
func (aeuo *AccountingEntryUpdateOne) AddNumber(i int) *AccountingEntryUpdateOne {
	aeuo.mutation.AddNumber(i)
	return aeuo
}

// SetGroup sets the "group" field.
func (aeuo *AccountingEntryUpdateOne) SetGroup(i int) *AccountingEntryUpdateOne {
	aeuo.mutation.ResetGroup()
	aeuo.mutation.SetGroup(i)
	return aeuo
}

// SetNillableGroup sets the "group" field if the given value is not nil.
func (aeuo *AccountingEntryUpdateOne) SetNillableGroup(i *int) *AccountingEntryUpdateOne {
	if i != nil {
		aeuo.SetGroup(*i)
	}
	return aeuo
}

// AddGroup adds i to the "group" field.
func (aeuo *AccountingEntryUpdateOne) AddGroup(i int) *AccountingEntryUpdateOne {
	aeuo.mutation.AddGroup(i)
	return aeuo
}

// SetDate sets the "date" field.
func (aeuo *AccountingEntryUpdateOne) SetDate(t time.Time) *AccountingEntryUpdateOne {
	aeuo.mutation.SetDate(t)
	return aeuo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (aeuo *AccountingEntryUpdateOne) SetNillableDate(t *time.Time) *AccountingEntryUpdateOne {
	if t != nil {
		aeuo.SetDate(*t)
	}
	return aeuo
}

// SetAccount sets the "account" field.
func (aeuo *AccountingEntryUpdateOne) SetAccount(s string) *AccountingEntryUpdateOne {
	aeuo.mutation.SetAccount(s)
	return aeuo
}

// SetNillableAccount sets the "account" field if the given value is not nil.
func (aeuo *AccountingEntryUpdateOne) SetNillableAccount(s *string) *AccountingEntryUpdateOne {
	if s != nil {
		aeuo.SetAccount(*s)
	}
	return aeuo
}

// SetLabel sets the "label" field.
func (aeuo *AccountingEntryUpdateOne) SetLabel(s string) *AccountingEntryUpdateOne {
	aeuo.mutation.SetLabel(s)
	return aeuo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (aeuo *AccountingEntryUpdateOne) SetNillableLabel(s *string) *AccountingEntryUpdateOne {
	if s != nil {
		aeuo.SetLabel(*s)
	}
	return aeuo
}

// SetAmount sets the "amount" field.
func (aeuo *AccountingEntryUpdateOne) SetAmount(f float64) *AccountingEntryUpdateOne {
	aeuo.mutation.ResetAmount()
	aeuo.mutation.SetAmount(f)
	return aeuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (aeuo *AccountingEntryUpdateOne) SetNillableAmount(f *float64) *AccountingEntryUpdateOne {
	if f != nil {
		aeuo.SetAmount(*f)
	}
	return aeuo
}

// AddAmount adds f to the "amount" field.
func (aeuo *AccountingEntryUpdateOne) AddAmount(f float64) *AccountingEntryUpdateOne {
	aeuo.mutation.AddAmount(f)
	return aeuo
}

// SetDescription sets the "description" field.
func (aeuo *AccountingEntryUpdateOne) SetDescription(s string) *AccountingEntryUpdateOne {
	aeuo.mutation.SetDescription(s)
	return aeuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (aeuo *AccountingEntryUpdateOne) SetNillableDescription(s *string) *AccountingEntryUpdateOne {
	if s != nil {
		aeuo.SetDescription(*s)
	}
	return aeuo
}

// SetAccountType sets the "accountType" field.
func (aeuo *AccountingEntryUpdateOne) SetAccountType(at accountingentry.AccountType) *AccountingEntryUpdateOne {
	aeuo.mutation.SetAccountType(at)
	return aeuo
}

// SetNillableAccountType sets the "accountType" field if the given value is not nil.
func (aeuo *AccountingEntryUpdateOne) SetNillableAccountType(at *accountingentry.AccountType) *AccountingEntryUpdateOne {
	if at != nil {
		aeuo.SetAccountType(*at)
	}
	return aeuo
}

// SetIsDebit sets the "isDebit" field.
func (aeuo *AccountingEntryUpdateOne) SetIsDebit(b bool) *AccountingEntryUpdateOne {
	aeuo.mutation.SetIsDebit(b)
	return aeuo
}

// SetNillableIsDebit sets the "isDebit" field if the given value is not nil.
func (aeuo *AccountingEntryUpdateOne) SetNillableIsDebit(b *bool) *AccountingEntryUpdateOne {
	if b != nil {
		aeuo.SetIsDebit(*b)
	}
	return aeuo
}

// SetIsReversal sets the "isReversal" field.
func (aeuo *AccountingEntryUpdateOne) SetIsReversal(b bool) *AccountingEntryUpdateOne {
	aeuo.mutation.SetIsReversal(b)
	return aeuo
}

// SetNillableIsReversal sets the "isReversal" field if the given value is not nil.
func (aeuo *AccountingEntryUpdateOne) SetNillableIsReversal(b *bool) *AccountingEntryUpdateOne {
	if b != nil {
		aeuo.SetIsReversal(*b)
	}
	return aeuo
}

// SetReversed sets the "reversed" field.
func (aeuo *AccountingEntryUpdateOne) SetReversed(b bool) *AccountingEntryUpdateOne {
	aeuo.mutation.SetReversed(b)
	return aeuo
}

// SetNillableReversed sets the "reversed" field if the given value is not nil.
func (aeuo *AccountingEntryUpdateOne) SetNillableReversed(b *bool) *AccountingEntryUpdateOne {
	if b != nil {
		aeuo.SetReversed(*b)
	}
	return aeuo
}

// SetQuantity sets the "quantity" field.
func (aeuo *AccountingEntryUpdateOne) SetQuantity(i int) *AccountingEntryUpdateOne {
	aeuo.mutation.ResetQuantity()
	aeuo.mutation.SetQuantity(i)
	return aeuo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (aeuo *AccountingEntryUpdateOne) SetNillableQuantity(i *int) *AccountingEntryUpdateOne {
	if i != nil {
		aeuo.SetQuantity(*i)
	}
	return aeuo
}

// AddQuantity adds i to the "quantity" field.
func (aeuo *AccountingEntryUpdateOne) AddQuantity(i int) *AccountingEntryUpdateOne {
	aeuo.mutation.AddQuantity(i)
	return aeuo
}

// ClearQuantity clears the value of the "quantity" field.
func (aeuo *AccountingEntryUpdateOne) ClearQuantity() *AccountingEntryUpdateOne {
	aeuo.mutation.ClearQuantity()
	return aeuo
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (aeuo *AccountingEntryUpdateOne) SetCompanyID(id int) *AccountingEntryUpdateOne {
	aeuo.mutation.SetCompanyID(id)
	return aeuo
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (aeuo *AccountingEntryUpdateOne) SetNillableCompanyID(id *int) *AccountingEntryUpdateOne {
	if id != nil {
		aeuo = aeuo.SetCompanyID(*id)
	}
	return aeuo
}

// SetCompany sets the "company" edge to the Company entity.
func (aeuo *AccountingEntryUpdateOne) SetCompany(c *Company) *AccountingEntryUpdateOne {
	return aeuo.SetCompanyID(c.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (aeuo *AccountingEntryUpdateOne) SetUserID(id int) *AccountingEntryUpdateOne {
	aeuo.mutation.SetUserID(id)
	return aeuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (aeuo *AccountingEntryUpdateOne) SetNillableUserID(id *int) *AccountingEntryUpdateOne {
	if id != nil {
		aeuo = aeuo.SetUserID(*id)
	}
	return aeuo
}

// SetUser sets the "user" edge to the User entity.
func (aeuo *AccountingEntryUpdateOne) SetUser(u *User) *AccountingEntryUpdateOne {
	return aeuo.SetUserID(u.ID)
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (aeuo *AccountingEntryUpdateOne) SetProductID(id int) *AccountingEntryUpdateOne {
	aeuo.mutation.SetProductID(id)
	return aeuo
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (aeuo *AccountingEntryUpdateOne) SetNillableProductID(id *int) *AccountingEntryUpdateOne {
	if id != nil {
		aeuo = aeuo.SetProductID(*id)
	}
	return aeuo
}

// SetProduct sets the "product" edge to the Product entity.
func (aeuo *AccountingEntryUpdateOne) SetProduct(p *Product) *AccountingEntryUpdateOne {
	return aeuo.SetProductID(p.ID)
}

// SetTreasuryID sets the "treasury" edge to the Treasury entity by ID.
func (aeuo *AccountingEntryUpdateOne) SetTreasuryID(id int) *AccountingEntryUpdateOne {
	aeuo.mutation.SetTreasuryID(id)
	return aeuo
}

// SetNillableTreasuryID sets the "treasury" edge to the Treasury entity by ID if the given value is not nil.
func (aeuo *AccountingEntryUpdateOne) SetNillableTreasuryID(id *int) *AccountingEntryUpdateOne {
	if id != nil {
		aeuo = aeuo.SetTreasuryID(*id)
	}
	return aeuo
}

// SetTreasury sets the "treasury" edge to the Treasury entity.
func (aeuo *AccountingEntryUpdateOne) SetTreasury(t *Treasury) *AccountingEntryUpdateOne {
	return aeuo.SetTreasuryID(t.ID)
}

// Mutation returns the AccountingEntryMutation object of the builder.
func (aeuo *AccountingEntryUpdateOne) Mutation() *AccountingEntryMutation {
	return aeuo.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (aeuo *AccountingEntryUpdateOne) ClearCompany() *AccountingEntryUpdateOne {
	aeuo.mutation.ClearCompany()
	return aeuo
}

// ClearUser clears the "user" edge to the User entity.
func (aeuo *AccountingEntryUpdateOne) ClearUser() *AccountingEntryUpdateOne {
	aeuo.mutation.ClearUser()
	return aeuo
}

// ClearProduct clears the "product" edge to the Product entity.
func (aeuo *AccountingEntryUpdateOne) ClearProduct() *AccountingEntryUpdateOne {
	aeuo.mutation.ClearProduct()
	return aeuo
}

// ClearTreasury clears the "treasury" edge to the Treasury entity.
func (aeuo *AccountingEntryUpdateOne) ClearTreasury() *AccountingEntryUpdateOne {
	aeuo.mutation.ClearTreasury()
	return aeuo
}

// Where appends a list predicates to the AccountingEntryUpdate builder.
func (aeuo *AccountingEntryUpdateOne) Where(ps ...predicate.AccountingEntry) *AccountingEntryUpdateOne {
	aeuo.mutation.Where(ps...)
	return aeuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aeuo *AccountingEntryUpdateOne) Select(field string, fields ...string) *AccountingEntryUpdateOne {
	aeuo.fields = append([]string{field}, fields...)
	return aeuo
}

// Save executes the query and returns the updated AccountingEntry entity.
func (aeuo *AccountingEntryUpdateOne) Save(ctx context.Context) (*AccountingEntry, error) {
	aeuo.defaults()
	return withHooks(ctx, aeuo.sqlSave, aeuo.mutation, aeuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aeuo *AccountingEntryUpdateOne) SaveX(ctx context.Context) *AccountingEntry {
	node, err := aeuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aeuo *AccountingEntryUpdateOne) Exec(ctx context.Context) error {
	_, err := aeuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aeuo *AccountingEntryUpdateOne) ExecX(ctx context.Context) {
	if err := aeuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aeuo *AccountingEntryUpdateOne) defaults() {
	if _, ok := aeuo.mutation.UpdatedAt(); !ok {
		v := accountingentry.UpdateDefaultUpdatedAt()
		aeuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aeuo *AccountingEntryUpdateOne) check() error {
	if v, ok := aeuo.mutation.Number(); ok {
		if err := accountingentry.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`generated: validator failed for field "AccountingEntry.number": %w`, err)}
		}
	}
	if v, ok := aeuo.mutation.Group(); ok {
		if err := accountingentry.GroupValidator(v); err != nil {
			return &ValidationError{Name: "group", err: fmt.Errorf(`generated: validator failed for field "AccountingEntry.group": %w`, err)}
		}
	}
	if v, ok := aeuo.mutation.Account(); ok {
		if err := accountingentry.AccountValidator(v); err != nil {
			return &ValidationError{Name: "account", err: fmt.Errorf(`generated: validator failed for field "AccountingEntry.account": %w`, err)}
		}
	}
	if v, ok := aeuo.mutation.AccountType(); ok {
		if err := accountingentry.AccountTypeValidator(v); err != nil {
			return &ValidationError{Name: "accountType", err: fmt.Errorf(`generated: validator failed for field "AccountingEntry.accountType": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aeuo *AccountingEntryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AccountingEntryUpdateOne {
	aeuo.modifiers = append(aeuo.modifiers, modifiers...)
	return aeuo
}

func (aeuo *AccountingEntryUpdateOne) sqlSave(ctx context.Context) (_node *AccountingEntry, err error) {
	if err := aeuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(accountingentry.Table, accountingentry.Columns, sqlgraph.NewFieldSpec(accountingentry.FieldID, field.TypeInt))
	id, ok := aeuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "AccountingEntry.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aeuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accountingentry.FieldID)
		for _, f := range fields {
			if !accountingentry.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != accountingentry.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aeuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aeuo.mutation.UpdatedAt(); ok {
		_spec.SetField(accountingentry.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aeuo.mutation.DeletedAt(); ok {
		_spec.SetField(accountingentry.FieldDeletedAt, field.TypeTime, value)
	}
	if aeuo.mutation.DeletedAtCleared() {
		_spec.ClearField(accountingentry.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := aeuo.mutation.Number(); ok {
		_spec.SetField(accountingentry.FieldNumber, field.TypeInt, value)
	}
	if value, ok := aeuo.mutation.AddedNumber(); ok {
		_spec.AddField(accountingentry.FieldNumber, field.TypeInt, value)
	}
	if value, ok := aeuo.mutation.Group(); ok {
		_spec.SetField(accountingentry.FieldGroup, field.TypeInt, value)
	}
	if value, ok := aeuo.mutation.AddedGroup(); ok {
		_spec.AddField(accountingentry.FieldGroup, field.TypeInt, value)
	}
	if value, ok := aeuo.mutation.Date(); ok {
		_spec.SetField(accountingentry.FieldDate, field.TypeTime, value)
	}
	if value, ok := aeuo.mutation.Account(); ok {
		_spec.SetField(accountingentry.FieldAccount, field.TypeString, value)
	}
	if value, ok := aeuo.mutation.Label(); ok {
		_spec.SetField(accountingentry.FieldLabel, field.TypeString, value)
	}
	if value, ok := aeuo.mutation.Amount(); ok {
		_spec.SetField(accountingentry.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := aeuo.mutation.AddedAmount(); ok {
		_spec.AddField(accountingentry.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := aeuo.mutation.Description(); ok {
		_spec.SetField(accountingentry.FieldDescription, field.TypeString, value)
	}
	if value, ok := aeuo.mutation.AccountType(); ok {
		_spec.SetField(accountingentry.FieldAccountType, field.TypeEnum, value)
	}
	if value, ok := aeuo.mutation.IsDebit(); ok {
		_spec.SetField(accountingentry.FieldIsDebit, field.TypeBool, value)
	}
	if value, ok := aeuo.mutation.IsReversal(); ok {
		_spec.SetField(accountingentry.FieldIsReversal, field.TypeBool, value)
	}
	if value, ok := aeuo.mutation.Reversed(); ok {
		_spec.SetField(accountingentry.FieldReversed, field.TypeBool, value)
	}
	if value, ok := aeuo.mutation.Quantity(); ok {
		_spec.SetField(accountingentry.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := aeuo.mutation.AddedQuantity(); ok {
		_spec.AddField(accountingentry.FieldQuantity, field.TypeInt, value)
	}
	if aeuo.mutation.QuantityCleared() {
		_spec.ClearField(accountingentry.FieldQuantity, field.TypeInt)
	}
	if aeuo.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountingentry.CompanyTable,
			Columns: []string{accountingentry.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aeuo.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountingentry.CompanyTable,
			Columns: []string{accountingentry.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aeuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountingentry.UserTable,
			Columns: []string{accountingentry.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aeuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountingentry.UserTable,
			Columns: []string{accountingentry.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aeuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountingentry.ProductTable,
			Columns: []string{accountingentry.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aeuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountingentry.ProductTable,
			Columns: []string{accountingentry.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aeuo.mutation.TreasuryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountingentry.TreasuryTable,
			Columns: []string{accountingentry.TreasuryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(treasury.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aeuo.mutation.TreasuryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountingentry.TreasuryTable,
			Columns: []string{accountingentry.TreasuryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(treasury.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(aeuo.modifiers...)
	_node = &AccountingEntry{config: aeuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aeuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountingentry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aeuo.mutation.done = true
	return _node, nil
}
