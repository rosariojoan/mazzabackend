// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"fmt"
	"math"
	"mazza/ent/generated/company"
	"mazza/ent/generated/companydocument"
	"mazza/ent/generated/predicate"
	"mazza/ent/generated/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CompanyDocumentQuery is the builder for querying CompanyDocument entities.
type CompanyDocumentQuery struct {
	config
	ctx            *QueryContext
	order          []companydocument.OrderOption
	inters         []Interceptor
	predicates     []predicate.CompanyDocument
	withCompany    *CompanyQuery
	withUploadedBy *UserQuery
	withApprovedBy *UserQuery
	withFKs        bool
	loadTotal      []func(context.Context, []*CompanyDocument) error
	modifiers      []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CompanyDocumentQuery builder.
func (cdq *CompanyDocumentQuery) Where(ps ...predicate.CompanyDocument) *CompanyDocumentQuery {
	cdq.predicates = append(cdq.predicates, ps...)
	return cdq
}

// Limit the number of records to be returned by this query.
func (cdq *CompanyDocumentQuery) Limit(limit int) *CompanyDocumentQuery {
	cdq.ctx.Limit = &limit
	return cdq
}

// Offset to start from.
func (cdq *CompanyDocumentQuery) Offset(offset int) *CompanyDocumentQuery {
	cdq.ctx.Offset = &offset
	return cdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cdq *CompanyDocumentQuery) Unique(unique bool) *CompanyDocumentQuery {
	cdq.ctx.Unique = &unique
	return cdq
}

// Order specifies how the records should be ordered.
func (cdq *CompanyDocumentQuery) Order(o ...companydocument.OrderOption) *CompanyDocumentQuery {
	cdq.order = append(cdq.order, o...)
	return cdq
}

// QueryCompany chains the current query on the "company" edge.
func (cdq *CompanyDocumentQuery) QueryCompany() *CompanyQuery {
	query := (&CompanyClient{config: cdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(companydocument.Table, companydocument.FieldID, selector),
			sqlgraph.To(company.Table, company.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, companydocument.CompanyTable, companydocument.CompanyColumn),
		)
		fromU = sqlgraph.SetNeighbors(cdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUploadedBy chains the current query on the "uploadedBy" edge.
func (cdq *CompanyDocumentQuery) QueryUploadedBy() *UserQuery {
	query := (&UserClient{config: cdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(companydocument.Table, companydocument.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, companydocument.UploadedByTable, companydocument.UploadedByColumn),
		)
		fromU = sqlgraph.SetNeighbors(cdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryApprovedBy chains the current query on the "approvedBy" edge.
func (cdq *CompanyDocumentQuery) QueryApprovedBy() *UserQuery {
	query := (&UserClient{config: cdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(companydocument.Table, companydocument.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, companydocument.ApprovedByTable, companydocument.ApprovedByColumn),
		)
		fromU = sqlgraph.SetNeighbors(cdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CompanyDocument entity from the query.
// Returns a *NotFoundError when no CompanyDocument was found.
func (cdq *CompanyDocumentQuery) First(ctx context.Context) (*CompanyDocument, error) {
	nodes, err := cdq.Limit(1).All(setContextOp(ctx, cdq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{companydocument.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cdq *CompanyDocumentQuery) FirstX(ctx context.Context) *CompanyDocument {
	node, err := cdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CompanyDocument ID from the query.
// Returns a *NotFoundError when no CompanyDocument ID was found.
func (cdq *CompanyDocumentQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cdq.Limit(1).IDs(setContextOp(ctx, cdq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{companydocument.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cdq *CompanyDocumentQuery) FirstIDX(ctx context.Context) int {
	id, err := cdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CompanyDocument entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CompanyDocument entity is found.
// Returns a *NotFoundError when no CompanyDocument entities are found.
func (cdq *CompanyDocumentQuery) Only(ctx context.Context) (*CompanyDocument, error) {
	nodes, err := cdq.Limit(2).All(setContextOp(ctx, cdq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{companydocument.Label}
	default:
		return nil, &NotSingularError{companydocument.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cdq *CompanyDocumentQuery) OnlyX(ctx context.Context) *CompanyDocument {
	node, err := cdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CompanyDocument ID in the query.
// Returns a *NotSingularError when more than one CompanyDocument ID is found.
// Returns a *NotFoundError when no entities are found.
func (cdq *CompanyDocumentQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cdq.Limit(2).IDs(setContextOp(ctx, cdq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{companydocument.Label}
	default:
		err = &NotSingularError{companydocument.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cdq *CompanyDocumentQuery) OnlyIDX(ctx context.Context) int {
	id, err := cdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CompanyDocuments.
func (cdq *CompanyDocumentQuery) All(ctx context.Context) ([]*CompanyDocument, error) {
	ctx = setContextOp(ctx, cdq.ctx, ent.OpQueryAll)
	if err := cdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CompanyDocument, *CompanyDocumentQuery]()
	return withInterceptors[[]*CompanyDocument](ctx, cdq, qr, cdq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cdq *CompanyDocumentQuery) AllX(ctx context.Context) []*CompanyDocument {
	nodes, err := cdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CompanyDocument IDs.
func (cdq *CompanyDocumentQuery) IDs(ctx context.Context) (ids []int, err error) {
	if cdq.ctx.Unique == nil && cdq.path != nil {
		cdq.Unique(true)
	}
	ctx = setContextOp(ctx, cdq.ctx, ent.OpQueryIDs)
	if err = cdq.Select(companydocument.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cdq *CompanyDocumentQuery) IDsX(ctx context.Context) []int {
	ids, err := cdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cdq *CompanyDocumentQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cdq.ctx, ent.OpQueryCount)
	if err := cdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cdq, querierCount[*CompanyDocumentQuery](), cdq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cdq *CompanyDocumentQuery) CountX(ctx context.Context) int {
	count, err := cdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cdq *CompanyDocumentQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cdq.ctx, ent.OpQueryExist)
	switch _, err := cdq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cdq *CompanyDocumentQuery) ExistX(ctx context.Context) bool {
	exist, err := cdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CompanyDocumentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cdq *CompanyDocumentQuery) Clone() *CompanyDocumentQuery {
	if cdq == nil {
		return nil
	}
	return &CompanyDocumentQuery{
		config:         cdq.config,
		ctx:            cdq.ctx.Clone(),
		order:          append([]companydocument.OrderOption{}, cdq.order...),
		inters:         append([]Interceptor{}, cdq.inters...),
		predicates:     append([]predicate.CompanyDocument{}, cdq.predicates...),
		withCompany:    cdq.withCompany.Clone(),
		withUploadedBy: cdq.withUploadedBy.Clone(),
		withApprovedBy: cdq.withApprovedBy.Clone(),
		// clone intermediate query.
		sql:       cdq.sql.Clone(),
		path:      cdq.path,
		modifiers: append([]func(*sql.Selector){}, cdq.modifiers...),
	}
}

// WithCompany tells the query-builder to eager-load the nodes that are connected to
// the "company" edge. The optional arguments are used to configure the query builder of the edge.
func (cdq *CompanyDocumentQuery) WithCompany(opts ...func(*CompanyQuery)) *CompanyDocumentQuery {
	query := (&CompanyClient{config: cdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cdq.withCompany = query
	return cdq
}

// WithUploadedBy tells the query-builder to eager-load the nodes that are connected to
// the "uploadedBy" edge. The optional arguments are used to configure the query builder of the edge.
func (cdq *CompanyDocumentQuery) WithUploadedBy(opts ...func(*UserQuery)) *CompanyDocumentQuery {
	query := (&UserClient{config: cdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cdq.withUploadedBy = query
	return cdq
}

// WithApprovedBy tells the query-builder to eager-load the nodes that are connected to
// the "approvedBy" edge. The optional arguments are used to configure the query builder of the edge.
func (cdq *CompanyDocumentQuery) WithApprovedBy(opts ...func(*UserQuery)) *CompanyDocumentQuery {
	query := (&UserClient{config: cdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cdq.withApprovedBy = query
	return cdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CompanyDocument.Query().
//		GroupBy(companydocument.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (cdq *CompanyDocumentQuery) GroupBy(field string, fields ...string) *CompanyDocumentGroupBy {
	cdq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CompanyDocumentGroupBy{build: cdq}
	grbuild.flds = &cdq.ctx.Fields
	grbuild.label = companydocument.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt,omitempty"`
//	}
//
//	client.CompanyDocument.Query().
//		Select(companydocument.FieldCreatedAt).
//		Scan(ctx, &v)
func (cdq *CompanyDocumentQuery) Select(fields ...string) *CompanyDocumentSelect {
	cdq.ctx.Fields = append(cdq.ctx.Fields, fields...)
	sbuild := &CompanyDocumentSelect{CompanyDocumentQuery: cdq}
	sbuild.label = companydocument.Label
	sbuild.flds, sbuild.scan = &cdq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CompanyDocumentSelect configured with the given aggregations.
func (cdq *CompanyDocumentQuery) Aggregate(fns ...AggregateFunc) *CompanyDocumentSelect {
	return cdq.Select().Aggregate(fns...)
}

func (cdq *CompanyDocumentQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cdq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cdq); err != nil {
				return err
			}
		}
	}
	for _, f := range cdq.ctx.Fields {
		if !companydocument.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if cdq.path != nil {
		prev, err := cdq.path(ctx)
		if err != nil {
			return err
		}
		cdq.sql = prev
	}
	return nil
}

func (cdq *CompanyDocumentQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CompanyDocument, error) {
	var (
		nodes       = []*CompanyDocument{}
		withFKs     = cdq.withFKs
		_spec       = cdq.querySpec()
		loadedTypes = [3]bool{
			cdq.withCompany != nil,
			cdq.withUploadedBy != nil,
			cdq.withApprovedBy != nil,
		}
	)
	if cdq.withCompany != nil || cdq.withUploadedBy != nil || cdq.withApprovedBy != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, companydocument.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CompanyDocument).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CompanyDocument{config: cdq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(cdq.modifiers) > 0 {
		_spec.Modifiers = cdq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cdq.withCompany; query != nil {
		if err := cdq.loadCompany(ctx, query, nodes, nil,
			func(n *CompanyDocument, e *Company) { n.Edges.Company = e }); err != nil {
			return nil, err
		}
	}
	if query := cdq.withUploadedBy; query != nil {
		if err := cdq.loadUploadedBy(ctx, query, nodes, nil,
			func(n *CompanyDocument, e *User) { n.Edges.UploadedBy = e }); err != nil {
			return nil, err
		}
	}
	if query := cdq.withApprovedBy; query != nil {
		if err := cdq.loadApprovedBy(ctx, query, nodes, nil,
			func(n *CompanyDocument, e *User) { n.Edges.ApprovedBy = e }); err != nil {
			return nil, err
		}
	}
	for i := range cdq.loadTotal {
		if err := cdq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cdq *CompanyDocumentQuery) loadCompany(ctx context.Context, query *CompanyQuery, nodes []*CompanyDocument, init func(*CompanyDocument), assign func(*CompanyDocument, *Company)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*CompanyDocument)
	for i := range nodes {
		if nodes[i].company_documents == nil {
			continue
		}
		fk := *nodes[i].company_documents
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(company.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "company_documents" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cdq *CompanyDocumentQuery) loadUploadedBy(ctx context.Context, query *UserQuery, nodes []*CompanyDocument, init func(*CompanyDocument), assign func(*CompanyDocument, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*CompanyDocument)
	for i := range nodes {
		if nodes[i].user_uploaded_documents == nil {
			continue
		}
		fk := *nodes[i].user_uploaded_documents
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_uploaded_documents" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cdq *CompanyDocumentQuery) loadApprovedBy(ctx context.Context, query *UserQuery, nodes []*CompanyDocument, init func(*CompanyDocument), assign func(*CompanyDocument, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*CompanyDocument)
	for i := range nodes {
		if nodes[i].user_approved_documents == nil {
			continue
		}
		fk := *nodes[i].user_approved_documents
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_approved_documents" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (cdq *CompanyDocumentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cdq.querySpec()
	if len(cdq.modifiers) > 0 {
		_spec.Modifiers = cdq.modifiers
	}
	_spec.Node.Columns = cdq.ctx.Fields
	if len(cdq.ctx.Fields) > 0 {
		_spec.Unique = cdq.ctx.Unique != nil && *cdq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cdq.driver, _spec)
}

func (cdq *CompanyDocumentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(companydocument.Table, companydocument.Columns, sqlgraph.NewFieldSpec(companydocument.FieldID, field.TypeInt))
	_spec.From = cdq.sql
	if unique := cdq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cdq.path != nil {
		_spec.Unique = true
	}
	if fields := cdq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, companydocument.FieldID)
		for i := range fields {
			if fields[i] != companydocument.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cdq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cdq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cdq *CompanyDocumentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cdq.driver.Dialect())
	t1 := builder.Table(companydocument.Table)
	columns := cdq.ctx.Fields
	if len(columns) == 0 {
		columns = companydocument.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cdq.sql != nil {
		selector = cdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cdq.ctx.Unique != nil && *cdq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range cdq.modifiers {
		m(selector)
	}
	for _, p := range cdq.predicates {
		p(selector)
	}
	for _, p := range cdq.order {
		p(selector)
	}
	if offset := cdq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cdq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (cdq *CompanyDocumentQuery) Modify(modifiers ...func(s *sql.Selector)) *CompanyDocumentSelect {
	cdq.modifiers = append(cdq.modifiers, modifiers...)
	return cdq.Select()
}

// CompanyDocumentGroupBy is the group-by builder for CompanyDocument entities.
type CompanyDocumentGroupBy struct {
	selector
	build *CompanyDocumentQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cdgb *CompanyDocumentGroupBy) Aggregate(fns ...AggregateFunc) *CompanyDocumentGroupBy {
	cdgb.fns = append(cdgb.fns, fns...)
	return cdgb
}

// Scan applies the selector query and scans the result into the given value.
func (cdgb *CompanyDocumentGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cdgb.build.ctx, ent.OpQueryGroupBy)
	if err := cdgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CompanyDocumentQuery, *CompanyDocumentGroupBy](ctx, cdgb.build, cdgb, cdgb.build.inters, v)
}

func (cdgb *CompanyDocumentGroupBy) sqlScan(ctx context.Context, root *CompanyDocumentQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cdgb.fns))
	for _, fn := range cdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cdgb.flds)+len(cdgb.fns))
		for _, f := range *cdgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cdgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cdgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CompanyDocumentSelect is the builder for selecting fields of CompanyDocument entities.
type CompanyDocumentSelect struct {
	*CompanyDocumentQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cds *CompanyDocumentSelect) Aggregate(fns ...AggregateFunc) *CompanyDocumentSelect {
	cds.fns = append(cds.fns, fns...)
	return cds
}

// Scan applies the selector query and scans the result into the given value.
func (cds *CompanyDocumentSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cds.ctx, ent.OpQuerySelect)
	if err := cds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CompanyDocumentQuery, *CompanyDocumentSelect](ctx, cds.CompanyDocumentQuery, cds, cds.inters, v)
}

func (cds *CompanyDocumentSelect) sqlScan(ctx context.Context, root *CompanyDocumentQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cds.fns))
	for _, fn := range cds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (cds *CompanyDocumentSelect) Modify(modifiers ...func(s *sql.Selector)) *CompanyDocumentSelect {
	cds.modifiers = append(cds.modifiers, modifiers...)
	return cds
}
