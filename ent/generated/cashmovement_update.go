// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"mazza/ent/generated/cashmovement"
	"mazza/ent/generated/predicate"
	"mazza/ent/generated/treasury"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CashMovementUpdate is the builder for updating CashMovement entities.
type CashMovementUpdate struct {
	config
	hooks    []Hook
	mutation *CashMovementMutation
}

// Where appends a list predicates to the CashMovementUpdate builder.
func (cmu *CashMovementUpdate) Where(ps ...predicate.CashMovement) *CashMovementUpdate {
	cmu.mutation.Where(ps...)
	return cmu
}

// SetUpdatedAt sets the "updatedAt" field.
func (cmu *CashMovementUpdate) SetUpdatedAt(t time.Time) *CashMovementUpdate {
	cmu.mutation.SetUpdatedAt(t)
	return cmu
}

// SetDeletedAt sets the "deletedAt" field.
func (cmu *CashMovementUpdate) SetDeletedAt(t time.Time) *CashMovementUpdate {
	cmu.mutation.SetDeletedAt(t)
	return cmu
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (cmu *CashMovementUpdate) SetNillableDeletedAt(t *time.Time) *CashMovementUpdate {
	if t != nil {
		cmu.SetDeletedAt(*t)
	}
	return cmu
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (cmu *CashMovementUpdate) ClearDeletedAt() *CashMovementUpdate {
	cmu.mutation.ClearDeletedAt()
	return cmu
}

// SetAmount sets the "amount" field.
func (cmu *CashMovementUpdate) SetAmount(f float64) *CashMovementUpdate {
	cmu.mutation.ResetAmount()
	cmu.mutation.SetAmount(f)
	return cmu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (cmu *CashMovementUpdate) SetNillableAmount(f *float64) *CashMovementUpdate {
	if f != nil {
		cmu.SetAmount(*f)
	}
	return cmu
}

// AddAmount adds f to the "amount" field.
func (cmu *CashMovementUpdate) AddAmount(f float64) *CashMovementUpdate {
	cmu.mutation.AddAmount(f)
	return cmu
}

// SetDate sets the "date" field.
func (cmu *CashMovementUpdate) SetDate(t time.Time) *CashMovementUpdate {
	cmu.mutation.SetDate(t)
	return cmu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (cmu *CashMovementUpdate) SetNillableDate(t *time.Time) *CashMovementUpdate {
	if t != nil {
		cmu.SetDate(*t)
	}
	return cmu
}

// SetEntryGroup sets the "entryGroup" field.
func (cmu *CashMovementUpdate) SetEntryGroup(i int) *CashMovementUpdate {
	cmu.mutation.ResetEntryGroup()
	cmu.mutation.SetEntryGroup(i)
	return cmu
}

// SetNillableEntryGroup sets the "entryGroup" field if the given value is not nil.
func (cmu *CashMovementUpdate) SetNillableEntryGroup(i *int) *CashMovementUpdate {
	if i != nil {
		cmu.SetEntryGroup(*i)
	}
	return cmu
}

// AddEntryGroup adds i to the "entryGroup" field.
func (cmu *CashMovementUpdate) AddEntryGroup(i int) *CashMovementUpdate {
	cmu.mutation.AddEntryGroup(i)
	return cmu
}

// SetTreasuryID sets the "treasury" edge to the Treasury entity by ID.
func (cmu *CashMovementUpdate) SetTreasuryID(id int) *CashMovementUpdate {
	cmu.mutation.SetTreasuryID(id)
	return cmu
}

// SetNillableTreasuryID sets the "treasury" edge to the Treasury entity by ID if the given value is not nil.
func (cmu *CashMovementUpdate) SetNillableTreasuryID(id *int) *CashMovementUpdate {
	if id != nil {
		cmu = cmu.SetTreasuryID(*id)
	}
	return cmu
}

// SetTreasury sets the "treasury" edge to the Treasury entity.
func (cmu *CashMovementUpdate) SetTreasury(t *Treasury) *CashMovementUpdate {
	return cmu.SetTreasuryID(t.ID)
}

// Mutation returns the CashMovementMutation object of the builder.
func (cmu *CashMovementUpdate) Mutation() *CashMovementMutation {
	return cmu.mutation
}

// ClearTreasury clears the "treasury" edge to the Treasury entity.
func (cmu *CashMovementUpdate) ClearTreasury() *CashMovementUpdate {
	cmu.mutation.ClearTreasury()
	return cmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cmu *CashMovementUpdate) Save(ctx context.Context) (int, error) {
	cmu.defaults()
	return withHooks(ctx, cmu.sqlSave, cmu.mutation, cmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmu *CashMovementUpdate) SaveX(ctx context.Context) int {
	affected, err := cmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cmu *CashMovementUpdate) Exec(ctx context.Context) error {
	_, err := cmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmu *CashMovementUpdate) ExecX(ctx context.Context) {
	if err := cmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmu *CashMovementUpdate) defaults() {
	if _, ok := cmu.mutation.UpdatedAt(); !ok {
		v := cashmovement.UpdateDefaultUpdatedAt()
		cmu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmu *CashMovementUpdate) check() error {
	if v, ok := cmu.mutation.EntryGroup(); ok {
		if err := cashmovement.EntryGroupValidator(v); err != nil {
			return &ValidationError{Name: "entryGroup", err: fmt.Errorf(`generated: validator failed for field "CashMovement.entryGroup": %w`, err)}
		}
	}
	return nil
}

func (cmu *CashMovementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(cashmovement.Table, cashmovement.Columns, sqlgraph.NewFieldSpec(cashmovement.FieldID, field.TypeInt))
	if ps := cmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmu.mutation.UpdatedAt(); ok {
		_spec.SetField(cashmovement.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cmu.mutation.DeletedAt(); ok {
		_spec.SetField(cashmovement.FieldDeletedAt, field.TypeTime, value)
	}
	if cmu.mutation.DeletedAtCleared() {
		_spec.ClearField(cashmovement.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cmu.mutation.Amount(); ok {
		_spec.SetField(cashmovement.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := cmu.mutation.AddedAmount(); ok {
		_spec.AddField(cashmovement.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := cmu.mutation.Date(); ok {
		_spec.SetField(cashmovement.FieldDate, field.TypeTime, value)
	}
	if value, ok := cmu.mutation.EntryGroup(); ok {
		_spec.SetField(cashmovement.FieldEntryGroup, field.TypeInt, value)
	}
	if value, ok := cmu.mutation.AddedEntryGroup(); ok {
		_spec.AddField(cashmovement.FieldEntryGroup, field.TypeInt, value)
	}
	if cmu.mutation.TreasuryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cashmovement.TreasuryTable,
			Columns: []string{cashmovement.TreasuryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(treasury.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.TreasuryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cashmovement.TreasuryTable,
			Columns: []string{cashmovement.TreasuryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(treasury.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cashmovement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cmu.mutation.done = true
	return n, nil
}

// CashMovementUpdateOne is the builder for updating a single CashMovement entity.
type CashMovementUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CashMovementMutation
}

// SetUpdatedAt sets the "updatedAt" field.
func (cmuo *CashMovementUpdateOne) SetUpdatedAt(t time.Time) *CashMovementUpdateOne {
	cmuo.mutation.SetUpdatedAt(t)
	return cmuo
}

// SetDeletedAt sets the "deletedAt" field.
func (cmuo *CashMovementUpdateOne) SetDeletedAt(t time.Time) *CashMovementUpdateOne {
	cmuo.mutation.SetDeletedAt(t)
	return cmuo
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (cmuo *CashMovementUpdateOne) SetNillableDeletedAt(t *time.Time) *CashMovementUpdateOne {
	if t != nil {
		cmuo.SetDeletedAt(*t)
	}
	return cmuo
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (cmuo *CashMovementUpdateOne) ClearDeletedAt() *CashMovementUpdateOne {
	cmuo.mutation.ClearDeletedAt()
	return cmuo
}

// SetAmount sets the "amount" field.
func (cmuo *CashMovementUpdateOne) SetAmount(f float64) *CashMovementUpdateOne {
	cmuo.mutation.ResetAmount()
	cmuo.mutation.SetAmount(f)
	return cmuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (cmuo *CashMovementUpdateOne) SetNillableAmount(f *float64) *CashMovementUpdateOne {
	if f != nil {
		cmuo.SetAmount(*f)
	}
	return cmuo
}

// AddAmount adds f to the "amount" field.
func (cmuo *CashMovementUpdateOne) AddAmount(f float64) *CashMovementUpdateOne {
	cmuo.mutation.AddAmount(f)
	return cmuo
}

// SetDate sets the "date" field.
func (cmuo *CashMovementUpdateOne) SetDate(t time.Time) *CashMovementUpdateOne {
	cmuo.mutation.SetDate(t)
	return cmuo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (cmuo *CashMovementUpdateOne) SetNillableDate(t *time.Time) *CashMovementUpdateOne {
	if t != nil {
		cmuo.SetDate(*t)
	}
	return cmuo
}

// SetEntryGroup sets the "entryGroup" field.
func (cmuo *CashMovementUpdateOne) SetEntryGroup(i int) *CashMovementUpdateOne {
	cmuo.mutation.ResetEntryGroup()
	cmuo.mutation.SetEntryGroup(i)
	return cmuo
}

// SetNillableEntryGroup sets the "entryGroup" field if the given value is not nil.
func (cmuo *CashMovementUpdateOne) SetNillableEntryGroup(i *int) *CashMovementUpdateOne {
	if i != nil {
		cmuo.SetEntryGroup(*i)
	}
	return cmuo
}

// AddEntryGroup adds i to the "entryGroup" field.
func (cmuo *CashMovementUpdateOne) AddEntryGroup(i int) *CashMovementUpdateOne {
	cmuo.mutation.AddEntryGroup(i)
	return cmuo
}

// SetTreasuryID sets the "treasury" edge to the Treasury entity by ID.
func (cmuo *CashMovementUpdateOne) SetTreasuryID(id int) *CashMovementUpdateOne {
	cmuo.mutation.SetTreasuryID(id)
	return cmuo
}

// SetNillableTreasuryID sets the "treasury" edge to the Treasury entity by ID if the given value is not nil.
func (cmuo *CashMovementUpdateOne) SetNillableTreasuryID(id *int) *CashMovementUpdateOne {
	if id != nil {
		cmuo = cmuo.SetTreasuryID(*id)
	}
	return cmuo
}

// SetTreasury sets the "treasury" edge to the Treasury entity.
func (cmuo *CashMovementUpdateOne) SetTreasury(t *Treasury) *CashMovementUpdateOne {
	return cmuo.SetTreasuryID(t.ID)
}

// Mutation returns the CashMovementMutation object of the builder.
func (cmuo *CashMovementUpdateOne) Mutation() *CashMovementMutation {
	return cmuo.mutation
}

// ClearTreasury clears the "treasury" edge to the Treasury entity.
func (cmuo *CashMovementUpdateOne) ClearTreasury() *CashMovementUpdateOne {
	cmuo.mutation.ClearTreasury()
	return cmuo
}

// Where appends a list predicates to the CashMovementUpdate builder.
func (cmuo *CashMovementUpdateOne) Where(ps ...predicate.CashMovement) *CashMovementUpdateOne {
	cmuo.mutation.Where(ps...)
	return cmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cmuo *CashMovementUpdateOne) Select(field string, fields ...string) *CashMovementUpdateOne {
	cmuo.fields = append([]string{field}, fields...)
	return cmuo
}

// Save executes the query and returns the updated CashMovement entity.
func (cmuo *CashMovementUpdateOne) Save(ctx context.Context) (*CashMovement, error) {
	cmuo.defaults()
	return withHooks(ctx, cmuo.sqlSave, cmuo.mutation, cmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmuo *CashMovementUpdateOne) SaveX(ctx context.Context) *CashMovement {
	node, err := cmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cmuo *CashMovementUpdateOne) Exec(ctx context.Context) error {
	_, err := cmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmuo *CashMovementUpdateOne) ExecX(ctx context.Context) {
	if err := cmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmuo *CashMovementUpdateOne) defaults() {
	if _, ok := cmuo.mutation.UpdatedAt(); !ok {
		v := cashmovement.UpdateDefaultUpdatedAt()
		cmuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmuo *CashMovementUpdateOne) check() error {
	if v, ok := cmuo.mutation.EntryGroup(); ok {
		if err := cashmovement.EntryGroupValidator(v); err != nil {
			return &ValidationError{Name: "entryGroup", err: fmt.Errorf(`generated: validator failed for field "CashMovement.entryGroup": %w`, err)}
		}
	}
	return nil
}

func (cmuo *CashMovementUpdateOne) sqlSave(ctx context.Context) (_node *CashMovement, err error) {
	if err := cmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(cashmovement.Table, cashmovement.Columns, sqlgraph.NewFieldSpec(cashmovement.FieldID, field.TypeInt))
	id, ok := cmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "CashMovement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cashmovement.FieldID)
		for _, f := range fields {
			if !cashmovement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != cashmovement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(cashmovement.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cmuo.mutation.DeletedAt(); ok {
		_spec.SetField(cashmovement.FieldDeletedAt, field.TypeTime, value)
	}
	if cmuo.mutation.DeletedAtCleared() {
		_spec.ClearField(cashmovement.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cmuo.mutation.Amount(); ok {
		_spec.SetField(cashmovement.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := cmuo.mutation.AddedAmount(); ok {
		_spec.AddField(cashmovement.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := cmuo.mutation.Date(); ok {
		_spec.SetField(cashmovement.FieldDate, field.TypeTime, value)
	}
	if value, ok := cmuo.mutation.EntryGroup(); ok {
		_spec.SetField(cashmovement.FieldEntryGroup, field.TypeInt, value)
	}
	if value, ok := cmuo.mutation.AddedEntryGroup(); ok {
		_spec.AddField(cashmovement.FieldEntryGroup, field.TypeInt, value)
	}
	if cmuo.mutation.TreasuryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cashmovement.TreasuryTable,
			Columns: []string{cashmovement.TreasuryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(treasury.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.TreasuryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cashmovement.TreasuryTable,
			Columns: []string{cashmovement.TreasuryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(treasury.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CashMovement{config: cmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cashmovement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cmuo.mutation.done = true
	return _node, nil
}
