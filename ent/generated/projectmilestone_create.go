// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"mazza/ent/generated/project"
	"mazza/ent/generated/projectmilestone"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProjectMilestoneCreate is the builder for creating a ProjectMilestone entity.
type ProjectMilestoneCreate struct {
	config
	mutation *ProjectMilestoneMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (pmc *ProjectMilestoneCreate) SetName(s string) *ProjectMilestoneCreate {
	pmc.mutation.SetName(s)
	return pmc
}

// SetDueDate sets the "dueDate" field.
func (pmc *ProjectMilestoneCreate) SetDueDate(t time.Time) *ProjectMilestoneCreate {
	pmc.mutation.SetDueDate(t)
	return pmc
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (pmc *ProjectMilestoneCreate) SetProjectID(id int) *ProjectMilestoneCreate {
	pmc.mutation.SetProjectID(id)
	return pmc
}

// SetProject sets the "project" edge to the Project entity.
func (pmc *ProjectMilestoneCreate) SetProject(p *Project) *ProjectMilestoneCreate {
	return pmc.SetProjectID(p.ID)
}

// Mutation returns the ProjectMilestoneMutation object of the builder.
func (pmc *ProjectMilestoneCreate) Mutation() *ProjectMilestoneMutation {
	return pmc.mutation
}

// Save creates the ProjectMilestone in the database.
func (pmc *ProjectMilestoneCreate) Save(ctx context.Context) (*ProjectMilestone, error) {
	return withHooks(ctx, pmc.sqlSave, pmc.mutation, pmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pmc *ProjectMilestoneCreate) SaveX(ctx context.Context) *ProjectMilestone {
	v, err := pmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmc *ProjectMilestoneCreate) Exec(ctx context.Context) error {
	_, err := pmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmc *ProjectMilestoneCreate) ExecX(ctx context.Context) {
	if err := pmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmc *ProjectMilestoneCreate) check() error {
	if _, ok := pmc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "ProjectMilestone.name"`)}
	}
	if v, ok := pmc.mutation.Name(); ok {
		if err := projectmilestone.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "ProjectMilestone.name": %w`, err)}
		}
	}
	if _, ok := pmc.mutation.DueDate(); !ok {
		return &ValidationError{Name: "dueDate", err: errors.New(`generated: missing required field "ProjectMilestone.dueDate"`)}
	}
	if len(pmc.mutation.ProjectIDs()) == 0 {
		return &ValidationError{Name: "project", err: errors.New(`generated: missing required edge "ProjectMilestone.project"`)}
	}
	return nil
}

func (pmc *ProjectMilestoneCreate) sqlSave(ctx context.Context) (*ProjectMilestone, error) {
	if err := pmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pmc.mutation.id = &_node.ID
	pmc.mutation.done = true
	return _node, nil
}

func (pmc *ProjectMilestoneCreate) createSpec() (*ProjectMilestone, *sqlgraph.CreateSpec) {
	var (
		_node = &ProjectMilestone{config: pmc.config}
		_spec = sqlgraph.NewCreateSpec(projectmilestone.Table, sqlgraph.NewFieldSpec(projectmilestone.FieldID, field.TypeInt))
	)
	if value, ok := pmc.mutation.Name(); ok {
		_spec.SetField(projectmilestone.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pmc.mutation.DueDate(); ok {
		_spec.SetField(projectmilestone.FieldDueDate, field.TypeTime, value)
		_node.DueDate = value
	}
	if nodes := pmc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectmilestone.ProjectTable,
			Columns: []string{projectmilestone.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_milestones = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProjectMilestoneCreateBulk is the builder for creating many ProjectMilestone entities in bulk.
type ProjectMilestoneCreateBulk struct {
	config
	err      error
	builders []*ProjectMilestoneCreate
}

// Save creates the ProjectMilestone entities in the database.
func (pmcb *ProjectMilestoneCreateBulk) Save(ctx context.Context) ([]*ProjectMilestone, error) {
	if pmcb.err != nil {
		return nil, pmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pmcb.builders))
	nodes := make([]*ProjectMilestone, len(pmcb.builders))
	mutators := make([]Mutator, len(pmcb.builders))
	for i := range pmcb.builders {
		func(i int, root context.Context) {
			builder := pmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectMilestoneMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pmcb *ProjectMilestoneCreateBulk) SaveX(ctx context.Context) []*ProjectMilestone {
	v, err := pmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmcb *ProjectMilestoneCreateBulk) Exec(ctx context.Context) error {
	_, err := pmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmcb *ProjectMilestoneCreateBulk) ExecX(ctx context.Context) {
	if err := pmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
