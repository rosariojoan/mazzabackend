// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"mazza/ent/generated/company"
	"mazza/ent/generated/membersignuptoken"
	"mazza/ent/generated/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberSignupTokenCreate is the builder for creating a MemberSignupToken entity.
type MemberSignupTokenCreate struct {
	config
	mutation *MemberSignupTokenMutation
	hooks    []Hook
}

// SetCreatedAt sets the "createdAt" field.
func (mstc *MemberSignupTokenCreate) SetCreatedAt(t time.Time) *MemberSignupTokenCreate {
	mstc.mutation.SetCreatedAt(t)
	return mstc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (mstc *MemberSignupTokenCreate) SetNillableCreatedAt(t *time.Time) *MemberSignupTokenCreate {
	if t != nil {
		mstc.SetCreatedAt(*t)
	}
	return mstc
}

// SetUpdatedAt sets the "updatedAt" field.
func (mstc *MemberSignupTokenCreate) SetUpdatedAt(t time.Time) *MemberSignupTokenCreate {
	mstc.mutation.SetUpdatedAt(t)
	return mstc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (mstc *MemberSignupTokenCreate) SetNillableUpdatedAt(t *time.Time) *MemberSignupTokenCreate {
	if t != nil {
		mstc.SetUpdatedAt(*t)
	}
	return mstc
}

// SetDeletedAt sets the "deletedAt" field.
func (mstc *MemberSignupTokenCreate) SetDeletedAt(t time.Time) *MemberSignupTokenCreate {
	mstc.mutation.SetDeletedAt(t)
	return mstc
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (mstc *MemberSignupTokenCreate) SetNillableDeletedAt(t *time.Time) *MemberSignupTokenCreate {
	if t != nil {
		mstc.SetDeletedAt(*t)
	}
	return mstc
}

// SetName sets the "name" field.
func (mstc *MemberSignupTokenCreate) SetName(s string) *MemberSignupTokenCreate {
	mstc.mutation.SetName(s)
	return mstc
}

// SetEmail sets the "email" field.
func (mstc *MemberSignupTokenCreate) SetEmail(s string) *MemberSignupTokenCreate {
	mstc.mutation.SetEmail(s)
	return mstc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (mstc *MemberSignupTokenCreate) SetNillableEmail(s *string) *MemberSignupTokenCreate {
	if s != nil {
		mstc.SetEmail(*s)
	}
	return mstc
}

// SetToken sets the "token" field.
func (mstc *MemberSignupTokenCreate) SetToken(s string) *MemberSignupTokenCreate {
	mstc.mutation.SetToken(s)
	return mstc
}

// SetAvatar sets the "avatar" field.
func (mstc *MemberSignupTokenCreate) SetAvatar(s string) *MemberSignupTokenCreate {
	mstc.mutation.SetAvatar(s)
	return mstc
}

// SetRole sets the "role" field.
func (mstc *MemberSignupTokenCreate) SetRole(m membersignuptoken.Role) *MemberSignupTokenCreate {
	mstc.mutation.SetRole(m)
	return mstc
}

// SetNote sets the "note" field.
func (mstc *MemberSignupTokenCreate) SetNote(s string) *MemberSignupTokenCreate {
	mstc.mutation.SetNote(s)
	return mstc
}

// SetNumberAccessed sets the "numberAccessed" field.
func (mstc *MemberSignupTokenCreate) SetNumberAccessed(i int) *MemberSignupTokenCreate {
	mstc.mutation.SetNumberAccessed(i)
	return mstc
}

// SetNillableNumberAccessed sets the "numberAccessed" field if the given value is not nil.
func (mstc *MemberSignupTokenCreate) SetNillableNumberAccessed(i *int) *MemberSignupTokenCreate {
	if i != nil {
		mstc.SetNumberAccessed(*i)
	}
	return mstc
}

// SetExpiresAt sets the "expiresAt" field.
func (mstc *MemberSignupTokenCreate) SetExpiresAt(t time.Time) *MemberSignupTokenCreate {
	mstc.mutation.SetExpiresAt(t)
	return mstc
}

// SetAlreadyUsed sets the "alreadyUsed" field.
func (mstc *MemberSignupTokenCreate) SetAlreadyUsed(b bool) *MemberSignupTokenCreate {
	mstc.mutation.SetAlreadyUsed(b)
	return mstc
}

// SetNillableAlreadyUsed sets the "alreadyUsed" field if the given value is not nil.
func (mstc *MemberSignupTokenCreate) SetNillableAlreadyUsed(b *bool) *MemberSignupTokenCreate {
	if b != nil {
		mstc.SetAlreadyUsed(*b)
	}
	return mstc
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (mstc *MemberSignupTokenCreate) SetCompanyID(id int) *MemberSignupTokenCreate {
	mstc.mutation.SetCompanyID(id)
	return mstc
}

// SetCompany sets the "company" edge to the Company entity.
func (mstc *MemberSignupTokenCreate) SetCompany(c *Company) *MemberSignupTokenCreate {
	return mstc.SetCompanyID(c.ID)
}

// SetCreatedByID sets the "createdBy" edge to the User entity by ID.
func (mstc *MemberSignupTokenCreate) SetCreatedByID(id int) *MemberSignupTokenCreate {
	mstc.mutation.SetCreatedByID(id)
	return mstc
}

// SetNillableCreatedByID sets the "createdBy" edge to the User entity by ID if the given value is not nil.
func (mstc *MemberSignupTokenCreate) SetNillableCreatedByID(id *int) *MemberSignupTokenCreate {
	if id != nil {
		mstc = mstc.SetCreatedByID(*id)
	}
	return mstc
}

// SetCreatedBy sets the "createdBy" edge to the User entity.
func (mstc *MemberSignupTokenCreate) SetCreatedBy(u *User) *MemberSignupTokenCreate {
	return mstc.SetCreatedByID(u.ID)
}

// Mutation returns the MemberSignupTokenMutation object of the builder.
func (mstc *MemberSignupTokenCreate) Mutation() *MemberSignupTokenMutation {
	return mstc.mutation
}

// Save creates the MemberSignupToken in the database.
func (mstc *MemberSignupTokenCreate) Save(ctx context.Context) (*MemberSignupToken, error) {
	mstc.defaults()
	return withHooks(ctx, mstc.sqlSave, mstc.mutation, mstc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mstc *MemberSignupTokenCreate) SaveX(ctx context.Context) *MemberSignupToken {
	v, err := mstc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mstc *MemberSignupTokenCreate) Exec(ctx context.Context) error {
	_, err := mstc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mstc *MemberSignupTokenCreate) ExecX(ctx context.Context) {
	if err := mstc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mstc *MemberSignupTokenCreate) defaults() {
	if _, ok := mstc.mutation.CreatedAt(); !ok {
		v := membersignuptoken.DefaultCreatedAt()
		mstc.mutation.SetCreatedAt(v)
	}
	if _, ok := mstc.mutation.UpdatedAt(); !ok {
		v := membersignuptoken.DefaultUpdatedAt()
		mstc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mstc.mutation.NumberAccessed(); !ok {
		v := membersignuptoken.DefaultNumberAccessed
		mstc.mutation.SetNumberAccessed(v)
	}
	if _, ok := mstc.mutation.AlreadyUsed(); !ok {
		v := membersignuptoken.DefaultAlreadyUsed
		mstc.mutation.SetAlreadyUsed(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mstc *MemberSignupTokenCreate) check() error {
	if _, ok := mstc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`generated: missing required field "MemberSignupToken.createdAt"`)}
	}
	if _, ok := mstc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`generated: missing required field "MemberSignupToken.updatedAt"`)}
	}
	if _, ok := mstc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "MemberSignupToken.name"`)}
	}
	if v, ok := mstc.mutation.Name(); ok {
		if err := membersignuptoken.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "MemberSignupToken.name": %w`, err)}
		}
	}
	if _, ok := mstc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`generated: missing required field "MemberSignupToken.token"`)}
	}
	if v, ok := mstc.mutation.Token(); ok {
		if err := membersignuptoken.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`generated: validator failed for field "MemberSignupToken.token": %w`, err)}
		}
	}
	if _, ok := mstc.mutation.Avatar(); !ok {
		return &ValidationError{Name: "avatar", err: errors.New(`generated: missing required field "MemberSignupToken.avatar"`)}
	}
	if _, ok := mstc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`generated: missing required field "MemberSignupToken.role"`)}
	}
	if v, ok := mstc.mutation.Role(); ok {
		if err := membersignuptoken.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`generated: validator failed for field "MemberSignupToken.role": %w`, err)}
		}
	}
	if _, ok := mstc.mutation.Note(); !ok {
		return &ValidationError{Name: "note", err: errors.New(`generated: missing required field "MemberSignupToken.note"`)}
	}
	if _, ok := mstc.mutation.NumberAccessed(); !ok {
		return &ValidationError{Name: "numberAccessed", err: errors.New(`generated: missing required field "MemberSignupToken.numberAccessed"`)}
	}
	if v, ok := mstc.mutation.NumberAccessed(); ok {
		if err := membersignuptoken.NumberAccessedValidator(v); err != nil {
			return &ValidationError{Name: "numberAccessed", err: fmt.Errorf(`generated: validator failed for field "MemberSignupToken.numberAccessed": %w`, err)}
		}
	}
	if _, ok := mstc.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expiresAt", err: errors.New(`generated: missing required field "MemberSignupToken.expiresAt"`)}
	}
	if _, ok := mstc.mutation.AlreadyUsed(); !ok {
		return &ValidationError{Name: "alreadyUsed", err: errors.New(`generated: missing required field "MemberSignupToken.alreadyUsed"`)}
	}
	if len(mstc.mutation.CompanyIDs()) == 0 {
		return &ValidationError{Name: "company", err: errors.New(`generated: missing required edge "MemberSignupToken.company"`)}
	}
	return nil
}

func (mstc *MemberSignupTokenCreate) sqlSave(ctx context.Context) (*MemberSignupToken, error) {
	if err := mstc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mstc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mstc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mstc.mutation.id = &_node.ID
	mstc.mutation.done = true
	return _node, nil
}

func (mstc *MemberSignupTokenCreate) createSpec() (*MemberSignupToken, *sqlgraph.CreateSpec) {
	var (
		_node = &MemberSignupToken{config: mstc.config}
		_spec = sqlgraph.NewCreateSpec(membersignuptoken.Table, sqlgraph.NewFieldSpec(membersignuptoken.FieldID, field.TypeInt))
	)
	if value, ok := mstc.mutation.CreatedAt(); ok {
		_spec.SetField(membersignuptoken.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mstc.mutation.UpdatedAt(); ok {
		_spec.SetField(membersignuptoken.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mstc.mutation.DeletedAt(); ok {
		_spec.SetField(membersignuptoken.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := mstc.mutation.Name(); ok {
		_spec.SetField(membersignuptoken.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mstc.mutation.Email(); ok {
		_spec.SetField(membersignuptoken.FieldEmail, field.TypeString, value)
		_node.Email = &value
	}
	if value, ok := mstc.mutation.Token(); ok {
		_spec.SetField(membersignuptoken.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if value, ok := mstc.mutation.Avatar(); ok {
		_spec.SetField(membersignuptoken.FieldAvatar, field.TypeString, value)
		_node.Avatar = &value
	}
	if value, ok := mstc.mutation.Role(); ok {
		_spec.SetField(membersignuptoken.FieldRole, field.TypeEnum, value)
		_node.Role = value
	}
	if value, ok := mstc.mutation.Note(); ok {
		_spec.SetField(membersignuptoken.FieldNote, field.TypeString, value)
		_node.Note = value
	}
	if value, ok := mstc.mutation.NumberAccessed(); ok {
		_spec.SetField(membersignuptoken.FieldNumberAccessed, field.TypeInt, value)
		_node.NumberAccessed = value
	}
	if value, ok := mstc.mutation.ExpiresAt(); ok {
		_spec.SetField(membersignuptoken.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := mstc.mutation.AlreadyUsed(); ok {
		_spec.SetField(membersignuptoken.FieldAlreadyUsed, field.TypeBool, value)
		_node.AlreadyUsed = value
	}
	if nodes := mstc.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membersignuptoken.CompanyTable,
			Columns: []string{membersignuptoken.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.company_member_signup_tokens = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mstc.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membersignuptoken.CreatedByTable,
			Columns: []string{membersignuptoken.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_created_member_signup_tokens = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MemberSignupTokenCreateBulk is the builder for creating many MemberSignupToken entities in bulk.
type MemberSignupTokenCreateBulk struct {
	config
	err      error
	builders []*MemberSignupTokenCreate
}

// Save creates the MemberSignupToken entities in the database.
func (mstcb *MemberSignupTokenCreateBulk) Save(ctx context.Context) ([]*MemberSignupToken, error) {
	if mstcb.err != nil {
		return nil, mstcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mstcb.builders))
	nodes := make([]*MemberSignupToken, len(mstcb.builders))
	mutators := make([]Mutator, len(mstcb.builders))
	for i := range mstcb.builders {
		func(i int, root context.Context) {
			builder := mstcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MemberSignupTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mstcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mstcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mstcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mstcb *MemberSignupTokenCreateBulk) SaveX(ctx context.Context) []*MemberSignupToken {
	v, err := mstcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mstcb *MemberSignupTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := mstcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mstcb *MemberSignupTokenCreateBulk) ExecX(ctx context.Context) {
	if err := mstcb.Exec(ctx); err != nil {
		panic(err)
	}
}
