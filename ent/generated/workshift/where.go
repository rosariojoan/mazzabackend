// Code generated by ent, DO NOT EDIT.

package workshift

import (
	"mazza/ent/generated/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Workshift {
	return predicate.Workshift(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Workshift {
	return predicate.Workshift(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Workshift {
	return predicate.Workshift(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Workshift {
	return predicate.Workshift(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Workshift {
	return predicate.Workshift(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Workshift {
	return predicate.Workshift(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Workshift {
	return predicate.Workshift(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Workshift {
	return predicate.Workshift(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Workshift {
	return predicate.Workshift(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deletedAt" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldEQ(FieldDeletedAt, v))
}

// ApprovedAt applies equality check predicate on the "approvedAt" field. It's identical to ApprovedAtEQ.
func ApprovedAt(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldEQ(FieldApprovedAt, v))
}

// ClockIn applies equality check predicate on the "clockIn" field. It's identical to ClockInEQ.
func ClockIn(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldEQ(FieldClockIn, v))
}

// ClockOut applies equality check predicate on the "clockOut" field. It's identical to ClockOutEQ.
func ClockOut(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldEQ(FieldClockOut, v))
}

// ClockInLocation applies equality check predicate on the "clockInLocation" field. It's identical to ClockInLocationEQ.
func ClockInLocation(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldEQ(FieldClockInLocation, v))
}

// ClockOutLocation applies equality check predicate on the "clockOutLocation" field. It's identical to ClockOutLocationEQ.
func ClockOutLocation(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldEQ(FieldClockOutLocation, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldEQ(FieldDescription, v))
}

// Note applies equality check predicate on the "note" field. It's identical to NoteEQ.
func Note(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldEQ(FieldNote, v))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deletedAt" field.
func DeletedAtEQ(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deletedAt" field.
func DeletedAtNEQ(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deletedAt" field.
func DeletedAtIn(vs ...time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deletedAt" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deletedAt" field.
func DeletedAtGT(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deletedAt" field.
func DeletedAtGTE(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deletedAt" field.
func DeletedAtLT(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deletedAt" field.
func DeletedAtLTE(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deletedAt" field.
func DeletedAtIsNil() predicate.Workshift {
	return predicate.Workshift(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deletedAt" field.
func DeletedAtNotNil() predicate.Workshift {
	return predicate.Workshift(sql.FieldNotNull(FieldDeletedAt))
}

// ApprovedAtEQ applies the EQ predicate on the "approvedAt" field.
func ApprovedAtEQ(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldEQ(FieldApprovedAt, v))
}

// ApprovedAtNEQ applies the NEQ predicate on the "approvedAt" field.
func ApprovedAtNEQ(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldNEQ(FieldApprovedAt, v))
}

// ApprovedAtIn applies the In predicate on the "approvedAt" field.
func ApprovedAtIn(vs ...time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldIn(FieldApprovedAt, vs...))
}

// ApprovedAtNotIn applies the NotIn predicate on the "approvedAt" field.
func ApprovedAtNotIn(vs ...time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldNotIn(FieldApprovedAt, vs...))
}

// ApprovedAtGT applies the GT predicate on the "approvedAt" field.
func ApprovedAtGT(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldGT(FieldApprovedAt, v))
}

// ApprovedAtGTE applies the GTE predicate on the "approvedAt" field.
func ApprovedAtGTE(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldGTE(FieldApprovedAt, v))
}

// ApprovedAtLT applies the LT predicate on the "approvedAt" field.
func ApprovedAtLT(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldLT(FieldApprovedAt, v))
}

// ApprovedAtLTE applies the LTE predicate on the "approvedAt" field.
func ApprovedAtLTE(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldLTE(FieldApprovedAt, v))
}

// ApprovedAtIsNil applies the IsNil predicate on the "approvedAt" field.
func ApprovedAtIsNil() predicate.Workshift {
	return predicate.Workshift(sql.FieldIsNull(FieldApprovedAt))
}

// ApprovedAtNotNil applies the NotNil predicate on the "approvedAt" field.
func ApprovedAtNotNil() predicate.Workshift {
	return predicate.Workshift(sql.FieldNotNull(FieldApprovedAt))
}

// ClockInEQ applies the EQ predicate on the "clockIn" field.
func ClockInEQ(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldEQ(FieldClockIn, v))
}

// ClockInNEQ applies the NEQ predicate on the "clockIn" field.
func ClockInNEQ(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldNEQ(FieldClockIn, v))
}

// ClockInIn applies the In predicate on the "clockIn" field.
func ClockInIn(vs ...time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldIn(FieldClockIn, vs...))
}

// ClockInNotIn applies the NotIn predicate on the "clockIn" field.
func ClockInNotIn(vs ...time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldNotIn(FieldClockIn, vs...))
}

// ClockInGT applies the GT predicate on the "clockIn" field.
func ClockInGT(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldGT(FieldClockIn, v))
}

// ClockInGTE applies the GTE predicate on the "clockIn" field.
func ClockInGTE(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldGTE(FieldClockIn, v))
}

// ClockInLT applies the LT predicate on the "clockIn" field.
func ClockInLT(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldLT(FieldClockIn, v))
}

// ClockInLTE applies the LTE predicate on the "clockIn" field.
func ClockInLTE(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldLTE(FieldClockIn, v))
}

// ClockOutEQ applies the EQ predicate on the "clockOut" field.
func ClockOutEQ(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldEQ(FieldClockOut, v))
}

// ClockOutNEQ applies the NEQ predicate on the "clockOut" field.
func ClockOutNEQ(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldNEQ(FieldClockOut, v))
}

// ClockOutIn applies the In predicate on the "clockOut" field.
func ClockOutIn(vs ...time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldIn(FieldClockOut, vs...))
}

// ClockOutNotIn applies the NotIn predicate on the "clockOut" field.
func ClockOutNotIn(vs ...time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldNotIn(FieldClockOut, vs...))
}

// ClockOutGT applies the GT predicate on the "clockOut" field.
func ClockOutGT(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldGT(FieldClockOut, v))
}

// ClockOutGTE applies the GTE predicate on the "clockOut" field.
func ClockOutGTE(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldGTE(FieldClockOut, v))
}

// ClockOutLT applies the LT predicate on the "clockOut" field.
func ClockOutLT(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldLT(FieldClockOut, v))
}

// ClockOutLTE applies the LTE predicate on the "clockOut" field.
func ClockOutLTE(v time.Time) predicate.Workshift {
	return predicate.Workshift(sql.FieldLTE(FieldClockOut, v))
}

// ClockOutIsNil applies the IsNil predicate on the "clockOut" field.
func ClockOutIsNil() predicate.Workshift {
	return predicate.Workshift(sql.FieldIsNull(FieldClockOut))
}

// ClockOutNotNil applies the NotNil predicate on the "clockOut" field.
func ClockOutNotNil() predicate.Workshift {
	return predicate.Workshift(sql.FieldNotNull(FieldClockOut))
}

// ClockInLocationEQ applies the EQ predicate on the "clockInLocation" field.
func ClockInLocationEQ(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldEQ(FieldClockInLocation, v))
}

// ClockInLocationNEQ applies the NEQ predicate on the "clockInLocation" field.
func ClockInLocationNEQ(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldNEQ(FieldClockInLocation, v))
}

// ClockInLocationIn applies the In predicate on the "clockInLocation" field.
func ClockInLocationIn(vs ...string) predicate.Workshift {
	return predicate.Workshift(sql.FieldIn(FieldClockInLocation, vs...))
}

// ClockInLocationNotIn applies the NotIn predicate on the "clockInLocation" field.
func ClockInLocationNotIn(vs ...string) predicate.Workshift {
	return predicate.Workshift(sql.FieldNotIn(FieldClockInLocation, vs...))
}

// ClockInLocationGT applies the GT predicate on the "clockInLocation" field.
func ClockInLocationGT(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldGT(FieldClockInLocation, v))
}

// ClockInLocationGTE applies the GTE predicate on the "clockInLocation" field.
func ClockInLocationGTE(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldGTE(FieldClockInLocation, v))
}

// ClockInLocationLT applies the LT predicate on the "clockInLocation" field.
func ClockInLocationLT(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldLT(FieldClockInLocation, v))
}

// ClockInLocationLTE applies the LTE predicate on the "clockInLocation" field.
func ClockInLocationLTE(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldLTE(FieldClockInLocation, v))
}

// ClockInLocationContains applies the Contains predicate on the "clockInLocation" field.
func ClockInLocationContains(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldContains(FieldClockInLocation, v))
}

// ClockInLocationHasPrefix applies the HasPrefix predicate on the "clockInLocation" field.
func ClockInLocationHasPrefix(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldHasPrefix(FieldClockInLocation, v))
}

// ClockInLocationHasSuffix applies the HasSuffix predicate on the "clockInLocation" field.
func ClockInLocationHasSuffix(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldHasSuffix(FieldClockInLocation, v))
}

// ClockInLocationEqualFold applies the EqualFold predicate on the "clockInLocation" field.
func ClockInLocationEqualFold(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldEqualFold(FieldClockInLocation, v))
}

// ClockInLocationContainsFold applies the ContainsFold predicate on the "clockInLocation" field.
func ClockInLocationContainsFold(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldContainsFold(FieldClockInLocation, v))
}

// ClockOutLocationEQ applies the EQ predicate on the "clockOutLocation" field.
func ClockOutLocationEQ(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldEQ(FieldClockOutLocation, v))
}

// ClockOutLocationNEQ applies the NEQ predicate on the "clockOutLocation" field.
func ClockOutLocationNEQ(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldNEQ(FieldClockOutLocation, v))
}

// ClockOutLocationIn applies the In predicate on the "clockOutLocation" field.
func ClockOutLocationIn(vs ...string) predicate.Workshift {
	return predicate.Workshift(sql.FieldIn(FieldClockOutLocation, vs...))
}

// ClockOutLocationNotIn applies the NotIn predicate on the "clockOutLocation" field.
func ClockOutLocationNotIn(vs ...string) predicate.Workshift {
	return predicate.Workshift(sql.FieldNotIn(FieldClockOutLocation, vs...))
}

// ClockOutLocationGT applies the GT predicate on the "clockOutLocation" field.
func ClockOutLocationGT(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldGT(FieldClockOutLocation, v))
}

// ClockOutLocationGTE applies the GTE predicate on the "clockOutLocation" field.
func ClockOutLocationGTE(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldGTE(FieldClockOutLocation, v))
}

// ClockOutLocationLT applies the LT predicate on the "clockOutLocation" field.
func ClockOutLocationLT(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldLT(FieldClockOutLocation, v))
}

// ClockOutLocationLTE applies the LTE predicate on the "clockOutLocation" field.
func ClockOutLocationLTE(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldLTE(FieldClockOutLocation, v))
}

// ClockOutLocationContains applies the Contains predicate on the "clockOutLocation" field.
func ClockOutLocationContains(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldContains(FieldClockOutLocation, v))
}

// ClockOutLocationHasPrefix applies the HasPrefix predicate on the "clockOutLocation" field.
func ClockOutLocationHasPrefix(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldHasPrefix(FieldClockOutLocation, v))
}

// ClockOutLocationHasSuffix applies the HasSuffix predicate on the "clockOutLocation" field.
func ClockOutLocationHasSuffix(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldHasSuffix(FieldClockOutLocation, v))
}

// ClockOutLocationIsNil applies the IsNil predicate on the "clockOutLocation" field.
func ClockOutLocationIsNil() predicate.Workshift {
	return predicate.Workshift(sql.FieldIsNull(FieldClockOutLocation))
}

// ClockOutLocationNotNil applies the NotNil predicate on the "clockOutLocation" field.
func ClockOutLocationNotNil() predicate.Workshift {
	return predicate.Workshift(sql.FieldNotNull(FieldClockOutLocation))
}

// ClockOutLocationEqualFold applies the EqualFold predicate on the "clockOutLocation" field.
func ClockOutLocationEqualFold(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldEqualFold(FieldClockOutLocation, v))
}

// ClockOutLocationContainsFold applies the ContainsFold predicate on the "clockOutLocation" field.
func ClockOutLocationContainsFold(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldContainsFold(FieldClockOutLocation, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Workshift {
	return predicate.Workshift(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Workshift {
	return predicate.Workshift(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Workshift {
	return predicate.Workshift(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Workshift {
	return predicate.Workshift(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldContainsFold(FieldDescription, v))
}

// NoteEQ applies the EQ predicate on the "note" field.
func NoteEQ(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldEQ(FieldNote, v))
}

// NoteNEQ applies the NEQ predicate on the "note" field.
func NoteNEQ(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldNEQ(FieldNote, v))
}

// NoteIn applies the In predicate on the "note" field.
func NoteIn(vs ...string) predicate.Workshift {
	return predicate.Workshift(sql.FieldIn(FieldNote, vs...))
}

// NoteNotIn applies the NotIn predicate on the "note" field.
func NoteNotIn(vs ...string) predicate.Workshift {
	return predicate.Workshift(sql.FieldNotIn(FieldNote, vs...))
}

// NoteGT applies the GT predicate on the "note" field.
func NoteGT(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldGT(FieldNote, v))
}

// NoteGTE applies the GTE predicate on the "note" field.
func NoteGTE(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldGTE(FieldNote, v))
}

// NoteLT applies the LT predicate on the "note" field.
func NoteLT(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldLT(FieldNote, v))
}

// NoteLTE applies the LTE predicate on the "note" field.
func NoteLTE(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldLTE(FieldNote, v))
}

// NoteContains applies the Contains predicate on the "note" field.
func NoteContains(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldContains(FieldNote, v))
}

// NoteHasPrefix applies the HasPrefix predicate on the "note" field.
func NoteHasPrefix(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldHasPrefix(FieldNote, v))
}

// NoteHasSuffix applies the HasSuffix predicate on the "note" field.
func NoteHasSuffix(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldHasSuffix(FieldNote, v))
}

// NoteIsNil applies the IsNil predicate on the "note" field.
func NoteIsNil() predicate.Workshift {
	return predicate.Workshift(sql.FieldIsNull(FieldNote))
}

// NoteNotNil applies the NotNil predicate on the "note" field.
func NoteNotNil() predicate.Workshift {
	return predicate.Workshift(sql.FieldNotNull(FieldNote))
}

// NoteEqualFold applies the EqualFold predicate on the "note" field.
func NoteEqualFold(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldEqualFold(FieldNote, v))
}

// NoteContainsFold applies the ContainsFold predicate on the "note" field.
func NoteContainsFold(v string) predicate.Workshift {
	return predicate.Workshift(sql.FieldContainsFold(FieldNote, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Workshift {
	return predicate.Workshift(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Workshift {
	return predicate.Workshift(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Workshift {
	return predicate.Workshift(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Workshift {
	return predicate.Workshift(sql.FieldNotIn(FieldStatus, vs...))
}

// HasCompany applies the HasEdge predicate on the "company" edge.
func HasCompany() predicate.Workshift {
	return predicate.Workshift(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompanyWith applies the HasEdge predicate on the "company" edge with a given conditions (other predicates).
func HasCompanyWith(preds ...predicate.Company) predicate.Workshift {
	return predicate.Workshift(func(s *sql.Selector) {
		step := newCompanyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Workshift {
	return predicate.Workshift(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Workshift {
	return predicate.Workshift(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasApprovedBy applies the HasEdge predicate on the "approvedBy" edge.
func HasApprovedBy() predicate.Workshift {
	return predicate.Workshift(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ApprovedByTable, ApprovedByColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApprovedByWith applies the HasEdge predicate on the "approvedBy" edge with a given conditions (other predicates).
func HasApprovedByWith(preds ...predicate.User) predicate.Workshift {
	return predicate.Workshift(func(s *sql.Selector) {
		step := newApprovedByStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTask applies the HasEdge predicate on the "task" edge.
func HasTask() predicate.Workshift {
	return predicate.Workshift(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TaskTable, TaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskWith applies the HasEdge predicate on the "task" edge with a given conditions (other predicates).
func HasTaskWith(preds ...predicate.ProjectTask) predicate.Workshift {
	return predicate.Workshift(func(s *sql.Selector) {
		step := newTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEditRequest applies the HasEdge predicate on the "editRequest" edge.
func HasEditRequest() predicate.Workshift {
	return predicate.Workshift(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, EditRequestTable, EditRequestColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEditRequestWith applies the HasEdge predicate on the "editRequest" edge with a given conditions (other predicates).
func HasEditRequestWith(preds ...predicate.Workshift) predicate.Workshift {
	return predicate.Workshift(func(s *sql.Selector) {
		step := newEditRequestStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkShift applies the HasEdge predicate on the "workShift" edge.
func HasWorkShift() predicate.Workshift {
	return predicate.Workshift(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, WorkShiftTable, WorkShiftColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkShiftWith applies the HasEdge predicate on the "workShift" edge with a given conditions (other predicates).
func HasWorkShiftWith(preds ...predicate.Workshift) predicate.Workshift {
	return predicate.Workshift(func(s *sql.Selector) {
		step := newWorkShiftStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Workshift) predicate.Workshift {
	return predicate.Workshift(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Workshift) predicate.Workshift {
	return predicate.Workshift(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Workshift) predicate.Workshift {
	return predicate.Workshift(sql.NotPredicates(p))
}
