// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"mazza/ent/generated/accountingentry"
	"mazza/ent/generated/company"
	"mazza/ent/generated/customer"
	"mazza/ent/generated/employee"
	"mazza/ent/generated/file"
	"mazza/ent/generated/payable"
	"mazza/ent/generated/product"
	"mazza/ent/generated/project"
	"mazza/ent/generated/projectmilestone"
	"mazza/ent/generated/projecttask"
	"mazza/ent/generated/receivable"
	"mazza/ent/generated/supplier"
	"mazza/ent/generated/token"
	"mazza/ent/generated/treasury"
	"mazza/ent/generated/user"
	"mazza/ent/generated/userrole"
	"mazza/ent/generated/workshift"

	"entgo.io/contrib/entgql"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ae *AccountingEntryQuery) CollectFields(ctx context.Context, satisfies ...string) (*AccountingEntryQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ae, nil
	}
	if err := ae.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ae, nil
}

func (ae *AccountingEntryQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(accountingentry.Columns))
		selectedFields = []string{accountingentry.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "company":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CompanyClient{config: ae.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			ae.withCompany = query
		case "user":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: ae.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			ae.withUser = query
		case "product":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ProductClient{config: ae.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			ae.withProduct = query
		case "treasury":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&TreasuryClient{config: ae.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			ae.withTreasury = query
		case "createdat":
			if _, ok := fieldSeen[accountingentry.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, accountingentry.FieldCreatedAt)
				fieldSeen[accountingentry.FieldCreatedAt] = struct{}{}
			}
		case "updatedat":
			if _, ok := fieldSeen[accountingentry.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, accountingentry.FieldUpdatedAt)
				fieldSeen[accountingentry.FieldUpdatedAt] = struct{}{}
			}
		case "deletedat":
			if _, ok := fieldSeen[accountingentry.FieldDeletedAt]; !ok {
				selectedFields = append(selectedFields, accountingentry.FieldDeletedAt)
				fieldSeen[accountingentry.FieldDeletedAt] = struct{}{}
			}
		case "number":
			if _, ok := fieldSeen[accountingentry.FieldNumber]; !ok {
				selectedFields = append(selectedFields, accountingentry.FieldNumber)
				fieldSeen[accountingentry.FieldNumber] = struct{}{}
			}
		case "group":
			if _, ok := fieldSeen[accountingentry.FieldGroup]; !ok {
				selectedFields = append(selectedFields, accountingentry.FieldGroup)
				fieldSeen[accountingentry.FieldGroup] = struct{}{}
			}
		case "date":
			if _, ok := fieldSeen[accountingentry.FieldDate]; !ok {
				selectedFields = append(selectedFields, accountingentry.FieldDate)
				fieldSeen[accountingentry.FieldDate] = struct{}{}
			}
		case "account":
			if _, ok := fieldSeen[accountingentry.FieldAccount]; !ok {
				selectedFields = append(selectedFields, accountingentry.FieldAccount)
				fieldSeen[accountingentry.FieldAccount] = struct{}{}
			}
		case "label":
			if _, ok := fieldSeen[accountingentry.FieldLabel]; !ok {
				selectedFields = append(selectedFields, accountingentry.FieldLabel)
				fieldSeen[accountingentry.FieldLabel] = struct{}{}
			}
		case "amount":
			if _, ok := fieldSeen[accountingentry.FieldAmount]; !ok {
				selectedFields = append(selectedFields, accountingentry.FieldAmount)
				fieldSeen[accountingentry.FieldAmount] = struct{}{}
			}
		case "description":
			if _, ok := fieldSeen[accountingentry.FieldDescription]; !ok {
				selectedFields = append(selectedFields, accountingentry.FieldDescription)
				fieldSeen[accountingentry.FieldDescription] = struct{}{}
			}
		case "accounttype":
			if _, ok := fieldSeen[accountingentry.FieldAccountType]; !ok {
				selectedFields = append(selectedFields, accountingentry.FieldAccountType)
				fieldSeen[accountingentry.FieldAccountType] = struct{}{}
			}
		case "isdebit":
			if _, ok := fieldSeen[accountingentry.FieldIsDebit]; !ok {
				selectedFields = append(selectedFields, accountingentry.FieldIsDebit)
				fieldSeen[accountingentry.FieldIsDebit] = struct{}{}
			}
		case "isreversal":
			if _, ok := fieldSeen[accountingentry.FieldIsReversal]; !ok {
				selectedFields = append(selectedFields, accountingentry.FieldIsReversal)
				fieldSeen[accountingentry.FieldIsReversal] = struct{}{}
			}
		case "reversed":
			if _, ok := fieldSeen[accountingentry.FieldReversed]; !ok {
				selectedFields = append(selectedFields, accountingentry.FieldReversed)
				fieldSeen[accountingentry.FieldReversed] = struct{}{}
			}
		case "quantity":
			if _, ok := fieldSeen[accountingentry.FieldQuantity]; !ok {
				selectedFields = append(selectedFields, accountingentry.FieldQuantity)
				fieldSeen[accountingentry.FieldQuantity] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		ae.Select(selectedFields...)
	}
	return nil
}

type accountingentryPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []AccountingEntryPaginateOption
}

func newAccountingEntryPaginateArgs(rv map[string]any) *accountingentryPaginateArgs {
	args := &accountingentryPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &AccountingEntryOrder{Field: &AccountingEntryOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithAccountingEntryOrder(order))
			}
		case *AccountingEntryOrder:
			if v != nil {
				args.opts = append(args.opts, WithAccountingEntryOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*AccountingEntryWhereInput); ok {
		args.opts = append(args.opts, WithAccountingEntryFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (c *CompanyQuery) CollectFields(ctx context.Context, satisfies ...string) (*CompanyQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return c, nil
	}
	if err := c.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return c, nil
}

func (c *CompanyQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(company.Columns))
		selectedFields = []string{company.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "availableroles":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserRoleClient{config: c.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			c.WithNamedAvailableRoles(alias, func(wq *UserRoleQuery) {
				*wq = *query
			})
		case "accountingentries":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&AccountingEntryClient{config: c.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			c.WithNamedAccountingEntries(alias, func(wq *AccountingEntryQuery) {
				*wq = *query
			})
		case "customers":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CustomerClient{config: c.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			c.WithNamedCustomers(alias, func(wq *CustomerQuery) {
				*wq = *query
			})
		case "employees":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&EmployeeClient{config: c.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			c.WithNamedEmployees(alias, func(wq *EmployeeQuery) {
				*wq = *query
			})
		case "files":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&FileClient{config: c.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			c.WithNamedFiles(alias, func(wq *FileQuery) {
				*wq = *query
			})
		case "products":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ProductClient{config: c.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			c.WithNamedProducts(alias, func(wq *ProductQuery) {
				*wq = *query
			})
		case "projects":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ProjectClient{config: c.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			c.WithNamedProjects(alias, func(wq *ProjectQuery) {
				*wq = *query
			})
		case "suppliers":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&SupplierClient{config: c.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			c.WithNamedSuppliers(alias, func(wq *SupplierQuery) {
				*wq = *query
			})
		case "tokens":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&TokenClient{config: c.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			c.WithNamedTokens(alias, func(wq *TokenQuery) {
				*wq = *query
			})
		case "treasuries":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&TreasuryClient{config: c.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			c.WithNamedTreasuries(alias, func(wq *TreasuryQuery) {
				*wq = *query
			})
		case "workshifts":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&WorkshiftClient{config: c.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			c.WithNamedWorkShifts(alias, func(wq *WorkshiftQuery) {
				*wq = *query
			})
		case "users":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: c.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			c.WithNamedUsers(alias, func(wq *UserQuery) {
				*wq = *query
			})
		case "daughtercompanies":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CompanyClient{config: c.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			c.WithNamedDaughterCompanies(alias, func(wq *CompanyQuery) {
				*wq = *query
			})
		case "parentcompany":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CompanyClient{config: c.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			c.withParentCompany = query
		case "createdat":
			if _, ok := fieldSeen[company.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, company.FieldCreatedAt)
				fieldSeen[company.FieldCreatedAt] = struct{}{}
			}
		case "updatedat":
			if _, ok := fieldSeen[company.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, company.FieldUpdatedAt)
				fieldSeen[company.FieldUpdatedAt] = struct{}{}
			}
		case "deletedat":
			if _, ok := fieldSeen[company.FieldDeletedAt]; !ok {
				selectedFields = append(selectedFields, company.FieldDeletedAt)
				fieldSeen[company.FieldDeletedAt] = struct{}{}
			}
		case "address":
			if _, ok := fieldSeen[company.FieldAddress]; !ok {
				selectedFields = append(selectedFields, company.FieldAddress)
				fieldSeen[company.FieldAddress] = struct{}{}
			}
		case "basecurrency":
			if _, ok := fieldSeen[company.FieldBaseCurrency]; !ok {
				selectedFields = append(selectedFields, company.FieldBaseCurrency)
				fieldSeen[company.FieldBaseCurrency] = struct{}{}
			}
		case "ceoname":
			if _, ok := fieldSeen[company.FieldCeoName]; !ok {
				selectedFields = append(selectedFields, company.FieldCeoName)
				fieldSeen[company.FieldCeoName] = struct{}{}
			}
		case "city":
			if _, ok := fieldSeen[company.FieldCity]; !ok {
				selectedFields = append(selectedFields, company.FieldCity)
				fieldSeen[company.FieldCity] = struct{}{}
			}
		case "country":
			if _, ok := fieldSeen[company.FieldCountry]; !ok {
				selectedFields = append(selectedFields, company.FieldCountry)
				fieldSeen[company.FieldCountry] = struct{}{}
			}
		case "establishedat":
			if _, ok := fieldSeen[company.FieldEstablishedAt]; !ok {
				selectedFields = append(selectedFields, company.FieldEstablishedAt)
				fieldSeen[company.FieldEstablishedAt] = struct{}{}
			}
		case "description":
			if _, ok := fieldSeen[company.FieldDescription]; !ok {
				selectedFields = append(selectedFields, company.FieldDescription)
				fieldSeen[company.FieldDescription] = struct{}{}
			}
		case "email":
			if _, ok := fieldSeen[company.FieldEmail]; !ok {
				selectedFields = append(selectedFields, company.FieldEmail)
				fieldSeen[company.FieldEmail] = struct{}{}
			}
		case "lastentrydate":
			if _, ok := fieldSeen[company.FieldLastEntryDate]; !ok {
				selectedFields = append(selectedFields, company.FieldLastEntryDate)
				fieldSeen[company.FieldLastEntryDate] = struct{}{}
			}
		case "lastinvoicenumber":
			if _, ok := fieldSeen[company.FieldLastInvoiceNumber]; !ok {
				selectedFields = append(selectedFields, company.FieldLastInvoiceNumber)
				fieldSeen[company.FieldLastInvoiceNumber] = struct{}{}
			}
		case "logo":
			if _, ok := fieldSeen[company.FieldLogo]; !ok {
				selectedFields = append(selectedFields, company.FieldLogo)
				fieldSeen[company.FieldLogo] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[company.FieldName]; !ok {
				selectedFields = append(selectedFields, company.FieldName)
				fieldSeen[company.FieldName] = struct{}{}
			}
		case "numberofemployees":
			if _, ok := fieldSeen[company.FieldNumberOfEmployees]; !ok {
				selectedFields = append(selectedFields, company.FieldNumberOfEmployees)
				fieldSeen[company.FieldNumberOfEmployees] = struct{}{}
			}
		case "phone":
			if _, ok := fieldSeen[company.FieldPhone]; !ok {
				selectedFields = append(selectedFields, company.FieldPhone)
				fieldSeen[company.FieldPhone] = struct{}{}
			}
		case "sector":
			if _, ok := fieldSeen[company.FieldSector]; !ok {
				selectedFields = append(selectedFields, company.FieldSector)
				fieldSeen[company.FieldSector] = struct{}{}
			}
		case "taxid":
			if _, ok := fieldSeen[company.FieldTaxId]; !ok {
				selectedFields = append(selectedFields, company.FieldTaxId)
				fieldSeen[company.FieldTaxId] = struct{}{}
			}
		case "vatrate":
			if _, ok := fieldSeen[company.FieldVatRate]; !ok {
				selectedFields = append(selectedFields, company.FieldVatRate)
				fieldSeen[company.FieldVatRate] = struct{}{}
			}
		case "website":
			if _, ok := fieldSeen[company.FieldWebsite]; !ok {
				selectedFields = append(selectedFields, company.FieldWebsite)
				fieldSeen[company.FieldWebsite] = struct{}{}
			}
		case "incompletesetup":
			if _, ok := fieldSeen[company.FieldIncompleteSetup]; !ok {
				selectedFields = append(selectedFields, company.FieldIncompleteSetup)
				fieldSeen[company.FieldIncompleteSetup] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		c.Select(selectedFields...)
	}
	return nil
}

type companyPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []CompanyPaginateOption
}

func newCompanyPaginateArgs(rv map[string]any) *companyPaginateArgs {
	args := &companyPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &CompanyOrder{Field: &CompanyOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithCompanyOrder(order))
			}
		case *CompanyOrder:
			if v != nil {
				args.opts = append(args.opts, WithCompanyOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*CompanyWhereInput); ok {
		args.opts = append(args.opts, WithCompanyFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (c *CustomerQuery) CollectFields(ctx context.Context, satisfies ...string) (*CustomerQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return c, nil
	}
	if err := c.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return c, nil
}

func (c *CustomerQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(customer.Columns))
		selectedFields = []string{customer.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "company":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CompanyClient{config: c.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			c.withCompany = query
		case "receivables":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ReceivableClient{config: c.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			c.WithNamedReceivables(alias, func(wq *ReceivableQuery) {
				*wq = *query
			})
		case "createdat":
			if _, ok := fieldSeen[customer.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, customer.FieldCreatedAt)
				fieldSeen[customer.FieldCreatedAt] = struct{}{}
			}
		case "updatedat":
			if _, ok := fieldSeen[customer.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, customer.FieldUpdatedAt)
				fieldSeen[customer.FieldUpdatedAt] = struct{}{}
			}
		case "deletedat":
			if _, ok := fieldSeen[customer.FieldDeletedAt]; !ok {
				selectedFields = append(selectedFields, customer.FieldDeletedAt)
				fieldSeen[customer.FieldDeletedAt] = struct{}{}
			}
		case "address":
			if _, ok := fieldSeen[customer.FieldAddress]; !ok {
				selectedFields = append(selectedFields, customer.FieldAddress)
				fieldSeen[customer.FieldAddress] = struct{}{}
			}
		case "city":
			if _, ok := fieldSeen[customer.FieldCity]; !ok {
				selectedFields = append(selectedFields, customer.FieldCity)
				fieldSeen[customer.FieldCity] = struct{}{}
			}
		case "country":
			if _, ok := fieldSeen[customer.FieldCountry]; !ok {
				selectedFields = append(selectedFields, customer.FieldCountry)
				fieldSeen[customer.FieldCountry] = struct{}{}
			}
		case "description":
			if _, ok := fieldSeen[customer.FieldDescription]; !ok {
				selectedFields = append(selectedFields, customer.FieldDescription)
				fieldSeen[customer.FieldDescription] = struct{}{}
			}
		case "email":
			if _, ok := fieldSeen[customer.FieldEmail]; !ok {
				selectedFields = append(selectedFields, customer.FieldEmail)
				fieldSeen[customer.FieldEmail] = struct{}{}
			}
		case "isdefault":
			if _, ok := fieldSeen[customer.FieldIsDefault]; !ok {
				selectedFields = append(selectedFields, customer.FieldIsDefault)
				fieldSeen[customer.FieldIsDefault] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[customer.FieldName]; !ok {
				selectedFields = append(selectedFields, customer.FieldName)
				fieldSeen[customer.FieldName] = struct{}{}
			}
		case "phone":
			if _, ok := fieldSeen[customer.FieldPhone]; !ok {
				selectedFields = append(selectedFields, customer.FieldPhone)
				fieldSeen[customer.FieldPhone] = struct{}{}
			}
		case "taxid":
			if _, ok := fieldSeen[customer.FieldTaxId]; !ok {
				selectedFields = append(selectedFields, customer.FieldTaxId)
				fieldSeen[customer.FieldTaxId] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		c.Select(selectedFields...)
	}
	return nil
}

type customerPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []CustomerPaginateOption
}

func newCustomerPaginateArgs(rv map[string]any) *customerPaginateArgs {
	args := &customerPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case []*CustomerOrder:
			args.opts = append(args.opts, WithCustomerOrder(v))
		case []any:
			var orders []*CustomerOrder
			for i := range v {
				mv, ok := v[i].(map[string]any)
				if !ok {
					continue
				}
				var (
					err1, err2 error
					order      = &CustomerOrder{Field: &CustomerOrderField{}, Direction: entgql.OrderDirectionAsc}
				)
				if d, ok := mv[directionField]; ok {
					err1 = order.Direction.UnmarshalGQL(d)
				}
				if f, ok := mv[fieldField]; ok {
					err2 = order.Field.UnmarshalGQL(f)
				}
				if err1 == nil && err2 == nil {
					orders = append(orders, order)
				}
			}
			args.opts = append(args.opts, WithCustomerOrder(orders))
		}
	}
	if v, ok := rv[whereField].(*CustomerWhereInput); ok {
		args.opts = append(args.opts, WithCustomerFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (e *EmployeeQuery) CollectFields(ctx context.Context, satisfies ...string) (*EmployeeQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return e, nil
	}
	if err := e.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return e, nil
}

func (e *EmployeeQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(employee.Columns))
		selectedFields = []string{employee.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "company":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CompanyClient{config: e.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			e.withCompany = query
		case "user":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: e.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			e.withUser = query
		case "createdat":
			if _, ok := fieldSeen[employee.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, employee.FieldCreatedAt)
				fieldSeen[employee.FieldCreatedAt] = struct{}{}
			}
		case "updatedat":
			if _, ok := fieldSeen[employee.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, employee.FieldUpdatedAt)
				fieldSeen[employee.FieldUpdatedAt] = struct{}{}
			}
		case "deletedat":
			if _, ok := fieldSeen[employee.FieldDeletedAt]; !ok {
				selectedFields = append(selectedFields, employee.FieldDeletedAt)
				fieldSeen[employee.FieldDeletedAt] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[employee.FieldName]; !ok {
				selectedFields = append(selectedFields, employee.FieldName)
				fieldSeen[employee.FieldName] = struct{}{}
			}
		case "gender":
			if _, ok := fieldSeen[employee.FieldGender]; !ok {
				selectedFields = append(selectedFields, employee.FieldGender)
				fieldSeen[employee.FieldGender] = struct{}{}
			}
		case "position":
			if _, ok := fieldSeen[employee.FieldPosition]; !ok {
				selectedFields = append(selectedFields, employee.FieldPosition)
				fieldSeen[employee.FieldPosition] = struct{}{}
			}
		case "email":
			if _, ok := fieldSeen[employee.FieldEmail]; !ok {
				selectedFields = append(selectedFields, employee.FieldEmail)
				fieldSeen[employee.FieldEmail] = struct{}{}
			}
		case "phone":
			if _, ok := fieldSeen[employee.FieldPhone]; !ok {
				selectedFields = append(selectedFields, employee.FieldPhone)
				fieldSeen[employee.FieldPhone] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		e.Select(selectedFields...)
	}
	return nil
}

type employeePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []EmployeePaginateOption
}

func newEmployeePaginateArgs(rv map[string]any) *employeePaginateArgs {
	args := &employeePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*EmployeeWhereInput); ok {
		args.opts = append(args.opts, WithEmployeeFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (f *FileQuery) CollectFields(ctx context.Context, satisfies ...string) (*FileQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return f, nil
	}
	if err := f.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return f, nil
}

func (f *FileQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(file.Columns))
		selectedFields = []string{file.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "company":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CompanyClient{config: f.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			f.withCompany = query
		case "product":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ProductClient{config: f.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			f.withProduct = query
		case "createdat":
			if _, ok := fieldSeen[file.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, file.FieldCreatedAt)
				fieldSeen[file.FieldCreatedAt] = struct{}{}
			}
		case "updatedat":
			if _, ok := fieldSeen[file.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, file.FieldUpdatedAt)
				fieldSeen[file.FieldUpdatedAt] = struct{}{}
			}
		case "deletedat":
			if _, ok := fieldSeen[file.FieldDeletedAt]; !ok {
				selectedFields = append(selectedFields, file.FieldDeletedAt)
				fieldSeen[file.FieldDeletedAt] = struct{}{}
			}
		case "category":
			if _, ok := fieldSeen[file.FieldCategory]; !ok {
				selectedFields = append(selectedFields, file.FieldCategory)
				fieldSeen[file.FieldCategory] = struct{}{}
			}
		case "extension":
			if _, ok := fieldSeen[file.FieldExtension]; !ok {
				selectedFields = append(selectedFields, file.FieldExtension)
				fieldSeen[file.FieldExtension] = struct{}{}
			}
		case "size":
			if _, ok := fieldSeen[file.FieldSize]; !ok {
				selectedFields = append(selectedFields, file.FieldSize)
				fieldSeen[file.FieldSize] = struct{}{}
			}
		case "url":
			if _, ok := fieldSeen[file.FieldURL]; !ok {
				selectedFields = append(selectedFields, file.FieldURL)
				fieldSeen[file.FieldURL] = struct{}{}
			}
		case "description":
			if _, ok := fieldSeen[file.FieldDescription]; !ok {
				selectedFields = append(selectedFields, file.FieldDescription)
				fieldSeen[file.FieldDescription] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		f.Select(selectedFields...)
	}
	return nil
}

type filePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []FilePaginateOption
}

func newFilePaginateArgs(rv map[string]any) *filePaginateArgs {
	args := &filePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &FileOrder{Field: &FileOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithFileOrder(order))
			}
		case *FileOrder:
			if v != nil {
				args.opts = append(args.opts, WithFileOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*FileWhereInput); ok {
		args.opts = append(args.opts, WithFileFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pa *PayableQuery) CollectFields(ctx context.Context, satisfies ...string) (*PayableQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return pa, nil
	}
	if err := pa.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return pa, nil
}

func (pa *PayableQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(payable.Columns))
		selectedFields = []string{payable.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "supplier":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&SupplierClient{config: pa.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			pa.withSupplier = query
		case "createdat":
			if _, ok := fieldSeen[payable.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, payable.FieldCreatedAt)
				fieldSeen[payable.FieldCreatedAt] = struct{}{}
			}
		case "updatedat":
			if _, ok := fieldSeen[payable.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, payable.FieldUpdatedAt)
				fieldSeen[payable.FieldUpdatedAt] = struct{}{}
			}
		case "deletedat":
			if _, ok := fieldSeen[payable.FieldDeletedAt]; !ok {
				selectedFields = append(selectedFields, payable.FieldDeletedAt)
				fieldSeen[payable.FieldDeletedAt] = struct{}{}
			}
		case "entrygroup":
			if _, ok := fieldSeen[payable.FieldEntryGroup]; !ok {
				selectedFields = append(selectedFields, payable.FieldEntryGroup)
				fieldSeen[payable.FieldEntryGroup] = struct{}{}
			}
		case "date":
			if _, ok := fieldSeen[payable.FieldDate]; !ok {
				selectedFields = append(selectedFields, payable.FieldDate)
				fieldSeen[payable.FieldDate] = struct{}{}
			}
		case "outstandingbalance":
			if _, ok := fieldSeen[payable.FieldOutstandingBalance]; !ok {
				selectedFields = append(selectedFields, payable.FieldOutstandingBalance)
				fieldSeen[payable.FieldOutstandingBalance] = struct{}{}
			}
		case "totaltransaction":
			if _, ok := fieldSeen[payable.FieldTotalTransaction]; !ok {
				selectedFields = append(selectedFields, payable.FieldTotalTransaction)
				fieldSeen[payable.FieldTotalTransaction] = struct{}{}
			}
		case "daysdue":
			if _, ok := fieldSeen[payable.FieldDaysDue]; !ok {
				selectedFields = append(selectedFields, payable.FieldDaysDue)
				fieldSeen[payable.FieldDaysDue] = struct{}{}
			}
		case "status":
			if _, ok := fieldSeen[payable.FieldStatus]; !ok {
				selectedFields = append(selectedFields, payable.FieldStatus)
				fieldSeen[payable.FieldStatus] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		pa.Select(selectedFields...)
	}
	return nil
}

type payablePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []PayablePaginateOption
}

func newPayablePaginateArgs(rv map[string]any) *payablePaginateArgs {
	args := &payablePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*PayableWhereInput); ok {
		args.opts = append(args.opts, WithPayableFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pr *ProductQuery) CollectFields(ctx context.Context, satisfies ...string) (*ProductQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return pr, nil
	}
	if err := pr.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return pr, nil
}

func (pr *ProductQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(product.Columns))
		selectedFields = []string{product.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "company":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CompanyClient{config: pr.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			pr.withCompany = query
		case "pictures":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&FileClient{config: pr.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			pr.WithNamedPictures(alias, func(wq *FileQuery) {
				*wq = *query
			})
		case "accountingentries":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&AccountingEntryClient{config: pr.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			pr.WithNamedAccountingEntries(alias, func(wq *AccountingEntryQuery) {
				*wq = *query
			})
		case "createdat":
			if _, ok := fieldSeen[product.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, product.FieldCreatedAt)
				fieldSeen[product.FieldCreatedAt] = struct{}{}
			}
		case "updatedat":
			if _, ok := fieldSeen[product.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, product.FieldUpdatedAt)
				fieldSeen[product.FieldUpdatedAt] = struct{}{}
			}
		case "deletedat":
			if _, ok := fieldSeen[product.FieldDeletedAt]; !ok {
				selectedFields = append(selectedFields, product.FieldDeletedAt)
				fieldSeen[product.FieldDeletedAt] = struct{}{}
			}
		case "description":
			if _, ok := fieldSeen[product.FieldDescription]; !ok {
				selectedFields = append(selectedFields, product.FieldDescription)
				fieldSeen[product.FieldDescription] = struct{}{}
			}
		case "isdefault":
			if _, ok := fieldSeen[product.FieldIsDefault]; !ok {
				selectedFields = append(selectedFields, product.FieldIsDefault)
				fieldSeen[product.FieldIsDefault] = struct{}{}
			}
		case "minimumstock":
			if _, ok := fieldSeen[product.FieldMinimumStock]; !ok {
				selectedFields = append(selectedFields, product.FieldMinimumStock)
				fieldSeen[product.FieldMinimumStock] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[product.FieldName]; !ok {
				selectedFields = append(selectedFields, product.FieldName)
				fieldSeen[product.FieldName] = struct{}{}
			}
		case "price":
			if _, ok := fieldSeen[product.FieldPrice]; !ok {
				selectedFields = append(selectedFields, product.FieldPrice)
				fieldSeen[product.FieldPrice] = struct{}{}
			}
		case "sku":
			if _, ok := fieldSeen[product.FieldSku]; !ok {
				selectedFields = append(selectedFields, product.FieldSku)
				fieldSeen[product.FieldSku] = struct{}{}
			}
		case "stock":
			if _, ok := fieldSeen[product.FieldStock]; !ok {
				selectedFields = append(selectedFields, product.FieldStock)
				fieldSeen[product.FieldStock] = struct{}{}
			}
		case "category":
			if _, ok := fieldSeen[product.FieldCategory]; !ok {
				selectedFields = append(selectedFields, product.FieldCategory)
				fieldSeen[product.FieldCategory] = struct{}{}
			}
		case "unitcost":
			if _, ok := fieldSeen[product.FieldUnitCost]; !ok {
				selectedFields = append(selectedFields, product.FieldUnitCost)
				fieldSeen[product.FieldUnitCost] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		pr.Select(selectedFields...)
	}
	return nil
}

type productPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ProductPaginateOption
}

func newProductPaginateArgs(rv map[string]any) *productPaginateArgs {
	args := &productPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &ProductOrder{Field: &ProductOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithProductOrder(order))
			}
		case *ProductOrder:
			if v != nil {
				args.opts = append(args.opts, WithProductOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*ProductWhereInput); ok {
		args.opts = append(args.opts, WithProductFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pr *ProjectQuery) CollectFields(ctx context.Context, satisfies ...string) (*ProjectQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return pr, nil
	}
	if err := pr.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return pr, nil
}

func (pr *ProjectQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(project.Columns))
		selectedFields = []string{project.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "company":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CompanyClient{config: pr.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			pr.withCompany = query
		case "createdby":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: pr.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			pr.withCreatedBy = query
		case "leader":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: pr.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			pr.withLeader = query
		case "tasks":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ProjectTaskClient{config: pr.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			pr.WithNamedTasks(alias, func(wq *ProjectTaskQuery) {
				*wq = *query
			})
		case "milestones":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ProjectMilestoneClient{config: pr.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			pr.WithNamedMilestones(alias, func(wq *ProjectMilestoneQuery) {
				*wq = *query
			})
		case "createdat":
			if _, ok := fieldSeen[project.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, project.FieldCreatedAt)
				fieldSeen[project.FieldCreatedAt] = struct{}{}
			}
		case "updatedat":
			if _, ok := fieldSeen[project.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, project.FieldUpdatedAt)
				fieldSeen[project.FieldUpdatedAt] = struct{}{}
			}
		case "deletedat":
			if _, ok := fieldSeen[project.FieldDeletedAt]; !ok {
				selectedFields = append(selectedFields, project.FieldDeletedAt)
				fieldSeen[project.FieldDeletedAt] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[project.FieldName]; !ok {
				selectedFields = append(selectedFields, project.FieldName)
				fieldSeen[project.FieldName] = struct{}{}
			}
		case "description":
			if _, ok := fieldSeen[project.FieldDescription]; !ok {
				selectedFields = append(selectedFields, project.FieldDescription)
				fieldSeen[project.FieldDescription] = struct{}{}
			}
		case "startdate":
			if _, ok := fieldSeen[project.FieldStartDate]; !ok {
				selectedFields = append(selectedFields, project.FieldStartDate)
				fieldSeen[project.FieldStartDate] = struct{}{}
			}
		case "enddate":
			if _, ok := fieldSeen[project.FieldEndDate]; !ok {
				selectedFields = append(selectedFields, project.FieldEndDate)
				fieldSeen[project.FieldEndDate] = struct{}{}
			}
		case "progress":
			if _, ok := fieldSeen[project.FieldProgress]; !ok {
				selectedFields = append(selectedFields, project.FieldProgress)
				fieldSeen[project.FieldProgress] = struct{}{}
			}
		case "status":
			if _, ok := fieldSeen[project.FieldStatus]; !ok {
				selectedFields = append(selectedFields, project.FieldStatus)
				fieldSeen[project.FieldStatus] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		pr.Select(selectedFields...)
	}
	return nil
}

type projectPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ProjectPaginateOption
}

func newProjectPaginateArgs(rv map[string]any) *projectPaginateArgs {
	args := &projectPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*ProjectWhereInput); ok {
		args.opts = append(args.opts, WithProjectFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pm *ProjectMilestoneQuery) CollectFields(ctx context.Context, satisfies ...string) (*ProjectMilestoneQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return pm, nil
	}
	if err := pm.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return pm, nil
}

func (pm *ProjectMilestoneQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(projectmilestone.Columns))
		selectedFields = []string{projectmilestone.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "project":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ProjectClient{config: pm.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			pm.withProject = query
		case "name":
			if _, ok := fieldSeen[projectmilestone.FieldName]; !ok {
				selectedFields = append(selectedFields, projectmilestone.FieldName)
				fieldSeen[projectmilestone.FieldName] = struct{}{}
			}
		case "duedate":
			if _, ok := fieldSeen[projectmilestone.FieldDueDate]; !ok {
				selectedFields = append(selectedFields, projectmilestone.FieldDueDate)
				fieldSeen[projectmilestone.FieldDueDate] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		pm.Select(selectedFields...)
	}
	return nil
}

type projectmilestonePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ProjectMilestonePaginateOption
}

func newProjectMilestonePaginateArgs(rv map[string]any) *projectmilestonePaginateArgs {
	args := &projectmilestonePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*ProjectMilestoneWhereInput); ok {
		args.opts = append(args.opts, WithProjectMilestoneFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pt *ProjectTaskQuery) CollectFields(ctx context.Context, satisfies ...string) (*ProjectTaskQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return pt, nil
	}
	if err := pt.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return pt, nil
}

func (pt *ProjectTaskQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(projecttask.Columns))
		selectedFields = []string{projecttask.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "project":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ProjectClient{config: pt.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			pt.withProject = query
		case "assignee":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: pt.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			pt.withAssignee = query
		case "participants":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: pt.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			pt.WithNamedParticipants(alias, func(wq *UserQuery) {
				*wq = *query
			})
		case "createdby":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: pt.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			pt.withCreatedBy = query
		case "workshifts":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&WorkshiftClient{config: pt.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			pt.WithNamedWorkShifts(alias, func(wq *WorkshiftQuery) {
				*wq = *query
			})
		case "createdat":
			if _, ok := fieldSeen[projecttask.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, projecttask.FieldCreatedAt)
				fieldSeen[projecttask.FieldCreatedAt] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[projecttask.FieldName]; !ok {
				selectedFields = append(selectedFields, projecttask.FieldName)
				fieldSeen[projecttask.FieldName] = struct{}{}
			}
		case "assigneename":
			if _, ok := fieldSeen[projecttask.FieldAssigneeName]; !ok {
				selectedFields = append(selectedFields, projecttask.FieldAssigneeName)
				fieldSeen[projecttask.FieldAssigneeName] = struct{}{}
			}
		case "location":
			if _, ok := fieldSeen[projecttask.FieldLocation]; !ok {
				selectedFields = append(selectedFields, projecttask.FieldLocation)
				fieldSeen[projecttask.FieldLocation] = struct{}{}
			}
		case "duedate":
			if _, ok := fieldSeen[projecttask.FieldDueDate]; !ok {
				selectedFields = append(selectedFields, projecttask.FieldDueDate)
				fieldSeen[projecttask.FieldDueDate] = struct{}{}
			}
		case "startdate":
			if _, ok := fieldSeen[projecttask.FieldStartDate]; !ok {
				selectedFields = append(selectedFields, projecttask.FieldStartDate)
				fieldSeen[projecttask.FieldStartDate] = struct{}{}
			}
		case "enddate":
			if _, ok := fieldSeen[projecttask.FieldEndDate]; !ok {
				selectedFields = append(selectedFields, projecttask.FieldEndDate)
				fieldSeen[projecttask.FieldEndDate] = struct{}{}
			}
		case "description":
			if _, ok := fieldSeen[projecttask.FieldDescription]; !ok {
				selectedFields = append(selectedFields, projecttask.FieldDescription)
				fieldSeen[projecttask.FieldDescription] = struct{}{}
			}
		case "status":
			if _, ok := fieldSeen[projecttask.FieldStatus]; !ok {
				selectedFields = append(selectedFields, projecttask.FieldStatus)
				fieldSeen[projecttask.FieldStatus] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		pt.Select(selectedFields...)
	}
	return nil
}

type projecttaskPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ProjectTaskPaginateOption
}

func newProjectTaskPaginateArgs(rv map[string]any) *projecttaskPaginateArgs {
	args := &projecttaskPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &ProjectTaskOrder{Field: &ProjectTaskOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithProjectTaskOrder(order))
			}
		case *ProjectTaskOrder:
			if v != nil {
				args.opts = append(args.opts, WithProjectTaskOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*ProjectTaskWhereInput); ok {
		args.opts = append(args.opts, WithProjectTaskFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (r *ReceivableQuery) CollectFields(ctx context.Context, satisfies ...string) (*ReceivableQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return r, nil
	}
	if err := r.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return r, nil
}

func (r *ReceivableQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(receivable.Columns))
		selectedFields = []string{receivable.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "customer":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CustomerClient{config: r.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			r.withCustomer = query
		case "createdat":
			if _, ok := fieldSeen[receivable.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, receivable.FieldCreatedAt)
				fieldSeen[receivable.FieldCreatedAt] = struct{}{}
			}
		case "updatedat":
			if _, ok := fieldSeen[receivable.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, receivable.FieldUpdatedAt)
				fieldSeen[receivable.FieldUpdatedAt] = struct{}{}
			}
		case "deletedat":
			if _, ok := fieldSeen[receivable.FieldDeletedAt]; !ok {
				selectedFields = append(selectedFields, receivable.FieldDeletedAt)
				fieldSeen[receivable.FieldDeletedAt] = struct{}{}
			}
		case "entrygroup":
			if _, ok := fieldSeen[receivable.FieldEntryGroup]; !ok {
				selectedFields = append(selectedFields, receivable.FieldEntryGroup)
				fieldSeen[receivable.FieldEntryGroup] = struct{}{}
			}
		case "date":
			if _, ok := fieldSeen[receivable.FieldDate]; !ok {
				selectedFields = append(selectedFields, receivable.FieldDate)
				fieldSeen[receivable.FieldDate] = struct{}{}
			}
		case "outstandingbalance":
			if _, ok := fieldSeen[receivable.FieldOutstandingBalance]; !ok {
				selectedFields = append(selectedFields, receivable.FieldOutstandingBalance)
				fieldSeen[receivable.FieldOutstandingBalance] = struct{}{}
			}
		case "totaltransaction":
			if _, ok := fieldSeen[receivable.FieldTotalTransaction]; !ok {
				selectedFields = append(selectedFields, receivable.FieldTotalTransaction)
				fieldSeen[receivable.FieldTotalTransaction] = struct{}{}
			}
		case "daysdue":
			if _, ok := fieldSeen[receivable.FieldDaysDue]; !ok {
				selectedFields = append(selectedFields, receivable.FieldDaysDue)
				fieldSeen[receivable.FieldDaysDue] = struct{}{}
			}
		case "status":
			if _, ok := fieldSeen[receivable.FieldStatus]; !ok {
				selectedFields = append(selectedFields, receivable.FieldStatus)
				fieldSeen[receivable.FieldStatus] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		r.Select(selectedFields...)
	}
	return nil
}

type receivablePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ReceivablePaginateOption
}

func newReceivablePaginateArgs(rv map[string]any) *receivablePaginateArgs {
	args := &receivablePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case []*ReceivableOrder:
			args.opts = append(args.opts, WithReceivableOrder(v))
		case []any:
			var orders []*ReceivableOrder
			for i := range v {
				mv, ok := v[i].(map[string]any)
				if !ok {
					continue
				}
				var (
					err1, err2 error
					order      = &ReceivableOrder{Field: &ReceivableOrderField{}, Direction: entgql.OrderDirectionAsc}
				)
				if d, ok := mv[directionField]; ok {
					err1 = order.Direction.UnmarshalGQL(d)
				}
				if f, ok := mv[fieldField]; ok {
					err2 = order.Field.UnmarshalGQL(f)
				}
				if err1 == nil && err2 == nil {
					orders = append(orders, order)
				}
			}
			args.opts = append(args.opts, WithReceivableOrder(orders))
		}
	}
	if v, ok := rv[whereField].(*ReceivableWhereInput); ok {
		args.opts = append(args.opts, WithReceivableFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (s *SupplierQuery) CollectFields(ctx context.Context, satisfies ...string) (*SupplierQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return s, nil
	}
	if err := s.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return s, nil
}

func (s *SupplierQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(supplier.Columns))
		selectedFields = []string{supplier.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "company":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CompanyClient{config: s.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			s.withCompany = query
		case "payables":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&PayableClient{config: s.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			s.WithNamedPayables(alias, func(wq *PayableQuery) {
				*wq = *query
			})
		case "createdat":
			if _, ok := fieldSeen[supplier.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, supplier.FieldCreatedAt)
				fieldSeen[supplier.FieldCreatedAt] = struct{}{}
			}
		case "updatedat":
			if _, ok := fieldSeen[supplier.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, supplier.FieldUpdatedAt)
				fieldSeen[supplier.FieldUpdatedAt] = struct{}{}
			}
		case "deletedat":
			if _, ok := fieldSeen[supplier.FieldDeletedAt]; !ok {
				selectedFields = append(selectedFields, supplier.FieldDeletedAt)
				fieldSeen[supplier.FieldDeletedAt] = struct{}{}
			}
		case "address":
			if _, ok := fieldSeen[supplier.FieldAddress]; !ok {
				selectedFields = append(selectedFields, supplier.FieldAddress)
				fieldSeen[supplier.FieldAddress] = struct{}{}
			}
		case "city":
			if _, ok := fieldSeen[supplier.FieldCity]; !ok {
				selectedFields = append(selectedFields, supplier.FieldCity)
				fieldSeen[supplier.FieldCity] = struct{}{}
			}
		case "country":
			if _, ok := fieldSeen[supplier.FieldCountry]; !ok {
				selectedFields = append(selectedFields, supplier.FieldCountry)
				fieldSeen[supplier.FieldCountry] = struct{}{}
			}
		case "description":
			if _, ok := fieldSeen[supplier.FieldDescription]; !ok {
				selectedFields = append(selectedFields, supplier.FieldDescription)
				fieldSeen[supplier.FieldDescription] = struct{}{}
			}
		case "email":
			if _, ok := fieldSeen[supplier.FieldEmail]; !ok {
				selectedFields = append(selectedFields, supplier.FieldEmail)
				fieldSeen[supplier.FieldEmail] = struct{}{}
			}
		case "isdefault":
			if _, ok := fieldSeen[supplier.FieldIsDefault]; !ok {
				selectedFields = append(selectedFields, supplier.FieldIsDefault)
				fieldSeen[supplier.FieldIsDefault] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[supplier.FieldName]; !ok {
				selectedFields = append(selectedFields, supplier.FieldName)
				fieldSeen[supplier.FieldName] = struct{}{}
			}
		case "phone":
			if _, ok := fieldSeen[supplier.FieldPhone]; !ok {
				selectedFields = append(selectedFields, supplier.FieldPhone)
				fieldSeen[supplier.FieldPhone] = struct{}{}
			}
		case "taxid":
			if _, ok := fieldSeen[supplier.FieldTaxId]; !ok {
				selectedFields = append(selectedFields, supplier.FieldTaxId)
				fieldSeen[supplier.FieldTaxId] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		s.Select(selectedFields...)
	}
	return nil
}

type supplierPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []SupplierPaginateOption
}

func newSupplierPaginateArgs(rv map[string]any) *supplierPaginateArgs {
	args := &supplierPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*SupplierWhereInput); ok {
		args.opts = append(args.opts, WithSupplierFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (t *TokenQuery) CollectFields(ctx context.Context, satisfies ...string) (*TokenQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return t, nil
	}
	if err := t.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return t, nil
}

func (t *TokenQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(token.Columns))
		selectedFields = []string{token.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "company":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CompanyClient{config: t.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			t.withCompany = query
		case "user":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: t.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			t.withUser = query
		case "expiry":
			if _, ok := fieldSeen[token.FieldExpiry]; !ok {
				selectedFields = append(selectedFields, token.FieldExpiry)
				fieldSeen[token.FieldExpiry] = struct{}{}
			}
		case "category":
			if _, ok := fieldSeen[token.FieldCategory]; !ok {
				selectedFields = append(selectedFields, token.FieldCategory)
				fieldSeen[token.FieldCategory] = struct{}{}
			}
		case "token":
			if _, ok := fieldSeen[token.FieldToken]; !ok {
				selectedFields = append(selectedFields, token.FieldToken)
				fieldSeen[token.FieldToken] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		t.Select(selectedFields...)
	}
	return nil
}

type tokenPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []TokenPaginateOption
}

func newTokenPaginateArgs(rv map[string]any) *tokenPaginateArgs {
	args := &tokenPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*TokenWhereInput); ok {
		args.opts = append(args.opts, WithTokenFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (t *TreasuryQuery) CollectFields(ctx context.Context, satisfies ...string) (*TreasuryQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return t, nil
	}
	if err := t.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return t, nil
}

func (t *TreasuryQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(treasury.Columns))
		selectedFields = []string{treasury.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "company":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CompanyClient{config: t.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			t.withCompany = query
		case "accountingentries":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&AccountingEntryClient{config: t.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			t.WithNamedAccountingEntries(alias, func(wq *AccountingEntryQuery) {
				*wq = *query
			})
		case "createdat":
			if _, ok := fieldSeen[treasury.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, treasury.FieldCreatedAt)
				fieldSeen[treasury.FieldCreatedAt] = struct{}{}
			}
		case "updatedat":
			if _, ok := fieldSeen[treasury.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, treasury.FieldUpdatedAt)
				fieldSeen[treasury.FieldUpdatedAt] = struct{}{}
			}
		case "deletedat":
			if _, ok := fieldSeen[treasury.FieldDeletedAt]; !ok {
				selectedFields = append(selectedFields, treasury.FieldDeletedAt)
				fieldSeen[treasury.FieldDeletedAt] = struct{}{}
			}
		case "accountnumber":
			if _, ok := fieldSeen[treasury.FieldAccountNumber]; !ok {
				selectedFields = append(selectedFields, treasury.FieldAccountNumber)
				fieldSeen[treasury.FieldAccountNumber] = struct{}{}
			}
		case "balance":
			if _, ok := fieldSeen[treasury.FieldBalance]; !ok {
				selectedFields = append(selectedFields, treasury.FieldBalance)
				fieldSeen[treasury.FieldBalance] = struct{}{}
			}
		case "bankname":
			if _, ok := fieldSeen[treasury.FieldBankName]; !ok {
				selectedFields = append(selectedFields, treasury.FieldBankName)
				fieldSeen[treasury.FieldBankName] = struct{}{}
			}
		case "currency":
			if _, ok := fieldSeen[treasury.FieldCurrency]; !ok {
				selectedFields = append(selectedFields, treasury.FieldCurrency)
				fieldSeen[treasury.FieldCurrency] = struct{}{}
			}
		case "description":
			if _, ok := fieldSeen[treasury.FieldDescription]; !ok {
				selectedFields = append(selectedFields, treasury.FieldDescription)
				fieldSeen[treasury.FieldDescription] = struct{}{}
			}
		case "iban":
			if _, ok := fieldSeen[treasury.FieldIban]; !ok {
				selectedFields = append(selectedFields, treasury.FieldIban)
				fieldSeen[treasury.FieldIban] = struct{}{}
			}
		case "isdefault":
			if _, ok := fieldSeen[treasury.FieldIsDefault]; !ok {
				selectedFields = append(selectedFields, treasury.FieldIsDefault)
				fieldSeen[treasury.FieldIsDefault] = struct{}{}
			}
		case "ismainaccount":
			if _, ok := fieldSeen[treasury.FieldIsMainAccount]; !ok {
				selectedFields = append(selectedFields, treasury.FieldIsMainAccount)
				fieldSeen[treasury.FieldIsMainAccount] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[treasury.FieldName]; !ok {
				selectedFields = append(selectedFields, treasury.FieldName)
				fieldSeen[treasury.FieldName] = struct{}{}
			}
		case "category":
			if _, ok := fieldSeen[treasury.FieldCategory]; !ok {
				selectedFields = append(selectedFields, treasury.FieldCategory)
				fieldSeen[treasury.FieldCategory] = struct{}{}
			}
		case "swiftcode":
			if _, ok := fieldSeen[treasury.FieldSwiftCode]; !ok {
				selectedFields = append(selectedFields, treasury.FieldSwiftCode)
				fieldSeen[treasury.FieldSwiftCode] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		t.Select(selectedFields...)
	}
	return nil
}

type treasuryPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []TreasuryPaginateOption
}

func newTreasuryPaginateArgs(rv map[string]any) *treasuryPaginateArgs {
	args := &treasuryPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*TreasuryWhereInput); ok {
		args.opts = append(args.opts, WithTreasuryFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (u *UserQuery) CollectFields(ctx context.Context, satisfies ...string) (*UserQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return u, nil
	}
	if err := u.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return u, nil
}

func (u *UserQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(user.Columns))
		selectedFields = []string{user.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "accountingentries":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&AccountingEntryClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedAccountingEntries(alias, func(wq *AccountingEntryQuery) {
				*wq = *query
			})
		case "company":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CompanyClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedCompany(alias, func(wq *CompanyQuery) {
				*wq = *query
			})
		case "assignedroles":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserRoleClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedAssignedRoles(alias, func(wq *UserRoleQuery) {
				*wq = *query
			})
		case "subordinates":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedSubordinates(alias, func(wq *UserQuery) {
				*wq = *query
			})
		case "leader":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.withLeader = query
		case "employee":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&EmployeeClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.withEmployee = query
		case "createdprojects":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ProjectClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedCreatedProjects(alias, func(wq *ProjectQuery) {
				*wq = *query
			})
		case "leaderedprojects":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ProjectClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedLeaderedProjects(alias, func(wq *ProjectQuery) {
				*wq = *query
			})
		case "assignedprojecttasks":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ProjectTaskClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedAssignedProjectTasks(alias, func(wq *ProjectTaskQuery) {
				*wq = *query
			})
		case "participatedprojecttasks":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ProjectTaskClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedParticipatedProjectTasks(alias, func(wq *ProjectTaskQuery) {
				*wq = *query
			})
		case "createdtasks":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ProjectTaskClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedCreatedTasks(alias, func(wq *ProjectTaskQuery) {
				*wq = *query
			})
		case "tokens":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&TokenClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedTokens(alias, func(wq *TokenQuery) {
				*wq = *query
			})
		case "approvedworkshifts":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&WorkshiftClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedApprovedWorkShifts(alias, func(wq *WorkshiftQuery) {
				*wq = *query
			})
		case "workshifts":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&WorkshiftClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedWorkShifts(alias, func(wq *WorkshiftQuery) {
				*wq = *query
			})
		case "createdat":
			if _, ok := fieldSeen[user.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, user.FieldCreatedAt)
				fieldSeen[user.FieldCreatedAt] = struct{}{}
			}
		case "updatedat":
			if _, ok := fieldSeen[user.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, user.FieldUpdatedAt)
				fieldSeen[user.FieldUpdatedAt] = struct{}{}
			}
		case "deletedat":
			if _, ok := fieldSeen[user.FieldDeletedAt]; !ok {
				selectedFields = append(selectedFields, user.FieldDeletedAt)
				fieldSeen[user.FieldDeletedAt] = struct{}{}
			}
		case "email":
			if _, ok := fieldSeen[user.FieldEmail]; !ok {
				selectedFields = append(selectedFields, user.FieldEmail)
				fieldSeen[user.FieldEmail] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[user.FieldName]; !ok {
				selectedFields = append(selectedFields, user.FieldName)
				fieldSeen[user.FieldName] = struct{}{}
			}
		case "username":
			if _, ok := fieldSeen[user.FieldUsername]; !ok {
				selectedFields = append(selectedFields, user.FieldUsername)
				fieldSeen[user.FieldUsername] = struct{}{}
			}
		case "disabled":
			if _, ok := fieldSeen[user.FieldDisabled]; !ok {
				selectedFields = append(selectedFields, user.FieldDisabled)
				fieldSeen[user.FieldDisabled] = struct{}{}
			}
		case "notverified":
			if _, ok := fieldSeen[user.FieldNotVerified]; !ok {
				selectedFields = append(selectedFields, user.FieldNotVerified)
				fieldSeen[user.FieldNotVerified] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		u.Select(selectedFields...)
	}
	return nil
}

type userPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []UserPaginateOption
}

func newUserPaginateArgs(rv map[string]any) *userPaginateArgs {
	args := &userPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &UserOrder{Field: &UserOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithUserOrder(order))
			}
		case *UserOrder:
			if v != nil {
				args.opts = append(args.opts, WithUserOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*UserWhereInput); ok {
		args.opts = append(args.opts, WithUserFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ur *UserRoleQuery) CollectFields(ctx context.Context, satisfies ...string) (*UserRoleQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ur, nil
	}
	if err := ur.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ur, nil
}

func (ur *UserRoleQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(userrole.Columns))
		selectedFields = []string{userrole.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "company":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CompanyClient{config: ur.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			ur.withCompany = query
		case "user":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: ur.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			ur.WithNamedUser(alias, func(wq *UserQuery) {
				*wq = *query
			})
		case "role":
			if _, ok := fieldSeen[userrole.FieldRole]; !ok {
				selectedFields = append(selectedFields, userrole.FieldRole)
				fieldSeen[userrole.FieldRole] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		ur.Select(selectedFields...)
	}
	return nil
}

type userrolePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []UserRolePaginateOption
}

func newUserRolePaginateArgs(rv map[string]any) *userrolePaginateArgs {
	args := &userrolePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &UserRoleOrder{Field: &UserRoleOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithUserRoleOrder(order))
			}
		case *UserRoleOrder:
			if v != nil {
				args.opts = append(args.opts, WithUserRoleOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*UserRoleWhereInput); ok {
		args.opts = append(args.opts, WithUserRoleFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (w *WorkshiftQuery) CollectFields(ctx context.Context, satisfies ...string) (*WorkshiftQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return w, nil
	}
	if err := w.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return w, nil
}

func (w *WorkshiftQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(workshift.Columns))
		selectedFields = []string{workshift.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "company":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CompanyClient{config: w.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			w.withCompany = query
		case "user":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: w.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			w.withUser = query
		case "approvedby":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: w.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			w.withApprovedBy = query
		case "task":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ProjectTaskClient{config: w.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			w.withTask = query
		case "editrequest":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&WorkshiftClient{config: w.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			w.withEditRequest = query
		case "workshift":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&WorkshiftClient{config: w.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			w.withWorkShift = query
		case "createdat":
			if _, ok := fieldSeen[workshift.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, workshift.FieldCreatedAt)
				fieldSeen[workshift.FieldCreatedAt] = struct{}{}
			}
		case "updatedat":
			if _, ok := fieldSeen[workshift.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, workshift.FieldUpdatedAt)
				fieldSeen[workshift.FieldUpdatedAt] = struct{}{}
			}
		case "deletedat":
			if _, ok := fieldSeen[workshift.FieldDeletedAt]; !ok {
				selectedFields = append(selectedFields, workshift.FieldDeletedAt)
				fieldSeen[workshift.FieldDeletedAt] = struct{}{}
			}
		case "approvedat":
			if _, ok := fieldSeen[workshift.FieldApprovedAt]; !ok {
				selectedFields = append(selectedFields, workshift.FieldApprovedAt)
				fieldSeen[workshift.FieldApprovedAt] = struct{}{}
			}
		case "clockin":
			if _, ok := fieldSeen[workshift.FieldClockIn]; !ok {
				selectedFields = append(selectedFields, workshift.FieldClockIn)
				fieldSeen[workshift.FieldClockIn] = struct{}{}
			}
		case "clockout":
			if _, ok := fieldSeen[workshift.FieldClockOut]; !ok {
				selectedFields = append(selectedFields, workshift.FieldClockOut)
				fieldSeen[workshift.FieldClockOut] = struct{}{}
			}
		case "clockinlocation":
			if _, ok := fieldSeen[workshift.FieldClockInLocation]; !ok {
				selectedFields = append(selectedFields, workshift.FieldClockInLocation)
				fieldSeen[workshift.FieldClockInLocation] = struct{}{}
			}
		case "clockoutlocation":
			if _, ok := fieldSeen[workshift.FieldClockOutLocation]; !ok {
				selectedFields = append(selectedFields, workshift.FieldClockOutLocation)
				fieldSeen[workshift.FieldClockOutLocation] = struct{}{}
			}
		case "description":
			if _, ok := fieldSeen[workshift.FieldDescription]; !ok {
				selectedFields = append(selectedFields, workshift.FieldDescription)
				fieldSeen[workshift.FieldDescription] = struct{}{}
			}
		case "note":
			if _, ok := fieldSeen[workshift.FieldNote]; !ok {
				selectedFields = append(selectedFields, workshift.FieldNote)
				fieldSeen[workshift.FieldNote] = struct{}{}
			}
		case "status":
			if _, ok := fieldSeen[workshift.FieldStatus]; !ok {
				selectedFields = append(selectedFields, workshift.FieldStatus)
				fieldSeen[workshift.FieldStatus] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		w.Select(selectedFields...)
	}
	return nil
}

type workshiftPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []WorkshiftPaginateOption
}

func newWorkshiftPaginateArgs(rv map[string]any) *workshiftPaginateArgs {
	args := &workshiftPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case []*WorkshiftOrder:
			args.opts = append(args.opts, WithWorkshiftOrder(v))
		case []any:
			var orders []*WorkshiftOrder
			for i := range v {
				mv, ok := v[i].(map[string]any)
				if !ok {
					continue
				}
				var (
					err1, err2 error
					order      = &WorkshiftOrder{Field: &WorkshiftOrderField{}, Direction: entgql.OrderDirectionAsc}
				)
				if d, ok := mv[directionField]; ok {
					err1 = order.Direction.UnmarshalGQL(d)
				}
				if f, ok := mv[fieldField]; ok {
					err2 = order.Field.UnmarshalGQL(f)
				}
				if err1 == nil && err2 == nil {
					orders = append(orders, order)
				}
			}
			args.opts = append(args.opts, WithWorkshiftOrder(orders))
		}
	}
	if v, ok := rv[whereField].(*WorkshiftWhereInput); ok {
		args.opts = append(args.opts, WithWorkshiftFilter(v.Filter))
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

func limitRows(partitionBy string, limit int, orderBy ...sql.Querier) func(s *sql.Selector) {
	return func(s *sql.Selector) {
		d := sql.Dialect(s.Dialect())
		s.SetDistinct(false)
		with := d.With("src_query").
			As(s.Clone()).
			With("limited_query").
			As(
				d.Select("*").
					AppendSelectExprAs(
						sql.RowNumber().PartitionBy(partitionBy).OrderExpr(orderBy...),
						"row_number",
					).
					From(d.Table("src_query")),
			)
		t := d.Table("limited_query").As(s.TableName())
		*s = *d.Select(s.UnqualifiedColumns()...).
			From(t).
			Where(sql.LTE(t.C("row_number"), limit)).
			Prefix(with)
	}
}

// mayAddCondition appends another type condition to the satisfies list
// if condition is enabled (Node/Nodes) and it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond string) []string {
	if len(satisfies) == 0 {
		return satisfies
	}
	for _, s := range satisfies {
		if typeCond == s {
			return satisfies
		}
	}
	return append(satisfies, typeCond)
}
