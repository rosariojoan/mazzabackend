// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"mazza/ent/generated/company"
	"mazza/ent/generated/companydocument"
	"mazza/ent/generated/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CompanyDocument is the model entity for the CompanyDocument schema.
type CompanyDocument struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// DeletedAt holds the value of the "deletedAt" field.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	// Filename holds the value of the "filename" field.
	Filename string `json:"filename,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Keywords holds the value of the "keywords" field.
	Keywords string `json:"keywords,omitempty"`
	// Category holds the value of the "category" field.
	Category companydocument.Category `json:"category,omitempty"`
	// File size in kilobyte
	Size int `json:"size,omitempty"`
	// mimetype e.g. application/pdf
	FileType *string `json:"fileType,omitempty"`
	// Status holds the value of the "status" field.
	Status companydocument.Status `json:"status,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Firebase cloud storage URI. Not exposed to the client
	StorageURI string `json:"-"`
	// Thumbnail holds the value of the "thumbnail" field.
	Thumbnail *string `json:"thumbnail,omitempty"`
	// ExpiryDate holds the value of the "expiryDate" field.
	ExpiryDate *time.Time `json:"expiryDate,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CompanyDocumentQuery when eager-loading is set.
	Edges                   CompanyDocumentEdges `json:"edges"`
	company_documents       *int
	user_uploaded_documents *int
	user_approved_documents *int
	selectValues            sql.SelectValues
}

// CompanyDocumentEdges holds the relations/edges for other nodes in the graph.
type CompanyDocumentEdges struct {
	// Company holds the value of the company edge.
	Company *Company `json:"company,omitempty"`
	// UploadedBy holds the value of the uploadedBy edge.
	UploadedBy *User `json:"uploadedBy,omitempty"`
	// ApprovedBy holds the value of the approvedBy edge.
	ApprovedBy *User `json:"approvedBy,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int
}

// CompanyOrErr returns the Company value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CompanyDocumentEdges) CompanyOrErr() (*Company, error) {
	if e.Company != nil {
		return e.Company, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: company.Label}
	}
	return nil, &NotLoadedError{edge: "company"}
}

// UploadedByOrErr returns the UploadedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CompanyDocumentEdges) UploadedByOrErr() (*User, error) {
	if e.UploadedBy != nil {
		return e.UploadedBy, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "uploadedBy"}
}

// ApprovedByOrErr returns the ApprovedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CompanyDocumentEdges) ApprovedByOrErr() (*User, error) {
	if e.ApprovedBy != nil {
		return e.ApprovedBy, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "approvedBy"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CompanyDocument) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case companydocument.FieldID, companydocument.FieldSize:
			values[i] = new(sql.NullInt64)
		case companydocument.FieldFilename, companydocument.FieldTitle, companydocument.FieldKeywords, companydocument.FieldCategory, companydocument.FieldFileType, companydocument.FieldStatus, companydocument.FieldURL, companydocument.FieldStorageURI, companydocument.FieldThumbnail:
			values[i] = new(sql.NullString)
		case companydocument.FieldCreatedAt, companydocument.FieldUpdatedAt, companydocument.FieldDeletedAt, companydocument.FieldExpiryDate:
			values[i] = new(sql.NullTime)
		case companydocument.ForeignKeys[0]: // company_documents
			values[i] = new(sql.NullInt64)
		case companydocument.ForeignKeys[1]: // user_uploaded_documents
			values[i] = new(sql.NullInt64)
		case companydocument.ForeignKeys[2]: // user_approved_documents
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CompanyDocument fields.
func (cd *CompanyDocument) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case companydocument.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cd.ID = int(value.Int64)
		case companydocument.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				cd.CreatedAt = value.Time
			}
		case companydocument.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				cd.UpdatedAt = value.Time
			}
		case companydocument.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deletedAt", values[i])
			} else if value.Valid {
				cd.DeletedAt = new(time.Time)
				*cd.DeletedAt = value.Time
			}
		case companydocument.FieldFilename:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field filename", values[i])
			} else if value.Valid {
				cd.Filename = value.String
			}
		case companydocument.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				cd.Title = value.String
			}
		case companydocument.FieldKeywords:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field keywords", values[i])
			} else if value.Valid {
				cd.Keywords = value.String
			}
		case companydocument.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				cd.Category = companydocument.Category(value.String)
			}
		case companydocument.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				cd.Size = int(value.Int64)
			}
		case companydocument.FieldFileType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fileType", values[i])
			} else if value.Valid {
				cd.FileType = new(string)
				*cd.FileType = value.String
			}
		case companydocument.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				cd.Status = companydocument.Status(value.String)
			}
		case companydocument.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				cd.URL = value.String
			}
		case companydocument.FieldStorageURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field storageURI", values[i])
			} else if value.Valid {
				cd.StorageURI = value.String
			}
		case companydocument.FieldThumbnail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field thumbnail", values[i])
			} else if value.Valid {
				cd.Thumbnail = new(string)
				*cd.Thumbnail = value.String
			}
		case companydocument.FieldExpiryDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiryDate", values[i])
			} else if value.Valid {
				cd.ExpiryDate = new(time.Time)
				*cd.ExpiryDate = value.Time
			}
		case companydocument.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field company_documents", value)
			} else if value.Valid {
				cd.company_documents = new(int)
				*cd.company_documents = int(value.Int64)
			}
		case companydocument.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_uploaded_documents", value)
			} else if value.Valid {
				cd.user_uploaded_documents = new(int)
				*cd.user_uploaded_documents = int(value.Int64)
			}
		case companydocument.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_approved_documents", value)
			} else if value.Valid {
				cd.user_approved_documents = new(int)
				*cd.user_approved_documents = int(value.Int64)
			}
		default:
			cd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CompanyDocument.
// This includes values selected through modifiers, order, etc.
func (cd *CompanyDocument) Value(name string) (ent.Value, error) {
	return cd.selectValues.Get(name)
}

// QueryCompany queries the "company" edge of the CompanyDocument entity.
func (cd *CompanyDocument) QueryCompany() *CompanyQuery {
	return NewCompanyDocumentClient(cd.config).QueryCompany(cd)
}

// QueryUploadedBy queries the "uploadedBy" edge of the CompanyDocument entity.
func (cd *CompanyDocument) QueryUploadedBy() *UserQuery {
	return NewCompanyDocumentClient(cd.config).QueryUploadedBy(cd)
}

// QueryApprovedBy queries the "approvedBy" edge of the CompanyDocument entity.
func (cd *CompanyDocument) QueryApprovedBy() *UserQuery {
	return NewCompanyDocumentClient(cd.config).QueryApprovedBy(cd)
}

// Update returns a builder for updating this CompanyDocument.
// Note that you need to call CompanyDocument.Unwrap() before calling this method if this CompanyDocument
// was returned from a transaction, and the transaction was committed or rolled back.
func (cd *CompanyDocument) Update() *CompanyDocumentUpdateOne {
	return NewCompanyDocumentClient(cd.config).UpdateOne(cd)
}

// Unwrap unwraps the CompanyDocument entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cd *CompanyDocument) Unwrap() *CompanyDocument {
	_tx, ok := cd.config.driver.(*txDriver)
	if !ok {
		panic("generated: CompanyDocument is not a transactional entity")
	}
	cd.config.driver = _tx.drv
	return cd
}

// String implements the fmt.Stringer.
func (cd *CompanyDocument) String() string {
	var builder strings.Builder
	builder.WriteString("CompanyDocument(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cd.ID))
	builder.WriteString("createdAt=")
	builder.WriteString(cd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(cd.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := cd.DeletedAt; v != nil {
		builder.WriteString("deletedAt=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("filename=")
	builder.WriteString(cd.Filename)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(cd.Title)
	builder.WriteString(", ")
	builder.WriteString("keywords=")
	builder.WriteString(cd.Keywords)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(fmt.Sprintf("%v", cd.Category))
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", cd.Size))
	builder.WriteString(", ")
	if v := cd.FileType; v != nil {
		builder.WriteString("fileType=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", cd.Status))
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(cd.URL)
	builder.WriteString(", ")
	builder.WriteString("storageURI=<sensitive>")
	builder.WriteString(", ")
	if v := cd.Thumbnail; v != nil {
		builder.WriteString("thumbnail=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := cd.ExpiryDate; v != nil {
		builder.WriteString("expiryDate=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// CompanyDocuments is a parsable slice of CompanyDocument.
type CompanyDocuments []*CompanyDocument
