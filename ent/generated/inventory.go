// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"mazza/ent/generated/company"
	"mazza/ent/generated/inventory"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Inventory is the model entity for the Inventory schema.
type Inventory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// DeletedAt holds the value of the "deletedAt" field.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Category holds the value of the "category" field.
	Category inventory.Category `json:"category,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity float64 `json:"quantity,omitempty"`
	// Unit of measurement. E.g. litre, unit, gram
	Unit string `json:"unit,omitempty"`
	// MinimumLevel holds the value of the "minimumLevel" field.
	MinimumLevel float64 `json:"minimumLevel,omitempty"`
	// CurrentValue holds the value of the "currentValue" field.
	CurrentValue float64 `json:"currentValue,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes string `json:"notes,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InventoryQuery when eager-loading is set.
	Edges             InventoryEdges `json:"edges"`
	company_inventory *int
	selectValues      sql.SelectValues
}

// InventoryEdges holds the relations/edges for other nodes in the graph.
type InventoryEdges struct {
	// Company holds the value of the company edge.
	Company *Company `json:"company,omitempty"`
	// Movements holds the value of the movements edge.
	Movements []*InventoryMovement `json:"movements,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedMovements map[string][]*InventoryMovement
}

// CompanyOrErr returns the Company value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InventoryEdges) CompanyOrErr() (*Company, error) {
	if e.Company != nil {
		return e.Company, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: company.Label}
	}
	return nil, &NotLoadedError{edge: "company"}
}

// MovementsOrErr returns the Movements value or an error if the edge
// was not loaded in eager-loading.
func (e InventoryEdges) MovementsOrErr() ([]*InventoryMovement, error) {
	if e.loadedTypes[1] {
		return e.Movements, nil
	}
	return nil, &NotLoadedError{edge: "movements"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Inventory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case inventory.FieldQuantity, inventory.FieldMinimumLevel, inventory.FieldCurrentValue:
			values[i] = new(sql.NullFloat64)
		case inventory.FieldID:
			values[i] = new(sql.NullInt64)
		case inventory.FieldName, inventory.FieldCategory, inventory.FieldUnit, inventory.FieldNotes:
			values[i] = new(sql.NullString)
		case inventory.FieldCreatedAt, inventory.FieldUpdatedAt, inventory.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case inventory.ForeignKeys[0]: // company_inventory
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Inventory fields.
func (i *Inventory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case inventory.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case inventory.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case inventory.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[j])
			} else if value.Valid {
				i.UpdatedAt = value.Time
			}
		case inventory.FieldDeletedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deletedAt", values[j])
			} else if value.Valid {
				i.DeletedAt = new(time.Time)
				*i.DeletedAt = value.Time
			}
		case inventory.FieldName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[j])
			} else if value.Valid {
				i.Name = value.String
			}
		case inventory.FieldCategory:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[j])
			} else if value.Valid {
				i.Category = inventory.Category(value.String)
			}
		case inventory.FieldQuantity:
			if value, ok := values[j].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[j])
			} else if value.Valid {
				i.Quantity = value.Float64
			}
		case inventory.FieldUnit:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unit", values[j])
			} else if value.Valid {
				i.Unit = value.String
			}
		case inventory.FieldMinimumLevel:
			if value, ok := values[j].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field minimumLevel", values[j])
			} else if value.Valid {
				i.MinimumLevel = value.Float64
			}
		case inventory.FieldCurrentValue:
			if value, ok := values[j].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field currentValue", values[j])
			} else if value.Valid {
				i.CurrentValue = value.Float64
			}
		case inventory.FieldNotes:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[j])
			} else if value.Valid {
				i.Notes = value.String
			}
		case inventory.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field company_inventory", value)
			} else if value.Valid {
				i.company_inventory = new(int)
				*i.company_inventory = int(value.Int64)
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Inventory.
// This includes values selected through modifiers, order, etc.
func (i *Inventory) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryCompany queries the "company" edge of the Inventory entity.
func (i *Inventory) QueryCompany() *CompanyQuery {
	return NewInventoryClient(i.config).QueryCompany(i)
}

// QueryMovements queries the "movements" edge of the Inventory entity.
func (i *Inventory) QueryMovements() *InventoryMovementQuery {
	return NewInventoryClient(i.config).QueryMovements(i)
}

// Update returns a builder for updating this Inventory.
// Note that you need to call Inventory.Unwrap() before calling this method if this Inventory
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Inventory) Update() *InventoryUpdateOne {
	return NewInventoryClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Inventory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Inventory) Unwrap() *Inventory {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("generated: Inventory is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Inventory) String() string {
	var builder strings.Builder
	builder.WriteString("Inventory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("createdAt=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(i.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := i.DeletedAt; v != nil {
		builder.WriteString("deletedAt=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(i.Name)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(fmt.Sprintf("%v", i.Category))
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", i.Quantity))
	builder.WriteString(", ")
	builder.WriteString("unit=")
	builder.WriteString(i.Unit)
	builder.WriteString(", ")
	builder.WriteString("minimumLevel=")
	builder.WriteString(fmt.Sprintf("%v", i.MinimumLevel))
	builder.WriteString(", ")
	builder.WriteString("currentValue=")
	builder.WriteString(fmt.Sprintf("%v", i.CurrentValue))
	builder.WriteString(", ")
	builder.WriteString("notes=")
	builder.WriteString(i.Notes)
	builder.WriteByte(')')
	return builder.String()
}

// NamedMovements returns the Movements named value or an error if the edge was not
// loaded in eager-loading with this name.
func (i *Inventory) NamedMovements(name string) ([]*InventoryMovement, error) {
	if i.Edges.namedMovements == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := i.Edges.namedMovements[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (i *Inventory) appendNamedMovements(name string, edges ...*InventoryMovement) {
	if i.Edges.namedMovements == nil {
		i.Edges.namedMovements = make(map[string][]*InventoryMovement)
	}
	if len(edges) == 0 {
		i.Edges.namedMovements[name] = []*InventoryMovement{}
	} else {
		i.Edges.namedMovements[name] = append(i.Edges.namedMovements[name], edges...)
	}
}

// Inventories is a parsable slice of Inventory.
type Inventories []*Inventory
