// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"mazza/ent/generated/project"
	"mazza/ent/generated/projectmilestone"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProjectMilestone is the model entity for the ProjectMilestone schema.
type ProjectMilestone struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// DueDate holds the value of the "dueDate" field.
	DueDate time.Time `json:"dueDate,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectMilestoneQuery when eager-loading is set.
	Edges              ProjectMilestoneEdges `json:"edges"`
	project_milestones *int
	selectValues       sql.SelectValues
}

// ProjectMilestoneEdges holds the relations/edges for other nodes in the graph.
type ProjectMilestoneEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectMilestoneEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProjectMilestone) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case projectmilestone.FieldID:
			values[i] = new(sql.NullInt64)
		case projectmilestone.FieldName:
			values[i] = new(sql.NullString)
		case projectmilestone.FieldDueDate:
			values[i] = new(sql.NullTime)
		case projectmilestone.ForeignKeys[0]: // project_milestones
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProjectMilestone fields.
func (pm *ProjectMilestone) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case projectmilestone.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pm.ID = int(value.Int64)
		case projectmilestone.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pm.Name = value.String
			}
		case projectmilestone.FieldDueDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field dueDate", values[i])
			} else if value.Valid {
				pm.DueDate = value.Time
			}
		case projectmilestone.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field project_milestones", value)
			} else if value.Valid {
				pm.project_milestones = new(int)
				*pm.project_milestones = int(value.Int64)
			}
		default:
			pm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProjectMilestone.
// This includes values selected through modifiers, order, etc.
func (pm *ProjectMilestone) Value(name string) (ent.Value, error) {
	return pm.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the ProjectMilestone entity.
func (pm *ProjectMilestone) QueryProject() *ProjectQuery {
	return NewProjectMilestoneClient(pm.config).QueryProject(pm)
}

// Update returns a builder for updating this ProjectMilestone.
// Note that you need to call ProjectMilestone.Unwrap() before calling this method if this ProjectMilestone
// was returned from a transaction, and the transaction was committed or rolled back.
func (pm *ProjectMilestone) Update() *ProjectMilestoneUpdateOne {
	return NewProjectMilestoneClient(pm.config).UpdateOne(pm)
}

// Unwrap unwraps the ProjectMilestone entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pm *ProjectMilestone) Unwrap() *ProjectMilestone {
	_tx, ok := pm.config.driver.(*txDriver)
	if !ok {
		panic("generated: ProjectMilestone is not a transactional entity")
	}
	pm.config.driver = _tx.drv
	return pm
}

// String implements the fmt.Stringer.
func (pm *ProjectMilestone) String() string {
	var builder strings.Builder
	builder.WriteString("ProjectMilestone(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pm.ID))
	builder.WriteString("name=")
	builder.WriteString(pm.Name)
	builder.WriteString(", ")
	builder.WriteString("dueDate=")
	builder.WriteString(pm.DueDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProjectMilestones is a parsable slice of ProjectMilestone.
type ProjectMilestones []*ProjectMilestone
