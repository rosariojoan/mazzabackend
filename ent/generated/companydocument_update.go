// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"mazza/ent/generated/company"
	"mazza/ent/generated/companydocument"
	"mazza/ent/generated/predicate"
	"mazza/ent/generated/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CompanyDocumentUpdate is the builder for updating CompanyDocument entities.
type CompanyDocumentUpdate struct {
	config
	hooks     []Hook
	mutation  *CompanyDocumentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CompanyDocumentUpdate builder.
func (cdu *CompanyDocumentUpdate) Where(ps ...predicate.CompanyDocument) *CompanyDocumentUpdate {
	cdu.mutation.Where(ps...)
	return cdu
}

// SetUpdatedAt sets the "updatedAt" field.
func (cdu *CompanyDocumentUpdate) SetUpdatedAt(t time.Time) *CompanyDocumentUpdate {
	cdu.mutation.SetUpdatedAt(t)
	return cdu
}

// SetDeletedAt sets the "deletedAt" field.
func (cdu *CompanyDocumentUpdate) SetDeletedAt(t time.Time) *CompanyDocumentUpdate {
	cdu.mutation.SetDeletedAt(t)
	return cdu
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (cdu *CompanyDocumentUpdate) SetNillableDeletedAt(t *time.Time) *CompanyDocumentUpdate {
	if t != nil {
		cdu.SetDeletedAt(*t)
	}
	return cdu
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (cdu *CompanyDocumentUpdate) ClearDeletedAt() *CompanyDocumentUpdate {
	cdu.mutation.ClearDeletedAt()
	return cdu
}

// SetFilename sets the "filename" field.
func (cdu *CompanyDocumentUpdate) SetFilename(s string) *CompanyDocumentUpdate {
	cdu.mutation.SetFilename(s)
	return cdu
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (cdu *CompanyDocumentUpdate) SetNillableFilename(s *string) *CompanyDocumentUpdate {
	if s != nil {
		cdu.SetFilename(*s)
	}
	return cdu
}

// SetTitle sets the "title" field.
func (cdu *CompanyDocumentUpdate) SetTitle(s string) *CompanyDocumentUpdate {
	cdu.mutation.SetTitle(s)
	return cdu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cdu *CompanyDocumentUpdate) SetNillableTitle(s *string) *CompanyDocumentUpdate {
	if s != nil {
		cdu.SetTitle(*s)
	}
	return cdu
}

// SetKeywords sets the "keywords" field.
func (cdu *CompanyDocumentUpdate) SetKeywords(s string) *CompanyDocumentUpdate {
	cdu.mutation.SetKeywords(s)
	return cdu
}

// SetNillableKeywords sets the "keywords" field if the given value is not nil.
func (cdu *CompanyDocumentUpdate) SetNillableKeywords(s *string) *CompanyDocumentUpdate {
	if s != nil {
		cdu.SetKeywords(*s)
	}
	return cdu
}

// SetCategory sets the "category" field.
func (cdu *CompanyDocumentUpdate) SetCategory(c companydocument.Category) *CompanyDocumentUpdate {
	cdu.mutation.SetCategory(c)
	return cdu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (cdu *CompanyDocumentUpdate) SetNillableCategory(c *companydocument.Category) *CompanyDocumentUpdate {
	if c != nil {
		cdu.SetCategory(*c)
	}
	return cdu
}

// SetSize sets the "size" field.
func (cdu *CompanyDocumentUpdate) SetSize(i int) *CompanyDocumentUpdate {
	cdu.mutation.ResetSize()
	cdu.mutation.SetSize(i)
	return cdu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (cdu *CompanyDocumentUpdate) SetNillableSize(i *int) *CompanyDocumentUpdate {
	if i != nil {
		cdu.SetSize(*i)
	}
	return cdu
}

// AddSize adds i to the "size" field.
func (cdu *CompanyDocumentUpdate) AddSize(i int) *CompanyDocumentUpdate {
	cdu.mutation.AddSize(i)
	return cdu
}

// SetFileType sets the "fileType" field.
func (cdu *CompanyDocumentUpdate) SetFileType(s string) *CompanyDocumentUpdate {
	cdu.mutation.SetFileType(s)
	return cdu
}

// SetNillableFileType sets the "fileType" field if the given value is not nil.
func (cdu *CompanyDocumentUpdate) SetNillableFileType(s *string) *CompanyDocumentUpdate {
	if s != nil {
		cdu.SetFileType(*s)
	}
	return cdu
}

// SetStatus sets the "status" field.
func (cdu *CompanyDocumentUpdate) SetStatus(c companydocument.Status) *CompanyDocumentUpdate {
	cdu.mutation.SetStatus(c)
	return cdu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cdu *CompanyDocumentUpdate) SetNillableStatus(c *companydocument.Status) *CompanyDocumentUpdate {
	if c != nil {
		cdu.SetStatus(*c)
	}
	return cdu
}

// SetURL sets the "url" field.
func (cdu *CompanyDocumentUpdate) SetURL(s string) *CompanyDocumentUpdate {
	cdu.mutation.SetURL(s)
	return cdu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (cdu *CompanyDocumentUpdate) SetNillableURL(s *string) *CompanyDocumentUpdate {
	if s != nil {
		cdu.SetURL(*s)
	}
	return cdu
}

// SetStorageURI sets the "storageURI" field.
func (cdu *CompanyDocumentUpdate) SetStorageURI(s string) *CompanyDocumentUpdate {
	cdu.mutation.SetStorageURI(s)
	return cdu
}

// SetNillableStorageURI sets the "storageURI" field if the given value is not nil.
func (cdu *CompanyDocumentUpdate) SetNillableStorageURI(s *string) *CompanyDocumentUpdate {
	if s != nil {
		cdu.SetStorageURI(*s)
	}
	return cdu
}

// SetThumbnail sets the "thumbnail" field.
func (cdu *CompanyDocumentUpdate) SetThumbnail(s string) *CompanyDocumentUpdate {
	cdu.mutation.SetThumbnail(s)
	return cdu
}

// SetNillableThumbnail sets the "thumbnail" field if the given value is not nil.
func (cdu *CompanyDocumentUpdate) SetNillableThumbnail(s *string) *CompanyDocumentUpdate {
	if s != nil {
		cdu.SetThumbnail(*s)
	}
	return cdu
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (cdu *CompanyDocumentUpdate) ClearThumbnail() *CompanyDocumentUpdate {
	cdu.mutation.ClearThumbnail()
	return cdu
}

// SetExpiryDate sets the "expiryDate" field.
func (cdu *CompanyDocumentUpdate) SetExpiryDate(t time.Time) *CompanyDocumentUpdate {
	cdu.mutation.SetExpiryDate(t)
	return cdu
}

// SetNillableExpiryDate sets the "expiryDate" field if the given value is not nil.
func (cdu *CompanyDocumentUpdate) SetNillableExpiryDate(t *time.Time) *CompanyDocumentUpdate {
	if t != nil {
		cdu.SetExpiryDate(*t)
	}
	return cdu
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (cdu *CompanyDocumentUpdate) SetCompanyID(id int) *CompanyDocumentUpdate {
	cdu.mutation.SetCompanyID(id)
	return cdu
}

// SetCompany sets the "company" edge to the Company entity.
func (cdu *CompanyDocumentUpdate) SetCompany(c *Company) *CompanyDocumentUpdate {
	return cdu.SetCompanyID(c.ID)
}

// SetUploadedByID sets the "uploadedBy" edge to the User entity by ID.
func (cdu *CompanyDocumentUpdate) SetUploadedByID(id int) *CompanyDocumentUpdate {
	cdu.mutation.SetUploadedByID(id)
	return cdu
}

// SetNillableUploadedByID sets the "uploadedBy" edge to the User entity by ID if the given value is not nil.
func (cdu *CompanyDocumentUpdate) SetNillableUploadedByID(id *int) *CompanyDocumentUpdate {
	if id != nil {
		cdu = cdu.SetUploadedByID(*id)
	}
	return cdu
}

// SetUploadedBy sets the "uploadedBy" edge to the User entity.
func (cdu *CompanyDocumentUpdate) SetUploadedBy(u *User) *CompanyDocumentUpdate {
	return cdu.SetUploadedByID(u.ID)
}

// SetApprovedByID sets the "approvedBy" edge to the User entity by ID.
func (cdu *CompanyDocumentUpdate) SetApprovedByID(id int) *CompanyDocumentUpdate {
	cdu.mutation.SetApprovedByID(id)
	return cdu
}

// SetNillableApprovedByID sets the "approvedBy" edge to the User entity by ID if the given value is not nil.
func (cdu *CompanyDocumentUpdate) SetNillableApprovedByID(id *int) *CompanyDocumentUpdate {
	if id != nil {
		cdu = cdu.SetApprovedByID(*id)
	}
	return cdu
}

// SetApprovedBy sets the "approvedBy" edge to the User entity.
func (cdu *CompanyDocumentUpdate) SetApprovedBy(u *User) *CompanyDocumentUpdate {
	return cdu.SetApprovedByID(u.ID)
}

// Mutation returns the CompanyDocumentMutation object of the builder.
func (cdu *CompanyDocumentUpdate) Mutation() *CompanyDocumentMutation {
	return cdu.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (cdu *CompanyDocumentUpdate) ClearCompany() *CompanyDocumentUpdate {
	cdu.mutation.ClearCompany()
	return cdu
}

// ClearUploadedBy clears the "uploadedBy" edge to the User entity.
func (cdu *CompanyDocumentUpdate) ClearUploadedBy() *CompanyDocumentUpdate {
	cdu.mutation.ClearUploadedBy()
	return cdu
}

// ClearApprovedBy clears the "approvedBy" edge to the User entity.
func (cdu *CompanyDocumentUpdate) ClearApprovedBy() *CompanyDocumentUpdate {
	cdu.mutation.ClearApprovedBy()
	return cdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cdu *CompanyDocumentUpdate) Save(ctx context.Context) (int, error) {
	cdu.defaults()
	return withHooks(ctx, cdu.sqlSave, cdu.mutation, cdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cdu *CompanyDocumentUpdate) SaveX(ctx context.Context) int {
	affected, err := cdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cdu *CompanyDocumentUpdate) Exec(ctx context.Context) error {
	_, err := cdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdu *CompanyDocumentUpdate) ExecX(ctx context.Context) {
	if err := cdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cdu *CompanyDocumentUpdate) defaults() {
	if _, ok := cdu.mutation.UpdatedAt(); !ok {
		v := companydocument.UpdateDefaultUpdatedAt()
		cdu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cdu *CompanyDocumentUpdate) check() error {
	if v, ok := cdu.mutation.Filename(); ok {
		if err := companydocument.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`generated: validator failed for field "CompanyDocument.filename": %w`, err)}
		}
	}
	if v, ok := cdu.mutation.Title(); ok {
		if err := companydocument.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`generated: validator failed for field "CompanyDocument.title": %w`, err)}
		}
	}
	if v, ok := cdu.mutation.Keywords(); ok {
		if err := companydocument.KeywordsValidator(v); err != nil {
			return &ValidationError{Name: "keywords", err: fmt.Errorf(`generated: validator failed for field "CompanyDocument.keywords": %w`, err)}
		}
	}
	if v, ok := cdu.mutation.Category(); ok {
		if err := companydocument.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`generated: validator failed for field "CompanyDocument.category": %w`, err)}
		}
	}
	if v, ok := cdu.mutation.Size(); ok {
		if err := companydocument.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`generated: validator failed for field "CompanyDocument.size": %w`, err)}
		}
	}
	if v, ok := cdu.mutation.Status(); ok {
		if err := companydocument.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "CompanyDocument.status": %w`, err)}
		}
	}
	if v, ok := cdu.mutation.URL(); ok {
		if err := companydocument.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`generated: validator failed for field "CompanyDocument.url": %w`, err)}
		}
	}
	if v, ok := cdu.mutation.StorageURI(); ok {
		if err := companydocument.StorageURIValidator(v); err != nil {
			return &ValidationError{Name: "storageURI", err: fmt.Errorf(`generated: validator failed for field "CompanyDocument.storageURI": %w`, err)}
		}
	}
	if cdu.mutation.CompanyCleared() && len(cdu.mutation.CompanyIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "CompanyDocument.company"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cdu *CompanyDocumentUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CompanyDocumentUpdate {
	cdu.modifiers = append(cdu.modifiers, modifiers...)
	return cdu
}

func (cdu *CompanyDocumentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(companydocument.Table, companydocument.Columns, sqlgraph.NewFieldSpec(companydocument.FieldID, field.TypeInt))
	if ps := cdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cdu.mutation.UpdatedAt(); ok {
		_spec.SetField(companydocument.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cdu.mutation.DeletedAt(); ok {
		_spec.SetField(companydocument.FieldDeletedAt, field.TypeTime, value)
	}
	if cdu.mutation.DeletedAtCleared() {
		_spec.ClearField(companydocument.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cdu.mutation.Filename(); ok {
		_spec.SetField(companydocument.FieldFilename, field.TypeString, value)
	}
	if value, ok := cdu.mutation.Title(); ok {
		_spec.SetField(companydocument.FieldTitle, field.TypeString, value)
	}
	if value, ok := cdu.mutation.Keywords(); ok {
		_spec.SetField(companydocument.FieldKeywords, field.TypeString, value)
	}
	if value, ok := cdu.mutation.Category(); ok {
		_spec.SetField(companydocument.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := cdu.mutation.Size(); ok {
		_spec.SetField(companydocument.FieldSize, field.TypeInt, value)
	}
	if value, ok := cdu.mutation.AddedSize(); ok {
		_spec.AddField(companydocument.FieldSize, field.TypeInt, value)
	}
	if value, ok := cdu.mutation.FileType(); ok {
		_spec.SetField(companydocument.FieldFileType, field.TypeString, value)
	}
	if value, ok := cdu.mutation.Status(); ok {
		_spec.SetField(companydocument.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := cdu.mutation.URL(); ok {
		_spec.SetField(companydocument.FieldURL, field.TypeString, value)
	}
	if value, ok := cdu.mutation.StorageURI(); ok {
		_spec.SetField(companydocument.FieldStorageURI, field.TypeString, value)
	}
	if value, ok := cdu.mutation.Thumbnail(); ok {
		_spec.SetField(companydocument.FieldThumbnail, field.TypeString, value)
	}
	if cdu.mutation.ThumbnailCleared() {
		_spec.ClearField(companydocument.FieldThumbnail, field.TypeString)
	}
	if value, ok := cdu.mutation.ExpiryDate(); ok {
		_spec.SetField(companydocument.FieldExpiryDate, field.TypeTime, value)
	}
	if cdu.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   companydocument.CompanyTable,
			Columns: []string{companydocument.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cdu.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   companydocument.CompanyTable,
			Columns: []string{companydocument.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cdu.mutation.UploadedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   companydocument.UploadedByTable,
			Columns: []string{companydocument.UploadedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cdu.mutation.UploadedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   companydocument.UploadedByTable,
			Columns: []string{companydocument.UploadedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cdu.mutation.ApprovedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   companydocument.ApprovedByTable,
			Columns: []string{companydocument.ApprovedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cdu.mutation.ApprovedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   companydocument.ApprovedByTable,
			Columns: []string{companydocument.ApprovedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cdu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{companydocument.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cdu.mutation.done = true
	return n, nil
}

// CompanyDocumentUpdateOne is the builder for updating a single CompanyDocument entity.
type CompanyDocumentUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CompanyDocumentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updatedAt" field.
func (cduo *CompanyDocumentUpdateOne) SetUpdatedAt(t time.Time) *CompanyDocumentUpdateOne {
	cduo.mutation.SetUpdatedAt(t)
	return cduo
}

// SetDeletedAt sets the "deletedAt" field.
func (cduo *CompanyDocumentUpdateOne) SetDeletedAt(t time.Time) *CompanyDocumentUpdateOne {
	cduo.mutation.SetDeletedAt(t)
	return cduo
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (cduo *CompanyDocumentUpdateOne) SetNillableDeletedAt(t *time.Time) *CompanyDocumentUpdateOne {
	if t != nil {
		cduo.SetDeletedAt(*t)
	}
	return cduo
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (cduo *CompanyDocumentUpdateOne) ClearDeletedAt() *CompanyDocumentUpdateOne {
	cduo.mutation.ClearDeletedAt()
	return cduo
}

// SetFilename sets the "filename" field.
func (cduo *CompanyDocumentUpdateOne) SetFilename(s string) *CompanyDocumentUpdateOne {
	cduo.mutation.SetFilename(s)
	return cduo
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (cduo *CompanyDocumentUpdateOne) SetNillableFilename(s *string) *CompanyDocumentUpdateOne {
	if s != nil {
		cduo.SetFilename(*s)
	}
	return cduo
}

// SetTitle sets the "title" field.
func (cduo *CompanyDocumentUpdateOne) SetTitle(s string) *CompanyDocumentUpdateOne {
	cduo.mutation.SetTitle(s)
	return cduo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cduo *CompanyDocumentUpdateOne) SetNillableTitle(s *string) *CompanyDocumentUpdateOne {
	if s != nil {
		cduo.SetTitle(*s)
	}
	return cduo
}

// SetKeywords sets the "keywords" field.
func (cduo *CompanyDocumentUpdateOne) SetKeywords(s string) *CompanyDocumentUpdateOne {
	cduo.mutation.SetKeywords(s)
	return cduo
}

// SetNillableKeywords sets the "keywords" field if the given value is not nil.
func (cduo *CompanyDocumentUpdateOne) SetNillableKeywords(s *string) *CompanyDocumentUpdateOne {
	if s != nil {
		cduo.SetKeywords(*s)
	}
	return cduo
}

// SetCategory sets the "category" field.
func (cduo *CompanyDocumentUpdateOne) SetCategory(c companydocument.Category) *CompanyDocumentUpdateOne {
	cduo.mutation.SetCategory(c)
	return cduo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (cduo *CompanyDocumentUpdateOne) SetNillableCategory(c *companydocument.Category) *CompanyDocumentUpdateOne {
	if c != nil {
		cduo.SetCategory(*c)
	}
	return cduo
}

// SetSize sets the "size" field.
func (cduo *CompanyDocumentUpdateOne) SetSize(i int) *CompanyDocumentUpdateOne {
	cduo.mutation.ResetSize()
	cduo.mutation.SetSize(i)
	return cduo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (cduo *CompanyDocumentUpdateOne) SetNillableSize(i *int) *CompanyDocumentUpdateOne {
	if i != nil {
		cduo.SetSize(*i)
	}
	return cduo
}

// AddSize adds i to the "size" field.
func (cduo *CompanyDocumentUpdateOne) AddSize(i int) *CompanyDocumentUpdateOne {
	cduo.mutation.AddSize(i)
	return cduo
}

// SetFileType sets the "fileType" field.
func (cduo *CompanyDocumentUpdateOne) SetFileType(s string) *CompanyDocumentUpdateOne {
	cduo.mutation.SetFileType(s)
	return cduo
}

// SetNillableFileType sets the "fileType" field if the given value is not nil.
func (cduo *CompanyDocumentUpdateOne) SetNillableFileType(s *string) *CompanyDocumentUpdateOne {
	if s != nil {
		cduo.SetFileType(*s)
	}
	return cduo
}

// SetStatus sets the "status" field.
func (cduo *CompanyDocumentUpdateOne) SetStatus(c companydocument.Status) *CompanyDocumentUpdateOne {
	cduo.mutation.SetStatus(c)
	return cduo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cduo *CompanyDocumentUpdateOne) SetNillableStatus(c *companydocument.Status) *CompanyDocumentUpdateOne {
	if c != nil {
		cduo.SetStatus(*c)
	}
	return cduo
}

// SetURL sets the "url" field.
func (cduo *CompanyDocumentUpdateOne) SetURL(s string) *CompanyDocumentUpdateOne {
	cduo.mutation.SetURL(s)
	return cduo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (cduo *CompanyDocumentUpdateOne) SetNillableURL(s *string) *CompanyDocumentUpdateOne {
	if s != nil {
		cduo.SetURL(*s)
	}
	return cduo
}

// SetStorageURI sets the "storageURI" field.
func (cduo *CompanyDocumentUpdateOne) SetStorageURI(s string) *CompanyDocumentUpdateOne {
	cduo.mutation.SetStorageURI(s)
	return cduo
}

// SetNillableStorageURI sets the "storageURI" field if the given value is not nil.
func (cduo *CompanyDocumentUpdateOne) SetNillableStorageURI(s *string) *CompanyDocumentUpdateOne {
	if s != nil {
		cduo.SetStorageURI(*s)
	}
	return cduo
}

// SetThumbnail sets the "thumbnail" field.
func (cduo *CompanyDocumentUpdateOne) SetThumbnail(s string) *CompanyDocumentUpdateOne {
	cduo.mutation.SetThumbnail(s)
	return cduo
}

// SetNillableThumbnail sets the "thumbnail" field if the given value is not nil.
func (cduo *CompanyDocumentUpdateOne) SetNillableThumbnail(s *string) *CompanyDocumentUpdateOne {
	if s != nil {
		cduo.SetThumbnail(*s)
	}
	return cduo
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (cduo *CompanyDocumentUpdateOne) ClearThumbnail() *CompanyDocumentUpdateOne {
	cduo.mutation.ClearThumbnail()
	return cduo
}

// SetExpiryDate sets the "expiryDate" field.
func (cduo *CompanyDocumentUpdateOne) SetExpiryDate(t time.Time) *CompanyDocumentUpdateOne {
	cduo.mutation.SetExpiryDate(t)
	return cduo
}

// SetNillableExpiryDate sets the "expiryDate" field if the given value is not nil.
func (cduo *CompanyDocumentUpdateOne) SetNillableExpiryDate(t *time.Time) *CompanyDocumentUpdateOne {
	if t != nil {
		cduo.SetExpiryDate(*t)
	}
	return cduo
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (cduo *CompanyDocumentUpdateOne) SetCompanyID(id int) *CompanyDocumentUpdateOne {
	cduo.mutation.SetCompanyID(id)
	return cduo
}

// SetCompany sets the "company" edge to the Company entity.
func (cduo *CompanyDocumentUpdateOne) SetCompany(c *Company) *CompanyDocumentUpdateOne {
	return cduo.SetCompanyID(c.ID)
}

// SetUploadedByID sets the "uploadedBy" edge to the User entity by ID.
func (cduo *CompanyDocumentUpdateOne) SetUploadedByID(id int) *CompanyDocumentUpdateOne {
	cduo.mutation.SetUploadedByID(id)
	return cduo
}

// SetNillableUploadedByID sets the "uploadedBy" edge to the User entity by ID if the given value is not nil.
func (cduo *CompanyDocumentUpdateOne) SetNillableUploadedByID(id *int) *CompanyDocumentUpdateOne {
	if id != nil {
		cduo = cduo.SetUploadedByID(*id)
	}
	return cduo
}

// SetUploadedBy sets the "uploadedBy" edge to the User entity.
func (cduo *CompanyDocumentUpdateOne) SetUploadedBy(u *User) *CompanyDocumentUpdateOne {
	return cduo.SetUploadedByID(u.ID)
}

// SetApprovedByID sets the "approvedBy" edge to the User entity by ID.
func (cduo *CompanyDocumentUpdateOne) SetApprovedByID(id int) *CompanyDocumentUpdateOne {
	cduo.mutation.SetApprovedByID(id)
	return cduo
}

// SetNillableApprovedByID sets the "approvedBy" edge to the User entity by ID if the given value is not nil.
func (cduo *CompanyDocumentUpdateOne) SetNillableApprovedByID(id *int) *CompanyDocumentUpdateOne {
	if id != nil {
		cduo = cduo.SetApprovedByID(*id)
	}
	return cduo
}

// SetApprovedBy sets the "approvedBy" edge to the User entity.
func (cduo *CompanyDocumentUpdateOne) SetApprovedBy(u *User) *CompanyDocumentUpdateOne {
	return cduo.SetApprovedByID(u.ID)
}

// Mutation returns the CompanyDocumentMutation object of the builder.
func (cduo *CompanyDocumentUpdateOne) Mutation() *CompanyDocumentMutation {
	return cduo.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (cduo *CompanyDocumentUpdateOne) ClearCompany() *CompanyDocumentUpdateOne {
	cduo.mutation.ClearCompany()
	return cduo
}

// ClearUploadedBy clears the "uploadedBy" edge to the User entity.
func (cduo *CompanyDocumentUpdateOne) ClearUploadedBy() *CompanyDocumentUpdateOne {
	cduo.mutation.ClearUploadedBy()
	return cduo
}

// ClearApprovedBy clears the "approvedBy" edge to the User entity.
func (cduo *CompanyDocumentUpdateOne) ClearApprovedBy() *CompanyDocumentUpdateOne {
	cduo.mutation.ClearApprovedBy()
	return cduo
}

// Where appends a list predicates to the CompanyDocumentUpdate builder.
func (cduo *CompanyDocumentUpdateOne) Where(ps ...predicate.CompanyDocument) *CompanyDocumentUpdateOne {
	cduo.mutation.Where(ps...)
	return cduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cduo *CompanyDocumentUpdateOne) Select(field string, fields ...string) *CompanyDocumentUpdateOne {
	cduo.fields = append([]string{field}, fields...)
	return cduo
}

// Save executes the query and returns the updated CompanyDocument entity.
func (cduo *CompanyDocumentUpdateOne) Save(ctx context.Context) (*CompanyDocument, error) {
	cduo.defaults()
	return withHooks(ctx, cduo.sqlSave, cduo.mutation, cduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cduo *CompanyDocumentUpdateOne) SaveX(ctx context.Context) *CompanyDocument {
	node, err := cduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cduo *CompanyDocumentUpdateOne) Exec(ctx context.Context) error {
	_, err := cduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cduo *CompanyDocumentUpdateOne) ExecX(ctx context.Context) {
	if err := cduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cduo *CompanyDocumentUpdateOne) defaults() {
	if _, ok := cduo.mutation.UpdatedAt(); !ok {
		v := companydocument.UpdateDefaultUpdatedAt()
		cduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cduo *CompanyDocumentUpdateOne) check() error {
	if v, ok := cduo.mutation.Filename(); ok {
		if err := companydocument.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`generated: validator failed for field "CompanyDocument.filename": %w`, err)}
		}
	}
	if v, ok := cduo.mutation.Title(); ok {
		if err := companydocument.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`generated: validator failed for field "CompanyDocument.title": %w`, err)}
		}
	}
	if v, ok := cduo.mutation.Keywords(); ok {
		if err := companydocument.KeywordsValidator(v); err != nil {
			return &ValidationError{Name: "keywords", err: fmt.Errorf(`generated: validator failed for field "CompanyDocument.keywords": %w`, err)}
		}
	}
	if v, ok := cduo.mutation.Category(); ok {
		if err := companydocument.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`generated: validator failed for field "CompanyDocument.category": %w`, err)}
		}
	}
	if v, ok := cduo.mutation.Size(); ok {
		if err := companydocument.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`generated: validator failed for field "CompanyDocument.size": %w`, err)}
		}
	}
	if v, ok := cduo.mutation.Status(); ok {
		if err := companydocument.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "CompanyDocument.status": %w`, err)}
		}
	}
	if v, ok := cduo.mutation.URL(); ok {
		if err := companydocument.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`generated: validator failed for field "CompanyDocument.url": %w`, err)}
		}
	}
	if v, ok := cduo.mutation.StorageURI(); ok {
		if err := companydocument.StorageURIValidator(v); err != nil {
			return &ValidationError{Name: "storageURI", err: fmt.Errorf(`generated: validator failed for field "CompanyDocument.storageURI": %w`, err)}
		}
	}
	if cduo.mutation.CompanyCleared() && len(cduo.mutation.CompanyIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "CompanyDocument.company"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cduo *CompanyDocumentUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CompanyDocumentUpdateOne {
	cduo.modifiers = append(cduo.modifiers, modifiers...)
	return cduo
}

func (cduo *CompanyDocumentUpdateOne) sqlSave(ctx context.Context) (_node *CompanyDocument, err error) {
	if err := cduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(companydocument.Table, companydocument.Columns, sqlgraph.NewFieldSpec(companydocument.FieldID, field.TypeInt))
	id, ok := cduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "CompanyDocument.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, companydocument.FieldID)
		for _, f := range fields {
			if !companydocument.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != companydocument.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cduo.mutation.UpdatedAt(); ok {
		_spec.SetField(companydocument.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cduo.mutation.DeletedAt(); ok {
		_spec.SetField(companydocument.FieldDeletedAt, field.TypeTime, value)
	}
	if cduo.mutation.DeletedAtCleared() {
		_spec.ClearField(companydocument.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cduo.mutation.Filename(); ok {
		_spec.SetField(companydocument.FieldFilename, field.TypeString, value)
	}
	if value, ok := cduo.mutation.Title(); ok {
		_spec.SetField(companydocument.FieldTitle, field.TypeString, value)
	}
	if value, ok := cduo.mutation.Keywords(); ok {
		_spec.SetField(companydocument.FieldKeywords, field.TypeString, value)
	}
	if value, ok := cduo.mutation.Category(); ok {
		_spec.SetField(companydocument.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := cduo.mutation.Size(); ok {
		_spec.SetField(companydocument.FieldSize, field.TypeInt, value)
	}
	if value, ok := cduo.mutation.AddedSize(); ok {
		_spec.AddField(companydocument.FieldSize, field.TypeInt, value)
	}
	if value, ok := cduo.mutation.FileType(); ok {
		_spec.SetField(companydocument.FieldFileType, field.TypeString, value)
	}
	if value, ok := cduo.mutation.Status(); ok {
		_spec.SetField(companydocument.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := cduo.mutation.URL(); ok {
		_spec.SetField(companydocument.FieldURL, field.TypeString, value)
	}
	if value, ok := cduo.mutation.StorageURI(); ok {
		_spec.SetField(companydocument.FieldStorageURI, field.TypeString, value)
	}
	if value, ok := cduo.mutation.Thumbnail(); ok {
		_spec.SetField(companydocument.FieldThumbnail, field.TypeString, value)
	}
	if cduo.mutation.ThumbnailCleared() {
		_spec.ClearField(companydocument.FieldThumbnail, field.TypeString)
	}
	if value, ok := cduo.mutation.ExpiryDate(); ok {
		_spec.SetField(companydocument.FieldExpiryDate, field.TypeTime, value)
	}
	if cduo.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   companydocument.CompanyTable,
			Columns: []string{companydocument.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cduo.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   companydocument.CompanyTable,
			Columns: []string{companydocument.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cduo.mutation.UploadedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   companydocument.UploadedByTable,
			Columns: []string{companydocument.UploadedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cduo.mutation.UploadedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   companydocument.UploadedByTable,
			Columns: []string{companydocument.UploadedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cduo.mutation.ApprovedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   companydocument.ApprovedByTable,
			Columns: []string{companydocument.ApprovedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cduo.mutation.ApprovedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   companydocument.ApprovedByTable,
			Columns: []string{companydocument.ApprovedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cduo.modifiers...)
	_node = &CompanyDocument{config: cduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{companydocument.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cduo.mutation.done = true
	return _node, nil
}
