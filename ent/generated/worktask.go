// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"mazza/ent/generated/company"
	"mazza/ent/generated/user"
	"mazza/ent/generated/worktask"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Worktask is the model entity for the Worktask schema.
type Worktask struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// DeletedAt holds the value of the "deletedAt" field.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Status holds the value of the "status" field.
	Status worktask.Status `json:"status,omitempty"`
	// The content of this field should be a serialized slice of JSONs.
	// Each entry should hve the following fields: description: string, order: number, completed: bool, completedBy: {id: number, name: string}, completedAt: time
	Subtasks []string `json:"subtasks,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// StartTime holds the value of the "startTime" field.
	StartTime time.Time `json:"startTime,omitempty"`
	// EndTime holds the value of the "endTime" field.
	EndTime time.Time `json:"endTime,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorktaskQuery when eager-loading is set.
	Edges              WorktaskEdges `json:"edges"`
	company_work_tasks *int
	user_created_tasks *int
	selectValues       sql.SelectValues
}

// WorktaskEdges holds the relations/edges for other nodes in the graph.
type WorktaskEdges struct {
	// Company holds the value of the company edge.
	Company *Company `json:"company,omitempty"`
	// CreatedBy holds the value of the createdBy edge.
	CreatedBy *User `json:"createdBy,omitempty"`
	// AssignedTo holds the value of the assignedTo edge.
	AssignedTo []*Employee `json:"assignedTo,omitempty"`
	// WorkShifts holds the value of the workShifts edge.
	WorkShifts []*Workshift `json:"workShifts,omitempty"`
	// WorkTags holds the value of the workTags edge.
	WorkTags []*Worktag `json:"workTags,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [5]map[string]int

	namedAssignedTo map[string][]*Employee
	namedWorkShifts map[string][]*Workshift
	namedWorkTags   map[string][]*Worktag
}

// CompanyOrErr returns the Company value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorktaskEdges) CompanyOrErr() (*Company, error) {
	if e.Company != nil {
		return e.Company, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: company.Label}
	}
	return nil, &NotLoadedError{edge: "company"}
}

// CreatedByOrErr returns the CreatedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorktaskEdges) CreatedByOrErr() (*User, error) {
	if e.CreatedBy != nil {
		return e.CreatedBy, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "createdBy"}
}

// AssignedToOrErr returns the AssignedTo value or an error if the edge
// was not loaded in eager-loading.
func (e WorktaskEdges) AssignedToOrErr() ([]*Employee, error) {
	if e.loadedTypes[2] {
		return e.AssignedTo, nil
	}
	return nil, &NotLoadedError{edge: "assignedTo"}
}

// WorkShiftsOrErr returns the WorkShifts value or an error if the edge
// was not loaded in eager-loading.
func (e WorktaskEdges) WorkShiftsOrErr() ([]*Workshift, error) {
	if e.loadedTypes[3] {
		return e.WorkShifts, nil
	}
	return nil, &NotLoadedError{edge: "workShifts"}
}

// WorkTagsOrErr returns the WorkTags value or an error if the edge
// was not loaded in eager-loading.
func (e WorktaskEdges) WorkTagsOrErr() ([]*Worktag, error) {
	if e.loadedTypes[4] {
		return e.WorkTags, nil
	}
	return nil, &NotLoadedError{edge: "workTags"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Worktask) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case worktask.FieldSubtasks:
			values[i] = new([]byte)
		case worktask.FieldID:
			values[i] = new(sql.NullInt64)
		case worktask.FieldDescription, worktask.FieldStatus, worktask.FieldTitle:
			values[i] = new(sql.NullString)
		case worktask.FieldCreatedAt, worktask.FieldUpdatedAt, worktask.FieldDeletedAt, worktask.FieldStartTime, worktask.FieldEndTime:
			values[i] = new(sql.NullTime)
		case worktask.ForeignKeys[0]: // company_work_tasks
			values[i] = new(sql.NullInt64)
		case worktask.ForeignKeys[1]: // user_created_tasks
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Worktask fields.
func (w *Worktask) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case worktask.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			w.ID = int(value.Int64)
		case worktask.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				w.CreatedAt = value.Time
			}
		case worktask.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				w.UpdatedAt = value.Time
			}
		case worktask.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deletedAt", values[i])
			} else if value.Valid {
				w.DeletedAt = new(time.Time)
				*w.DeletedAt = value.Time
			}
		case worktask.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				w.Description = value.String
			}
		case worktask.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				w.Status = worktask.Status(value.String)
			}
		case worktask.FieldSubtasks:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field subtasks", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &w.Subtasks); err != nil {
					return fmt.Errorf("unmarshal field subtasks: %w", err)
				}
			}
		case worktask.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				w.Title = value.String
			}
		case worktask.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field startTime", values[i])
			} else if value.Valid {
				w.StartTime = value.Time
			}
		case worktask.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field endTime", values[i])
			} else if value.Valid {
				w.EndTime = value.Time
			}
		case worktask.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field company_work_tasks", value)
			} else if value.Valid {
				w.company_work_tasks = new(int)
				*w.company_work_tasks = int(value.Int64)
			}
		case worktask.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_created_tasks", value)
			} else if value.Valid {
				w.user_created_tasks = new(int)
				*w.user_created_tasks = int(value.Int64)
			}
		default:
			w.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Worktask.
// This includes values selected through modifiers, order, etc.
func (w *Worktask) Value(name string) (ent.Value, error) {
	return w.selectValues.Get(name)
}

// QueryCompany queries the "company" edge of the Worktask entity.
func (w *Worktask) QueryCompany() *CompanyQuery {
	return NewWorktaskClient(w.config).QueryCompany(w)
}

// QueryCreatedBy queries the "createdBy" edge of the Worktask entity.
func (w *Worktask) QueryCreatedBy() *UserQuery {
	return NewWorktaskClient(w.config).QueryCreatedBy(w)
}

// QueryAssignedTo queries the "assignedTo" edge of the Worktask entity.
func (w *Worktask) QueryAssignedTo() *EmployeeQuery {
	return NewWorktaskClient(w.config).QueryAssignedTo(w)
}

// QueryWorkShifts queries the "workShifts" edge of the Worktask entity.
func (w *Worktask) QueryWorkShifts() *WorkshiftQuery {
	return NewWorktaskClient(w.config).QueryWorkShifts(w)
}

// QueryWorkTags queries the "workTags" edge of the Worktask entity.
func (w *Worktask) QueryWorkTags() *WorktagQuery {
	return NewWorktaskClient(w.config).QueryWorkTags(w)
}

// Update returns a builder for updating this Worktask.
// Note that you need to call Worktask.Unwrap() before calling this method if this Worktask
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Worktask) Update() *WorktaskUpdateOne {
	return NewWorktaskClient(w.config).UpdateOne(w)
}

// Unwrap unwraps the Worktask entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Worktask) Unwrap() *Worktask {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("generated: Worktask is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Worktask) String() string {
	var builder strings.Builder
	builder.WriteString("Worktask(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("createdAt=")
	builder.WriteString(w.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(w.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := w.DeletedAt; v != nil {
		builder.WriteString("deletedAt=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(w.Description)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", w.Status))
	builder.WriteString(", ")
	builder.WriteString("subtasks=")
	builder.WriteString(fmt.Sprintf("%v", w.Subtasks))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(w.Title)
	builder.WriteString(", ")
	builder.WriteString("startTime=")
	builder.WriteString(w.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("endTime=")
	builder.WriteString(w.EndTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedAssignedTo returns the AssignedTo named value or an error if the edge was not
// loaded in eager-loading with this name.
func (w *Worktask) NamedAssignedTo(name string) ([]*Employee, error) {
	if w.Edges.namedAssignedTo == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := w.Edges.namedAssignedTo[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (w *Worktask) appendNamedAssignedTo(name string, edges ...*Employee) {
	if w.Edges.namedAssignedTo == nil {
		w.Edges.namedAssignedTo = make(map[string][]*Employee)
	}
	if len(edges) == 0 {
		w.Edges.namedAssignedTo[name] = []*Employee{}
	} else {
		w.Edges.namedAssignedTo[name] = append(w.Edges.namedAssignedTo[name], edges...)
	}
}

// NamedWorkShifts returns the WorkShifts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (w *Worktask) NamedWorkShifts(name string) ([]*Workshift, error) {
	if w.Edges.namedWorkShifts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := w.Edges.namedWorkShifts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (w *Worktask) appendNamedWorkShifts(name string, edges ...*Workshift) {
	if w.Edges.namedWorkShifts == nil {
		w.Edges.namedWorkShifts = make(map[string][]*Workshift)
	}
	if len(edges) == 0 {
		w.Edges.namedWorkShifts[name] = []*Workshift{}
	} else {
		w.Edges.namedWorkShifts[name] = append(w.Edges.namedWorkShifts[name], edges...)
	}
}

// NamedWorkTags returns the WorkTags named value or an error if the edge was not
// loaded in eager-loading with this name.
func (w *Worktask) NamedWorkTags(name string) ([]*Worktag, error) {
	if w.Edges.namedWorkTags == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := w.Edges.namedWorkTags[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (w *Worktask) appendNamedWorkTags(name string, edges ...*Worktag) {
	if w.Edges.namedWorkTags == nil {
		w.Edges.namedWorkTags = make(map[string][]*Worktag)
	}
	if len(edges) == 0 {
		w.Edges.namedWorkTags[name] = []*Worktag{}
	} else {
		w.Edges.namedWorkTags[name] = append(w.Edges.namedWorkTags[name], edges...)
	}
}

// Worktasks is a parsable slice of Worktask.
type Worktasks []*Worktask
