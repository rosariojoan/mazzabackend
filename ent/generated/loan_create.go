// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"mazza/ent/generated/company"
	"mazza/ent/generated/loan"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LoanCreate is the builder for creating a Loan entity.
type LoanCreate struct {
	config
	mutation *LoanMutation
	hooks    []Hook
}

// SetCreatedAt sets the "createdAt" field.
func (lc *LoanCreate) SetCreatedAt(t time.Time) *LoanCreate {
	lc.mutation.SetCreatedAt(t)
	return lc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (lc *LoanCreate) SetNillableCreatedAt(t *time.Time) *LoanCreate {
	if t != nil {
		lc.SetCreatedAt(*t)
	}
	return lc
}

// SetUpdatedAt sets the "updatedAt" field.
func (lc *LoanCreate) SetUpdatedAt(t time.Time) *LoanCreate {
	lc.mutation.SetUpdatedAt(t)
	return lc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (lc *LoanCreate) SetNillableUpdatedAt(t *time.Time) *LoanCreate {
	if t != nil {
		lc.SetUpdatedAt(*t)
	}
	return lc
}

// SetDeletedAt sets the "deletedAt" field.
func (lc *LoanCreate) SetDeletedAt(t time.Time) *LoanCreate {
	lc.mutation.SetDeletedAt(t)
	return lc
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (lc *LoanCreate) SetNillableDeletedAt(t *time.Time) *LoanCreate {
	if t != nil {
		lc.SetDeletedAt(*t)
	}
	return lc
}

// SetAmount sets the "amount" field.
func (lc *LoanCreate) SetAmount(f float64) *LoanCreate {
	lc.mutation.SetAmount(f)
	return lc
}

// SetCategory sets the "category" field.
func (lc *LoanCreate) SetCategory(l loan.Category) *LoanCreate {
	lc.mutation.SetCategory(l)
	return lc
}

// SetCollateral sets the "collateral" field.
func (lc *LoanCreate) SetCollateral(s string) *LoanCreate {
	lc.mutation.SetCollateral(s)
	return lc
}

// SetNillableCollateral sets the "collateral" field if the given value is not nil.
func (lc *LoanCreate) SetNillableCollateral(s *string) *LoanCreate {
	if s != nil {
		lc.SetCollateral(*s)
	}
	return lc
}

// SetDescription sets the "description" field.
func (lc *LoanCreate) SetDescription(s string) *LoanCreate {
	lc.mutation.SetDescription(s)
	return lc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (lc *LoanCreate) SetNillableDescription(s *string) *LoanCreate {
	if s != nil {
		lc.SetDescription(*s)
	}
	return lc
}

// SetInterestRate sets the "interestRate" field.
func (lc *LoanCreate) SetInterestRate(f float64) *LoanCreate {
	lc.mutation.SetInterestRate(f)
	return lc
}

// SetInstallments sets the "installments" field.
func (lc *LoanCreate) SetInstallments(i int) *LoanCreate {
	lc.mutation.SetInstallments(i)
	return lc
}

// SetMaturityDate sets the "maturityDate" field.
func (lc *LoanCreate) SetMaturityDate(t time.Time) *LoanCreate {
	lc.mutation.SetMaturityDate(t)
	return lc
}

// SetNextPayment sets the "nextPayment" field.
func (lc *LoanCreate) SetNextPayment(t time.Time) *LoanCreate {
	lc.mutation.SetNextPayment(t)
	return lc
}

// SetNillableNextPayment sets the "nextPayment" field if the given value is not nil.
func (lc *LoanCreate) SetNillableNextPayment(t *time.Time) *LoanCreate {
	if t != nil {
		lc.SetNextPayment(*t)
	}
	return lc
}

// SetNextPaymentAmount sets the "nextPaymentAmount" field.
func (lc *LoanCreate) SetNextPaymentAmount(f float64) *LoanCreate {
	lc.mutation.SetNextPaymentAmount(f)
	return lc
}

// SetNillableNextPaymentAmount sets the "nextPaymentAmount" field if the given value is not nil.
func (lc *LoanCreate) SetNillableNextPaymentAmount(f *float64) *LoanCreate {
	if f != nil {
		lc.SetNextPaymentAmount(*f)
	}
	return lc
}

// SetOutstandingAmount sets the "outstandingAmount" field.
func (lc *LoanCreate) SetOutstandingAmount(f float64) *LoanCreate {
	lc.mutation.SetOutstandingAmount(f)
	return lc
}

// SetPaymentFrequency sets the "paymentFrequency" field.
func (lc *LoanCreate) SetPaymentFrequency(lf loan.PaymentFrequency) *LoanCreate {
	lc.mutation.SetPaymentFrequency(lf)
	return lc
}

// SetNillablePaymentFrequency sets the "paymentFrequency" field if the given value is not nil.
func (lc *LoanCreate) SetNillablePaymentFrequency(lf *loan.PaymentFrequency) *LoanCreate {
	if lf != nil {
		lc.SetPaymentFrequency(*lf)
	}
	return lc
}

// SetPaidInstallments sets the "paidInstallments" field.
func (lc *LoanCreate) SetPaidInstallments(i int) *LoanCreate {
	lc.mutation.SetPaidInstallments(i)
	return lc
}

// SetNillablePaidInstallments sets the "paidInstallments" field if the given value is not nil.
func (lc *LoanCreate) SetNillablePaidInstallments(i *int) *LoanCreate {
	if i != nil {
		lc.SetPaidInstallments(*i)
	}
	return lc
}

// SetProvider sets the "provider" field.
func (lc *LoanCreate) SetProvider(s string) *LoanCreate {
	lc.mutation.SetProvider(s)
	return lc
}

// SetStartDate sets the "startDate" field.
func (lc *LoanCreate) SetStartDate(t time.Time) *LoanCreate {
	lc.mutation.SetStartDate(t)
	return lc
}

// SetNillableStartDate sets the "startDate" field if the given value is not nil.
func (lc *LoanCreate) SetNillableStartDate(t *time.Time) *LoanCreate {
	if t != nil {
		lc.SetStartDate(*t)
	}
	return lc
}

// SetStatus sets the "status" field.
func (lc *LoanCreate) SetStatus(l loan.Status) *LoanCreate {
	lc.mutation.SetStatus(l)
	return lc
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (lc *LoanCreate) SetCompanyID(id int) *LoanCreate {
	lc.mutation.SetCompanyID(id)
	return lc
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (lc *LoanCreate) SetNillableCompanyID(id *int) *LoanCreate {
	if id != nil {
		lc = lc.SetCompanyID(*id)
	}
	return lc
}

// SetCompany sets the "company" edge to the Company entity.
func (lc *LoanCreate) SetCompany(c *Company) *LoanCreate {
	return lc.SetCompanyID(c.ID)
}

// Mutation returns the LoanMutation object of the builder.
func (lc *LoanCreate) Mutation() *LoanMutation {
	return lc.mutation
}

// Save creates the Loan in the database.
func (lc *LoanCreate) Save(ctx context.Context) (*Loan, error) {
	lc.defaults()
	return withHooks(ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LoanCreate) SaveX(ctx context.Context) *Loan {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LoanCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LoanCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *LoanCreate) defaults() {
	if _, ok := lc.mutation.CreatedAt(); !ok {
		v := loan.DefaultCreatedAt()
		lc.mutation.SetCreatedAt(v)
	}
	if _, ok := lc.mutation.UpdatedAt(); !ok {
		v := loan.DefaultUpdatedAt()
		lc.mutation.SetUpdatedAt(v)
	}
	if _, ok := lc.mutation.NextPaymentAmount(); !ok {
		v := loan.DefaultNextPaymentAmount
		lc.mutation.SetNextPaymentAmount(v)
	}
	if _, ok := lc.mutation.PaymentFrequency(); !ok {
		v := loan.DefaultPaymentFrequency
		lc.mutation.SetPaymentFrequency(v)
	}
	if _, ok := lc.mutation.PaidInstallments(); !ok {
		v := loan.DefaultPaidInstallments
		lc.mutation.SetPaidInstallments(v)
	}
	if _, ok := lc.mutation.StartDate(); !ok {
		v := loan.DefaultStartDate()
		lc.mutation.SetStartDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LoanCreate) check() error {
	if _, ok := lc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`generated: missing required field "Loan.createdAt"`)}
	}
	if _, ok := lc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`generated: missing required field "Loan.updatedAt"`)}
	}
	if _, ok := lc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`generated: missing required field "Loan.amount"`)}
	}
	if v, ok := lc.mutation.Amount(); ok {
		if err := loan.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`generated: validator failed for field "Loan.amount": %w`, err)}
		}
	}
	if _, ok := lc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`generated: missing required field "Loan.category"`)}
	}
	if v, ok := lc.mutation.Category(); ok {
		if err := loan.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`generated: validator failed for field "Loan.category": %w`, err)}
		}
	}
	if _, ok := lc.mutation.InterestRate(); !ok {
		return &ValidationError{Name: "interestRate", err: errors.New(`generated: missing required field "Loan.interestRate"`)}
	}
	if v, ok := lc.mutation.InterestRate(); ok {
		if err := loan.InterestRateValidator(v); err != nil {
			return &ValidationError{Name: "interestRate", err: fmt.Errorf(`generated: validator failed for field "Loan.interestRate": %w`, err)}
		}
	}
	if _, ok := lc.mutation.Installments(); !ok {
		return &ValidationError{Name: "installments", err: errors.New(`generated: missing required field "Loan.installments"`)}
	}
	if v, ok := lc.mutation.Installments(); ok {
		if err := loan.InstallmentsValidator(v); err != nil {
			return &ValidationError{Name: "installments", err: fmt.Errorf(`generated: validator failed for field "Loan.installments": %w`, err)}
		}
	}
	if _, ok := lc.mutation.MaturityDate(); !ok {
		return &ValidationError{Name: "maturityDate", err: errors.New(`generated: missing required field "Loan.maturityDate"`)}
	}
	if v, ok := lc.mutation.NextPaymentAmount(); ok {
		if err := loan.NextPaymentAmountValidator(v); err != nil {
			return &ValidationError{Name: "nextPaymentAmount", err: fmt.Errorf(`generated: validator failed for field "Loan.nextPaymentAmount": %w`, err)}
		}
	}
	if _, ok := lc.mutation.OutstandingAmount(); !ok {
		return &ValidationError{Name: "outstandingAmount", err: errors.New(`generated: missing required field "Loan.outstandingAmount"`)}
	}
	if v, ok := lc.mutation.OutstandingAmount(); ok {
		if err := loan.OutstandingAmountValidator(v); err != nil {
			return &ValidationError{Name: "outstandingAmount", err: fmt.Errorf(`generated: validator failed for field "Loan.outstandingAmount": %w`, err)}
		}
	}
	if _, ok := lc.mutation.PaymentFrequency(); !ok {
		return &ValidationError{Name: "paymentFrequency", err: errors.New(`generated: missing required field "Loan.paymentFrequency"`)}
	}
	if v, ok := lc.mutation.PaymentFrequency(); ok {
		if err := loan.PaymentFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "paymentFrequency", err: fmt.Errorf(`generated: validator failed for field "Loan.paymentFrequency": %w`, err)}
		}
	}
	if _, ok := lc.mutation.PaidInstallments(); !ok {
		return &ValidationError{Name: "paidInstallments", err: errors.New(`generated: missing required field "Loan.paidInstallments"`)}
	}
	if _, ok := lc.mutation.Provider(); !ok {
		return &ValidationError{Name: "provider", err: errors.New(`generated: missing required field "Loan.provider"`)}
	}
	if v, ok := lc.mutation.Provider(); ok {
		if err := loan.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`generated: validator failed for field "Loan.provider": %w`, err)}
		}
	}
	if _, ok := lc.mutation.StartDate(); !ok {
		return &ValidationError{Name: "startDate", err: errors.New(`generated: missing required field "Loan.startDate"`)}
	}
	if _, ok := lc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`generated: missing required field "Loan.status"`)}
	}
	if v, ok := lc.mutation.Status(); ok {
		if err := loan.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Loan.status": %w`, err)}
		}
	}
	return nil
}

func (lc *LoanCreate) sqlSave(ctx context.Context) (*Loan, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *LoanCreate) createSpec() (*Loan, *sqlgraph.CreateSpec) {
	var (
		_node = &Loan{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(loan.Table, sqlgraph.NewFieldSpec(loan.FieldID, field.TypeInt))
	)
	if value, ok := lc.mutation.CreatedAt(); ok {
		_spec.SetField(loan.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lc.mutation.UpdatedAt(); ok {
		_spec.SetField(loan.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := lc.mutation.DeletedAt(); ok {
		_spec.SetField(loan.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := lc.mutation.Amount(); ok {
		_spec.SetField(loan.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := lc.mutation.Category(); ok {
		_spec.SetField(loan.FieldCategory, field.TypeEnum, value)
		_node.Category = value
	}
	if value, ok := lc.mutation.Collateral(); ok {
		_spec.SetField(loan.FieldCollateral, field.TypeString, value)
		_node.Collateral = value
	}
	if value, ok := lc.mutation.Description(); ok {
		_spec.SetField(loan.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := lc.mutation.InterestRate(); ok {
		_spec.SetField(loan.FieldInterestRate, field.TypeFloat64, value)
		_node.InterestRate = value
	}
	if value, ok := lc.mutation.Installments(); ok {
		_spec.SetField(loan.FieldInstallments, field.TypeInt, value)
		_node.Installments = value
	}
	if value, ok := lc.mutation.MaturityDate(); ok {
		_spec.SetField(loan.FieldMaturityDate, field.TypeTime, value)
		_node.MaturityDate = value
	}
	if value, ok := lc.mutation.NextPayment(); ok {
		_spec.SetField(loan.FieldNextPayment, field.TypeTime, value)
		_node.NextPayment = value
	}
	if value, ok := lc.mutation.NextPaymentAmount(); ok {
		_spec.SetField(loan.FieldNextPaymentAmount, field.TypeFloat64, value)
		_node.NextPaymentAmount = value
	}
	if value, ok := lc.mutation.OutstandingAmount(); ok {
		_spec.SetField(loan.FieldOutstandingAmount, field.TypeFloat64, value)
		_node.OutstandingAmount = value
	}
	if value, ok := lc.mutation.PaymentFrequency(); ok {
		_spec.SetField(loan.FieldPaymentFrequency, field.TypeEnum, value)
		_node.PaymentFrequency = value
	}
	if value, ok := lc.mutation.PaidInstallments(); ok {
		_spec.SetField(loan.FieldPaidInstallments, field.TypeInt, value)
		_node.PaidInstallments = value
	}
	if value, ok := lc.mutation.Provider(); ok {
		_spec.SetField(loan.FieldProvider, field.TypeString, value)
		_node.Provider = value
	}
	if value, ok := lc.mutation.StartDate(); ok {
		_spec.SetField(loan.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := lc.mutation.Status(); ok {
		_spec.SetField(loan.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := lc.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loan.CompanyTable,
			Columns: []string{loan.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.company_loans = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LoanCreateBulk is the builder for creating many Loan entities in bulk.
type LoanCreateBulk struct {
	config
	err      error
	builders []*LoanCreate
}

// Save creates the Loan entities in the database.
func (lcb *LoanCreateBulk) Save(ctx context.Context) ([]*Loan, error) {
	if lcb.err != nil {
		return nil, lcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Loan, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LoanMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LoanCreateBulk) SaveX(ctx context.Context) []*Loan {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LoanCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LoanCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}
