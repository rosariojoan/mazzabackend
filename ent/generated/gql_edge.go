// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (ae *AccountingEntry) Company(ctx context.Context) (*Company, error) {
	result, err := ae.Edges.CompanyOrErr()
	if IsNotLoaded(err) {
		result, err = ae.QueryCompany().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ae *AccountingEntry) User(ctx context.Context) (*User, error) {
	result, err := ae.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = ae.QueryUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ae *AccountingEntry) Loan(ctx context.Context) (*Loan, error) {
	result, err := ae.Edges.LoanOrErr()
	if IsNotLoaded(err) {
		result, err = ae.QueryLoan().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Company) AvailableRoles(ctx context.Context) (result []*UserRole, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedAvailableRoles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.AvailableRolesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryAvailableRoles().All(ctx)
	}
	return result, err
}

func (c *Company) AccountingEntries(ctx context.Context) (result []*AccountingEntry, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedAccountingEntries(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.AccountingEntriesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryAccountingEntries().All(ctx)
	}
	return result, err
}

func (c *Company) Customers(ctx context.Context) (result []*Customer, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedCustomers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.CustomersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryCustomers().All(ctx)
	}
	return result, err
}

func (c *Company) Documents(ctx context.Context) (result []*CompanyDocument, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedDocuments(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.DocumentsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryDocuments().All(ctx)
	}
	return result, err
}

func (c *Company) Employees(ctx context.Context) (result []*Employee, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedEmployees(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.EmployeesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryEmployees().All(ctx)
	}
	return result, err
}

func (c *Company) Files(ctx context.Context) (result []*File, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedFiles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.FilesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryFiles().All(ctx)
	}
	return result, err
}

func (c *Company) Inventory(ctx context.Context) (result []*Inventory, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedInventory(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.InventoryOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryInventory().All(ctx)
	}
	return result, err
}

func (c *Company) InventoryMovements(ctx context.Context) (result []*InventoryMovement, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedInventoryMovements(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.InventoryMovementsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryInventoryMovements().All(ctx)
	}
	return result, err
}

func (c *Company) Invoices(ctx context.Context) (result []*Invoice, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedInvoices(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.InvoicesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryInvoices().All(ctx)
	}
	return result, err
}

func (c *Company) Loans(ctx context.Context) (result []*Loan, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedLoans(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.LoansOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryLoans().All(ctx)
	}
	return result, err
}

func (c *Company) MemberSignupTokens(ctx context.Context) (result []*MemberSignupToken, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedMemberSignupTokens(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.MemberSignupTokensOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryMemberSignupTokens().All(ctx)
	}
	return result, err
}

func (c *Company) Products(ctx context.Context) (result []*Product, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedProducts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.ProductsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryProducts().All(ctx)
	}
	return result, err
}

func (c *Company) Projects(ctx context.Context) (result []*Project, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedProjects(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.ProjectsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryProjects().All(ctx)
	}
	return result, err
}

func (c *Company) Payables(ctx context.Context) (result []*Payable, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedPayables(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.PayablesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryPayables().All(ctx)
	}
	return result, err
}

func (c *Company) Receivables(ctx context.Context) (result []*Receivable, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedReceivables(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.ReceivablesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryReceivables().All(ctx)
	}
	return result, err
}

func (c *Company) Suppliers(ctx context.Context) (result []*Supplier, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedSuppliers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.SuppliersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QuerySuppliers().All(ctx)
	}
	return result, err
}

func (c *Company) Tokens(ctx context.Context) (result []*Token, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedTokens(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.TokensOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryTokens().All(ctx)
	}
	return result, err
}

func (c *Company) Treasuries(ctx context.Context) (result []*Treasury, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedTreasuries(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.TreasuriesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryTreasuries().All(ctx)
	}
	return result, err
}

func (c *Company) WorkShifts(ctx context.Context) (result []*Workshift, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedWorkShifts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.WorkShiftsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryWorkShifts().All(ctx)
	}
	return result, err
}

func (c *Company) Users(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedUsers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.UsersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryUsers().All(ctx)
	}
	return result, err
}

func (c *Company) DaughterCompanies(ctx context.Context) (result []*Company, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedDaughterCompanies(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.DaughterCompaniesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryDaughterCompanies().All(ctx)
	}
	return result, err
}

func (c *Company) ParentCompany(ctx context.Context) (*Company, error) {
	result, err := c.Edges.ParentCompanyOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryParentCompany().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (cd *CompanyDocument) Company(ctx context.Context) (*Company, error) {
	result, err := cd.Edges.CompanyOrErr()
	if IsNotLoaded(err) {
		result, err = cd.QueryCompany().Only(ctx)
	}
	return result, err
}

func (cd *CompanyDocument) UploadedBy(ctx context.Context) (*User, error) {
	result, err := cd.Edges.UploadedByOrErr()
	if IsNotLoaded(err) {
		result, err = cd.QueryUploadedBy().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (cd *CompanyDocument) ApprovedBy(ctx context.Context) (*User, error) {
	result, err := cd.Edges.ApprovedByOrErr()
	if IsNotLoaded(err) {
		result, err = cd.QueryApprovedBy().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Customer) Company(ctx context.Context) (*Company, error) {
	result, err := c.Edges.CompanyOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryCompany().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Customer) Receivables(ctx context.Context) (result []*Receivable, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedReceivables(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.ReceivablesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryReceivables().All(ctx)
	}
	return result, err
}

func (c *Customer) Invoices(ctx context.Context) (result []*Invoice, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedInvoices(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.InvoicesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryInvoices().All(ctx)
	}
	return result, err
}

func (e *Employee) Company(ctx context.Context) (*Company, error) {
	result, err := e.Edges.CompanyOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryCompany().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Employee) User(ctx context.Context) (*User, error) {
	result, err := e.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Employee) Subordinates(ctx context.Context) (result []*Employee, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedSubordinates(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.SubordinatesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QuerySubordinates().All(ctx)
	}
	return result, err
}

func (e *Employee) Leader(ctx context.Context) (*Employee, error) {
	result, err := e.Edges.LeaderOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryLeader().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (f *File) Company(ctx context.Context) (*Company, error) {
	result, err := f.Edges.CompanyOrErr()
	if IsNotLoaded(err) {
		result, err = f.QueryCompany().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (i *Inventory) Company(ctx context.Context) (*Company, error) {
	result, err := i.Edges.CompanyOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryCompany().Only(ctx)
	}
	return result, err
}

func (i *Inventory) Movements(ctx context.Context) (result []*InventoryMovement, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = i.NamedMovements(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = i.Edges.MovementsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = i.QueryMovements().All(ctx)
	}
	return result, err
}

func (im *InventoryMovement) Company(ctx context.Context) (*Company, error) {
	result, err := im.Edges.CompanyOrErr()
	if IsNotLoaded(err) {
		result, err = im.QueryCompany().Only(ctx)
	}
	return result, err
}

func (im *InventoryMovement) Inventory(ctx context.Context) (*Inventory, error) {
	result, err := im.Edges.InventoryOrErr()
	if IsNotLoaded(err) {
		result, err = im.QueryInventory().Only(ctx)
	}
	return result, err
}

func (i *Invoice) Company(ctx context.Context) (*Company, error) {
	result, err := i.Edges.CompanyOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryCompany().Only(ctx)
	}
	return result, err
}

func (i *Invoice) IssuedBy(ctx context.Context) (*User, error) {
	result, err := i.Edges.IssuedByOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryIssuedBy().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (i *Invoice) Client(ctx context.Context) (*Customer, error) {
	result, err := i.Edges.ClientOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryClient().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (i *Invoice) Receivable(ctx context.Context) (*Receivable, error) {
	result, err := i.Edges.ReceivableOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryReceivable().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (l *Loan) Company(ctx context.Context) (*Company, error) {
	result, err := l.Edges.CompanyOrErr()
	if IsNotLoaded(err) {
		result, err = l.QueryCompany().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (l *Loan) TransactionHistory(ctx context.Context) (result []*AccountingEntry, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = l.NamedTransactionHistory(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = l.Edges.TransactionHistoryOrErr()
	}
	if IsNotLoaded(err) {
		result, err = l.QueryTransactionHistory().All(ctx)
	}
	return result, err
}

func (mst *MemberSignupToken) Company(ctx context.Context) (*Company, error) {
	result, err := mst.Edges.CompanyOrErr()
	if IsNotLoaded(err) {
		result, err = mst.QueryCompany().Only(ctx)
	}
	return result, err
}

func (mst *MemberSignupToken) CreatedBy(ctx context.Context) (*User, error) {
	result, err := mst.Edges.CreatedByOrErr()
	if IsNotLoaded(err) {
		result, err = mst.QueryCreatedBy().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pa *Payable) Company(ctx context.Context) (*Company, error) {
	result, err := pa.Edges.CompanyOrErr()
	if IsNotLoaded(err) {
		result, err = pa.QueryCompany().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pr *Product) Company(ctx context.Context) (*Company, error) {
	result, err := pr.Edges.CompanyOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryCompany().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pr *Project) Company(ctx context.Context) (*Company, error) {
	result, err := pr.Edges.CompanyOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryCompany().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pr *Project) CreatedBy(ctx context.Context) (*User, error) {
	result, err := pr.Edges.CreatedByOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryCreatedBy().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pr *Project) Leader(ctx context.Context) (*User, error) {
	result, err := pr.Edges.LeaderOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryLeader().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pr *Project) Tasks(ctx context.Context) (result []*ProjectTask, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedTasks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.TasksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryTasks().All(ctx)
	}
	return result, err
}

func (pr *Project) Milestones(ctx context.Context) (result []*ProjectMilestone, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedMilestones(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.MilestonesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryMilestones().All(ctx)
	}
	return result, err
}

func (pm *ProjectMilestone) Project(ctx context.Context) (*Project, error) {
	result, err := pm.Edges.ProjectOrErr()
	if IsNotLoaded(err) {
		result, err = pm.QueryProject().Only(ctx)
	}
	return result, err
}

func (pt *ProjectTask) Project(ctx context.Context) (*Project, error) {
	result, err := pt.Edges.ProjectOrErr()
	if IsNotLoaded(err) {
		result, err = pt.QueryProject().Only(ctx)
	}
	return result, err
}

func (pt *ProjectTask) Assignee(ctx context.Context) (*User, error) {
	result, err := pt.Edges.AssigneeOrErr()
	if IsNotLoaded(err) {
		result, err = pt.QueryAssignee().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pt *ProjectTask) Participants(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pt.NamedParticipants(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pt.Edges.ParticipantsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pt.QueryParticipants().All(ctx)
	}
	return result, err
}

func (pt *ProjectTask) CreatedBy(ctx context.Context) (*User, error) {
	result, err := pt.Edges.CreatedByOrErr()
	if IsNotLoaded(err) {
		result, err = pt.QueryCreatedBy().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pt *ProjectTask) WorkShifts(ctx context.Context) (result []*Workshift, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pt.NamedWorkShifts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pt.Edges.WorkShiftsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pt.QueryWorkShifts().All(ctx)
	}
	return result, err
}

func (r *Receivable) Company(ctx context.Context) (*Company, error) {
	result, err := r.Edges.CompanyOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryCompany().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (r *Receivable) Invoice(ctx context.Context) (*Invoice, error) {
	result, err := r.Edges.InvoiceOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryInvoice().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Supplier) Company(ctx context.Context) (*Company, error) {
	result, err := s.Edges.CompanyOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryCompany().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Supplier) Payables(ctx context.Context) (result []*Payable, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedPayables(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.PayablesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryPayables().All(ctx)
	}
	return result, err
}

func (t *Token) Company(ctx context.Context) (*Company, error) {
	result, err := t.Edges.CompanyOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryCompany().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Token) User(ctx context.Context) (*User, error) {
	result, err := t.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Treasury) Company(ctx context.Context) (*Company, error) {
	result, err := t.Edges.CompanyOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryCompany().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) AccountingEntries(ctx context.Context) (result []*AccountingEntry, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedAccountingEntries(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.AccountingEntriesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryAccountingEntries().All(ctx)
	}
	return result, err
}

func (u *User) Company(ctx context.Context) (result []*Company, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedCompany(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.CompanyOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryCompany().All(ctx)
	}
	return result, err
}

func (u *User) AssignedRoles(ctx context.Context) (result []*UserRole, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedAssignedRoles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.AssignedRolesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryAssignedRoles().All(ctx)
	}
	return result, err
}

func (u *User) Subordinates(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedSubordinates(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.SubordinatesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QuerySubordinates().All(ctx)
	}
	return result, err
}

func (u *User) Leader(ctx context.Context) (*User, error) {
	result, err := u.Edges.LeaderOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryLeader().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) CreatedMemberSignupTokens(ctx context.Context) (result []*MemberSignupToken, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedCreatedMemberSignupTokens(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.CreatedMemberSignupTokensOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryCreatedMemberSignupTokens().All(ctx)
	}
	return result, err
}

func (u *User) Employee(ctx context.Context) (*Employee, error) {
	result, err := u.Edges.EmployeeOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryEmployee().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) IssuedInvoices(ctx context.Context) (result []*Invoice, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedIssuedInvoices(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.IssuedInvoicesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryIssuedInvoices().All(ctx)
	}
	return result, err
}

func (u *User) CreatedProjects(ctx context.Context) (result []*Project, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedCreatedProjects(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.CreatedProjectsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryCreatedProjects().All(ctx)
	}
	return result, err
}

func (u *User) LeaderedProjects(ctx context.Context) (result []*Project, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedLeaderedProjects(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.LeaderedProjectsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryLeaderedProjects().All(ctx)
	}
	return result, err
}

func (u *User) AssignedProjectTasks(ctx context.Context) (result []*ProjectTask, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedAssignedProjectTasks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.AssignedProjectTasksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryAssignedProjectTasks().All(ctx)
	}
	return result, err
}

func (u *User) ParticipatedProjectTasks(ctx context.Context) (result []*ProjectTask, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedParticipatedProjectTasks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.ParticipatedProjectTasksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryParticipatedProjectTasks().All(ctx)
	}
	return result, err
}

func (u *User) CreatedTasks(ctx context.Context) (result []*ProjectTask, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedCreatedTasks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.CreatedTasksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryCreatedTasks().All(ctx)
	}
	return result, err
}

func (u *User) Tokens(ctx context.Context) (result []*Token, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedTokens(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.TokensOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryTokens().All(ctx)
	}
	return result, err
}

func (u *User) ApprovedWorkShifts(ctx context.Context) (result []*Workshift, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedApprovedWorkShifts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.ApprovedWorkShiftsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryApprovedWorkShifts().All(ctx)
	}
	return result, err
}

func (u *User) WorkShifts(ctx context.Context) (result []*Workshift, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedWorkShifts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.WorkShiftsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryWorkShifts().All(ctx)
	}
	return result, err
}

func (u *User) UploadedDocuments(ctx context.Context) (result []*CompanyDocument, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedUploadedDocuments(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.UploadedDocumentsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryUploadedDocuments().All(ctx)
	}
	return result, err
}

func (u *User) ApprovedDocuments(ctx context.Context) (result []*CompanyDocument, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedApprovedDocuments(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.ApprovedDocumentsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryApprovedDocuments().All(ctx)
	}
	return result, err
}

func (ur *UserRole) Company(ctx context.Context) (*Company, error) {
	result, err := ur.Edges.CompanyOrErr()
	if IsNotLoaded(err) {
		result, err = ur.QueryCompany().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ur *UserRole) User(ctx context.Context) (*User, error) {
	result, err := ur.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = ur.QueryUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (w *Workshift) Company(ctx context.Context) (*Company, error) {
	result, err := w.Edges.CompanyOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryCompany().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (w *Workshift) User(ctx context.Context) (*User, error) {
	result, err := w.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (w *Workshift) ApprovedBy(ctx context.Context) (*User, error) {
	result, err := w.Edges.ApprovedByOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryApprovedBy().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (w *Workshift) Task(ctx context.Context) (*ProjectTask, error) {
	result, err := w.Edges.TaskOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryTask().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (w *Workshift) EditRequest(ctx context.Context) (*Workshift, error) {
	result, err := w.Edges.EditRequestOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryEditRequest().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (w *Workshift) WorkShift(ctx context.Context) (*Workshift, error) {
	result, err := w.Edges.WorkShiftOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryWorkShift().Only(ctx)
	}
	return result, MaskNotFound(err)
}
