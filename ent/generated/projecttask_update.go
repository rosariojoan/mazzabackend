// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"mazza/ent/generated/predicate"
	"mazza/ent/generated/project"
	"mazza/ent/generated/projecttask"
	"mazza/ent/generated/user"
	"mazza/ent/generated/workshift"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProjectTaskUpdate is the builder for updating ProjectTask entities.
type ProjectTaskUpdate struct {
	config
	hooks     []Hook
	mutation  *ProjectTaskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ProjectTaskUpdate builder.
func (ptu *ProjectTaskUpdate) Where(ps ...predicate.ProjectTask) *ProjectTaskUpdate {
	ptu.mutation.Where(ps...)
	return ptu
}

// SetName sets the "name" field.
func (ptu *ProjectTaskUpdate) SetName(s string) *ProjectTaskUpdate {
	ptu.mutation.SetName(s)
	return ptu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ptu *ProjectTaskUpdate) SetNillableName(s *string) *ProjectTaskUpdate {
	if s != nil {
		ptu.SetName(*s)
	}
	return ptu
}

// SetAssigneeName sets the "assigneeName" field.
func (ptu *ProjectTaskUpdate) SetAssigneeName(s string) *ProjectTaskUpdate {
	ptu.mutation.SetAssigneeName(s)
	return ptu
}

// SetNillableAssigneeName sets the "assigneeName" field if the given value is not nil.
func (ptu *ProjectTaskUpdate) SetNillableAssigneeName(s *string) *ProjectTaskUpdate {
	if s != nil {
		ptu.SetAssigneeName(*s)
	}
	return ptu
}

// SetLocation sets the "location" field.
func (ptu *ProjectTaskUpdate) SetLocation(s string) *ProjectTaskUpdate {
	ptu.mutation.SetLocation(s)
	return ptu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (ptu *ProjectTaskUpdate) SetNillableLocation(s *string) *ProjectTaskUpdate {
	if s != nil {
		ptu.SetLocation(*s)
	}
	return ptu
}

// ClearLocation clears the value of the "location" field.
func (ptu *ProjectTaskUpdate) ClearLocation() *ProjectTaskUpdate {
	ptu.mutation.ClearLocation()
	return ptu
}

// SetDueDate sets the "dueDate" field.
func (ptu *ProjectTaskUpdate) SetDueDate(t time.Time) *ProjectTaskUpdate {
	ptu.mutation.SetDueDate(t)
	return ptu
}

// SetNillableDueDate sets the "dueDate" field if the given value is not nil.
func (ptu *ProjectTaskUpdate) SetNillableDueDate(t *time.Time) *ProjectTaskUpdate {
	if t != nil {
		ptu.SetDueDate(*t)
	}
	return ptu
}

// SetStartDate sets the "startDate" field.
func (ptu *ProjectTaskUpdate) SetStartDate(t time.Time) *ProjectTaskUpdate {
	ptu.mutation.SetStartDate(t)
	return ptu
}

// SetNillableStartDate sets the "startDate" field if the given value is not nil.
func (ptu *ProjectTaskUpdate) SetNillableStartDate(t *time.Time) *ProjectTaskUpdate {
	if t != nil {
		ptu.SetStartDate(*t)
	}
	return ptu
}

// SetEndDate sets the "endDate" field.
func (ptu *ProjectTaskUpdate) SetEndDate(t time.Time) *ProjectTaskUpdate {
	ptu.mutation.SetEndDate(t)
	return ptu
}

// SetNillableEndDate sets the "endDate" field if the given value is not nil.
func (ptu *ProjectTaskUpdate) SetNillableEndDate(t *time.Time) *ProjectTaskUpdate {
	if t != nil {
		ptu.SetEndDate(*t)
	}
	return ptu
}

// SetDescription sets the "description" field.
func (ptu *ProjectTaskUpdate) SetDescription(s string) *ProjectTaskUpdate {
	ptu.mutation.SetDescription(s)
	return ptu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ptu *ProjectTaskUpdate) SetNillableDescription(s *string) *ProjectTaskUpdate {
	if s != nil {
		ptu.SetDescription(*s)
	}
	return ptu
}

// ClearDescription clears the value of the "description" field.
func (ptu *ProjectTaskUpdate) ClearDescription() *ProjectTaskUpdate {
	ptu.mutation.ClearDescription()
	return ptu
}

// SetStatus sets the "status" field.
func (ptu *ProjectTaskUpdate) SetStatus(pr projecttask.Status) *ProjectTaskUpdate {
	ptu.mutation.SetStatus(pr)
	return ptu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ptu *ProjectTaskUpdate) SetNillableStatus(pr *projecttask.Status) *ProjectTaskUpdate {
	if pr != nil {
		ptu.SetStatus(*pr)
	}
	return ptu
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (ptu *ProjectTaskUpdate) SetProjectID(id int) *ProjectTaskUpdate {
	ptu.mutation.SetProjectID(id)
	return ptu
}

// SetProject sets the "project" edge to the Project entity.
func (ptu *ProjectTaskUpdate) SetProject(p *Project) *ProjectTaskUpdate {
	return ptu.SetProjectID(p.ID)
}

// SetAssigneeID sets the "assignee" edge to the User entity by ID.
func (ptu *ProjectTaskUpdate) SetAssigneeID(id int) *ProjectTaskUpdate {
	ptu.mutation.SetAssigneeID(id)
	return ptu
}

// SetNillableAssigneeID sets the "assignee" edge to the User entity by ID if the given value is not nil.
func (ptu *ProjectTaskUpdate) SetNillableAssigneeID(id *int) *ProjectTaskUpdate {
	if id != nil {
		ptu = ptu.SetAssigneeID(*id)
	}
	return ptu
}

// SetAssignee sets the "assignee" edge to the User entity.
func (ptu *ProjectTaskUpdate) SetAssignee(u *User) *ProjectTaskUpdate {
	return ptu.SetAssigneeID(u.ID)
}

// AddParticipantIDs adds the "participants" edge to the User entity by IDs.
func (ptu *ProjectTaskUpdate) AddParticipantIDs(ids ...int) *ProjectTaskUpdate {
	ptu.mutation.AddParticipantIDs(ids...)
	return ptu
}

// AddParticipants adds the "participants" edges to the User entity.
func (ptu *ProjectTaskUpdate) AddParticipants(u ...*User) *ProjectTaskUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ptu.AddParticipantIDs(ids...)
}

// AddWorkShiftIDs adds the "workShifts" edge to the Workshift entity by IDs.
func (ptu *ProjectTaskUpdate) AddWorkShiftIDs(ids ...int) *ProjectTaskUpdate {
	ptu.mutation.AddWorkShiftIDs(ids...)
	return ptu
}

// AddWorkShifts adds the "workShifts" edges to the Workshift entity.
func (ptu *ProjectTaskUpdate) AddWorkShifts(w ...*Workshift) *ProjectTaskUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return ptu.AddWorkShiftIDs(ids...)
}

// Mutation returns the ProjectTaskMutation object of the builder.
func (ptu *ProjectTaskUpdate) Mutation() *ProjectTaskMutation {
	return ptu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (ptu *ProjectTaskUpdate) ClearProject() *ProjectTaskUpdate {
	ptu.mutation.ClearProject()
	return ptu
}

// ClearAssignee clears the "assignee" edge to the User entity.
func (ptu *ProjectTaskUpdate) ClearAssignee() *ProjectTaskUpdate {
	ptu.mutation.ClearAssignee()
	return ptu
}

// ClearParticipants clears all "participants" edges to the User entity.
func (ptu *ProjectTaskUpdate) ClearParticipants() *ProjectTaskUpdate {
	ptu.mutation.ClearParticipants()
	return ptu
}

// RemoveParticipantIDs removes the "participants" edge to User entities by IDs.
func (ptu *ProjectTaskUpdate) RemoveParticipantIDs(ids ...int) *ProjectTaskUpdate {
	ptu.mutation.RemoveParticipantIDs(ids...)
	return ptu
}

// RemoveParticipants removes "participants" edges to User entities.
func (ptu *ProjectTaskUpdate) RemoveParticipants(u ...*User) *ProjectTaskUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ptu.RemoveParticipantIDs(ids...)
}

// ClearWorkShifts clears all "workShifts" edges to the Workshift entity.
func (ptu *ProjectTaskUpdate) ClearWorkShifts() *ProjectTaskUpdate {
	ptu.mutation.ClearWorkShifts()
	return ptu
}

// RemoveWorkShiftIDs removes the "workShifts" edge to Workshift entities by IDs.
func (ptu *ProjectTaskUpdate) RemoveWorkShiftIDs(ids ...int) *ProjectTaskUpdate {
	ptu.mutation.RemoveWorkShiftIDs(ids...)
	return ptu
}

// RemoveWorkShifts removes "workShifts" edges to Workshift entities.
func (ptu *ProjectTaskUpdate) RemoveWorkShifts(w ...*Workshift) *ProjectTaskUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return ptu.RemoveWorkShiftIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptu *ProjectTaskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ptu.sqlSave, ptu.mutation, ptu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptu *ProjectTaskUpdate) SaveX(ctx context.Context) int {
	affected, err := ptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptu *ProjectTaskUpdate) Exec(ctx context.Context) error {
	_, err := ptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptu *ProjectTaskUpdate) ExecX(ctx context.Context) {
	if err := ptu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptu *ProjectTaskUpdate) check() error {
	if v, ok := ptu.mutation.Name(); ok {
		if err := projecttask.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "ProjectTask.name": %w`, err)}
		}
	}
	if v, ok := ptu.mutation.AssigneeName(); ok {
		if err := projecttask.AssigneeNameValidator(v); err != nil {
			return &ValidationError{Name: "assigneeName", err: fmt.Errorf(`generated: validator failed for field "ProjectTask.assigneeName": %w`, err)}
		}
	}
	if v, ok := ptu.mutation.Status(); ok {
		if err := projecttask.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ProjectTask.status": %w`, err)}
		}
	}
	if ptu.mutation.ProjectCleared() && len(ptu.mutation.ProjectIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "ProjectTask.project"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ptu *ProjectTaskUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProjectTaskUpdate {
	ptu.modifiers = append(ptu.modifiers, modifiers...)
	return ptu
}

func (ptu *ProjectTaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ptu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(projecttask.Table, projecttask.Columns, sqlgraph.NewFieldSpec(projecttask.FieldID, field.TypeInt))
	if ps := ptu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ptu.mutation.CreatedAtCleared() {
		_spec.ClearField(projecttask.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ptu.mutation.Name(); ok {
		_spec.SetField(projecttask.FieldName, field.TypeString, value)
	}
	if value, ok := ptu.mutation.AssigneeName(); ok {
		_spec.SetField(projecttask.FieldAssigneeName, field.TypeString, value)
	}
	if value, ok := ptu.mutation.Location(); ok {
		_spec.SetField(projecttask.FieldLocation, field.TypeString, value)
	}
	if ptu.mutation.LocationCleared() {
		_spec.ClearField(projecttask.FieldLocation, field.TypeString)
	}
	if value, ok := ptu.mutation.DueDate(); ok {
		_spec.SetField(projecttask.FieldDueDate, field.TypeTime, value)
	}
	if value, ok := ptu.mutation.StartDate(); ok {
		_spec.SetField(projecttask.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := ptu.mutation.EndDate(); ok {
		_spec.SetField(projecttask.FieldEndDate, field.TypeTime, value)
	}
	if value, ok := ptu.mutation.Description(); ok {
		_spec.SetField(projecttask.FieldDescription, field.TypeString, value)
	}
	if ptu.mutation.DescriptionCleared() {
		_spec.ClearField(projecttask.FieldDescription, field.TypeString)
	}
	if value, ok := ptu.mutation.Status(); ok {
		_spec.SetField(projecttask.FieldStatus, field.TypeEnum, value)
	}
	if ptu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projecttask.ProjectTable,
			Columns: []string{projecttask.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projecttask.ProjectTable,
			Columns: []string{projecttask.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ptu.mutation.AssigneeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projecttask.AssigneeTable,
			Columns: []string{projecttask.AssigneeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.AssigneeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projecttask.AssigneeTable,
			Columns: []string{projecttask.AssigneeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ptu.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   projecttask.ParticipantsTable,
			Columns: projecttask.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !ptu.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   projecttask.ParticipantsTable,
			Columns: projecttask.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   projecttask.ParticipantsTable,
			Columns: projecttask.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ptu.mutation.WorkShiftsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projecttask.WorkShiftsTable,
			Columns: []string{projecttask.WorkShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.RemovedWorkShiftsIDs(); len(nodes) > 0 && !ptu.mutation.WorkShiftsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projecttask.WorkShiftsTable,
			Columns: []string{projecttask.WorkShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.WorkShiftsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projecttask.WorkShiftsTable,
			Columns: []string{projecttask.WorkShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ptu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projecttask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ptu.mutation.done = true
	return n, nil
}

// ProjectTaskUpdateOne is the builder for updating a single ProjectTask entity.
type ProjectTaskUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ProjectTaskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (ptuo *ProjectTaskUpdateOne) SetName(s string) *ProjectTaskUpdateOne {
	ptuo.mutation.SetName(s)
	return ptuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ptuo *ProjectTaskUpdateOne) SetNillableName(s *string) *ProjectTaskUpdateOne {
	if s != nil {
		ptuo.SetName(*s)
	}
	return ptuo
}

// SetAssigneeName sets the "assigneeName" field.
func (ptuo *ProjectTaskUpdateOne) SetAssigneeName(s string) *ProjectTaskUpdateOne {
	ptuo.mutation.SetAssigneeName(s)
	return ptuo
}

// SetNillableAssigneeName sets the "assigneeName" field if the given value is not nil.
func (ptuo *ProjectTaskUpdateOne) SetNillableAssigneeName(s *string) *ProjectTaskUpdateOne {
	if s != nil {
		ptuo.SetAssigneeName(*s)
	}
	return ptuo
}

// SetLocation sets the "location" field.
func (ptuo *ProjectTaskUpdateOne) SetLocation(s string) *ProjectTaskUpdateOne {
	ptuo.mutation.SetLocation(s)
	return ptuo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (ptuo *ProjectTaskUpdateOne) SetNillableLocation(s *string) *ProjectTaskUpdateOne {
	if s != nil {
		ptuo.SetLocation(*s)
	}
	return ptuo
}

// ClearLocation clears the value of the "location" field.
func (ptuo *ProjectTaskUpdateOne) ClearLocation() *ProjectTaskUpdateOne {
	ptuo.mutation.ClearLocation()
	return ptuo
}

// SetDueDate sets the "dueDate" field.
func (ptuo *ProjectTaskUpdateOne) SetDueDate(t time.Time) *ProjectTaskUpdateOne {
	ptuo.mutation.SetDueDate(t)
	return ptuo
}

// SetNillableDueDate sets the "dueDate" field if the given value is not nil.
func (ptuo *ProjectTaskUpdateOne) SetNillableDueDate(t *time.Time) *ProjectTaskUpdateOne {
	if t != nil {
		ptuo.SetDueDate(*t)
	}
	return ptuo
}

// SetStartDate sets the "startDate" field.
func (ptuo *ProjectTaskUpdateOne) SetStartDate(t time.Time) *ProjectTaskUpdateOne {
	ptuo.mutation.SetStartDate(t)
	return ptuo
}

// SetNillableStartDate sets the "startDate" field if the given value is not nil.
func (ptuo *ProjectTaskUpdateOne) SetNillableStartDate(t *time.Time) *ProjectTaskUpdateOne {
	if t != nil {
		ptuo.SetStartDate(*t)
	}
	return ptuo
}

// SetEndDate sets the "endDate" field.
func (ptuo *ProjectTaskUpdateOne) SetEndDate(t time.Time) *ProjectTaskUpdateOne {
	ptuo.mutation.SetEndDate(t)
	return ptuo
}

// SetNillableEndDate sets the "endDate" field if the given value is not nil.
func (ptuo *ProjectTaskUpdateOne) SetNillableEndDate(t *time.Time) *ProjectTaskUpdateOne {
	if t != nil {
		ptuo.SetEndDate(*t)
	}
	return ptuo
}

// SetDescription sets the "description" field.
func (ptuo *ProjectTaskUpdateOne) SetDescription(s string) *ProjectTaskUpdateOne {
	ptuo.mutation.SetDescription(s)
	return ptuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ptuo *ProjectTaskUpdateOne) SetNillableDescription(s *string) *ProjectTaskUpdateOne {
	if s != nil {
		ptuo.SetDescription(*s)
	}
	return ptuo
}

// ClearDescription clears the value of the "description" field.
func (ptuo *ProjectTaskUpdateOne) ClearDescription() *ProjectTaskUpdateOne {
	ptuo.mutation.ClearDescription()
	return ptuo
}

// SetStatus sets the "status" field.
func (ptuo *ProjectTaskUpdateOne) SetStatus(pr projecttask.Status) *ProjectTaskUpdateOne {
	ptuo.mutation.SetStatus(pr)
	return ptuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ptuo *ProjectTaskUpdateOne) SetNillableStatus(pr *projecttask.Status) *ProjectTaskUpdateOne {
	if pr != nil {
		ptuo.SetStatus(*pr)
	}
	return ptuo
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (ptuo *ProjectTaskUpdateOne) SetProjectID(id int) *ProjectTaskUpdateOne {
	ptuo.mutation.SetProjectID(id)
	return ptuo
}

// SetProject sets the "project" edge to the Project entity.
func (ptuo *ProjectTaskUpdateOne) SetProject(p *Project) *ProjectTaskUpdateOne {
	return ptuo.SetProjectID(p.ID)
}

// SetAssigneeID sets the "assignee" edge to the User entity by ID.
func (ptuo *ProjectTaskUpdateOne) SetAssigneeID(id int) *ProjectTaskUpdateOne {
	ptuo.mutation.SetAssigneeID(id)
	return ptuo
}

// SetNillableAssigneeID sets the "assignee" edge to the User entity by ID if the given value is not nil.
func (ptuo *ProjectTaskUpdateOne) SetNillableAssigneeID(id *int) *ProjectTaskUpdateOne {
	if id != nil {
		ptuo = ptuo.SetAssigneeID(*id)
	}
	return ptuo
}

// SetAssignee sets the "assignee" edge to the User entity.
func (ptuo *ProjectTaskUpdateOne) SetAssignee(u *User) *ProjectTaskUpdateOne {
	return ptuo.SetAssigneeID(u.ID)
}

// AddParticipantIDs adds the "participants" edge to the User entity by IDs.
func (ptuo *ProjectTaskUpdateOne) AddParticipantIDs(ids ...int) *ProjectTaskUpdateOne {
	ptuo.mutation.AddParticipantIDs(ids...)
	return ptuo
}

// AddParticipants adds the "participants" edges to the User entity.
func (ptuo *ProjectTaskUpdateOne) AddParticipants(u ...*User) *ProjectTaskUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ptuo.AddParticipantIDs(ids...)
}

// AddWorkShiftIDs adds the "workShifts" edge to the Workshift entity by IDs.
func (ptuo *ProjectTaskUpdateOne) AddWorkShiftIDs(ids ...int) *ProjectTaskUpdateOne {
	ptuo.mutation.AddWorkShiftIDs(ids...)
	return ptuo
}

// AddWorkShifts adds the "workShifts" edges to the Workshift entity.
func (ptuo *ProjectTaskUpdateOne) AddWorkShifts(w ...*Workshift) *ProjectTaskUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return ptuo.AddWorkShiftIDs(ids...)
}

// Mutation returns the ProjectTaskMutation object of the builder.
func (ptuo *ProjectTaskUpdateOne) Mutation() *ProjectTaskMutation {
	return ptuo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (ptuo *ProjectTaskUpdateOne) ClearProject() *ProjectTaskUpdateOne {
	ptuo.mutation.ClearProject()
	return ptuo
}

// ClearAssignee clears the "assignee" edge to the User entity.
func (ptuo *ProjectTaskUpdateOne) ClearAssignee() *ProjectTaskUpdateOne {
	ptuo.mutation.ClearAssignee()
	return ptuo
}

// ClearParticipants clears all "participants" edges to the User entity.
func (ptuo *ProjectTaskUpdateOne) ClearParticipants() *ProjectTaskUpdateOne {
	ptuo.mutation.ClearParticipants()
	return ptuo
}

// RemoveParticipantIDs removes the "participants" edge to User entities by IDs.
func (ptuo *ProjectTaskUpdateOne) RemoveParticipantIDs(ids ...int) *ProjectTaskUpdateOne {
	ptuo.mutation.RemoveParticipantIDs(ids...)
	return ptuo
}

// RemoveParticipants removes "participants" edges to User entities.
func (ptuo *ProjectTaskUpdateOne) RemoveParticipants(u ...*User) *ProjectTaskUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ptuo.RemoveParticipantIDs(ids...)
}

// ClearWorkShifts clears all "workShifts" edges to the Workshift entity.
func (ptuo *ProjectTaskUpdateOne) ClearWorkShifts() *ProjectTaskUpdateOne {
	ptuo.mutation.ClearWorkShifts()
	return ptuo
}

// RemoveWorkShiftIDs removes the "workShifts" edge to Workshift entities by IDs.
func (ptuo *ProjectTaskUpdateOne) RemoveWorkShiftIDs(ids ...int) *ProjectTaskUpdateOne {
	ptuo.mutation.RemoveWorkShiftIDs(ids...)
	return ptuo
}

// RemoveWorkShifts removes "workShifts" edges to Workshift entities.
func (ptuo *ProjectTaskUpdateOne) RemoveWorkShifts(w ...*Workshift) *ProjectTaskUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return ptuo.RemoveWorkShiftIDs(ids...)
}

// Where appends a list predicates to the ProjectTaskUpdate builder.
func (ptuo *ProjectTaskUpdateOne) Where(ps ...predicate.ProjectTask) *ProjectTaskUpdateOne {
	ptuo.mutation.Where(ps...)
	return ptuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ptuo *ProjectTaskUpdateOne) Select(field string, fields ...string) *ProjectTaskUpdateOne {
	ptuo.fields = append([]string{field}, fields...)
	return ptuo
}

// Save executes the query and returns the updated ProjectTask entity.
func (ptuo *ProjectTaskUpdateOne) Save(ctx context.Context) (*ProjectTask, error) {
	return withHooks(ctx, ptuo.sqlSave, ptuo.mutation, ptuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptuo *ProjectTaskUpdateOne) SaveX(ctx context.Context) *ProjectTask {
	node, err := ptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptuo *ProjectTaskUpdateOne) Exec(ctx context.Context) error {
	_, err := ptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptuo *ProjectTaskUpdateOne) ExecX(ctx context.Context) {
	if err := ptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptuo *ProjectTaskUpdateOne) check() error {
	if v, ok := ptuo.mutation.Name(); ok {
		if err := projecttask.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "ProjectTask.name": %w`, err)}
		}
	}
	if v, ok := ptuo.mutation.AssigneeName(); ok {
		if err := projecttask.AssigneeNameValidator(v); err != nil {
			return &ValidationError{Name: "assigneeName", err: fmt.Errorf(`generated: validator failed for field "ProjectTask.assigneeName": %w`, err)}
		}
	}
	if v, ok := ptuo.mutation.Status(); ok {
		if err := projecttask.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ProjectTask.status": %w`, err)}
		}
	}
	if ptuo.mutation.ProjectCleared() && len(ptuo.mutation.ProjectIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "ProjectTask.project"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ptuo *ProjectTaskUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProjectTaskUpdateOne {
	ptuo.modifiers = append(ptuo.modifiers, modifiers...)
	return ptuo
}

func (ptuo *ProjectTaskUpdateOne) sqlSave(ctx context.Context) (_node *ProjectTask, err error) {
	if err := ptuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(projecttask.Table, projecttask.Columns, sqlgraph.NewFieldSpec(projecttask.FieldID, field.TypeInt))
	id, ok := ptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ProjectTask.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ptuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projecttask.FieldID)
		for _, f := range fields {
			if !projecttask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != projecttask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ptuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ptuo.mutation.CreatedAtCleared() {
		_spec.ClearField(projecttask.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ptuo.mutation.Name(); ok {
		_spec.SetField(projecttask.FieldName, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.AssigneeName(); ok {
		_spec.SetField(projecttask.FieldAssigneeName, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.Location(); ok {
		_spec.SetField(projecttask.FieldLocation, field.TypeString, value)
	}
	if ptuo.mutation.LocationCleared() {
		_spec.ClearField(projecttask.FieldLocation, field.TypeString)
	}
	if value, ok := ptuo.mutation.DueDate(); ok {
		_spec.SetField(projecttask.FieldDueDate, field.TypeTime, value)
	}
	if value, ok := ptuo.mutation.StartDate(); ok {
		_spec.SetField(projecttask.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := ptuo.mutation.EndDate(); ok {
		_spec.SetField(projecttask.FieldEndDate, field.TypeTime, value)
	}
	if value, ok := ptuo.mutation.Description(); ok {
		_spec.SetField(projecttask.FieldDescription, field.TypeString, value)
	}
	if ptuo.mutation.DescriptionCleared() {
		_spec.ClearField(projecttask.FieldDescription, field.TypeString)
	}
	if value, ok := ptuo.mutation.Status(); ok {
		_spec.SetField(projecttask.FieldStatus, field.TypeEnum, value)
	}
	if ptuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projecttask.ProjectTable,
			Columns: []string{projecttask.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projecttask.ProjectTable,
			Columns: []string{projecttask.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ptuo.mutation.AssigneeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projecttask.AssigneeTable,
			Columns: []string{projecttask.AssigneeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.AssigneeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projecttask.AssigneeTable,
			Columns: []string{projecttask.AssigneeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ptuo.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   projecttask.ParticipantsTable,
			Columns: projecttask.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !ptuo.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   projecttask.ParticipantsTable,
			Columns: projecttask.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   projecttask.ParticipantsTable,
			Columns: projecttask.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ptuo.mutation.WorkShiftsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projecttask.WorkShiftsTable,
			Columns: []string{projecttask.WorkShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.RemovedWorkShiftsIDs(); len(nodes) > 0 && !ptuo.mutation.WorkShiftsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projecttask.WorkShiftsTable,
			Columns: []string{projecttask.WorkShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.WorkShiftsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projecttask.WorkShiftsTable,
			Columns: []string{projecttask.WorkShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ptuo.modifiers...)
	_node = &ProjectTask{config: ptuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projecttask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ptuo.mutation.done = true
	return _node, nil
}
