// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"mazza/ent/generated/company"
	"mazza/ent/generated/inventory"
	"mazza/ent/generated/inventorymovement"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InventoryMovementCreate is the builder for creating a InventoryMovement entity.
type InventoryMovementCreate struct {
	config
	mutation *InventoryMovementMutation
	hooks    []Hook
}

// SetCreatedAt sets the "createdAt" field.
func (imc *InventoryMovementCreate) SetCreatedAt(t time.Time) *InventoryMovementCreate {
	imc.mutation.SetCreatedAt(t)
	return imc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (imc *InventoryMovementCreate) SetNillableCreatedAt(t *time.Time) *InventoryMovementCreate {
	if t != nil {
		imc.SetCreatedAt(*t)
	}
	return imc
}

// SetUpdatedAt sets the "updatedAt" field.
func (imc *InventoryMovementCreate) SetUpdatedAt(t time.Time) *InventoryMovementCreate {
	imc.mutation.SetUpdatedAt(t)
	return imc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (imc *InventoryMovementCreate) SetNillableUpdatedAt(t *time.Time) *InventoryMovementCreate {
	if t != nil {
		imc.SetUpdatedAt(*t)
	}
	return imc
}

// SetDeletedAt sets the "deletedAt" field.
func (imc *InventoryMovementCreate) SetDeletedAt(t time.Time) *InventoryMovementCreate {
	imc.mutation.SetDeletedAt(t)
	return imc
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (imc *InventoryMovementCreate) SetNillableDeletedAt(t *time.Time) *InventoryMovementCreate {
	if t != nil {
		imc.SetDeletedAt(*t)
	}
	return imc
}

// SetCategory sets the "category" field.
func (imc *InventoryMovementCreate) SetCategory(i inventorymovement.Category) *InventoryMovementCreate {
	imc.mutation.SetCategory(i)
	return imc
}

// SetQuantity sets the "quantity" field.
func (imc *InventoryMovementCreate) SetQuantity(f float64) *InventoryMovementCreate {
	imc.mutation.SetQuantity(f)
	return imc
}

// SetValue sets the "value" field.
func (imc *InventoryMovementCreate) SetValue(f float64) *InventoryMovementCreate {
	imc.mutation.SetValue(f)
	return imc
}

// SetDate sets the "date" field.
func (imc *InventoryMovementCreate) SetDate(t time.Time) *InventoryMovementCreate {
	imc.mutation.SetDate(t)
	return imc
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (imc *InventoryMovementCreate) SetNillableDate(t *time.Time) *InventoryMovementCreate {
	if t != nil {
		imc.SetDate(*t)
	}
	return imc
}

// SetSource sets the "source" field.
func (imc *InventoryMovementCreate) SetSource(s string) *InventoryMovementCreate {
	imc.mutation.SetSource(s)
	return imc
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (imc *InventoryMovementCreate) SetNillableSource(s *string) *InventoryMovementCreate {
	if s != nil {
		imc.SetSource(*s)
	}
	return imc
}

// SetDestination sets the "destination" field.
func (imc *InventoryMovementCreate) SetDestination(s string) *InventoryMovementCreate {
	imc.mutation.SetDestination(s)
	return imc
}

// SetNillableDestination sets the "destination" field if the given value is not nil.
func (imc *InventoryMovementCreate) SetNillableDestination(s *string) *InventoryMovementCreate {
	if s != nil {
		imc.SetDestination(*s)
	}
	return imc
}

// SetNotes sets the "notes" field.
func (imc *InventoryMovementCreate) SetNotes(s string) *InventoryMovementCreate {
	imc.mutation.SetNotes(s)
	return imc
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (imc *InventoryMovementCreate) SetCompanyID(id int) *InventoryMovementCreate {
	imc.mutation.SetCompanyID(id)
	return imc
}

// SetCompany sets the "company" edge to the Company entity.
func (imc *InventoryMovementCreate) SetCompany(c *Company) *InventoryMovementCreate {
	return imc.SetCompanyID(c.ID)
}

// SetInventoryID sets the "inventory" edge to the Inventory entity by ID.
func (imc *InventoryMovementCreate) SetInventoryID(id int) *InventoryMovementCreate {
	imc.mutation.SetInventoryID(id)
	return imc
}

// SetInventory sets the "inventory" edge to the Inventory entity.
func (imc *InventoryMovementCreate) SetInventory(i *Inventory) *InventoryMovementCreate {
	return imc.SetInventoryID(i.ID)
}

// Mutation returns the InventoryMovementMutation object of the builder.
func (imc *InventoryMovementCreate) Mutation() *InventoryMovementMutation {
	return imc.mutation
}

// Save creates the InventoryMovement in the database.
func (imc *InventoryMovementCreate) Save(ctx context.Context) (*InventoryMovement, error) {
	imc.defaults()
	return withHooks(ctx, imc.sqlSave, imc.mutation, imc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (imc *InventoryMovementCreate) SaveX(ctx context.Context) *InventoryMovement {
	v, err := imc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (imc *InventoryMovementCreate) Exec(ctx context.Context) error {
	_, err := imc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (imc *InventoryMovementCreate) ExecX(ctx context.Context) {
	if err := imc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (imc *InventoryMovementCreate) defaults() {
	if _, ok := imc.mutation.CreatedAt(); !ok {
		v := inventorymovement.DefaultCreatedAt()
		imc.mutation.SetCreatedAt(v)
	}
	if _, ok := imc.mutation.UpdatedAt(); !ok {
		v := inventorymovement.DefaultUpdatedAt()
		imc.mutation.SetUpdatedAt(v)
	}
	if _, ok := imc.mutation.Date(); !ok {
		v := inventorymovement.DefaultDate()
		imc.mutation.SetDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (imc *InventoryMovementCreate) check() error {
	if _, ok := imc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`generated: missing required field "InventoryMovement.createdAt"`)}
	}
	if _, ok := imc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`generated: missing required field "InventoryMovement.updatedAt"`)}
	}
	if _, ok := imc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`generated: missing required field "InventoryMovement.category"`)}
	}
	if v, ok := imc.mutation.Category(); ok {
		if err := inventorymovement.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`generated: validator failed for field "InventoryMovement.category": %w`, err)}
		}
	}
	if _, ok := imc.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`generated: missing required field "InventoryMovement.quantity"`)}
	}
	if _, ok := imc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`generated: missing required field "InventoryMovement.value"`)}
	}
	if _, ok := imc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`generated: missing required field "InventoryMovement.date"`)}
	}
	if _, ok := imc.mutation.Notes(); !ok {
		return &ValidationError{Name: "notes", err: errors.New(`generated: missing required field "InventoryMovement.notes"`)}
	}
	if len(imc.mutation.CompanyIDs()) == 0 {
		return &ValidationError{Name: "company", err: errors.New(`generated: missing required edge "InventoryMovement.company"`)}
	}
	if len(imc.mutation.InventoryIDs()) == 0 {
		return &ValidationError{Name: "inventory", err: errors.New(`generated: missing required edge "InventoryMovement.inventory"`)}
	}
	return nil
}

func (imc *InventoryMovementCreate) sqlSave(ctx context.Context) (*InventoryMovement, error) {
	if err := imc.check(); err != nil {
		return nil, err
	}
	_node, _spec := imc.createSpec()
	if err := sqlgraph.CreateNode(ctx, imc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	imc.mutation.id = &_node.ID
	imc.mutation.done = true
	return _node, nil
}

func (imc *InventoryMovementCreate) createSpec() (*InventoryMovement, *sqlgraph.CreateSpec) {
	var (
		_node = &InventoryMovement{config: imc.config}
		_spec = sqlgraph.NewCreateSpec(inventorymovement.Table, sqlgraph.NewFieldSpec(inventorymovement.FieldID, field.TypeInt))
	)
	if value, ok := imc.mutation.CreatedAt(); ok {
		_spec.SetField(inventorymovement.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := imc.mutation.UpdatedAt(); ok {
		_spec.SetField(inventorymovement.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := imc.mutation.DeletedAt(); ok {
		_spec.SetField(inventorymovement.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := imc.mutation.Category(); ok {
		_spec.SetField(inventorymovement.FieldCategory, field.TypeEnum, value)
		_node.Category = value
	}
	if value, ok := imc.mutation.Quantity(); ok {
		_spec.SetField(inventorymovement.FieldQuantity, field.TypeFloat64, value)
		_node.Quantity = value
	}
	if value, ok := imc.mutation.Value(); ok {
		_spec.SetField(inventorymovement.FieldValue, field.TypeFloat64, value)
		_node.Value = value
	}
	if value, ok := imc.mutation.Date(); ok {
		_spec.SetField(inventorymovement.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if value, ok := imc.mutation.Source(); ok {
		_spec.SetField(inventorymovement.FieldSource, field.TypeString, value)
		_node.Source = &value
	}
	if value, ok := imc.mutation.Destination(); ok {
		_spec.SetField(inventorymovement.FieldDestination, field.TypeString, value)
		_node.Destination = &value
	}
	if value, ok := imc.mutation.Notes(); ok {
		_spec.SetField(inventorymovement.FieldNotes, field.TypeString, value)
		_node.Notes = value
	}
	if nodes := imc.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventorymovement.CompanyTable,
			Columns: []string{inventorymovement.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.company_inventory_movements = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := imc.mutation.InventoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventorymovement.InventoryTable,
			Columns: []string{inventorymovement.InventoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.inventory_movements = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InventoryMovementCreateBulk is the builder for creating many InventoryMovement entities in bulk.
type InventoryMovementCreateBulk struct {
	config
	err      error
	builders []*InventoryMovementCreate
}

// Save creates the InventoryMovement entities in the database.
func (imcb *InventoryMovementCreateBulk) Save(ctx context.Context) ([]*InventoryMovement, error) {
	if imcb.err != nil {
		return nil, imcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(imcb.builders))
	nodes := make([]*InventoryMovement, len(imcb.builders))
	mutators := make([]Mutator, len(imcb.builders))
	for i := range imcb.builders {
		func(i int, root context.Context) {
			builder := imcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InventoryMovementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, imcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, imcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, imcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (imcb *InventoryMovementCreateBulk) SaveX(ctx context.Context) []*InventoryMovement {
	v, err := imcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (imcb *InventoryMovementCreateBulk) Exec(ctx context.Context) error {
	_, err := imcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (imcb *InventoryMovementCreateBulk) ExecX(ctx context.Context) {
	if err := imcb.Exec(ctx); err != nil {
		panic(err)
	}
}
