// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"mazza/ent/generated/company"
	"mazza/ent/generated/projecttask"
	"mazza/ent/generated/user"
	"mazza/ent/generated/workshift"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Workshift is the model entity for the Workshift schema.
type Workshift struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// DeletedAt holds the value of the "deletedAt" field.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	// time that this shift was approved by the supervisor
	ApprovedAt *time.Time `json:"approvedAt,omitempty"`
	// ClockIn holds the value of the "clockIn" field.
	ClockIn time.Time `json:"clockIn,omitempty"`
	// ClockOut holds the value of the "clockOut" field.
	ClockOut *time.Time `json:"clockOut,omitempty"`
	// it expects a serialized json like: {latitude: float, longitude: float, description: string}
	ClockInLocation string `json:"clockInLocation,omitempty"`
	// it expects a serialized json like: {latitude: float, longitude: float, description: string}
	ClockOutLocation string `json:"clockOutLocation,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// this is only used when the current item is a shift edit request
	Note string `json:"note,omitempty"`
	// Status holds the value of the "status" field.
	Status workshift.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkshiftQuery when eager-loading is set.
	Edges                     WorkshiftEdges `json:"edges"`
	company_work_shifts       *int
	project_task_work_shifts  *int
	user_approved_work_shifts *int
	user_work_shifts          *int
	workshift_edit_request    *int
	selectValues              sql.SelectValues
}

// WorkshiftEdges holds the relations/edges for other nodes in the graph.
type WorkshiftEdges struct {
	// Company holds the value of the company edge.
	Company *Company `json:"company,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// ApprovedBy holds the value of the approvedBy edge.
	ApprovedBy *User `json:"approvedBy,omitempty"`
	// Task holds the value of the task edge.
	Task *ProjectTask `json:"task,omitempty"`
	// EditRequest holds the value of the editRequest edge.
	EditRequest *Workshift `json:"editRequest,omitempty"`
	// WorkShift holds the value of the workShift edge.
	WorkShift *Workshift `json:"workShift,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
	// totalCount holds the count of the edges above.
	totalCount [6]map[string]int
}

// CompanyOrErr returns the Company value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkshiftEdges) CompanyOrErr() (*Company, error) {
	if e.Company != nil {
		return e.Company, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: company.Label}
	}
	return nil, &NotLoadedError{edge: "company"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkshiftEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ApprovedByOrErr returns the ApprovedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkshiftEdges) ApprovedByOrErr() (*User, error) {
	if e.ApprovedBy != nil {
		return e.ApprovedBy, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "approvedBy"}
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkshiftEdges) TaskOrErr() (*ProjectTask, error) {
	if e.Task != nil {
		return e.Task, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: projecttask.Label}
	}
	return nil, &NotLoadedError{edge: "task"}
}

// EditRequestOrErr returns the EditRequest value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkshiftEdges) EditRequestOrErr() (*Workshift, error) {
	if e.EditRequest != nil {
		return e.EditRequest, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: workshift.Label}
	}
	return nil, &NotLoadedError{edge: "editRequest"}
}

// WorkShiftOrErr returns the WorkShift value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkshiftEdges) WorkShiftOrErr() (*Workshift, error) {
	if e.WorkShift != nil {
		return e.WorkShift, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: workshift.Label}
	}
	return nil, &NotLoadedError{edge: "workShift"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Workshift) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workshift.FieldID:
			values[i] = new(sql.NullInt64)
		case workshift.FieldClockInLocation, workshift.FieldClockOutLocation, workshift.FieldDescription, workshift.FieldNote, workshift.FieldStatus:
			values[i] = new(sql.NullString)
		case workshift.FieldCreatedAt, workshift.FieldUpdatedAt, workshift.FieldDeletedAt, workshift.FieldApprovedAt, workshift.FieldClockIn, workshift.FieldClockOut:
			values[i] = new(sql.NullTime)
		case workshift.ForeignKeys[0]: // company_work_shifts
			values[i] = new(sql.NullInt64)
		case workshift.ForeignKeys[1]: // project_task_work_shifts
			values[i] = new(sql.NullInt64)
		case workshift.ForeignKeys[2]: // user_approved_work_shifts
			values[i] = new(sql.NullInt64)
		case workshift.ForeignKeys[3]: // user_work_shifts
			values[i] = new(sql.NullInt64)
		case workshift.ForeignKeys[4]: // workshift_edit_request
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Workshift fields.
func (w *Workshift) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workshift.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			w.ID = int(value.Int64)
		case workshift.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				w.CreatedAt = value.Time
			}
		case workshift.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				w.UpdatedAt = value.Time
			}
		case workshift.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deletedAt", values[i])
			} else if value.Valid {
				w.DeletedAt = new(time.Time)
				*w.DeletedAt = value.Time
			}
		case workshift.FieldApprovedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field approvedAt", values[i])
			} else if value.Valid {
				w.ApprovedAt = new(time.Time)
				*w.ApprovedAt = value.Time
			}
		case workshift.FieldClockIn:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field clockIn", values[i])
			} else if value.Valid {
				w.ClockIn = value.Time
			}
		case workshift.FieldClockOut:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field clockOut", values[i])
			} else if value.Valid {
				w.ClockOut = new(time.Time)
				*w.ClockOut = value.Time
			}
		case workshift.FieldClockInLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field clockInLocation", values[i])
			} else if value.Valid {
				w.ClockInLocation = value.String
			}
		case workshift.FieldClockOutLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field clockOutLocation", values[i])
			} else if value.Valid {
				w.ClockOutLocation = value.String
			}
		case workshift.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				w.Description = value.String
			}
		case workshift.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[i])
			} else if value.Valid {
				w.Note = value.String
			}
		case workshift.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				w.Status = workshift.Status(value.String)
			}
		case workshift.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field company_work_shifts", value)
			} else if value.Valid {
				w.company_work_shifts = new(int)
				*w.company_work_shifts = int(value.Int64)
			}
		case workshift.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field project_task_work_shifts", value)
			} else if value.Valid {
				w.project_task_work_shifts = new(int)
				*w.project_task_work_shifts = int(value.Int64)
			}
		case workshift.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_approved_work_shifts", value)
			} else if value.Valid {
				w.user_approved_work_shifts = new(int)
				*w.user_approved_work_shifts = int(value.Int64)
			}
		case workshift.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_work_shifts", value)
			} else if value.Valid {
				w.user_work_shifts = new(int)
				*w.user_work_shifts = int(value.Int64)
			}
		case workshift.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field workshift_edit_request", value)
			} else if value.Valid {
				w.workshift_edit_request = new(int)
				*w.workshift_edit_request = int(value.Int64)
			}
		default:
			w.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Workshift.
// This includes values selected through modifiers, order, etc.
func (w *Workshift) Value(name string) (ent.Value, error) {
	return w.selectValues.Get(name)
}

// QueryCompany queries the "company" edge of the Workshift entity.
func (w *Workshift) QueryCompany() *CompanyQuery {
	return NewWorkshiftClient(w.config).QueryCompany(w)
}

// QueryUser queries the "user" edge of the Workshift entity.
func (w *Workshift) QueryUser() *UserQuery {
	return NewWorkshiftClient(w.config).QueryUser(w)
}

// QueryApprovedBy queries the "approvedBy" edge of the Workshift entity.
func (w *Workshift) QueryApprovedBy() *UserQuery {
	return NewWorkshiftClient(w.config).QueryApprovedBy(w)
}

// QueryTask queries the "task" edge of the Workshift entity.
func (w *Workshift) QueryTask() *ProjectTaskQuery {
	return NewWorkshiftClient(w.config).QueryTask(w)
}

// QueryEditRequest queries the "editRequest" edge of the Workshift entity.
func (w *Workshift) QueryEditRequest() *WorkshiftQuery {
	return NewWorkshiftClient(w.config).QueryEditRequest(w)
}

// QueryWorkShift queries the "workShift" edge of the Workshift entity.
func (w *Workshift) QueryWorkShift() *WorkshiftQuery {
	return NewWorkshiftClient(w.config).QueryWorkShift(w)
}

// Update returns a builder for updating this Workshift.
// Note that you need to call Workshift.Unwrap() before calling this method if this Workshift
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Workshift) Update() *WorkshiftUpdateOne {
	return NewWorkshiftClient(w.config).UpdateOne(w)
}

// Unwrap unwraps the Workshift entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Workshift) Unwrap() *Workshift {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("generated: Workshift is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Workshift) String() string {
	var builder strings.Builder
	builder.WriteString("Workshift(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("createdAt=")
	builder.WriteString(w.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(w.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := w.DeletedAt; v != nil {
		builder.WriteString("deletedAt=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := w.ApprovedAt; v != nil {
		builder.WriteString("approvedAt=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("clockIn=")
	builder.WriteString(w.ClockIn.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := w.ClockOut; v != nil {
		builder.WriteString("clockOut=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("clockInLocation=")
	builder.WriteString(w.ClockInLocation)
	builder.WriteString(", ")
	builder.WriteString("clockOutLocation=")
	builder.WriteString(w.ClockOutLocation)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(w.Description)
	builder.WriteString(", ")
	builder.WriteString("note=")
	builder.WriteString(w.Note)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", w.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Workshifts is a parsable slice of Workshift.
type Workshifts []*Workshift
