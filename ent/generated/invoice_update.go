// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"mazza/ent/generated/company"
	"mazza/ent/generated/customer"
	"mazza/ent/generated/invoice"
	"mazza/ent/generated/predicate"
	"mazza/ent/generated/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InvoiceUpdate is the builder for updating Invoice entities.
type InvoiceUpdate struct {
	config
	hooks     []Hook
	mutation  *InvoiceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the InvoiceUpdate builder.
func (iu *InvoiceUpdate) Where(ps ...predicate.Invoice) *InvoiceUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetUpdatedAt sets the "updatedAt" field.
func (iu *InvoiceUpdate) SetUpdatedAt(t time.Time) *InvoiceUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetDeletedAt sets the "deletedAt" field.
func (iu *InvoiceUpdate) SetDeletedAt(t time.Time) *InvoiceUpdate {
	iu.mutation.SetDeletedAt(t)
	return iu
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableDeletedAt(t *time.Time) *InvoiceUpdate {
	if t != nil {
		iu.SetDeletedAt(*t)
	}
	return iu
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (iu *InvoiceUpdate) ClearDeletedAt() *InvoiceUpdate {
	iu.mutation.ClearDeletedAt()
	return iu
}

// SetCompanyLogo sets the "companyLogo" field.
func (iu *InvoiceUpdate) SetCompanyLogo(s string) *InvoiceUpdate {
	iu.mutation.SetCompanyLogo(s)
	return iu
}

// SetNillableCompanyLogo sets the "companyLogo" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableCompanyLogo(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetCompanyLogo(*s)
	}
	return iu
}

// ClearCompanyLogo clears the value of the "companyLogo" field.
func (iu *InvoiceUpdate) ClearCompanyLogo() *InvoiceUpdate {
	iu.mutation.ClearCompanyLogo()
	return iu
}

// SetCompanyName sets the "companyName" field.
func (iu *InvoiceUpdate) SetCompanyName(s string) *InvoiceUpdate {
	iu.mutation.SetCompanyName(s)
	return iu
}

// SetNillableCompanyName sets the "companyName" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableCompanyName(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetCompanyName(*s)
	}
	return iu
}

// SetCompanyTaxID sets the "companyTaxID" field.
func (iu *InvoiceUpdate) SetCompanyTaxID(s string) *InvoiceUpdate {
	iu.mutation.SetCompanyTaxID(s)
	return iu
}

// SetNillableCompanyTaxID sets the "companyTaxID" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableCompanyTaxID(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetCompanyTaxID(*s)
	}
	return iu
}

// ClearCompanyTaxID clears the value of the "companyTaxID" field.
func (iu *InvoiceUpdate) ClearCompanyTaxID() *InvoiceUpdate {
	iu.mutation.ClearCompanyTaxID()
	return iu
}

// SetCompanyAddress sets the "companyAddress" field.
func (iu *InvoiceUpdate) SetCompanyAddress(s string) *InvoiceUpdate {
	iu.mutation.SetCompanyAddress(s)
	return iu
}

// SetNillableCompanyAddress sets the "companyAddress" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableCompanyAddress(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetCompanyAddress(*s)
	}
	return iu
}

// SetCompanyCity sets the "companyCity" field.
func (iu *InvoiceUpdate) SetCompanyCity(s string) *InvoiceUpdate {
	iu.mutation.SetCompanyCity(s)
	return iu
}

// SetNillableCompanyCity sets the "companyCity" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableCompanyCity(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetCompanyCity(*s)
	}
	return iu
}

// SetCompanyEmail sets the "companyEmail" field.
func (iu *InvoiceUpdate) SetCompanyEmail(s string) *InvoiceUpdate {
	iu.mutation.SetCompanyEmail(s)
	return iu
}

// SetNillableCompanyEmail sets the "companyEmail" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableCompanyEmail(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetCompanyEmail(*s)
	}
	return iu
}

// ClearCompanyEmail clears the value of the "companyEmail" field.
func (iu *InvoiceUpdate) ClearCompanyEmail() *InvoiceUpdate {
	iu.mutation.ClearCompanyEmail()
	return iu
}

// SetCompanyPhone sets the "companyPhone" field.
func (iu *InvoiceUpdate) SetCompanyPhone(s string) *InvoiceUpdate {
	iu.mutation.SetCompanyPhone(s)
	return iu
}

// SetNillableCompanyPhone sets the "companyPhone" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableCompanyPhone(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetCompanyPhone(*s)
	}
	return iu
}

// ClearCompanyPhone clears the value of the "companyPhone" field.
func (iu *InvoiceUpdate) ClearCompanyPhone() *InvoiceUpdate {
	iu.mutation.ClearCompanyPhone()
	return iu
}

// SetNumber sets the "number" field.
func (iu *InvoiceUpdate) SetNumber(s string) *InvoiceUpdate {
	iu.mutation.SetNumber(s)
	return iu
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableNumber(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetNumber(*s)
	}
	return iu
}

// ClearNumber clears the value of the "number" field.
func (iu *InvoiceUpdate) ClearNumber() *InvoiceUpdate {
	iu.mutation.ClearNumber()
	return iu
}

// SetIssueDate sets the "issueDate" field.
func (iu *InvoiceUpdate) SetIssueDate(t time.Time) *InvoiceUpdate {
	iu.mutation.SetIssueDate(t)
	return iu
}

// SetNillableIssueDate sets the "issueDate" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableIssueDate(t *time.Time) *InvoiceUpdate {
	if t != nil {
		iu.SetIssueDate(*t)
	}
	return iu
}

// SetDueDate sets the "dueDate" field.
func (iu *InvoiceUpdate) SetDueDate(t time.Time) *InvoiceUpdate {
	iu.mutation.SetDueDate(t)
	return iu
}

// SetNillableDueDate sets the "dueDate" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableDueDate(t *time.Time) *InvoiceUpdate {
	if t != nil {
		iu.SetDueDate(*t)
	}
	return iu
}

// SetPaidAt sets the "paidAt" field.
func (iu *InvoiceUpdate) SetPaidAt(t time.Time) *InvoiceUpdate {
	iu.mutation.SetPaidAt(t)
	return iu
}

// SetNillablePaidAt sets the "paidAt" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillablePaidAt(t *time.Time) *InvoiceUpdate {
	if t != nil {
		iu.SetPaidAt(*t)
	}
	return iu
}

// ClearPaidAt clears the value of the "paidAt" field.
func (iu *InvoiceUpdate) ClearPaidAt() *InvoiceUpdate {
	iu.mutation.ClearPaidAt()
	return iu
}

// SetStatus sets the "status" field.
func (iu *InvoiceUpdate) SetStatus(i invoice.Status) *InvoiceUpdate {
	iu.mutation.SetStatus(i)
	return iu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableStatus(i *invoice.Status) *InvoiceUpdate {
	if i != nil {
		iu.SetStatus(*i)
	}
	return iu
}

// SetCustomerName sets the "customerName" field.
func (iu *InvoiceUpdate) SetCustomerName(s string) *InvoiceUpdate {
	iu.mutation.SetCustomerName(s)
	return iu
}

// SetNillableCustomerName sets the "customerName" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableCustomerName(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetCustomerName(*s)
	}
	return iu
}

// ClearCustomerName clears the value of the "customerName" field.
func (iu *InvoiceUpdate) ClearCustomerName() *InvoiceUpdate {
	iu.mutation.ClearCustomerName()
	return iu
}

// SetCustomerTaxID sets the "customerTaxID" field.
func (iu *InvoiceUpdate) SetCustomerTaxID(s string) *InvoiceUpdate {
	iu.mutation.SetCustomerTaxID(s)
	return iu
}

// SetNillableCustomerTaxID sets the "customerTaxID" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableCustomerTaxID(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetCustomerTaxID(*s)
	}
	return iu
}

// ClearCustomerTaxID clears the value of the "customerTaxID" field.
func (iu *InvoiceUpdate) ClearCustomerTaxID() *InvoiceUpdate {
	iu.mutation.ClearCustomerTaxID()
	return iu
}

// SetCustomerAddress sets the "customerAddress" field.
func (iu *InvoiceUpdate) SetCustomerAddress(s string) *InvoiceUpdate {
	iu.mutation.SetCustomerAddress(s)
	return iu
}

// SetNillableCustomerAddress sets the "customerAddress" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableCustomerAddress(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetCustomerAddress(*s)
	}
	return iu
}

// ClearCustomerAddress clears the value of the "customerAddress" field.
func (iu *InvoiceUpdate) ClearCustomerAddress() *InvoiceUpdate {
	iu.mutation.ClearCustomerAddress()
	return iu
}

// SetCustomerCity sets the "customerCity" field.
func (iu *InvoiceUpdate) SetCustomerCity(s string) *InvoiceUpdate {
	iu.mutation.SetCustomerCity(s)
	return iu
}

// SetNillableCustomerCity sets the "customerCity" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableCustomerCity(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetCustomerCity(*s)
	}
	return iu
}

// ClearCustomerCity clears the value of the "customerCity" field.
func (iu *InvoiceUpdate) ClearCustomerCity() *InvoiceUpdate {
	iu.mutation.ClearCustomerCity()
	return iu
}

// SetCustomerEmail sets the "customerEmail" field.
func (iu *InvoiceUpdate) SetCustomerEmail(s string) *InvoiceUpdate {
	iu.mutation.SetCustomerEmail(s)
	return iu
}

// SetNillableCustomerEmail sets the "customerEmail" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableCustomerEmail(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetCustomerEmail(*s)
	}
	return iu
}

// ClearCustomerEmail clears the value of the "customerEmail" field.
func (iu *InvoiceUpdate) ClearCustomerEmail() *InvoiceUpdate {
	iu.mutation.ClearCustomerEmail()
	return iu
}

// SetCustomerPhone sets the "customerPhone" field.
func (iu *InvoiceUpdate) SetCustomerPhone(s string) *InvoiceUpdate {
	iu.mutation.SetCustomerPhone(s)
	return iu
}

// SetNillableCustomerPhone sets the "customerPhone" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableCustomerPhone(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetCustomerPhone(*s)
	}
	return iu
}

// ClearCustomerPhone clears the value of the "customerPhone" field.
func (iu *InvoiceUpdate) ClearCustomerPhone() *InvoiceUpdate {
	iu.mutation.ClearCustomerPhone()
	return iu
}

// SetItems sets the "items" field.
func (iu *InvoiceUpdate) SetItems(s string) *InvoiceUpdate {
	iu.mutation.SetItems(s)
	return iu
}

// SetNillableItems sets the "items" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableItems(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetItems(*s)
	}
	return iu
}

// SetSubtotal sets the "subtotal" field.
func (iu *InvoiceUpdate) SetSubtotal(f float64) *InvoiceUpdate {
	iu.mutation.ResetSubtotal()
	iu.mutation.SetSubtotal(f)
	return iu
}

// SetNillableSubtotal sets the "subtotal" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableSubtotal(f *float64) *InvoiceUpdate {
	if f != nil {
		iu.SetSubtotal(*f)
	}
	return iu
}

// AddSubtotal adds f to the "subtotal" field.
func (iu *InvoiceUpdate) AddSubtotal(f float64) *InvoiceUpdate {
	iu.mutation.AddSubtotal(f)
	return iu
}

// SetTax sets the "tax" field.
func (iu *InvoiceUpdate) SetTax(f float64) *InvoiceUpdate {
	iu.mutation.ResetTax()
	iu.mutation.SetTax(f)
	return iu
}

// SetNillableTax sets the "tax" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableTax(f *float64) *InvoiceUpdate {
	if f != nil {
		iu.SetTax(*f)
	}
	return iu
}

// AddTax adds f to the "tax" field.
func (iu *InvoiceUpdate) AddTax(f float64) *InvoiceUpdate {
	iu.mutation.AddTax(f)
	return iu
}

// SetTotal sets the "total" field.
func (iu *InvoiceUpdate) SetTotal(f float64) *InvoiceUpdate {
	iu.mutation.ResetTotal()
	iu.mutation.SetTotal(f)
	return iu
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableTotal(f *float64) *InvoiceUpdate {
	if f != nil {
		iu.SetTotal(*f)
	}
	return iu
}

// AddTotal adds f to the "total" field.
func (iu *InvoiceUpdate) AddTotal(f float64) *InvoiceUpdate {
	iu.mutation.AddTotal(f)
	return iu
}

// SetNotes sets the "notes" field.
func (iu *InvoiceUpdate) SetNotes(s string) *InvoiceUpdate {
	iu.mutation.SetNotes(s)
	return iu
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableNotes(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetNotes(*s)
	}
	return iu
}

// ClearNotes clears the value of the "notes" field.
func (iu *InvoiceUpdate) ClearNotes() *InvoiceUpdate {
	iu.mutation.ClearNotes()
	return iu
}

// SetPaymentMethod sets the "paymentMethod" field.
func (iu *InvoiceUpdate) SetPaymentMethod(s string) *InvoiceUpdate {
	iu.mutation.SetPaymentMethod(s)
	return iu
}

// SetNillablePaymentMethod sets the "paymentMethod" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillablePaymentMethod(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetPaymentMethod(*s)
	}
	return iu
}

// ClearPaymentMethod clears the value of the "paymentMethod" field.
func (iu *InvoiceUpdate) ClearPaymentMethod() *InvoiceUpdate {
	iu.mutation.ClearPaymentMethod()
	return iu
}

// SetBankName sets the "bankName" field.
func (iu *InvoiceUpdate) SetBankName(s string) *InvoiceUpdate {
	iu.mutation.SetBankName(s)
	return iu
}

// SetNillableBankName sets the "bankName" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableBankName(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetBankName(*s)
	}
	return iu
}

// ClearBankName clears the value of the "bankName" field.
func (iu *InvoiceUpdate) ClearBankName() *InvoiceUpdate {
	iu.mutation.ClearBankName()
	return iu
}

// SetBankAgency sets the "bankAgency" field.
func (iu *InvoiceUpdate) SetBankAgency(s string) *InvoiceUpdate {
	iu.mutation.SetBankAgency(s)
	return iu
}

// SetNillableBankAgency sets the "bankAgency" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableBankAgency(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetBankAgency(*s)
	}
	return iu
}

// ClearBankAgency clears the value of the "bankAgency" field.
func (iu *InvoiceUpdate) ClearBankAgency() *InvoiceUpdate {
	iu.mutation.ClearBankAgency()
	return iu
}

// SetBankAccountNumber sets the "bankAccountNumber" field.
func (iu *InvoiceUpdate) SetBankAccountNumber(s string) *InvoiceUpdate {
	iu.mutation.SetBankAccountNumber(s)
	return iu
}

// SetNillableBankAccountNumber sets the "bankAccountNumber" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableBankAccountNumber(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetBankAccountNumber(*s)
	}
	return iu
}

// ClearBankAccountNumber clears the value of the "bankAccountNumber" field.
func (iu *InvoiceUpdate) ClearBankAccountNumber() *InvoiceUpdate {
	iu.mutation.ClearBankAccountNumber()
	return iu
}

// SetBankAccountName sets the "bankAccountName" field.
func (iu *InvoiceUpdate) SetBankAccountName(s string) *InvoiceUpdate {
	iu.mutation.SetBankAccountName(s)
	return iu
}

// SetNillableBankAccountName sets the "bankAccountName" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableBankAccountName(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetBankAccountName(*s)
	}
	return iu
}

// ClearBankAccountName clears the value of the "bankAccountName" field.
func (iu *InvoiceUpdate) ClearBankAccountName() *InvoiceUpdate {
	iu.mutation.ClearBankAccountName()
	return iu
}

// SetStorageURI sets the "storageURI" field.
func (iu *InvoiceUpdate) SetStorageURI(s string) *InvoiceUpdate {
	iu.mutation.SetStorageURI(s)
	return iu
}

// SetNillableStorageURI sets the "storageURI" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableStorageURI(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetStorageURI(*s)
	}
	return iu
}

// ClearStorageURI clears the value of the "storageURI" field.
func (iu *InvoiceUpdate) ClearStorageURI() *InvoiceUpdate {
	iu.mutation.ClearStorageURI()
	return iu
}

// SetURL sets the "URL" field.
func (iu *InvoiceUpdate) SetURL(s string) *InvoiceUpdate {
	iu.mutation.SetURL(s)
	return iu
}

// SetNillableURL sets the "URL" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableURL(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetURL(*s)
	}
	return iu
}

// ClearURL clears the value of the "URL" field.
func (iu *InvoiceUpdate) ClearURL() *InvoiceUpdate {
	iu.mutation.ClearURL()
	return iu
}

// SetFilename sets the "filename" field.
func (iu *InvoiceUpdate) SetFilename(s string) *InvoiceUpdate {
	iu.mutation.SetFilename(s)
	return iu
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableFilename(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetFilename(*s)
	}
	return iu
}

// ClearFilename clears the value of the "filename" field.
func (iu *InvoiceUpdate) ClearFilename() *InvoiceUpdate {
	iu.mutation.ClearFilename()
	return iu
}

// SetSize sets the "size" field.
func (iu *InvoiceUpdate) SetSize(f float64) *InvoiceUpdate {
	iu.mutation.ResetSize()
	iu.mutation.SetSize(f)
	return iu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableSize(f *float64) *InvoiceUpdate {
	if f != nil {
		iu.SetSize(*f)
	}
	return iu
}

// AddSize adds f to the "size" field.
func (iu *InvoiceUpdate) AddSize(f float64) *InvoiceUpdate {
	iu.mutation.AddSize(f)
	return iu
}

// ClearSize clears the value of the "size" field.
func (iu *InvoiceUpdate) ClearSize() *InvoiceUpdate {
	iu.mutation.ClearSize()
	return iu
}

// SetKeywords sets the "keywords" field.
func (iu *InvoiceUpdate) SetKeywords(s string) *InvoiceUpdate {
	iu.mutation.SetKeywords(s)
	return iu
}

// SetNillableKeywords sets the "keywords" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableKeywords(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetKeywords(*s)
	}
	return iu
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (iu *InvoiceUpdate) SetCompanyID(id int) *InvoiceUpdate {
	iu.mutation.SetCompanyID(id)
	return iu
}

// SetCompany sets the "company" edge to the Company entity.
func (iu *InvoiceUpdate) SetCompany(c *Company) *InvoiceUpdate {
	return iu.SetCompanyID(c.ID)
}

// SetIssuedByID sets the "issuedBy" edge to the User entity by ID.
func (iu *InvoiceUpdate) SetIssuedByID(id int) *InvoiceUpdate {
	iu.mutation.SetIssuedByID(id)
	return iu
}

// SetNillableIssuedByID sets the "issuedBy" edge to the User entity by ID if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableIssuedByID(id *int) *InvoiceUpdate {
	if id != nil {
		iu = iu.SetIssuedByID(*id)
	}
	return iu
}

// SetIssuedBy sets the "issuedBy" edge to the User entity.
func (iu *InvoiceUpdate) SetIssuedBy(u *User) *InvoiceUpdate {
	return iu.SetIssuedByID(u.ID)
}

// SetClientID sets the "client" edge to the Customer entity by ID.
func (iu *InvoiceUpdate) SetClientID(id int) *InvoiceUpdate {
	iu.mutation.SetClientID(id)
	return iu
}

// SetNillableClientID sets the "client" edge to the Customer entity by ID if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableClientID(id *int) *InvoiceUpdate {
	if id != nil {
		iu = iu.SetClientID(*id)
	}
	return iu
}

// SetClient sets the "client" edge to the Customer entity.
func (iu *InvoiceUpdate) SetClient(c *Customer) *InvoiceUpdate {
	return iu.SetClientID(c.ID)
}

// Mutation returns the InvoiceMutation object of the builder.
func (iu *InvoiceUpdate) Mutation() *InvoiceMutation {
	return iu.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (iu *InvoiceUpdate) ClearCompany() *InvoiceUpdate {
	iu.mutation.ClearCompany()
	return iu
}

// ClearIssuedBy clears the "issuedBy" edge to the User entity.
func (iu *InvoiceUpdate) ClearIssuedBy() *InvoiceUpdate {
	iu.mutation.ClearIssuedBy()
	return iu
}

// ClearClient clears the "client" edge to the Customer entity.
func (iu *InvoiceUpdate) ClearClient() *InvoiceUpdate {
	iu.mutation.ClearClient()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InvoiceUpdate) Save(ctx context.Context) (int, error) {
	iu.defaults()
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InvoiceUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InvoiceUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InvoiceUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *InvoiceUpdate) defaults() {
	if _, ok := iu.mutation.UpdatedAt(); !ok {
		v := invoice.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *InvoiceUpdate) check() error {
	if v, ok := iu.mutation.Status(); ok {
		if err := invoice.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Invoice.status": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Items(); ok {
		if err := invoice.ItemsValidator(v); err != nil {
			return &ValidationError{Name: "items", err: fmt.Errorf(`generated: validator failed for field "Invoice.items": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Subtotal(); ok {
		if err := invoice.SubtotalValidator(v); err != nil {
			return &ValidationError{Name: "subtotal", err: fmt.Errorf(`generated: validator failed for field "Invoice.subtotal": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Tax(); ok {
		if err := invoice.TaxValidator(v); err != nil {
			return &ValidationError{Name: "tax", err: fmt.Errorf(`generated: validator failed for field "Invoice.tax": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Total(); ok {
		if err := invoice.TotalValidator(v); err != nil {
			return &ValidationError{Name: "total", err: fmt.Errorf(`generated: validator failed for field "Invoice.total": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Size(); ok {
		if err := invoice.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`generated: validator failed for field "Invoice.size": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Keywords(); ok {
		if err := invoice.KeywordsValidator(v); err != nil {
			return &ValidationError{Name: "keywords", err: fmt.Errorf(`generated: validator failed for field "Invoice.keywords": %w`, err)}
		}
	}
	if iu.mutation.CompanyCleared() && len(iu.mutation.CompanyIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "Invoice.company"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iu *InvoiceUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InvoiceUpdate {
	iu.modifiers = append(iu.modifiers, modifiers...)
	return iu
}

func (iu *InvoiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(invoice.Table, invoice.Columns, sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(invoice.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.DeletedAt(); ok {
		_spec.SetField(invoice.FieldDeletedAt, field.TypeTime, value)
	}
	if iu.mutation.DeletedAtCleared() {
		_spec.ClearField(invoice.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := iu.mutation.CompanyLogo(); ok {
		_spec.SetField(invoice.FieldCompanyLogo, field.TypeString, value)
	}
	if iu.mutation.CompanyLogoCleared() {
		_spec.ClearField(invoice.FieldCompanyLogo, field.TypeString)
	}
	if value, ok := iu.mutation.CompanyName(); ok {
		_spec.SetField(invoice.FieldCompanyName, field.TypeString, value)
	}
	if value, ok := iu.mutation.CompanyTaxID(); ok {
		_spec.SetField(invoice.FieldCompanyTaxID, field.TypeString, value)
	}
	if iu.mutation.CompanyTaxIDCleared() {
		_spec.ClearField(invoice.FieldCompanyTaxID, field.TypeString)
	}
	if value, ok := iu.mutation.CompanyAddress(); ok {
		_spec.SetField(invoice.FieldCompanyAddress, field.TypeString, value)
	}
	if value, ok := iu.mutation.CompanyCity(); ok {
		_spec.SetField(invoice.FieldCompanyCity, field.TypeString, value)
	}
	if value, ok := iu.mutation.CompanyEmail(); ok {
		_spec.SetField(invoice.FieldCompanyEmail, field.TypeString, value)
	}
	if iu.mutation.CompanyEmailCleared() {
		_spec.ClearField(invoice.FieldCompanyEmail, field.TypeString)
	}
	if value, ok := iu.mutation.CompanyPhone(); ok {
		_spec.SetField(invoice.FieldCompanyPhone, field.TypeString, value)
	}
	if iu.mutation.CompanyPhoneCleared() {
		_spec.ClearField(invoice.FieldCompanyPhone, field.TypeString)
	}
	if value, ok := iu.mutation.Number(); ok {
		_spec.SetField(invoice.FieldNumber, field.TypeString, value)
	}
	if iu.mutation.NumberCleared() {
		_spec.ClearField(invoice.FieldNumber, field.TypeString)
	}
	if value, ok := iu.mutation.IssueDate(); ok {
		_spec.SetField(invoice.FieldIssueDate, field.TypeTime, value)
	}
	if value, ok := iu.mutation.DueDate(); ok {
		_spec.SetField(invoice.FieldDueDate, field.TypeTime, value)
	}
	if value, ok := iu.mutation.PaidAt(); ok {
		_spec.SetField(invoice.FieldPaidAt, field.TypeTime, value)
	}
	if iu.mutation.PaidAtCleared() {
		_spec.ClearField(invoice.FieldPaidAt, field.TypeTime)
	}
	if value, ok := iu.mutation.Status(); ok {
		_spec.SetField(invoice.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := iu.mutation.CustomerName(); ok {
		_spec.SetField(invoice.FieldCustomerName, field.TypeString, value)
	}
	if iu.mutation.CustomerNameCleared() {
		_spec.ClearField(invoice.FieldCustomerName, field.TypeString)
	}
	if value, ok := iu.mutation.CustomerTaxID(); ok {
		_spec.SetField(invoice.FieldCustomerTaxID, field.TypeString, value)
	}
	if iu.mutation.CustomerTaxIDCleared() {
		_spec.ClearField(invoice.FieldCustomerTaxID, field.TypeString)
	}
	if value, ok := iu.mutation.CustomerAddress(); ok {
		_spec.SetField(invoice.FieldCustomerAddress, field.TypeString, value)
	}
	if iu.mutation.CustomerAddressCleared() {
		_spec.ClearField(invoice.FieldCustomerAddress, field.TypeString)
	}
	if value, ok := iu.mutation.CustomerCity(); ok {
		_spec.SetField(invoice.FieldCustomerCity, field.TypeString, value)
	}
	if iu.mutation.CustomerCityCleared() {
		_spec.ClearField(invoice.FieldCustomerCity, field.TypeString)
	}
	if value, ok := iu.mutation.CustomerEmail(); ok {
		_spec.SetField(invoice.FieldCustomerEmail, field.TypeString, value)
	}
	if iu.mutation.CustomerEmailCleared() {
		_spec.ClearField(invoice.FieldCustomerEmail, field.TypeString)
	}
	if value, ok := iu.mutation.CustomerPhone(); ok {
		_spec.SetField(invoice.FieldCustomerPhone, field.TypeString, value)
	}
	if iu.mutation.CustomerPhoneCleared() {
		_spec.ClearField(invoice.FieldCustomerPhone, field.TypeString)
	}
	if value, ok := iu.mutation.Items(); ok {
		_spec.SetField(invoice.FieldItems, field.TypeString, value)
	}
	if value, ok := iu.mutation.Subtotal(); ok {
		_spec.SetField(invoice.FieldSubtotal, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AddedSubtotal(); ok {
		_spec.AddField(invoice.FieldSubtotal, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.Tax(); ok {
		_spec.SetField(invoice.FieldTax, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AddedTax(); ok {
		_spec.AddField(invoice.FieldTax, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.Total(); ok {
		_spec.SetField(invoice.FieldTotal, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AddedTotal(); ok {
		_spec.AddField(invoice.FieldTotal, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.Notes(); ok {
		_spec.SetField(invoice.FieldNotes, field.TypeString, value)
	}
	if iu.mutation.NotesCleared() {
		_spec.ClearField(invoice.FieldNotes, field.TypeString)
	}
	if value, ok := iu.mutation.PaymentMethod(); ok {
		_spec.SetField(invoice.FieldPaymentMethod, field.TypeString, value)
	}
	if iu.mutation.PaymentMethodCleared() {
		_spec.ClearField(invoice.FieldPaymentMethod, field.TypeString)
	}
	if value, ok := iu.mutation.BankName(); ok {
		_spec.SetField(invoice.FieldBankName, field.TypeString, value)
	}
	if iu.mutation.BankNameCleared() {
		_spec.ClearField(invoice.FieldBankName, field.TypeString)
	}
	if value, ok := iu.mutation.BankAgency(); ok {
		_spec.SetField(invoice.FieldBankAgency, field.TypeString, value)
	}
	if iu.mutation.BankAgencyCleared() {
		_spec.ClearField(invoice.FieldBankAgency, field.TypeString)
	}
	if value, ok := iu.mutation.BankAccountNumber(); ok {
		_spec.SetField(invoice.FieldBankAccountNumber, field.TypeString, value)
	}
	if iu.mutation.BankAccountNumberCleared() {
		_spec.ClearField(invoice.FieldBankAccountNumber, field.TypeString)
	}
	if value, ok := iu.mutation.BankAccountName(); ok {
		_spec.SetField(invoice.FieldBankAccountName, field.TypeString, value)
	}
	if iu.mutation.BankAccountNameCleared() {
		_spec.ClearField(invoice.FieldBankAccountName, field.TypeString)
	}
	if value, ok := iu.mutation.StorageURI(); ok {
		_spec.SetField(invoice.FieldStorageURI, field.TypeString, value)
	}
	if iu.mutation.StorageURICleared() {
		_spec.ClearField(invoice.FieldStorageURI, field.TypeString)
	}
	if value, ok := iu.mutation.URL(); ok {
		_spec.SetField(invoice.FieldURL, field.TypeString, value)
	}
	if iu.mutation.URLCleared() {
		_spec.ClearField(invoice.FieldURL, field.TypeString)
	}
	if value, ok := iu.mutation.Filename(); ok {
		_spec.SetField(invoice.FieldFilename, field.TypeString, value)
	}
	if iu.mutation.FilenameCleared() {
		_spec.ClearField(invoice.FieldFilename, field.TypeString)
	}
	if value, ok := iu.mutation.Size(); ok {
		_spec.SetField(invoice.FieldSize, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AddedSize(); ok {
		_spec.AddField(invoice.FieldSize, field.TypeFloat64, value)
	}
	if iu.mutation.SizeCleared() {
		_spec.ClearField(invoice.FieldSize, field.TypeFloat64)
	}
	if value, ok := iu.mutation.Keywords(); ok {
		_spec.SetField(invoice.FieldKeywords, field.TypeString, value)
	}
	if iu.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.CompanyTable,
			Columns: []string{invoice.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.CompanyTable,
			Columns: []string{invoice.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.IssuedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.IssuedByTable,
			Columns: []string{invoice.IssuedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.IssuedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.IssuedByTable,
			Columns: []string{invoice.IssuedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.ClientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.ClientTable,
			Columns: []string{invoice.ClientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ClientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.ClientTable,
			Columns: []string{invoice.ClientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(iu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invoice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// InvoiceUpdateOne is the builder for updating a single Invoice entity.
type InvoiceUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *InvoiceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updatedAt" field.
func (iuo *InvoiceUpdateOne) SetUpdatedAt(t time.Time) *InvoiceUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetDeletedAt sets the "deletedAt" field.
func (iuo *InvoiceUpdateOne) SetDeletedAt(t time.Time) *InvoiceUpdateOne {
	iuo.mutation.SetDeletedAt(t)
	return iuo
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableDeletedAt(t *time.Time) *InvoiceUpdateOne {
	if t != nil {
		iuo.SetDeletedAt(*t)
	}
	return iuo
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (iuo *InvoiceUpdateOne) ClearDeletedAt() *InvoiceUpdateOne {
	iuo.mutation.ClearDeletedAt()
	return iuo
}

// SetCompanyLogo sets the "companyLogo" field.
func (iuo *InvoiceUpdateOne) SetCompanyLogo(s string) *InvoiceUpdateOne {
	iuo.mutation.SetCompanyLogo(s)
	return iuo
}

// SetNillableCompanyLogo sets the "companyLogo" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableCompanyLogo(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetCompanyLogo(*s)
	}
	return iuo
}

// ClearCompanyLogo clears the value of the "companyLogo" field.
func (iuo *InvoiceUpdateOne) ClearCompanyLogo() *InvoiceUpdateOne {
	iuo.mutation.ClearCompanyLogo()
	return iuo
}

// SetCompanyName sets the "companyName" field.
func (iuo *InvoiceUpdateOne) SetCompanyName(s string) *InvoiceUpdateOne {
	iuo.mutation.SetCompanyName(s)
	return iuo
}

// SetNillableCompanyName sets the "companyName" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableCompanyName(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetCompanyName(*s)
	}
	return iuo
}

// SetCompanyTaxID sets the "companyTaxID" field.
func (iuo *InvoiceUpdateOne) SetCompanyTaxID(s string) *InvoiceUpdateOne {
	iuo.mutation.SetCompanyTaxID(s)
	return iuo
}

// SetNillableCompanyTaxID sets the "companyTaxID" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableCompanyTaxID(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetCompanyTaxID(*s)
	}
	return iuo
}

// ClearCompanyTaxID clears the value of the "companyTaxID" field.
func (iuo *InvoiceUpdateOne) ClearCompanyTaxID() *InvoiceUpdateOne {
	iuo.mutation.ClearCompanyTaxID()
	return iuo
}

// SetCompanyAddress sets the "companyAddress" field.
func (iuo *InvoiceUpdateOne) SetCompanyAddress(s string) *InvoiceUpdateOne {
	iuo.mutation.SetCompanyAddress(s)
	return iuo
}

// SetNillableCompanyAddress sets the "companyAddress" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableCompanyAddress(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetCompanyAddress(*s)
	}
	return iuo
}

// SetCompanyCity sets the "companyCity" field.
func (iuo *InvoiceUpdateOne) SetCompanyCity(s string) *InvoiceUpdateOne {
	iuo.mutation.SetCompanyCity(s)
	return iuo
}

// SetNillableCompanyCity sets the "companyCity" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableCompanyCity(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetCompanyCity(*s)
	}
	return iuo
}

// SetCompanyEmail sets the "companyEmail" field.
func (iuo *InvoiceUpdateOne) SetCompanyEmail(s string) *InvoiceUpdateOne {
	iuo.mutation.SetCompanyEmail(s)
	return iuo
}

// SetNillableCompanyEmail sets the "companyEmail" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableCompanyEmail(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetCompanyEmail(*s)
	}
	return iuo
}

// ClearCompanyEmail clears the value of the "companyEmail" field.
func (iuo *InvoiceUpdateOne) ClearCompanyEmail() *InvoiceUpdateOne {
	iuo.mutation.ClearCompanyEmail()
	return iuo
}

// SetCompanyPhone sets the "companyPhone" field.
func (iuo *InvoiceUpdateOne) SetCompanyPhone(s string) *InvoiceUpdateOne {
	iuo.mutation.SetCompanyPhone(s)
	return iuo
}

// SetNillableCompanyPhone sets the "companyPhone" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableCompanyPhone(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetCompanyPhone(*s)
	}
	return iuo
}

// ClearCompanyPhone clears the value of the "companyPhone" field.
func (iuo *InvoiceUpdateOne) ClearCompanyPhone() *InvoiceUpdateOne {
	iuo.mutation.ClearCompanyPhone()
	return iuo
}

// SetNumber sets the "number" field.
func (iuo *InvoiceUpdateOne) SetNumber(s string) *InvoiceUpdateOne {
	iuo.mutation.SetNumber(s)
	return iuo
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableNumber(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetNumber(*s)
	}
	return iuo
}

// ClearNumber clears the value of the "number" field.
func (iuo *InvoiceUpdateOne) ClearNumber() *InvoiceUpdateOne {
	iuo.mutation.ClearNumber()
	return iuo
}

// SetIssueDate sets the "issueDate" field.
func (iuo *InvoiceUpdateOne) SetIssueDate(t time.Time) *InvoiceUpdateOne {
	iuo.mutation.SetIssueDate(t)
	return iuo
}

// SetNillableIssueDate sets the "issueDate" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableIssueDate(t *time.Time) *InvoiceUpdateOne {
	if t != nil {
		iuo.SetIssueDate(*t)
	}
	return iuo
}

// SetDueDate sets the "dueDate" field.
func (iuo *InvoiceUpdateOne) SetDueDate(t time.Time) *InvoiceUpdateOne {
	iuo.mutation.SetDueDate(t)
	return iuo
}

// SetNillableDueDate sets the "dueDate" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableDueDate(t *time.Time) *InvoiceUpdateOne {
	if t != nil {
		iuo.SetDueDate(*t)
	}
	return iuo
}

// SetPaidAt sets the "paidAt" field.
func (iuo *InvoiceUpdateOne) SetPaidAt(t time.Time) *InvoiceUpdateOne {
	iuo.mutation.SetPaidAt(t)
	return iuo
}

// SetNillablePaidAt sets the "paidAt" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillablePaidAt(t *time.Time) *InvoiceUpdateOne {
	if t != nil {
		iuo.SetPaidAt(*t)
	}
	return iuo
}

// ClearPaidAt clears the value of the "paidAt" field.
func (iuo *InvoiceUpdateOne) ClearPaidAt() *InvoiceUpdateOne {
	iuo.mutation.ClearPaidAt()
	return iuo
}

// SetStatus sets the "status" field.
func (iuo *InvoiceUpdateOne) SetStatus(i invoice.Status) *InvoiceUpdateOne {
	iuo.mutation.SetStatus(i)
	return iuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableStatus(i *invoice.Status) *InvoiceUpdateOne {
	if i != nil {
		iuo.SetStatus(*i)
	}
	return iuo
}

// SetCustomerName sets the "customerName" field.
func (iuo *InvoiceUpdateOne) SetCustomerName(s string) *InvoiceUpdateOne {
	iuo.mutation.SetCustomerName(s)
	return iuo
}

// SetNillableCustomerName sets the "customerName" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableCustomerName(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetCustomerName(*s)
	}
	return iuo
}

// ClearCustomerName clears the value of the "customerName" field.
func (iuo *InvoiceUpdateOne) ClearCustomerName() *InvoiceUpdateOne {
	iuo.mutation.ClearCustomerName()
	return iuo
}

// SetCustomerTaxID sets the "customerTaxID" field.
func (iuo *InvoiceUpdateOne) SetCustomerTaxID(s string) *InvoiceUpdateOne {
	iuo.mutation.SetCustomerTaxID(s)
	return iuo
}

// SetNillableCustomerTaxID sets the "customerTaxID" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableCustomerTaxID(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetCustomerTaxID(*s)
	}
	return iuo
}

// ClearCustomerTaxID clears the value of the "customerTaxID" field.
func (iuo *InvoiceUpdateOne) ClearCustomerTaxID() *InvoiceUpdateOne {
	iuo.mutation.ClearCustomerTaxID()
	return iuo
}

// SetCustomerAddress sets the "customerAddress" field.
func (iuo *InvoiceUpdateOne) SetCustomerAddress(s string) *InvoiceUpdateOne {
	iuo.mutation.SetCustomerAddress(s)
	return iuo
}

// SetNillableCustomerAddress sets the "customerAddress" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableCustomerAddress(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetCustomerAddress(*s)
	}
	return iuo
}

// ClearCustomerAddress clears the value of the "customerAddress" field.
func (iuo *InvoiceUpdateOne) ClearCustomerAddress() *InvoiceUpdateOne {
	iuo.mutation.ClearCustomerAddress()
	return iuo
}

// SetCustomerCity sets the "customerCity" field.
func (iuo *InvoiceUpdateOne) SetCustomerCity(s string) *InvoiceUpdateOne {
	iuo.mutation.SetCustomerCity(s)
	return iuo
}

// SetNillableCustomerCity sets the "customerCity" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableCustomerCity(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetCustomerCity(*s)
	}
	return iuo
}

// ClearCustomerCity clears the value of the "customerCity" field.
func (iuo *InvoiceUpdateOne) ClearCustomerCity() *InvoiceUpdateOne {
	iuo.mutation.ClearCustomerCity()
	return iuo
}

// SetCustomerEmail sets the "customerEmail" field.
func (iuo *InvoiceUpdateOne) SetCustomerEmail(s string) *InvoiceUpdateOne {
	iuo.mutation.SetCustomerEmail(s)
	return iuo
}

// SetNillableCustomerEmail sets the "customerEmail" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableCustomerEmail(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetCustomerEmail(*s)
	}
	return iuo
}

// ClearCustomerEmail clears the value of the "customerEmail" field.
func (iuo *InvoiceUpdateOne) ClearCustomerEmail() *InvoiceUpdateOne {
	iuo.mutation.ClearCustomerEmail()
	return iuo
}

// SetCustomerPhone sets the "customerPhone" field.
func (iuo *InvoiceUpdateOne) SetCustomerPhone(s string) *InvoiceUpdateOne {
	iuo.mutation.SetCustomerPhone(s)
	return iuo
}

// SetNillableCustomerPhone sets the "customerPhone" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableCustomerPhone(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetCustomerPhone(*s)
	}
	return iuo
}

// ClearCustomerPhone clears the value of the "customerPhone" field.
func (iuo *InvoiceUpdateOne) ClearCustomerPhone() *InvoiceUpdateOne {
	iuo.mutation.ClearCustomerPhone()
	return iuo
}

// SetItems sets the "items" field.
func (iuo *InvoiceUpdateOne) SetItems(s string) *InvoiceUpdateOne {
	iuo.mutation.SetItems(s)
	return iuo
}

// SetNillableItems sets the "items" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableItems(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetItems(*s)
	}
	return iuo
}

// SetSubtotal sets the "subtotal" field.
func (iuo *InvoiceUpdateOne) SetSubtotal(f float64) *InvoiceUpdateOne {
	iuo.mutation.ResetSubtotal()
	iuo.mutation.SetSubtotal(f)
	return iuo
}

// SetNillableSubtotal sets the "subtotal" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableSubtotal(f *float64) *InvoiceUpdateOne {
	if f != nil {
		iuo.SetSubtotal(*f)
	}
	return iuo
}

// AddSubtotal adds f to the "subtotal" field.
func (iuo *InvoiceUpdateOne) AddSubtotal(f float64) *InvoiceUpdateOne {
	iuo.mutation.AddSubtotal(f)
	return iuo
}

// SetTax sets the "tax" field.
func (iuo *InvoiceUpdateOne) SetTax(f float64) *InvoiceUpdateOne {
	iuo.mutation.ResetTax()
	iuo.mutation.SetTax(f)
	return iuo
}

// SetNillableTax sets the "tax" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableTax(f *float64) *InvoiceUpdateOne {
	if f != nil {
		iuo.SetTax(*f)
	}
	return iuo
}

// AddTax adds f to the "tax" field.
func (iuo *InvoiceUpdateOne) AddTax(f float64) *InvoiceUpdateOne {
	iuo.mutation.AddTax(f)
	return iuo
}

// SetTotal sets the "total" field.
func (iuo *InvoiceUpdateOne) SetTotal(f float64) *InvoiceUpdateOne {
	iuo.mutation.ResetTotal()
	iuo.mutation.SetTotal(f)
	return iuo
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableTotal(f *float64) *InvoiceUpdateOne {
	if f != nil {
		iuo.SetTotal(*f)
	}
	return iuo
}

// AddTotal adds f to the "total" field.
func (iuo *InvoiceUpdateOne) AddTotal(f float64) *InvoiceUpdateOne {
	iuo.mutation.AddTotal(f)
	return iuo
}

// SetNotes sets the "notes" field.
func (iuo *InvoiceUpdateOne) SetNotes(s string) *InvoiceUpdateOne {
	iuo.mutation.SetNotes(s)
	return iuo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableNotes(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetNotes(*s)
	}
	return iuo
}

// ClearNotes clears the value of the "notes" field.
func (iuo *InvoiceUpdateOne) ClearNotes() *InvoiceUpdateOne {
	iuo.mutation.ClearNotes()
	return iuo
}

// SetPaymentMethod sets the "paymentMethod" field.
func (iuo *InvoiceUpdateOne) SetPaymentMethod(s string) *InvoiceUpdateOne {
	iuo.mutation.SetPaymentMethod(s)
	return iuo
}

// SetNillablePaymentMethod sets the "paymentMethod" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillablePaymentMethod(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetPaymentMethod(*s)
	}
	return iuo
}

// ClearPaymentMethod clears the value of the "paymentMethod" field.
func (iuo *InvoiceUpdateOne) ClearPaymentMethod() *InvoiceUpdateOne {
	iuo.mutation.ClearPaymentMethod()
	return iuo
}

// SetBankName sets the "bankName" field.
func (iuo *InvoiceUpdateOne) SetBankName(s string) *InvoiceUpdateOne {
	iuo.mutation.SetBankName(s)
	return iuo
}

// SetNillableBankName sets the "bankName" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableBankName(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetBankName(*s)
	}
	return iuo
}

// ClearBankName clears the value of the "bankName" field.
func (iuo *InvoiceUpdateOne) ClearBankName() *InvoiceUpdateOne {
	iuo.mutation.ClearBankName()
	return iuo
}

// SetBankAgency sets the "bankAgency" field.
func (iuo *InvoiceUpdateOne) SetBankAgency(s string) *InvoiceUpdateOne {
	iuo.mutation.SetBankAgency(s)
	return iuo
}

// SetNillableBankAgency sets the "bankAgency" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableBankAgency(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetBankAgency(*s)
	}
	return iuo
}

// ClearBankAgency clears the value of the "bankAgency" field.
func (iuo *InvoiceUpdateOne) ClearBankAgency() *InvoiceUpdateOne {
	iuo.mutation.ClearBankAgency()
	return iuo
}

// SetBankAccountNumber sets the "bankAccountNumber" field.
func (iuo *InvoiceUpdateOne) SetBankAccountNumber(s string) *InvoiceUpdateOne {
	iuo.mutation.SetBankAccountNumber(s)
	return iuo
}

// SetNillableBankAccountNumber sets the "bankAccountNumber" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableBankAccountNumber(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetBankAccountNumber(*s)
	}
	return iuo
}

// ClearBankAccountNumber clears the value of the "bankAccountNumber" field.
func (iuo *InvoiceUpdateOne) ClearBankAccountNumber() *InvoiceUpdateOne {
	iuo.mutation.ClearBankAccountNumber()
	return iuo
}

// SetBankAccountName sets the "bankAccountName" field.
func (iuo *InvoiceUpdateOne) SetBankAccountName(s string) *InvoiceUpdateOne {
	iuo.mutation.SetBankAccountName(s)
	return iuo
}

// SetNillableBankAccountName sets the "bankAccountName" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableBankAccountName(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetBankAccountName(*s)
	}
	return iuo
}

// ClearBankAccountName clears the value of the "bankAccountName" field.
func (iuo *InvoiceUpdateOne) ClearBankAccountName() *InvoiceUpdateOne {
	iuo.mutation.ClearBankAccountName()
	return iuo
}

// SetStorageURI sets the "storageURI" field.
func (iuo *InvoiceUpdateOne) SetStorageURI(s string) *InvoiceUpdateOne {
	iuo.mutation.SetStorageURI(s)
	return iuo
}

// SetNillableStorageURI sets the "storageURI" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableStorageURI(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetStorageURI(*s)
	}
	return iuo
}

// ClearStorageURI clears the value of the "storageURI" field.
func (iuo *InvoiceUpdateOne) ClearStorageURI() *InvoiceUpdateOne {
	iuo.mutation.ClearStorageURI()
	return iuo
}

// SetURL sets the "URL" field.
func (iuo *InvoiceUpdateOne) SetURL(s string) *InvoiceUpdateOne {
	iuo.mutation.SetURL(s)
	return iuo
}

// SetNillableURL sets the "URL" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableURL(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetURL(*s)
	}
	return iuo
}

// ClearURL clears the value of the "URL" field.
func (iuo *InvoiceUpdateOne) ClearURL() *InvoiceUpdateOne {
	iuo.mutation.ClearURL()
	return iuo
}

// SetFilename sets the "filename" field.
func (iuo *InvoiceUpdateOne) SetFilename(s string) *InvoiceUpdateOne {
	iuo.mutation.SetFilename(s)
	return iuo
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableFilename(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetFilename(*s)
	}
	return iuo
}

// ClearFilename clears the value of the "filename" field.
func (iuo *InvoiceUpdateOne) ClearFilename() *InvoiceUpdateOne {
	iuo.mutation.ClearFilename()
	return iuo
}

// SetSize sets the "size" field.
func (iuo *InvoiceUpdateOne) SetSize(f float64) *InvoiceUpdateOne {
	iuo.mutation.ResetSize()
	iuo.mutation.SetSize(f)
	return iuo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableSize(f *float64) *InvoiceUpdateOne {
	if f != nil {
		iuo.SetSize(*f)
	}
	return iuo
}

// AddSize adds f to the "size" field.
func (iuo *InvoiceUpdateOne) AddSize(f float64) *InvoiceUpdateOne {
	iuo.mutation.AddSize(f)
	return iuo
}

// ClearSize clears the value of the "size" field.
func (iuo *InvoiceUpdateOne) ClearSize() *InvoiceUpdateOne {
	iuo.mutation.ClearSize()
	return iuo
}

// SetKeywords sets the "keywords" field.
func (iuo *InvoiceUpdateOne) SetKeywords(s string) *InvoiceUpdateOne {
	iuo.mutation.SetKeywords(s)
	return iuo
}

// SetNillableKeywords sets the "keywords" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableKeywords(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetKeywords(*s)
	}
	return iuo
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (iuo *InvoiceUpdateOne) SetCompanyID(id int) *InvoiceUpdateOne {
	iuo.mutation.SetCompanyID(id)
	return iuo
}

// SetCompany sets the "company" edge to the Company entity.
func (iuo *InvoiceUpdateOne) SetCompany(c *Company) *InvoiceUpdateOne {
	return iuo.SetCompanyID(c.ID)
}

// SetIssuedByID sets the "issuedBy" edge to the User entity by ID.
func (iuo *InvoiceUpdateOne) SetIssuedByID(id int) *InvoiceUpdateOne {
	iuo.mutation.SetIssuedByID(id)
	return iuo
}

// SetNillableIssuedByID sets the "issuedBy" edge to the User entity by ID if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableIssuedByID(id *int) *InvoiceUpdateOne {
	if id != nil {
		iuo = iuo.SetIssuedByID(*id)
	}
	return iuo
}

// SetIssuedBy sets the "issuedBy" edge to the User entity.
func (iuo *InvoiceUpdateOne) SetIssuedBy(u *User) *InvoiceUpdateOne {
	return iuo.SetIssuedByID(u.ID)
}

// SetClientID sets the "client" edge to the Customer entity by ID.
func (iuo *InvoiceUpdateOne) SetClientID(id int) *InvoiceUpdateOne {
	iuo.mutation.SetClientID(id)
	return iuo
}

// SetNillableClientID sets the "client" edge to the Customer entity by ID if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableClientID(id *int) *InvoiceUpdateOne {
	if id != nil {
		iuo = iuo.SetClientID(*id)
	}
	return iuo
}

// SetClient sets the "client" edge to the Customer entity.
func (iuo *InvoiceUpdateOne) SetClient(c *Customer) *InvoiceUpdateOne {
	return iuo.SetClientID(c.ID)
}

// Mutation returns the InvoiceMutation object of the builder.
func (iuo *InvoiceUpdateOne) Mutation() *InvoiceMutation {
	return iuo.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (iuo *InvoiceUpdateOne) ClearCompany() *InvoiceUpdateOne {
	iuo.mutation.ClearCompany()
	return iuo
}

// ClearIssuedBy clears the "issuedBy" edge to the User entity.
func (iuo *InvoiceUpdateOne) ClearIssuedBy() *InvoiceUpdateOne {
	iuo.mutation.ClearIssuedBy()
	return iuo
}

// ClearClient clears the "client" edge to the Customer entity.
func (iuo *InvoiceUpdateOne) ClearClient() *InvoiceUpdateOne {
	iuo.mutation.ClearClient()
	return iuo
}

// Where appends a list predicates to the InvoiceUpdate builder.
func (iuo *InvoiceUpdateOne) Where(ps ...predicate.Invoice) *InvoiceUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InvoiceUpdateOne) Select(field string, fields ...string) *InvoiceUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Invoice entity.
func (iuo *InvoiceUpdateOne) Save(ctx context.Context) (*Invoice, error) {
	iuo.defaults()
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InvoiceUpdateOne) SaveX(ctx context.Context) *Invoice {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InvoiceUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InvoiceUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *InvoiceUpdateOne) defaults() {
	if _, ok := iuo.mutation.UpdatedAt(); !ok {
		v := invoice.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *InvoiceUpdateOne) check() error {
	if v, ok := iuo.mutation.Status(); ok {
		if err := invoice.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Invoice.status": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Items(); ok {
		if err := invoice.ItemsValidator(v); err != nil {
			return &ValidationError{Name: "items", err: fmt.Errorf(`generated: validator failed for field "Invoice.items": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Subtotal(); ok {
		if err := invoice.SubtotalValidator(v); err != nil {
			return &ValidationError{Name: "subtotal", err: fmt.Errorf(`generated: validator failed for field "Invoice.subtotal": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Tax(); ok {
		if err := invoice.TaxValidator(v); err != nil {
			return &ValidationError{Name: "tax", err: fmt.Errorf(`generated: validator failed for field "Invoice.tax": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Total(); ok {
		if err := invoice.TotalValidator(v); err != nil {
			return &ValidationError{Name: "total", err: fmt.Errorf(`generated: validator failed for field "Invoice.total": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Size(); ok {
		if err := invoice.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`generated: validator failed for field "Invoice.size": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Keywords(); ok {
		if err := invoice.KeywordsValidator(v); err != nil {
			return &ValidationError{Name: "keywords", err: fmt.Errorf(`generated: validator failed for field "Invoice.keywords": %w`, err)}
		}
	}
	if iuo.mutation.CompanyCleared() && len(iuo.mutation.CompanyIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "Invoice.company"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iuo *InvoiceUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InvoiceUpdateOne {
	iuo.modifiers = append(iuo.modifiers, modifiers...)
	return iuo
}

func (iuo *InvoiceUpdateOne) sqlSave(ctx context.Context) (_node *Invoice, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(invoice.Table, invoice.Columns, sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Invoice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, invoice.FieldID)
		for _, f := range fields {
			if !invoice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != invoice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(invoice.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.DeletedAt(); ok {
		_spec.SetField(invoice.FieldDeletedAt, field.TypeTime, value)
	}
	if iuo.mutation.DeletedAtCleared() {
		_spec.ClearField(invoice.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := iuo.mutation.CompanyLogo(); ok {
		_spec.SetField(invoice.FieldCompanyLogo, field.TypeString, value)
	}
	if iuo.mutation.CompanyLogoCleared() {
		_spec.ClearField(invoice.FieldCompanyLogo, field.TypeString)
	}
	if value, ok := iuo.mutation.CompanyName(); ok {
		_spec.SetField(invoice.FieldCompanyName, field.TypeString, value)
	}
	if value, ok := iuo.mutation.CompanyTaxID(); ok {
		_spec.SetField(invoice.FieldCompanyTaxID, field.TypeString, value)
	}
	if iuo.mutation.CompanyTaxIDCleared() {
		_spec.ClearField(invoice.FieldCompanyTaxID, field.TypeString)
	}
	if value, ok := iuo.mutation.CompanyAddress(); ok {
		_spec.SetField(invoice.FieldCompanyAddress, field.TypeString, value)
	}
	if value, ok := iuo.mutation.CompanyCity(); ok {
		_spec.SetField(invoice.FieldCompanyCity, field.TypeString, value)
	}
	if value, ok := iuo.mutation.CompanyEmail(); ok {
		_spec.SetField(invoice.FieldCompanyEmail, field.TypeString, value)
	}
	if iuo.mutation.CompanyEmailCleared() {
		_spec.ClearField(invoice.FieldCompanyEmail, field.TypeString)
	}
	if value, ok := iuo.mutation.CompanyPhone(); ok {
		_spec.SetField(invoice.FieldCompanyPhone, field.TypeString, value)
	}
	if iuo.mutation.CompanyPhoneCleared() {
		_spec.ClearField(invoice.FieldCompanyPhone, field.TypeString)
	}
	if value, ok := iuo.mutation.Number(); ok {
		_spec.SetField(invoice.FieldNumber, field.TypeString, value)
	}
	if iuo.mutation.NumberCleared() {
		_spec.ClearField(invoice.FieldNumber, field.TypeString)
	}
	if value, ok := iuo.mutation.IssueDate(); ok {
		_spec.SetField(invoice.FieldIssueDate, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.DueDate(); ok {
		_spec.SetField(invoice.FieldDueDate, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.PaidAt(); ok {
		_spec.SetField(invoice.FieldPaidAt, field.TypeTime, value)
	}
	if iuo.mutation.PaidAtCleared() {
		_spec.ClearField(invoice.FieldPaidAt, field.TypeTime)
	}
	if value, ok := iuo.mutation.Status(); ok {
		_spec.SetField(invoice.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := iuo.mutation.CustomerName(); ok {
		_spec.SetField(invoice.FieldCustomerName, field.TypeString, value)
	}
	if iuo.mutation.CustomerNameCleared() {
		_spec.ClearField(invoice.FieldCustomerName, field.TypeString)
	}
	if value, ok := iuo.mutation.CustomerTaxID(); ok {
		_spec.SetField(invoice.FieldCustomerTaxID, field.TypeString, value)
	}
	if iuo.mutation.CustomerTaxIDCleared() {
		_spec.ClearField(invoice.FieldCustomerTaxID, field.TypeString)
	}
	if value, ok := iuo.mutation.CustomerAddress(); ok {
		_spec.SetField(invoice.FieldCustomerAddress, field.TypeString, value)
	}
	if iuo.mutation.CustomerAddressCleared() {
		_spec.ClearField(invoice.FieldCustomerAddress, field.TypeString)
	}
	if value, ok := iuo.mutation.CustomerCity(); ok {
		_spec.SetField(invoice.FieldCustomerCity, field.TypeString, value)
	}
	if iuo.mutation.CustomerCityCleared() {
		_spec.ClearField(invoice.FieldCustomerCity, field.TypeString)
	}
	if value, ok := iuo.mutation.CustomerEmail(); ok {
		_spec.SetField(invoice.FieldCustomerEmail, field.TypeString, value)
	}
	if iuo.mutation.CustomerEmailCleared() {
		_spec.ClearField(invoice.FieldCustomerEmail, field.TypeString)
	}
	if value, ok := iuo.mutation.CustomerPhone(); ok {
		_spec.SetField(invoice.FieldCustomerPhone, field.TypeString, value)
	}
	if iuo.mutation.CustomerPhoneCleared() {
		_spec.ClearField(invoice.FieldCustomerPhone, field.TypeString)
	}
	if value, ok := iuo.mutation.Items(); ok {
		_spec.SetField(invoice.FieldItems, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Subtotal(); ok {
		_spec.SetField(invoice.FieldSubtotal, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AddedSubtotal(); ok {
		_spec.AddField(invoice.FieldSubtotal, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.Tax(); ok {
		_spec.SetField(invoice.FieldTax, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AddedTax(); ok {
		_spec.AddField(invoice.FieldTax, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.Total(); ok {
		_spec.SetField(invoice.FieldTotal, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AddedTotal(); ok {
		_spec.AddField(invoice.FieldTotal, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.Notes(); ok {
		_spec.SetField(invoice.FieldNotes, field.TypeString, value)
	}
	if iuo.mutation.NotesCleared() {
		_spec.ClearField(invoice.FieldNotes, field.TypeString)
	}
	if value, ok := iuo.mutation.PaymentMethod(); ok {
		_spec.SetField(invoice.FieldPaymentMethod, field.TypeString, value)
	}
	if iuo.mutation.PaymentMethodCleared() {
		_spec.ClearField(invoice.FieldPaymentMethod, field.TypeString)
	}
	if value, ok := iuo.mutation.BankName(); ok {
		_spec.SetField(invoice.FieldBankName, field.TypeString, value)
	}
	if iuo.mutation.BankNameCleared() {
		_spec.ClearField(invoice.FieldBankName, field.TypeString)
	}
	if value, ok := iuo.mutation.BankAgency(); ok {
		_spec.SetField(invoice.FieldBankAgency, field.TypeString, value)
	}
	if iuo.mutation.BankAgencyCleared() {
		_spec.ClearField(invoice.FieldBankAgency, field.TypeString)
	}
	if value, ok := iuo.mutation.BankAccountNumber(); ok {
		_spec.SetField(invoice.FieldBankAccountNumber, field.TypeString, value)
	}
	if iuo.mutation.BankAccountNumberCleared() {
		_spec.ClearField(invoice.FieldBankAccountNumber, field.TypeString)
	}
	if value, ok := iuo.mutation.BankAccountName(); ok {
		_spec.SetField(invoice.FieldBankAccountName, field.TypeString, value)
	}
	if iuo.mutation.BankAccountNameCleared() {
		_spec.ClearField(invoice.FieldBankAccountName, field.TypeString)
	}
	if value, ok := iuo.mutation.StorageURI(); ok {
		_spec.SetField(invoice.FieldStorageURI, field.TypeString, value)
	}
	if iuo.mutation.StorageURICleared() {
		_spec.ClearField(invoice.FieldStorageURI, field.TypeString)
	}
	if value, ok := iuo.mutation.URL(); ok {
		_spec.SetField(invoice.FieldURL, field.TypeString, value)
	}
	if iuo.mutation.URLCleared() {
		_spec.ClearField(invoice.FieldURL, field.TypeString)
	}
	if value, ok := iuo.mutation.Filename(); ok {
		_spec.SetField(invoice.FieldFilename, field.TypeString, value)
	}
	if iuo.mutation.FilenameCleared() {
		_spec.ClearField(invoice.FieldFilename, field.TypeString)
	}
	if value, ok := iuo.mutation.Size(); ok {
		_spec.SetField(invoice.FieldSize, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AddedSize(); ok {
		_spec.AddField(invoice.FieldSize, field.TypeFloat64, value)
	}
	if iuo.mutation.SizeCleared() {
		_spec.ClearField(invoice.FieldSize, field.TypeFloat64)
	}
	if value, ok := iuo.mutation.Keywords(); ok {
		_spec.SetField(invoice.FieldKeywords, field.TypeString, value)
	}
	if iuo.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.CompanyTable,
			Columns: []string{invoice.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.CompanyTable,
			Columns: []string{invoice.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.IssuedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.IssuedByTable,
			Columns: []string{invoice.IssuedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.IssuedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.IssuedByTable,
			Columns: []string{invoice.IssuedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.ClientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.ClientTable,
			Columns: []string{invoice.ClientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ClientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.ClientTable,
			Columns: []string{invoice.ClientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(iuo.modifiers...)
	_node = &Invoice{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invoice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
