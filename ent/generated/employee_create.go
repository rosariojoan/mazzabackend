// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"mazza/ent/generated/company"
	"mazza/ent/generated/employee"
	"mazza/ent/generated/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EmployeeCreate is the builder for creating a Employee entity.
type EmployeeCreate struct {
	config
	mutation *EmployeeMutation
	hooks    []Hook
}

// SetCreatedAt sets the "createdAt" field.
func (ec *EmployeeCreate) SetCreatedAt(t time.Time) *EmployeeCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableCreatedAt(t *time.Time) *EmployeeCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetUpdatedAt sets the "updatedAt" field.
func (ec *EmployeeCreate) SetUpdatedAt(t time.Time) *EmployeeCreate {
	ec.mutation.SetUpdatedAt(t)
	return ec
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableUpdatedAt(t *time.Time) *EmployeeCreate {
	if t != nil {
		ec.SetUpdatedAt(*t)
	}
	return ec
}

// SetDeletedAt sets the "deletedAt" field.
func (ec *EmployeeCreate) SetDeletedAt(t time.Time) *EmployeeCreate {
	ec.mutation.SetDeletedAt(t)
	return ec
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableDeletedAt(t *time.Time) *EmployeeCreate {
	if t != nil {
		ec.SetDeletedAt(*t)
	}
	return ec
}

// SetName sets the "name" field.
func (ec *EmployeeCreate) SetName(s string) *EmployeeCreate {
	ec.mutation.SetName(s)
	return ec
}

// SetBirthdate sets the "birthdate" field.
func (ec *EmployeeCreate) SetBirthdate(t time.Time) *EmployeeCreate {
	ec.mutation.SetBirthdate(t)
	return ec
}

// SetNillableBirthdate sets the "birthdate" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableBirthdate(t *time.Time) *EmployeeCreate {
	if t != nil {
		ec.SetBirthdate(*t)
	}
	return ec
}

// SetGender sets the "gender" field.
func (ec *EmployeeCreate) SetGender(e employee.Gender) *EmployeeCreate {
	ec.mutation.SetGender(e)
	return ec
}

// SetPosition sets the "position" field.
func (ec *EmployeeCreate) SetPosition(s string) *EmployeeCreate {
	ec.mutation.SetPosition(s)
	return ec
}

// SetDepartment sets the "department" field.
func (ec *EmployeeCreate) SetDepartment(s string) *EmployeeCreate {
	ec.mutation.SetDepartment(s)
	return ec
}

// SetNillableDepartment sets the "department" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableDepartment(s *string) *EmployeeCreate {
	if s != nil {
		ec.SetDepartment(*s)
	}
	return ec
}

// SetEmail sets the "email" field.
func (ec *EmployeeCreate) SetEmail(s string) *EmployeeCreate {
	ec.mutation.SetEmail(s)
	return ec
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableEmail(s *string) *EmployeeCreate {
	if s != nil {
		ec.SetEmail(*s)
	}
	return ec
}

// SetPhone sets the "phone" field.
func (ec *EmployeeCreate) SetPhone(s string) *EmployeeCreate {
	ec.mutation.SetPhone(s)
	return ec
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillablePhone(s *string) *EmployeeCreate {
	if s != nil {
		ec.SetPhone(*s)
	}
	return ec
}

// SetAvatar sets the "avatar" field.
func (ec *EmployeeCreate) SetAvatar(s string) *EmployeeCreate {
	ec.mutation.SetAvatar(s)
	return ec
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableAvatar(s *string) *EmployeeCreate {
	if s != nil {
		ec.SetAvatar(*s)
	}
	return ec
}

// SetHireDate sets the "hireDate" field.
func (ec *EmployeeCreate) SetHireDate(t time.Time) *EmployeeCreate {
	ec.mutation.SetHireDate(t)
	return ec
}

// SetMonthlySalary sets the "monthlySalary" field.
func (ec *EmployeeCreate) SetMonthlySalary(i int) *EmployeeCreate {
	ec.mutation.SetMonthlySalary(i)
	return ec
}

// SetNillableMonthlySalary sets the "monthlySalary" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableMonthlySalary(i *int) *EmployeeCreate {
	if i != nil {
		ec.SetMonthlySalary(*i)
	}
	return ec
}

// SetStatus sets the "status" field.
func (ec *EmployeeCreate) SetStatus(e employee.Status) *EmployeeCreate {
	ec.mutation.SetStatus(e)
	return ec
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableStatus(e *employee.Status) *EmployeeCreate {
	if e != nil {
		ec.SetStatus(*e)
	}
	return ec
}

// SetPerformaceScore sets the "performaceScore" field.
func (ec *EmployeeCreate) SetPerformaceScore(f float64) *EmployeeCreate {
	ec.mutation.SetPerformaceScore(f)
	return ec
}

// SetNillablePerformaceScore sets the "performaceScore" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillablePerformaceScore(f *float64) *EmployeeCreate {
	if f != nil {
		ec.SetPerformaceScore(*f)
	}
	return ec
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (ec *EmployeeCreate) SetCompanyID(id int) *EmployeeCreate {
	ec.mutation.SetCompanyID(id)
	return ec
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (ec *EmployeeCreate) SetNillableCompanyID(id *int) *EmployeeCreate {
	if id != nil {
		ec = ec.SetCompanyID(*id)
	}
	return ec
}

// SetCompany sets the "company" edge to the Company entity.
func (ec *EmployeeCreate) SetCompany(c *Company) *EmployeeCreate {
	return ec.SetCompanyID(c.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ec *EmployeeCreate) SetUserID(id int) *EmployeeCreate {
	ec.mutation.SetUserID(id)
	return ec
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ec *EmployeeCreate) SetNillableUserID(id *int) *EmployeeCreate {
	if id != nil {
		ec = ec.SetUserID(*id)
	}
	return ec
}

// SetUser sets the "user" edge to the User entity.
func (ec *EmployeeCreate) SetUser(u *User) *EmployeeCreate {
	return ec.SetUserID(u.ID)
}

// AddSubordinateIDs adds the "subordinates" edge to the Employee entity by IDs.
func (ec *EmployeeCreate) AddSubordinateIDs(ids ...int) *EmployeeCreate {
	ec.mutation.AddSubordinateIDs(ids...)
	return ec
}

// AddSubordinates adds the "subordinates" edges to the Employee entity.
func (ec *EmployeeCreate) AddSubordinates(e ...*Employee) *EmployeeCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ec.AddSubordinateIDs(ids...)
}

// SetLeaderID sets the "leader" edge to the Employee entity by ID.
func (ec *EmployeeCreate) SetLeaderID(id int) *EmployeeCreate {
	ec.mutation.SetLeaderID(id)
	return ec
}

// SetNillableLeaderID sets the "leader" edge to the Employee entity by ID if the given value is not nil.
func (ec *EmployeeCreate) SetNillableLeaderID(id *int) *EmployeeCreate {
	if id != nil {
		ec = ec.SetLeaderID(*id)
	}
	return ec
}

// SetLeader sets the "leader" edge to the Employee entity.
func (ec *EmployeeCreate) SetLeader(e *Employee) *EmployeeCreate {
	return ec.SetLeaderID(e.ID)
}

// Mutation returns the EmployeeMutation object of the builder.
func (ec *EmployeeCreate) Mutation() *EmployeeMutation {
	return ec.mutation
}

// Save creates the Employee in the database.
func (ec *EmployeeCreate) Save(ctx context.Context) (*Employee, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EmployeeCreate) SaveX(ctx context.Context) *Employee {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EmployeeCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EmployeeCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EmployeeCreate) defaults() {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		v := employee.DefaultCreatedAt()
		ec.mutation.SetCreatedAt(v)
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		v := employee.DefaultUpdatedAt()
		ec.mutation.SetUpdatedAt(v)
	}
	if _, ok := ec.mutation.Department(); !ok {
		v := employee.DefaultDepartment
		ec.mutation.SetDepartment(v)
	}
	if _, ok := ec.mutation.MonthlySalary(); !ok {
		v := employee.DefaultMonthlySalary
		ec.mutation.SetMonthlySalary(v)
	}
	if _, ok := ec.mutation.Status(); !ok {
		v := employee.DefaultStatus
		ec.mutation.SetStatus(v)
	}
	if _, ok := ec.mutation.PerformaceScore(); !ok {
		v := employee.DefaultPerformaceScore
		ec.mutation.SetPerformaceScore(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EmployeeCreate) check() error {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`generated: missing required field "Employee.createdAt"`)}
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`generated: missing required field "Employee.updatedAt"`)}
	}
	if _, ok := ec.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "Employee.name"`)}
	}
	if v, ok := ec.mutation.Name(); ok {
		if err := employee.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Employee.name": %w`, err)}
		}
	}
	if _, ok := ec.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New(`generated: missing required field "Employee.gender"`)}
	}
	if v, ok := ec.mutation.Gender(); ok {
		if err := employee.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`generated: validator failed for field "Employee.gender": %w`, err)}
		}
	}
	if _, ok := ec.mutation.Position(); !ok {
		return &ValidationError{Name: "position", err: errors.New(`generated: missing required field "Employee.position"`)}
	}
	if _, ok := ec.mutation.HireDate(); !ok {
		return &ValidationError{Name: "hireDate", err: errors.New(`generated: missing required field "Employee.hireDate"`)}
	}
	if _, ok := ec.mutation.MonthlySalary(); !ok {
		return &ValidationError{Name: "monthlySalary", err: errors.New(`generated: missing required field "Employee.monthlySalary"`)}
	}
	if v, ok := ec.mutation.MonthlySalary(); ok {
		if err := employee.MonthlySalaryValidator(v); err != nil {
			return &ValidationError{Name: "monthlySalary", err: fmt.Errorf(`generated: validator failed for field "Employee.monthlySalary": %w`, err)}
		}
	}
	if v, ok := ec.mutation.Status(); ok {
		if err := employee.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Employee.status": %w`, err)}
		}
	}
	if v, ok := ec.mutation.PerformaceScore(); ok {
		if err := employee.PerformaceScoreValidator(v); err != nil {
			return &ValidationError{Name: "performaceScore", err: fmt.Errorf(`generated: validator failed for field "Employee.performaceScore": %w`, err)}
		}
	}
	return nil
}

func (ec *EmployeeCreate) sqlSave(ctx context.Context) (*Employee, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EmployeeCreate) createSpec() (*Employee, *sqlgraph.CreateSpec) {
	var (
		_node = &Employee{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(employee.Table, sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt))
	)
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(employee.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.SetField(employee.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ec.mutation.DeletedAt(); ok {
		_spec.SetField(employee.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := ec.mutation.Name(); ok {
		_spec.SetField(employee.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ec.mutation.Birthdate(); ok {
		_spec.SetField(employee.FieldBirthdate, field.TypeTime, value)
		_node.Birthdate = &value
	}
	if value, ok := ec.mutation.Gender(); ok {
		_spec.SetField(employee.FieldGender, field.TypeEnum, value)
		_node.Gender = value
	}
	if value, ok := ec.mutation.Position(); ok {
		_spec.SetField(employee.FieldPosition, field.TypeString, value)
		_node.Position = value
	}
	if value, ok := ec.mutation.Department(); ok {
		_spec.SetField(employee.FieldDepartment, field.TypeString, value)
		_node.Department = value
	}
	if value, ok := ec.mutation.Email(); ok {
		_spec.SetField(employee.FieldEmail, field.TypeString, value)
		_node.Email = &value
	}
	if value, ok := ec.mutation.Phone(); ok {
		_spec.SetField(employee.FieldPhone, field.TypeString, value)
		_node.Phone = &value
	}
	if value, ok := ec.mutation.Avatar(); ok {
		_spec.SetField(employee.FieldAvatar, field.TypeString, value)
		_node.Avatar = &value
	}
	if value, ok := ec.mutation.HireDate(); ok {
		_spec.SetField(employee.FieldHireDate, field.TypeTime, value)
		_node.HireDate = value
	}
	if value, ok := ec.mutation.MonthlySalary(); ok {
		_spec.SetField(employee.FieldMonthlySalary, field.TypeInt, value)
		_node.MonthlySalary = value
	}
	if value, ok := ec.mutation.Status(); ok {
		_spec.SetField(employee.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := ec.mutation.PerformaceScore(); ok {
		_spec.SetField(employee.FieldPerformaceScore, field.TypeFloat64, value)
		_node.PerformaceScore = value
	}
	if nodes := ec.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.CompanyTable,
			Columns: []string{employee.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.company_employees = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   employee.UserTable,
			Columns: []string{employee.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_employee = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.SubordinatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.SubordinatesTable,
			Columns: []string{employee.SubordinatesColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.LeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.LeaderTable,
			Columns: []string{employee.LeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.employee_subordinates = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EmployeeCreateBulk is the builder for creating many Employee entities in bulk.
type EmployeeCreateBulk struct {
	config
	err      error
	builders []*EmployeeCreate
}

// Save creates the Employee entities in the database.
func (ecb *EmployeeCreateBulk) Save(ctx context.Context) ([]*Employee, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Employee, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmployeeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EmployeeCreateBulk) SaveX(ctx context.Context) []*Employee {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EmployeeCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EmployeeCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
