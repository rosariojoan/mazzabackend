// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"mazza/ent/generated/company"
	"mazza/ent/generated/membersignuptoken"
	"mazza/ent/generated/predicate"
	"mazza/ent/generated/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberSignupTokenUpdate is the builder for updating MemberSignupToken entities.
type MemberSignupTokenUpdate struct {
	config
	hooks     []Hook
	mutation  *MemberSignupTokenMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MemberSignupTokenUpdate builder.
func (mstu *MemberSignupTokenUpdate) Where(ps ...predicate.MemberSignupToken) *MemberSignupTokenUpdate {
	mstu.mutation.Where(ps...)
	return mstu
}

// SetUpdatedAt sets the "updatedAt" field.
func (mstu *MemberSignupTokenUpdate) SetUpdatedAt(t time.Time) *MemberSignupTokenUpdate {
	mstu.mutation.SetUpdatedAt(t)
	return mstu
}

// SetDeletedAt sets the "deletedAt" field.
func (mstu *MemberSignupTokenUpdate) SetDeletedAt(t time.Time) *MemberSignupTokenUpdate {
	mstu.mutation.SetDeletedAt(t)
	return mstu
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (mstu *MemberSignupTokenUpdate) SetNillableDeletedAt(t *time.Time) *MemberSignupTokenUpdate {
	if t != nil {
		mstu.SetDeletedAt(*t)
	}
	return mstu
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (mstu *MemberSignupTokenUpdate) ClearDeletedAt() *MemberSignupTokenUpdate {
	mstu.mutation.ClearDeletedAt()
	return mstu
}

// SetName sets the "name" field.
func (mstu *MemberSignupTokenUpdate) SetName(s string) *MemberSignupTokenUpdate {
	mstu.mutation.SetName(s)
	return mstu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mstu *MemberSignupTokenUpdate) SetNillableName(s *string) *MemberSignupTokenUpdate {
	if s != nil {
		mstu.SetName(*s)
	}
	return mstu
}

// SetEmail sets the "email" field.
func (mstu *MemberSignupTokenUpdate) SetEmail(s string) *MemberSignupTokenUpdate {
	mstu.mutation.SetEmail(s)
	return mstu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (mstu *MemberSignupTokenUpdate) SetNillableEmail(s *string) *MemberSignupTokenUpdate {
	if s != nil {
		mstu.SetEmail(*s)
	}
	return mstu
}

// ClearEmail clears the value of the "email" field.
func (mstu *MemberSignupTokenUpdate) ClearEmail() *MemberSignupTokenUpdate {
	mstu.mutation.ClearEmail()
	return mstu
}

// SetToken sets the "token" field.
func (mstu *MemberSignupTokenUpdate) SetToken(s string) *MemberSignupTokenUpdate {
	mstu.mutation.SetToken(s)
	return mstu
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (mstu *MemberSignupTokenUpdate) SetNillableToken(s *string) *MemberSignupTokenUpdate {
	if s != nil {
		mstu.SetToken(*s)
	}
	return mstu
}

// SetAvatar sets the "avatar" field.
func (mstu *MemberSignupTokenUpdate) SetAvatar(s string) *MemberSignupTokenUpdate {
	mstu.mutation.SetAvatar(s)
	return mstu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (mstu *MemberSignupTokenUpdate) SetNillableAvatar(s *string) *MemberSignupTokenUpdate {
	if s != nil {
		mstu.SetAvatar(*s)
	}
	return mstu
}

// SetRole sets the "role" field.
func (mstu *MemberSignupTokenUpdate) SetRole(m membersignuptoken.Role) *MemberSignupTokenUpdate {
	mstu.mutation.SetRole(m)
	return mstu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (mstu *MemberSignupTokenUpdate) SetNillableRole(m *membersignuptoken.Role) *MemberSignupTokenUpdate {
	if m != nil {
		mstu.SetRole(*m)
	}
	return mstu
}

// SetNote sets the "note" field.
func (mstu *MemberSignupTokenUpdate) SetNote(s string) *MemberSignupTokenUpdate {
	mstu.mutation.SetNote(s)
	return mstu
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (mstu *MemberSignupTokenUpdate) SetNillableNote(s *string) *MemberSignupTokenUpdate {
	if s != nil {
		mstu.SetNote(*s)
	}
	return mstu
}

// SetNumberAccessed sets the "numberAccessed" field.
func (mstu *MemberSignupTokenUpdate) SetNumberAccessed(i int) *MemberSignupTokenUpdate {
	mstu.mutation.ResetNumberAccessed()
	mstu.mutation.SetNumberAccessed(i)
	return mstu
}

// SetNillableNumberAccessed sets the "numberAccessed" field if the given value is not nil.
func (mstu *MemberSignupTokenUpdate) SetNillableNumberAccessed(i *int) *MemberSignupTokenUpdate {
	if i != nil {
		mstu.SetNumberAccessed(*i)
	}
	return mstu
}

// AddNumberAccessed adds i to the "numberAccessed" field.
func (mstu *MemberSignupTokenUpdate) AddNumberAccessed(i int) *MemberSignupTokenUpdate {
	mstu.mutation.AddNumberAccessed(i)
	return mstu
}

// SetExpiresAt sets the "expiresAt" field.
func (mstu *MemberSignupTokenUpdate) SetExpiresAt(t time.Time) *MemberSignupTokenUpdate {
	mstu.mutation.SetExpiresAt(t)
	return mstu
}

// SetNillableExpiresAt sets the "expiresAt" field if the given value is not nil.
func (mstu *MemberSignupTokenUpdate) SetNillableExpiresAt(t *time.Time) *MemberSignupTokenUpdate {
	if t != nil {
		mstu.SetExpiresAt(*t)
	}
	return mstu
}

// SetAlreadyUsed sets the "alreadyUsed" field.
func (mstu *MemberSignupTokenUpdate) SetAlreadyUsed(b bool) *MemberSignupTokenUpdate {
	mstu.mutation.SetAlreadyUsed(b)
	return mstu
}

// SetNillableAlreadyUsed sets the "alreadyUsed" field if the given value is not nil.
func (mstu *MemberSignupTokenUpdate) SetNillableAlreadyUsed(b *bool) *MemberSignupTokenUpdate {
	if b != nil {
		mstu.SetAlreadyUsed(*b)
	}
	return mstu
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (mstu *MemberSignupTokenUpdate) SetCompanyID(id int) *MemberSignupTokenUpdate {
	mstu.mutation.SetCompanyID(id)
	return mstu
}

// SetCompany sets the "company" edge to the Company entity.
func (mstu *MemberSignupTokenUpdate) SetCompany(c *Company) *MemberSignupTokenUpdate {
	return mstu.SetCompanyID(c.ID)
}

// SetCreatedByID sets the "createdBy" edge to the User entity by ID.
func (mstu *MemberSignupTokenUpdate) SetCreatedByID(id int) *MemberSignupTokenUpdate {
	mstu.mutation.SetCreatedByID(id)
	return mstu
}

// SetNillableCreatedByID sets the "createdBy" edge to the User entity by ID if the given value is not nil.
func (mstu *MemberSignupTokenUpdate) SetNillableCreatedByID(id *int) *MemberSignupTokenUpdate {
	if id != nil {
		mstu = mstu.SetCreatedByID(*id)
	}
	return mstu
}

// SetCreatedBy sets the "createdBy" edge to the User entity.
func (mstu *MemberSignupTokenUpdate) SetCreatedBy(u *User) *MemberSignupTokenUpdate {
	return mstu.SetCreatedByID(u.ID)
}

// Mutation returns the MemberSignupTokenMutation object of the builder.
func (mstu *MemberSignupTokenUpdate) Mutation() *MemberSignupTokenMutation {
	return mstu.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (mstu *MemberSignupTokenUpdate) ClearCompany() *MemberSignupTokenUpdate {
	mstu.mutation.ClearCompany()
	return mstu
}

// ClearCreatedBy clears the "createdBy" edge to the User entity.
func (mstu *MemberSignupTokenUpdate) ClearCreatedBy() *MemberSignupTokenUpdate {
	mstu.mutation.ClearCreatedBy()
	return mstu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mstu *MemberSignupTokenUpdate) Save(ctx context.Context) (int, error) {
	mstu.defaults()
	return withHooks(ctx, mstu.sqlSave, mstu.mutation, mstu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mstu *MemberSignupTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := mstu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mstu *MemberSignupTokenUpdate) Exec(ctx context.Context) error {
	_, err := mstu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mstu *MemberSignupTokenUpdate) ExecX(ctx context.Context) {
	if err := mstu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mstu *MemberSignupTokenUpdate) defaults() {
	if _, ok := mstu.mutation.UpdatedAt(); !ok {
		v := membersignuptoken.UpdateDefaultUpdatedAt()
		mstu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mstu *MemberSignupTokenUpdate) check() error {
	if v, ok := mstu.mutation.Name(); ok {
		if err := membersignuptoken.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "MemberSignupToken.name": %w`, err)}
		}
	}
	if v, ok := mstu.mutation.Token(); ok {
		if err := membersignuptoken.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`generated: validator failed for field "MemberSignupToken.token": %w`, err)}
		}
	}
	if v, ok := mstu.mutation.Role(); ok {
		if err := membersignuptoken.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`generated: validator failed for field "MemberSignupToken.role": %w`, err)}
		}
	}
	if v, ok := mstu.mutation.NumberAccessed(); ok {
		if err := membersignuptoken.NumberAccessedValidator(v); err != nil {
			return &ValidationError{Name: "numberAccessed", err: fmt.Errorf(`generated: validator failed for field "MemberSignupToken.numberAccessed": %w`, err)}
		}
	}
	if mstu.mutation.CompanyCleared() && len(mstu.mutation.CompanyIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "MemberSignupToken.company"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mstu *MemberSignupTokenUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MemberSignupTokenUpdate {
	mstu.modifiers = append(mstu.modifiers, modifiers...)
	return mstu
}

func (mstu *MemberSignupTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mstu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(membersignuptoken.Table, membersignuptoken.Columns, sqlgraph.NewFieldSpec(membersignuptoken.FieldID, field.TypeInt))
	if ps := mstu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mstu.mutation.UpdatedAt(); ok {
		_spec.SetField(membersignuptoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mstu.mutation.DeletedAt(); ok {
		_spec.SetField(membersignuptoken.FieldDeletedAt, field.TypeTime, value)
	}
	if mstu.mutation.DeletedAtCleared() {
		_spec.ClearField(membersignuptoken.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := mstu.mutation.Name(); ok {
		_spec.SetField(membersignuptoken.FieldName, field.TypeString, value)
	}
	if value, ok := mstu.mutation.Email(); ok {
		_spec.SetField(membersignuptoken.FieldEmail, field.TypeString, value)
	}
	if mstu.mutation.EmailCleared() {
		_spec.ClearField(membersignuptoken.FieldEmail, field.TypeString)
	}
	if value, ok := mstu.mutation.Token(); ok {
		_spec.SetField(membersignuptoken.FieldToken, field.TypeString, value)
	}
	if value, ok := mstu.mutation.Avatar(); ok {
		_spec.SetField(membersignuptoken.FieldAvatar, field.TypeString, value)
	}
	if value, ok := mstu.mutation.Role(); ok {
		_spec.SetField(membersignuptoken.FieldRole, field.TypeEnum, value)
	}
	if value, ok := mstu.mutation.Note(); ok {
		_spec.SetField(membersignuptoken.FieldNote, field.TypeString, value)
	}
	if value, ok := mstu.mutation.NumberAccessed(); ok {
		_spec.SetField(membersignuptoken.FieldNumberAccessed, field.TypeInt, value)
	}
	if value, ok := mstu.mutation.AddedNumberAccessed(); ok {
		_spec.AddField(membersignuptoken.FieldNumberAccessed, field.TypeInt, value)
	}
	if value, ok := mstu.mutation.ExpiresAt(); ok {
		_spec.SetField(membersignuptoken.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := mstu.mutation.AlreadyUsed(); ok {
		_spec.SetField(membersignuptoken.FieldAlreadyUsed, field.TypeBool, value)
	}
	if mstu.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membersignuptoken.CompanyTable,
			Columns: []string{membersignuptoken.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mstu.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membersignuptoken.CompanyTable,
			Columns: []string{membersignuptoken.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mstu.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membersignuptoken.CreatedByTable,
			Columns: []string{membersignuptoken.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mstu.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membersignuptoken.CreatedByTable,
			Columns: []string{membersignuptoken.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(mstu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mstu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{membersignuptoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mstu.mutation.done = true
	return n, nil
}

// MemberSignupTokenUpdateOne is the builder for updating a single MemberSignupToken entity.
type MemberSignupTokenUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MemberSignupTokenMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updatedAt" field.
func (mstuo *MemberSignupTokenUpdateOne) SetUpdatedAt(t time.Time) *MemberSignupTokenUpdateOne {
	mstuo.mutation.SetUpdatedAt(t)
	return mstuo
}

// SetDeletedAt sets the "deletedAt" field.
func (mstuo *MemberSignupTokenUpdateOne) SetDeletedAt(t time.Time) *MemberSignupTokenUpdateOne {
	mstuo.mutation.SetDeletedAt(t)
	return mstuo
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (mstuo *MemberSignupTokenUpdateOne) SetNillableDeletedAt(t *time.Time) *MemberSignupTokenUpdateOne {
	if t != nil {
		mstuo.SetDeletedAt(*t)
	}
	return mstuo
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (mstuo *MemberSignupTokenUpdateOne) ClearDeletedAt() *MemberSignupTokenUpdateOne {
	mstuo.mutation.ClearDeletedAt()
	return mstuo
}

// SetName sets the "name" field.
func (mstuo *MemberSignupTokenUpdateOne) SetName(s string) *MemberSignupTokenUpdateOne {
	mstuo.mutation.SetName(s)
	return mstuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mstuo *MemberSignupTokenUpdateOne) SetNillableName(s *string) *MemberSignupTokenUpdateOne {
	if s != nil {
		mstuo.SetName(*s)
	}
	return mstuo
}

// SetEmail sets the "email" field.
func (mstuo *MemberSignupTokenUpdateOne) SetEmail(s string) *MemberSignupTokenUpdateOne {
	mstuo.mutation.SetEmail(s)
	return mstuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (mstuo *MemberSignupTokenUpdateOne) SetNillableEmail(s *string) *MemberSignupTokenUpdateOne {
	if s != nil {
		mstuo.SetEmail(*s)
	}
	return mstuo
}

// ClearEmail clears the value of the "email" field.
func (mstuo *MemberSignupTokenUpdateOne) ClearEmail() *MemberSignupTokenUpdateOne {
	mstuo.mutation.ClearEmail()
	return mstuo
}

// SetToken sets the "token" field.
func (mstuo *MemberSignupTokenUpdateOne) SetToken(s string) *MemberSignupTokenUpdateOne {
	mstuo.mutation.SetToken(s)
	return mstuo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (mstuo *MemberSignupTokenUpdateOne) SetNillableToken(s *string) *MemberSignupTokenUpdateOne {
	if s != nil {
		mstuo.SetToken(*s)
	}
	return mstuo
}

// SetAvatar sets the "avatar" field.
func (mstuo *MemberSignupTokenUpdateOne) SetAvatar(s string) *MemberSignupTokenUpdateOne {
	mstuo.mutation.SetAvatar(s)
	return mstuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (mstuo *MemberSignupTokenUpdateOne) SetNillableAvatar(s *string) *MemberSignupTokenUpdateOne {
	if s != nil {
		mstuo.SetAvatar(*s)
	}
	return mstuo
}

// SetRole sets the "role" field.
func (mstuo *MemberSignupTokenUpdateOne) SetRole(m membersignuptoken.Role) *MemberSignupTokenUpdateOne {
	mstuo.mutation.SetRole(m)
	return mstuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (mstuo *MemberSignupTokenUpdateOne) SetNillableRole(m *membersignuptoken.Role) *MemberSignupTokenUpdateOne {
	if m != nil {
		mstuo.SetRole(*m)
	}
	return mstuo
}

// SetNote sets the "note" field.
func (mstuo *MemberSignupTokenUpdateOne) SetNote(s string) *MemberSignupTokenUpdateOne {
	mstuo.mutation.SetNote(s)
	return mstuo
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (mstuo *MemberSignupTokenUpdateOne) SetNillableNote(s *string) *MemberSignupTokenUpdateOne {
	if s != nil {
		mstuo.SetNote(*s)
	}
	return mstuo
}

// SetNumberAccessed sets the "numberAccessed" field.
func (mstuo *MemberSignupTokenUpdateOne) SetNumberAccessed(i int) *MemberSignupTokenUpdateOne {
	mstuo.mutation.ResetNumberAccessed()
	mstuo.mutation.SetNumberAccessed(i)
	return mstuo
}

// SetNillableNumberAccessed sets the "numberAccessed" field if the given value is not nil.
func (mstuo *MemberSignupTokenUpdateOne) SetNillableNumberAccessed(i *int) *MemberSignupTokenUpdateOne {
	if i != nil {
		mstuo.SetNumberAccessed(*i)
	}
	return mstuo
}

// AddNumberAccessed adds i to the "numberAccessed" field.
func (mstuo *MemberSignupTokenUpdateOne) AddNumberAccessed(i int) *MemberSignupTokenUpdateOne {
	mstuo.mutation.AddNumberAccessed(i)
	return mstuo
}

// SetExpiresAt sets the "expiresAt" field.
func (mstuo *MemberSignupTokenUpdateOne) SetExpiresAt(t time.Time) *MemberSignupTokenUpdateOne {
	mstuo.mutation.SetExpiresAt(t)
	return mstuo
}

// SetNillableExpiresAt sets the "expiresAt" field if the given value is not nil.
func (mstuo *MemberSignupTokenUpdateOne) SetNillableExpiresAt(t *time.Time) *MemberSignupTokenUpdateOne {
	if t != nil {
		mstuo.SetExpiresAt(*t)
	}
	return mstuo
}

// SetAlreadyUsed sets the "alreadyUsed" field.
func (mstuo *MemberSignupTokenUpdateOne) SetAlreadyUsed(b bool) *MemberSignupTokenUpdateOne {
	mstuo.mutation.SetAlreadyUsed(b)
	return mstuo
}

// SetNillableAlreadyUsed sets the "alreadyUsed" field if the given value is not nil.
func (mstuo *MemberSignupTokenUpdateOne) SetNillableAlreadyUsed(b *bool) *MemberSignupTokenUpdateOne {
	if b != nil {
		mstuo.SetAlreadyUsed(*b)
	}
	return mstuo
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (mstuo *MemberSignupTokenUpdateOne) SetCompanyID(id int) *MemberSignupTokenUpdateOne {
	mstuo.mutation.SetCompanyID(id)
	return mstuo
}

// SetCompany sets the "company" edge to the Company entity.
func (mstuo *MemberSignupTokenUpdateOne) SetCompany(c *Company) *MemberSignupTokenUpdateOne {
	return mstuo.SetCompanyID(c.ID)
}

// SetCreatedByID sets the "createdBy" edge to the User entity by ID.
func (mstuo *MemberSignupTokenUpdateOne) SetCreatedByID(id int) *MemberSignupTokenUpdateOne {
	mstuo.mutation.SetCreatedByID(id)
	return mstuo
}

// SetNillableCreatedByID sets the "createdBy" edge to the User entity by ID if the given value is not nil.
func (mstuo *MemberSignupTokenUpdateOne) SetNillableCreatedByID(id *int) *MemberSignupTokenUpdateOne {
	if id != nil {
		mstuo = mstuo.SetCreatedByID(*id)
	}
	return mstuo
}

// SetCreatedBy sets the "createdBy" edge to the User entity.
func (mstuo *MemberSignupTokenUpdateOne) SetCreatedBy(u *User) *MemberSignupTokenUpdateOne {
	return mstuo.SetCreatedByID(u.ID)
}

// Mutation returns the MemberSignupTokenMutation object of the builder.
func (mstuo *MemberSignupTokenUpdateOne) Mutation() *MemberSignupTokenMutation {
	return mstuo.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (mstuo *MemberSignupTokenUpdateOne) ClearCompany() *MemberSignupTokenUpdateOne {
	mstuo.mutation.ClearCompany()
	return mstuo
}

// ClearCreatedBy clears the "createdBy" edge to the User entity.
func (mstuo *MemberSignupTokenUpdateOne) ClearCreatedBy() *MemberSignupTokenUpdateOne {
	mstuo.mutation.ClearCreatedBy()
	return mstuo
}

// Where appends a list predicates to the MemberSignupTokenUpdate builder.
func (mstuo *MemberSignupTokenUpdateOne) Where(ps ...predicate.MemberSignupToken) *MemberSignupTokenUpdateOne {
	mstuo.mutation.Where(ps...)
	return mstuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mstuo *MemberSignupTokenUpdateOne) Select(field string, fields ...string) *MemberSignupTokenUpdateOne {
	mstuo.fields = append([]string{field}, fields...)
	return mstuo
}

// Save executes the query and returns the updated MemberSignupToken entity.
func (mstuo *MemberSignupTokenUpdateOne) Save(ctx context.Context) (*MemberSignupToken, error) {
	mstuo.defaults()
	return withHooks(ctx, mstuo.sqlSave, mstuo.mutation, mstuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mstuo *MemberSignupTokenUpdateOne) SaveX(ctx context.Context) *MemberSignupToken {
	node, err := mstuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mstuo *MemberSignupTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := mstuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mstuo *MemberSignupTokenUpdateOne) ExecX(ctx context.Context) {
	if err := mstuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mstuo *MemberSignupTokenUpdateOne) defaults() {
	if _, ok := mstuo.mutation.UpdatedAt(); !ok {
		v := membersignuptoken.UpdateDefaultUpdatedAt()
		mstuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mstuo *MemberSignupTokenUpdateOne) check() error {
	if v, ok := mstuo.mutation.Name(); ok {
		if err := membersignuptoken.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "MemberSignupToken.name": %w`, err)}
		}
	}
	if v, ok := mstuo.mutation.Token(); ok {
		if err := membersignuptoken.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`generated: validator failed for field "MemberSignupToken.token": %w`, err)}
		}
	}
	if v, ok := mstuo.mutation.Role(); ok {
		if err := membersignuptoken.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`generated: validator failed for field "MemberSignupToken.role": %w`, err)}
		}
	}
	if v, ok := mstuo.mutation.NumberAccessed(); ok {
		if err := membersignuptoken.NumberAccessedValidator(v); err != nil {
			return &ValidationError{Name: "numberAccessed", err: fmt.Errorf(`generated: validator failed for field "MemberSignupToken.numberAccessed": %w`, err)}
		}
	}
	if mstuo.mutation.CompanyCleared() && len(mstuo.mutation.CompanyIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "MemberSignupToken.company"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mstuo *MemberSignupTokenUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MemberSignupTokenUpdateOne {
	mstuo.modifiers = append(mstuo.modifiers, modifiers...)
	return mstuo
}

func (mstuo *MemberSignupTokenUpdateOne) sqlSave(ctx context.Context) (_node *MemberSignupToken, err error) {
	if err := mstuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(membersignuptoken.Table, membersignuptoken.Columns, sqlgraph.NewFieldSpec(membersignuptoken.FieldID, field.TypeInt))
	id, ok := mstuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "MemberSignupToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mstuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, membersignuptoken.FieldID)
		for _, f := range fields {
			if !membersignuptoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != membersignuptoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mstuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mstuo.mutation.UpdatedAt(); ok {
		_spec.SetField(membersignuptoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mstuo.mutation.DeletedAt(); ok {
		_spec.SetField(membersignuptoken.FieldDeletedAt, field.TypeTime, value)
	}
	if mstuo.mutation.DeletedAtCleared() {
		_spec.ClearField(membersignuptoken.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := mstuo.mutation.Name(); ok {
		_spec.SetField(membersignuptoken.FieldName, field.TypeString, value)
	}
	if value, ok := mstuo.mutation.Email(); ok {
		_spec.SetField(membersignuptoken.FieldEmail, field.TypeString, value)
	}
	if mstuo.mutation.EmailCleared() {
		_spec.ClearField(membersignuptoken.FieldEmail, field.TypeString)
	}
	if value, ok := mstuo.mutation.Token(); ok {
		_spec.SetField(membersignuptoken.FieldToken, field.TypeString, value)
	}
	if value, ok := mstuo.mutation.Avatar(); ok {
		_spec.SetField(membersignuptoken.FieldAvatar, field.TypeString, value)
	}
	if value, ok := mstuo.mutation.Role(); ok {
		_spec.SetField(membersignuptoken.FieldRole, field.TypeEnum, value)
	}
	if value, ok := mstuo.mutation.Note(); ok {
		_spec.SetField(membersignuptoken.FieldNote, field.TypeString, value)
	}
	if value, ok := mstuo.mutation.NumberAccessed(); ok {
		_spec.SetField(membersignuptoken.FieldNumberAccessed, field.TypeInt, value)
	}
	if value, ok := mstuo.mutation.AddedNumberAccessed(); ok {
		_spec.AddField(membersignuptoken.FieldNumberAccessed, field.TypeInt, value)
	}
	if value, ok := mstuo.mutation.ExpiresAt(); ok {
		_spec.SetField(membersignuptoken.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := mstuo.mutation.AlreadyUsed(); ok {
		_spec.SetField(membersignuptoken.FieldAlreadyUsed, field.TypeBool, value)
	}
	if mstuo.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membersignuptoken.CompanyTable,
			Columns: []string{membersignuptoken.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mstuo.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membersignuptoken.CompanyTable,
			Columns: []string{membersignuptoken.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mstuo.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membersignuptoken.CreatedByTable,
			Columns: []string{membersignuptoken.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mstuo.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membersignuptoken.CreatedByTable,
			Columns: []string{membersignuptoken.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(mstuo.modifiers...)
	_node = &MemberSignupToken{config: mstuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mstuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{membersignuptoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mstuo.mutation.done = true
	return _node, nil
}
