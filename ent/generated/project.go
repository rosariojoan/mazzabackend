// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"mazza/ent/generated/company"
	"mazza/ent/generated/project"
	"mazza/ent/generated/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Project is the model entity for the Project schema.
type Project struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// DeletedAt holds the value of the "deletedAt" field.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// PlannedStartDate holds the value of the "plannedStartDate" field.
	PlannedStartDate time.Time `json:"plannedStartDate,omitempty" plannedStartDate`
	// ActualStartDate holds the value of the "actualStartDate" field.
	ActualStartDate *time.Time `json:"actualStartDate,omitempty" actualStartDate`
	// PlannedEndDate holds the value of the "plannedEndDate" field.
	PlannedEndDate time.Time `json:"plannedEndDate,omitempty"`
	// ActualEndDate holds the value of the "actualEndDate" field.
	ActualEndDate *time.Time `json:"actualEndDate,omitempty"`
	// Progress holds the value of the "progress" field.
	Progress float64 `json:"progress,omitempty"`
	// Status holds the value of the "status" field.
	Status project.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectQuery when eager-loading is set.
	Edges                  ProjectEdges `json:"edges"`
	company_projects       *int
	user_created_projects  *int
	user_leadered_projects *int
	selectValues           sql.SelectValues
}

// ProjectEdges holds the relations/edges for other nodes in the graph.
type ProjectEdges struct {
	// Company holds the value of the company edge.
	Company *Company `json:"company,omitempty"`
	// CreatedBy holds the value of the createdBy edge.
	CreatedBy *User `json:"createdBy,omitempty"`
	// Leader holds the value of the leader edge.
	Leader *User `json:"leader,omitempty"`
	// Tasks holds the value of the tasks edge.
	Tasks []*ProjectTask `json:"tasks,omitempty"`
	// Milestones holds the value of the milestones edge.
	Milestones []*ProjectMilestone `json:"milestones,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [5]map[string]int

	namedTasks      map[string][]*ProjectTask
	namedMilestones map[string][]*ProjectMilestone
}

// CompanyOrErr returns the Company value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectEdges) CompanyOrErr() (*Company, error) {
	if e.Company != nil {
		return e.Company, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: company.Label}
	}
	return nil, &NotLoadedError{edge: "company"}
}

// CreatedByOrErr returns the CreatedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectEdges) CreatedByOrErr() (*User, error) {
	if e.CreatedBy != nil {
		return e.CreatedBy, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "createdBy"}
}

// LeaderOrErr returns the Leader value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectEdges) LeaderOrErr() (*User, error) {
	if e.Leader != nil {
		return e.Leader, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "leader"}
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) TasksOrErr() ([]*ProjectTask, error) {
	if e.loadedTypes[3] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// MilestonesOrErr returns the Milestones value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) MilestonesOrErr() ([]*ProjectMilestone, error) {
	if e.loadedTypes[4] {
		return e.Milestones, nil
	}
	return nil, &NotLoadedError{edge: "milestones"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Project) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case project.FieldProgress:
			values[i] = new(sql.NullFloat64)
		case project.FieldID:
			values[i] = new(sql.NullInt64)
		case project.FieldName, project.FieldDescription, project.FieldStatus:
			values[i] = new(sql.NullString)
		case project.FieldCreatedAt, project.FieldUpdatedAt, project.FieldDeletedAt, project.FieldPlannedStartDate, project.FieldActualStartDate, project.FieldPlannedEndDate, project.FieldActualEndDate:
			values[i] = new(sql.NullTime)
		case project.ForeignKeys[0]: // company_projects
			values[i] = new(sql.NullInt64)
		case project.ForeignKeys[1]: // user_created_projects
			values[i] = new(sql.NullInt64)
		case project.ForeignKeys[2]: // user_leadered_projects
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Project fields.
func (pr *Project) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case project.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case project.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case project.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		case project.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deletedAt", values[i])
			} else if value.Valid {
				pr.DeletedAt = new(time.Time)
				*pr.DeletedAt = value.Time
			}
		case project.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case project.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pr.Description = value.String
			}
		case project.FieldPlannedStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field plannedStartDate", values[i])
			} else if value.Valid {
				pr.PlannedStartDate = value.Time
			}
		case project.FieldActualStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field actualStartDate", values[i])
			} else if value.Valid {
				pr.ActualStartDate = new(time.Time)
				*pr.ActualStartDate = value.Time
			}
		case project.FieldPlannedEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field plannedEndDate", values[i])
			} else if value.Valid {
				pr.PlannedEndDate = value.Time
			}
		case project.FieldActualEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field actualEndDate", values[i])
			} else if value.Valid {
				pr.ActualEndDate = new(time.Time)
				*pr.ActualEndDate = value.Time
			}
		case project.FieldProgress:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field progress", values[i])
			} else if value.Valid {
				pr.Progress = value.Float64
			}
		case project.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pr.Status = project.Status(value.String)
			}
		case project.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field company_projects", value)
			} else if value.Valid {
				pr.company_projects = new(int)
				*pr.company_projects = int(value.Int64)
			}
		case project.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_created_projects", value)
			} else if value.Valid {
				pr.user_created_projects = new(int)
				*pr.user_created_projects = int(value.Int64)
			}
		case project.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_leadered_projects", value)
			} else if value.Valid {
				pr.user_leadered_projects = new(int)
				*pr.user_leadered_projects = int(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Project.
// This includes values selected through modifiers, order, etc.
func (pr *Project) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryCompany queries the "company" edge of the Project entity.
func (pr *Project) QueryCompany() *CompanyQuery {
	return NewProjectClient(pr.config).QueryCompany(pr)
}

// QueryCreatedBy queries the "createdBy" edge of the Project entity.
func (pr *Project) QueryCreatedBy() *UserQuery {
	return NewProjectClient(pr.config).QueryCreatedBy(pr)
}

// QueryLeader queries the "leader" edge of the Project entity.
func (pr *Project) QueryLeader() *UserQuery {
	return NewProjectClient(pr.config).QueryLeader(pr)
}

// QueryTasks queries the "tasks" edge of the Project entity.
func (pr *Project) QueryTasks() *ProjectTaskQuery {
	return NewProjectClient(pr.config).QueryTasks(pr)
}

// QueryMilestones queries the "milestones" edge of the Project entity.
func (pr *Project) QueryMilestones() *ProjectMilestoneQuery {
	return NewProjectClient(pr.config).QueryMilestones(pr)
}

// Update returns a builder for updating this Project.
// Note that you need to call Project.Unwrap() before calling this method if this Project
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Project) Update() *ProjectUpdateOne {
	return NewProjectClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Project entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Project) Unwrap() *Project {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("generated: Project is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Project) String() string {
	var builder strings.Builder
	builder.WriteString("Project(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("createdAt=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pr.DeletedAt; v != nil {
		builder.WriteString("deletedAt=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pr.Description)
	builder.WriteString(", ")
	builder.WriteString("plannedStartDate=")
	builder.WriteString(pr.PlannedStartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pr.ActualStartDate; v != nil {
		builder.WriteString("actualStartDate=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("plannedEndDate=")
	builder.WriteString(pr.PlannedEndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pr.ActualEndDate; v != nil {
		builder.WriteString("actualEndDate=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("progress=")
	builder.WriteString(fmt.Sprintf("%v", pr.Progress))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pr.Status))
	builder.WriteByte(')')
	return builder.String()
}

// NamedTasks returns the Tasks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pr *Project) NamedTasks(name string) ([]*ProjectTask, error) {
	if pr.Edges.namedTasks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pr.Edges.namedTasks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pr *Project) appendNamedTasks(name string, edges ...*ProjectTask) {
	if pr.Edges.namedTasks == nil {
		pr.Edges.namedTasks = make(map[string][]*ProjectTask)
	}
	if len(edges) == 0 {
		pr.Edges.namedTasks[name] = []*ProjectTask{}
	} else {
		pr.Edges.namedTasks[name] = append(pr.Edges.namedTasks[name], edges...)
	}
}

// NamedMilestones returns the Milestones named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pr *Project) NamedMilestones(name string) ([]*ProjectMilestone, error) {
	if pr.Edges.namedMilestones == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pr.Edges.namedMilestones[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pr *Project) appendNamedMilestones(name string, edges ...*ProjectMilestone) {
	if pr.Edges.namedMilestones == nil {
		pr.Edges.namedMilestones = make(map[string][]*ProjectMilestone)
	}
	if len(edges) == 0 {
		pr.Edges.namedMilestones[name] = []*ProjectMilestone{}
	} else {
		pr.Edges.namedMilestones[name] = append(pr.Edges.namedMilestones[name], edges...)
	}
}

// Projects is a parsable slice of Project.
type Projects []*Project
