// Code generated by ent, DO NOT EDIT.

package loan

import (
	"mazza/ent/generated/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Loan {
	return predicate.Loan(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Loan {
	return predicate.Loan(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Loan {
	return predicate.Loan(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Loan {
	return predicate.Loan(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Loan {
	return predicate.Loan(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Loan {
	return predicate.Loan(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Loan {
	return predicate.Loan(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deletedAt" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldDeletedAt, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldAmount, v))
}

// Collateral applies equality check predicate on the "collateral" field. It's identical to CollateralEQ.
func Collateral(v string) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldCollateral, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldDescription, v))
}

// InterestRate applies equality check predicate on the "interestRate" field. It's identical to InterestRateEQ.
func InterestRate(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldInterestRate, v))
}

// Installments applies equality check predicate on the "installments" field. It's identical to InstallmentsEQ.
func Installments(v int) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldInstallments, v))
}

// MaturityDate applies equality check predicate on the "maturityDate" field. It's identical to MaturityDateEQ.
func MaturityDate(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldMaturityDate, v))
}

// NextPayment applies equality check predicate on the "nextPayment" field. It's identical to NextPaymentEQ.
func NextPayment(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldNextPayment, v))
}

// NextPaymentAmount applies equality check predicate on the "nextPaymentAmount" field. It's identical to NextPaymentAmountEQ.
func NextPaymentAmount(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldNextPaymentAmount, v))
}

// OutstandingAmount applies equality check predicate on the "outstandingAmount" field. It's identical to OutstandingAmountEQ.
func OutstandingAmount(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldOutstandingAmount, v))
}

// PaidInstallments applies equality check predicate on the "paidInstallments" field. It's identical to PaidInstallmentsEQ.
func PaidInstallments(v int) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldPaidInstallments, v))
}

// Provider applies equality check predicate on the "provider" field. It's identical to ProviderEQ.
func Provider(v string) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldProvider, v))
}

// StartDate applies equality check predicate on the "startDate" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldStartDate, v))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deletedAt" field.
func DeletedAtEQ(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deletedAt" field.
func DeletedAtNEQ(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deletedAt" field.
func DeletedAtIn(vs ...time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deletedAt" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deletedAt" field.
func DeletedAtGT(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deletedAt" field.
func DeletedAtGTE(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deletedAt" field.
func DeletedAtLT(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deletedAt" field.
func DeletedAtLTE(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deletedAt" field.
func DeletedAtIsNil() predicate.Loan {
	return predicate.Loan(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deletedAt" field.
func DeletedAtNotNil() predicate.Loan {
	return predicate.Loan(sql.FieldNotNull(FieldDeletedAt))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.Loan {
	return predicate.Loan(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.Loan {
	return predicate.Loan(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldLTE(FieldAmount, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v Category) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v Category) predicate.Loan {
	return predicate.Loan(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...Category) predicate.Loan {
	return predicate.Loan(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...Category) predicate.Loan {
	return predicate.Loan(sql.FieldNotIn(FieldCategory, vs...))
}

// CollateralEQ applies the EQ predicate on the "collateral" field.
func CollateralEQ(v string) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldCollateral, v))
}

// CollateralNEQ applies the NEQ predicate on the "collateral" field.
func CollateralNEQ(v string) predicate.Loan {
	return predicate.Loan(sql.FieldNEQ(FieldCollateral, v))
}

// CollateralIn applies the In predicate on the "collateral" field.
func CollateralIn(vs ...string) predicate.Loan {
	return predicate.Loan(sql.FieldIn(FieldCollateral, vs...))
}

// CollateralNotIn applies the NotIn predicate on the "collateral" field.
func CollateralNotIn(vs ...string) predicate.Loan {
	return predicate.Loan(sql.FieldNotIn(FieldCollateral, vs...))
}

// CollateralGT applies the GT predicate on the "collateral" field.
func CollateralGT(v string) predicate.Loan {
	return predicate.Loan(sql.FieldGT(FieldCollateral, v))
}

// CollateralGTE applies the GTE predicate on the "collateral" field.
func CollateralGTE(v string) predicate.Loan {
	return predicate.Loan(sql.FieldGTE(FieldCollateral, v))
}

// CollateralLT applies the LT predicate on the "collateral" field.
func CollateralLT(v string) predicate.Loan {
	return predicate.Loan(sql.FieldLT(FieldCollateral, v))
}

// CollateralLTE applies the LTE predicate on the "collateral" field.
func CollateralLTE(v string) predicate.Loan {
	return predicate.Loan(sql.FieldLTE(FieldCollateral, v))
}

// CollateralContains applies the Contains predicate on the "collateral" field.
func CollateralContains(v string) predicate.Loan {
	return predicate.Loan(sql.FieldContains(FieldCollateral, v))
}

// CollateralHasPrefix applies the HasPrefix predicate on the "collateral" field.
func CollateralHasPrefix(v string) predicate.Loan {
	return predicate.Loan(sql.FieldHasPrefix(FieldCollateral, v))
}

// CollateralHasSuffix applies the HasSuffix predicate on the "collateral" field.
func CollateralHasSuffix(v string) predicate.Loan {
	return predicate.Loan(sql.FieldHasSuffix(FieldCollateral, v))
}

// CollateralIsNil applies the IsNil predicate on the "collateral" field.
func CollateralIsNil() predicate.Loan {
	return predicate.Loan(sql.FieldIsNull(FieldCollateral))
}

// CollateralNotNil applies the NotNil predicate on the "collateral" field.
func CollateralNotNil() predicate.Loan {
	return predicate.Loan(sql.FieldNotNull(FieldCollateral))
}

// CollateralEqualFold applies the EqualFold predicate on the "collateral" field.
func CollateralEqualFold(v string) predicate.Loan {
	return predicate.Loan(sql.FieldEqualFold(FieldCollateral, v))
}

// CollateralContainsFold applies the ContainsFold predicate on the "collateral" field.
func CollateralContainsFold(v string) predicate.Loan {
	return predicate.Loan(sql.FieldContainsFold(FieldCollateral, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Loan {
	return predicate.Loan(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Loan {
	return predicate.Loan(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Loan {
	return predicate.Loan(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Loan {
	return predicate.Loan(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Loan {
	return predicate.Loan(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Loan {
	return predicate.Loan(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Loan {
	return predicate.Loan(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Loan {
	return predicate.Loan(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Loan {
	return predicate.Loan(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Loan {
	return predicate.Loan(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Loan {
	return predicate.Loan(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Loan {
	return predicate.Loan(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Loan {
	return predicate.Loan(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Loan {
	return predicate.Loan(sql.FieldContainsFold(FieldDescription, v))
}

// InterestRateEQ applies the EQ predicate on the "interestRate" field.
func InterestRateEQ(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldInterestRate, v))
}

// InterestRateNEQ applies the NEQ predicate on the "interestRate" field.
func InterestRateNEQ(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldNEQ(FieldInterestRate, v))
}

// InterestRateIn applies the In predicate on the "interestRate" field.
func InterestRateIn(vs ...float64) predicate.Loan {
	return predicate.Loan(sql.FieldIn(FieldInterestRate, vs...))
}

// InterestRateNotIn applies the NotIn predicate on the "interestRate" field.
func InterestRateNotIn(vs ...float64) predicate.Loan {
	return predicate.Loan(sql.FieldNotIn(FieldInterestRate, vs...))
}

// InterestRateGT applies the GT predicate on the "interestRate" field.
func InterestRateGT(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldGT(FieldInterestRate, v))
}

// InterestRateGTE applies the GTE predicate on the "interestRate" field.
func InterestRateGTE(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldGTE(FieldInterestRate, v))
}

// InterestRateLT applies the LT predicate on the "interestRate" field.
func InterestRateLT(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldLT(FieldInterestRate, v))
}

// InterestRateLTE applies the LTE predicate on the "interestRate" field.
func InterestRateLTE(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldLTE(FieldInterestRate, v))
}

// InstallmentsEQ applies the EQ predicate on the "installments" field.
func InstallmentsEQ(v int) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldInstallments, v))
}

// InstallmentsNEQ applies the NEQ predicate on the "installments" field.
func InstallmentsNEQ(v int) predicate.Loan {
	return predicate.Loan(sql.FieldNEQ(FieldInstallments, v))
}

// InstallmentsIn applies the In predicate on the "installments" field.
func InstallmentsIn(vs ...int) predicate.Loan {
	return predicate.Loan(sql.FieldIn(FieldInstallments, vs...))
}

// InstallmentsNotIn applies the NotIn predicate on the "installments" field.
func InstallmentsNotIn(vs ...int) predicate.Loan {
	return predicate.Loan(sql.FieldNotIn(FieldInstallments, vs...))
}

// InstallmentsGT applies the GT predicate on the "installments" field.
func InstallmentsGT(v int) predicate.Loan {
	return predicate.Loan(sql.FieldGT(FieldInstallments, v))
}

// InstallmentsGTE applies the GTE predicate on the "installments" field.
func InstallmentsGTE(v int) predicate.Loan {
	return predicate.Loan(sql.FieldGTE(FieldInstallments, v))
}

// InstallmentsLT applies the LT predicate on the "installments" field.
func InstallmentsLT(v int) predicate.Loan {
	return predicate.Loan(sql.FieldLT(FieldInstallments, v))
}

// InstallmentsLTE applies the LTE predicate on the "installments" field.
func InstallmentsLTE(v int) predicate.Loan {
	return predicate.Loan(sql.FieldLTE(FieldInstallments, v))
}

// MaturityDateEQ applies the EQ predicate on the "maturityDate" field.
func MaturityDateEQ(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldMaturityDate, v))
}

// MaturityDateNEQ applies the NEQ predicate on the "maturityDate" field.
func MaturityDateNEQ(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldNEQ(FieldMaturityDate, v))
}

// MaturityDateIn applies the In predicate on the "maturityDate" field.
func MaturityDateIn(vs ...time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldIn(FieldMaturityDate, vs...))
}

// MaturityDateNotIn applies the NotIn predicate on the "maturityDate" field.
func MaturityDateNotIn(vs ...time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldNotIn(FieldMaturityDate, vs...))
}

// MaturityDateGT applies the GT predicate on the "maturityDate" field.
func MaturityDateGT(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldGT(FieldMaturityDate, v))
}

// MaturityDateGTE applies the GTE predicate on the "maturityDate" field.
func MaturityDateGTE(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldGTE(FieldMaturityDate, v))
}

// MaturityDateLT applies the LT predicate on the "maturityDate" field.
func MaturityDateLT(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldLT(FieldMaturityDate, v))
}

// MaturityDateLTE applies the LTE predicate on the "maturityDate" field.
func MaturityDateLTE(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldLTE(FieldMaturityDate, v))
}

// NextPaymentEQ applies the EQ predicate on the "nextPayment" field.
func NextPaymentEQ(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldNextPayment, v))
}

// NextPaymentNEQ applies the NEQ predicate on the "nextPayment" field.
func NextPaymentNEQ(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldNEQ(FieldNextPayment, v))
}

// NextPaymentIn applies the In predicate on the "nextPayment" field.
func NextPaymentIn(vs ...time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldIn(FieldNextPayment, vs...))
}

// NextPaymentNotIn applies the NotIn predicate on the "nextPayment" field.
func NextPaymentNotIn(vs ...time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldNotIn(FieldNextPayment, vs...))
}

// NextPaymentGT applies the GT predicate on the "nextPayment" field.
func NextPaymentGT(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldGT(FieldNextPayment, v))
}

// NextPaymentGTE applies the GTE predicate on the "nextPayment" field.
func NextPaymentGTE(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldGTE(FieldNextPayment, v))
}

// NextPaymentLT applies the LT predicate on the "nextPayment" field.
func NextPaymentLT(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldLT(FieldNextPayment, v))
}

// NextPaymentLTE applies the LTE predicate on the "nextPayment" field.
func NextPaymentLTE(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldLTE(FieldNextPayment, v))
}

// NextPaymentIsNil applies the IsNil predicate on the "nextPayment" field.
func NextPaymentIsNil() predicate.Loan {
	return predicate.Loan(sql.FieldIsNull(FieldNextPayment))
}

// NextPaymentNotNil applies the NotNil predicate on the "nextPayment" field.
func NextPaymentNotNil() predicate.Loan {
	return predicate.Loan(sql.FieldNotNull(FieldNextPayment))
}

// NextPaymentAmountEQ applies the EQ predicate on the "nextPaymentAmount" field.
func NextPaymentAmountEQ(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldNextPaymentAmount, v))
}

// NextPaymentAmountNEQ applies the NEQ predicate on the "nextPaymentAmount" field.
func NextPaymentAmountNEQ(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldNEQ(FieldNextPaymentAmount, v))
}

// NextPaymentAmountIn applies the In predicate on the "nextPaymentAmount" field.
func NextPaymentAmountIn(vs ...float64) predicate.Loan {
	return predicate.Loan(sql.FieldIn(FieldNextPaymentAmount, vs...))
}

// NextPaymentAmountNotIn applies the NotIn predicate on the "nextPaymentAmount" field.
func NextPaymentAmountNotIn(vs ...float64) predicate.Loan {
	return predicate.Loan(sql.FieldNotIn(FieldNextPaymentAmount, vs...))
}

// NextPaymentAmountGT applies the GT predicate on the "nextPaymentAmount" field.
func NextPaymentAmountGT(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldGT(FieldNextPaymentAmount, v))
}

// NextPaymentAmountGTE applies the GTE predicate on the "nextPaymentAmount" field.
func NextPaymentAmountGTE(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldGTE(FieldNextPaymentAmount, v))
}

// NextPaymentAmountLT applies the LT predicate on the "nextPaymentAmount" field.
func NextPaymentAmountLT(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldLT(FieldNextPaymentAmount, v))
}

// NextPaymentAmountLTE applies the LTE predicate on the "nextPaymentAmount" field.
func NextPaymentAmountLTE(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldLTE(FieldNextPaymentAmount, v))
}

// NextPaymentAmountIsNil applies the IsNil predicate on the "nextPaymentAmount" field.
func NextPaymentAmountIsNil() predicate.Loan {
	return predicate.Loan(sql.FieldIsNull(FieldNextPaymentAmount))
}

// NextPaymentAmountNotNil applies the NotNil predicate on the "nextPaymentAmount" field.
func NextPaymentAmountNotNil() predicate.Loan {
	return predicate.Loan(sql.FieldNotNull(FieldNextPaymentAmount))
}

// OutstandingAmountEQ applies the EQ predicate on the "outstandingAmount" field.
func OutstandingAmountEQ(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldOutstandingAmount, v))
}

// OutstandingAmountNEQ applies the NEQ predicate on the "outstandingAmount" field.
func OutstandingAmountNEQ(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldNEQ(FieldOutstandingAmount, v))
}

// OutstandingAmountIn applies the In predicate on the "outstandingAmount" field.
func OutstandingAmountIn(vs ...float64) predicate.Loan {
	return predicate.Loan(sql.FieldIn(FieldOutstandingAmount, vs...))
}

// OutstandingAmountNotIn applies the NotIn predicate on the "outstandingAmount" field.
func OutstandingAmountNotIn(vs ...float64) predicate.Loan {
	return predicate.Loan(sql.FieldNotIn(FieldOutstandingAmount, vs...))
}

// OutstandingAmountGT applies the GT predicate on the "outstandingAmount" field.
func OutstandingAmountGT(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldGT(FieldOutstandingAmount, v))
}

// OutstandingAmountGTE applies the GTE predicate on the "outstandingAmount" field.
func OutstandingAmountGTE(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldGTE(FieldOutstandingAmount, v))
}

// OutstandingAmountLT applies the LT predicate on the "outstandingAmount" field.
func OutstandingAmountLT(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldLT(FieldOutstandingAmount, v))
}

// OutstandingAmountLTE applies the LTE predicate on the "outstandingAmount" field.
func OutstandingAmountLTE(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldLTE(FieldOutstandingAmount, v))
}

// PaymentFrequencyEQ applies the EQ predicate on the "paymentFrequency" field.
func PaymentFrequencyEQ(v PaymentFrequency) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldPaymentFrequency, v))
}

// PaymentFrequencyNEQ applies the NEQ predicate on the "paymentFrequency" field.
func PaymentFrequencyNEQ(v PaymentFrequency) predicate.Loan {
	return predicate.Loan(sql.FieldNEQ(FieldPaymentFrequency, v))
}

// PaymentFrequencyIn applies the In predicate on the "paymentFrequency" field.
func PaymentFrequencyIn(vs ...PaymentFrequency) predicate.Loan {
	return predicate.Loan(sql.FieldIn(FieldPaymentFrequency, vs...))
}

// PaymentFrequencyNotIn applies the NotIn predicate on the "paymentFrequency" field.
func PaymentFrequencyNotIn(vs ...PaymentFrequency) predicate.Loan {
	return predicate.Loan(sql.FieldNotIn(FieldPaymentFrequency, vs...))
}

// PaidInstallmentsEQ applies the EQ predicate on the "paidInstallments" field.
func PaidInstallmentsEQ(v int) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldPaidInstallments, v))
}

// PaidInstallmentsNEQ applies the NEQ predicate on the "paidInstallments" field.
func PaidInstallmentsNEQ(v int) predicate.Loan {
	return predicate.Loan(sql.FieldNEQ(FieldPaidInstallments, v))
}

// PaidInstallmentsIn applies the In predicate on the "paidInstallments" field.
func PaidInstallmentsIn(vs ...int) predicate.Loan {
	return predicate.Loan(sql.FieldIn(FieldPaidInstallments, vs...))
}

// PaidInstallmentsNotIn applies the NotIn predicate on the "paidInstallments" field.
func PaidInstallmentsNotIn(vs ...int) predicate.Loan {
	return predicate.Loan(sql.FieldNotIn(FieldPaidInstallments, vs...))
}

// PaidInstallmentsGT applies the GT predicate on the "paidInstallments" field.
func PaidInstallmentsGT(v int) predicate.Loan {
	return predicate.Loan(sql.FieldGT(FieldPaidInstallments, v))
}

// PaidInstallmentsGTE applies the GTE predicate on the "paidInstallments" field.
func PaidInstallmentsGTE(v int) predicate.Loan {
	return predicate.Loan(sql.FieldGTE(FieldPaidInstallments, v))
}

// PaidInstallmentsLT applies the LT predicate on the "paidInstallments" field.
func PaidInstallmentsLT(v int) predicate.Loan {
	return predicate.Loan(sql.FieldLT(FieldPaidInstallments, v))
}

// PaidInstallmentsLTE applies the LTE predicate on the "paidInstallments" field.
func PaidInstallmentsLTE(v int) predicate.Loan {
	return predicate.Loan(sql.FieldLTE(FieldPaidInstallments, v))
}

// ProviderEQ applies the EQ predicate on the "provider" field.
func ProviderEQ(v string) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldProvider, v))
}

// ProviderNEQ applies the NEQ predicate on the "provider" field.
func ProviderNEQ(v string) predicate.Loan {
	return predicate.Loan(sql.FieldNEQ(FieldProvider, v))
}

// ProviderIn applies the In predicate on the "provider" field.
func ProviderIn(vs ...string) predicate.Loan {
	return predicate.Loan(sql.FieldIn(FieldProvider, vs...))
}

// ProviderNotIn applies the NotIn predicate on the "provider" field.
func ProviderNotIn(vs ...string) predicate.Loan {
	return predicate.Loan(sql.FieldNotIn(FieldProvider, vs...))
}

// ProviderGT applies the GT predicate on the "provider" field.
func ProviderGT(v string) predicate.Loan {
	return predicate.Loan(sql.FieldGT(FieldProvider, v))
}

// ProviderGTE applies the GTE predicate on the "provider" field.
func ProviderGTE(v string) predicate.Loan {
	return predicate.Loan(sql.FieldGTE(FieldProvider, v))
}

// ProviderLT applies the LT predicate on the "provider" field.
func ProviderLT(v string) predicate.Loan {
	return predicate.Loan(sql.FieldLT(FieldProvider, v))
}

// ProviderLTE applies the LTE predicate on the "provider" field.
func ProviderLTE(v string) predicate.Loan {
	return predicate.Loan(sql.FieldLTE(FieldProvider, v))
}

// ProviderContains applies the Contains predicate on the "provider" field.
func ProviderContains(v string) predicate.Loan {
	return predicate.Loan(sql.FieldContains(FieldProvider, v))
}

// ProviderHasPrefix applies the HasPrefix predicate on the "provider" field.
func ProviderHasPrefix(v string) predicate.Loan {
	return predicate.Loan(sql.FieldHasPrefix(FieldProvider, v))
}

// ProviderHasSuffix applies the HasSuffix predicate on the "provider" field.
func ProviderHasSuffix(v string) predicate.Loan {
	return predicate.Loan(sql.FieldHasSuffix(FieldProvider, v))
}

// ProviderEqualFold applies the EqualFold predicate on the "provider" field.
func ProviderEqualFold(v string) predicate.Loan {
	return predicate.Loan(sql.FieldEqualFold(FieldProvider, v))
}

// ProviderContainsFold applies the ContainsFold predicate on the "provider" field.
func ProviderContainsFold(v string) predicate.Loan {
	return predicate.Loan(sql.FieldContainsFold(FieldProvider, v))
}

// StartDateEQ applies the EQ predicate on the "startDate" field.
func StartDateEQ(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "startDate" field.
func StartDateNEQ(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "startDate" field.
func StartDateIn(vs ...time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "startDate" field.
func StartDateNotIn(vs ...time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "startDate" field.
func StartDateGT(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "startDate" field.
func StartDateGTE(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "startDate" field.
func StartDateLT(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "startDate" field.
func StartDateLTE(v time.Time) predicate.Loan {
	return predicate.Loan(sql.FieldLTE(FieldStartDate, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Loan {
	return predicate.Loan(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Loan {
	return predicate.Loan(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Loan {
	return predicate.Loan(sql.FieldNotIn(FieldStatus, vs...))
}

// HasCompany applies the HasEdge predicate on the "company" edge.
func HasCompany() predicate.Loan {
	return predicate.Loan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompanyWith applies the HasEdge predicate on the "company" edge with a given conditions (other predicates).
func HasCompanyWith(preds ...predicate.Company) predicate.Loan {
	return predicate.Loan(func(s *sql.Selector) {
		step := newCompanyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Loan) predicate.Loan {
	return predicate.Loan(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Loan) predicate.Loan {
	return predicate.Loan(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Loan) predicate.Loan {
	return predicate.Loan(sql.NotPredicates(p))
}
