// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"mazza/ent/generated/accountingentry"
	"mazza/ent/generated/company"
	"mazza/ent/generated/companydocument"
	"mazza/ent/generated/employee"
	"mazza/ent/generated/invoice"
	"mazza/ent/generated/membersignuptoken"
	"mazza/ent/generated/predicate"
	"mazza/ent/generated/project"
	"mazza/ent/generated/projecttask"
	"mazza/ent/generated/token"
	"mazza/ent/generated/user"
	"mazza/ent/generated/userrole"
	"mazza/ent/generated/workshift"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUpdatedAt sets the "updatedAt" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetDeletedAt sets the "deletedAt" field.
func (uu *UserUpdate) SetDeletedAt(t time.Time) *UserUpdate {
	uu.mutation.SetDeletedAt(t)
	return uu
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDeletedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetDeletedAt(*t)
	}
	return uu
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (uu *UserUpdate) ClearDeletedAt() *UserUpdate {
	uu.mutation.ClearDeletedAt()
	return uu
}

// SetIsDemoUser sets the "isDemoUser" field.
func (uu *UserUpdate) SetIsDemoUser(b bool) *UserUpdate {
	uu.mutation.SetIsDemoUser(b)
	return uu
}

// SetNillableIsDemoUser sets the "isDemoUser" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsDemoUser(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsDemoUser(*b)
	}
	return uu
}

// ClearIsDemoUser clears the value of the "isDemoUser" field.
func (uu *UserUpdate) ClearIsDemoUser() *UserUpdate {
	uu.mutation.ClearIsDemoUser()
	return uu
}

// SetFirebaseUID sets the "firebaseUID" field.
func (uu *UserUpdate) SetFirebaseUID(s string) *UserUpdate {
	uu.mutation.SetFirebaseUID(s)
	return uu
}

// SetNillableFirebaseUID sets the "firebaseUID" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFirebaseUID(s *string) *UserUpdate {
	if s != nil {
		uu.SetFirebaseUID(*s)
	}
	return uu
}

// SetFcmToken sets the "fcmToken" field.
func (uu *UserUpdate) SetFcmToken(s string) *UserUpdate {
	uu.mutation.SetFcmToken(s)
	return uu
}

// SetNillableFcmToken sets the "fcmToken" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFcmToken(s *string) *UserUpdate {
	if s != nil {
		uu.SetFcmToken(*s)
	}
	return uu
}

// ClearFcmToken clears the value of the "fcmToken" field.
func (uu *UserUpdate) ClearFcmToken() *UserUpdate {
	uu.mutation.ClearFcmToken()
	return uu
}

// SetExpoPushToken sets the "expoPushToken" field.
func (uu *UserUpdate) SetExpoPushToken(s string) *UserUpdate {
	uu.mutation.SetExpoPushToken(s)
	return uu
}

// SetNillableExpoPushToken sets the "expoPushToken" field if the given value is not nil.
func (uu *UserUpdate) SetNillableExpoPushToken(s *string) *UserUpdate {
	if s != nil {
		uu.SetExpoPushToken(*s)
	}
	return uu
}

// ClearExpoPushToken clears the value of the "expoPushToken" field.
func (uu *UserUpdate) ClearExpoPushToken() *UserUpdate {
	uu.mutation.ClearExpoPushToken()
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableName(s *string) *UserUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// SetAddress sets the "address" field.
func (uu *UserUpdate) SetAddress(s string) *UserUpdate {
	uu.mutation.SetAddress(s)
	return uu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAddress(s *string) *UserUpdate {
	if s != nil {
		uu.SetAddress(*s)
	}
	return uu
}

// ClearAddress clears the value of the "address" field.
func (uu *UserUpdate) ClearAddress() *UserUpdate {
	uu.mutation.ClearAddress()
	return uu
}

// SetAvatar sets the "avatar" field.
func (uu *UserUpdate) SetAvatar(s string) *UserUpdate {
	uu.mutation.SetAvatar(s)
	return uu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAvatar(s *string) *UserUpdate {
	if s != nil {
		uu.SetAvatar(*s)
	}
	return uu
}

// ClearAvatar clears the value of the "avatar" field.
func (uu *UserUpdate) ClearAvatar() *UserUpdate {
	uu.mutation.ClearAvatar()
	return uu
}

// SetPhotoURL sets the "photoURL" field.
func (uu *UserUpdate) SetPhotoURL(s string) *UserUpdate {
	uu.mutation.SetPhotoURL(s)
	return uu
}

// SetNillablePhotoURL sets the "photoURL" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhotoURL(s *string) *UserUpdate {
	if s != nil {
		uu.SetPhotoURL(*s)
	}
	return uu
}

// ClearPhotoURL clears the value of the "photoURL" field.
func (uu *UserUpdate) ClearPhotoURL() *UserUpdate {
	uu.mutation.ClearPhotoURL()
	return uu
}

// SetDepartment sets the "department" field.
func (uu *UserUpdate) SetDepartment(s string) *UserUpdate {
	uu.mutation.SetDepartment(s)
	return uu
}

// SetNillableDepartment sets the "department" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDepartment(s *string) *UserUpdate {
	if s != nil {
		uu.SetDepartment(*s)
	}
	return uu
}

// ClearDepartment clears the value of the "department" field.
func (uu *UserUpdate) ClearDepartment() *UserUpdate {
	uu.mutation.ClearDepartment()
	return uu
}

// SetPhone sets the "phone" field.
func (uu *UserUpdate) SetPhone(s string) *UserUpdate {
	uu.mutation.SetPhone(s)
	return uu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhone(s *string) *UserUpdate {
	if s != nil {
		uu.SetPhone(*s)
	}
	return uu
}

// ClearPhone clears the value of the "phone" field.
func (uu *UserUpdate) ClearPhone() *UserUpdate {
	uu.mutation.ClearPhone()
	return uu
}

// SetBirthdate sets the "birthdate" field.
func (uu *UserUpdate) SetBirthdate(t time.Time) *UserUpdate {
	uu.mutation.SetBirthdate(t)
	return uu
}

// SetNillableBirthdate sets the "birthdate" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBirthdate(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetBirthdate(*t)
	}
	return uu
}

// ClearBirthdate clears the value of the "birthdate" field.
func (uu *UserUpdate) ClearBirthdate() *UserUpdate {
	uu.mutation.ClearBirthdate()
	return uu
}

// SetLastLogin sets the "lastLogin" field.
func (uu *UserUpdate) SetLastLogin(t time.Time) *UserUpdate {
	uu.mutation.SetLastLogin(t)
	return uu
}

// SetNillableLastLogin sets the "lastLogin" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastLogin(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLastLogin(*t)
	}
	return uu
}

// ClearLastLogin clears the value of the "lastLogin" field.
func (uu *UserUpdate) ClearLastLogin() *UserUpdate {
	uu.mutation.ClearLastLogin()
	return uu
}

// SetGender sets the "gender" field.
func (uu *UserUpdate) SetGender(u user.Gender) *UserUpdate {
	uu.mutation.SetGender(u)
	return uu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (uu *UserUpdate) SetNillableGender(u *user.Gender) *UserUpdate {
	if u != nil {
		uu.SetGender(*u)
	}
	return uu
}

// SetActive sets the "active" field.
func (uu *UserUpdate) SetActive(b bool) *UserUpdate {
	uu.mutation.SetActive(b)
	return uu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (uu *UserUpdate) SetNillableActive(b *bool) *UserUpdate {
	if b != nil {
		uu.SetActive(*b)
	}
	return uu
}

// AddAccountingEntryIDs adds the "accountingEntries" edge to the AccountingEntry entity by IDs.
func (uu *UserUpdate) AddAccountingEntryIDs(ids ...int) *UserUpdate {
	uu.mutation.AddAccountingEntryIDs(ids...)
	return uu
}

// AddAccountingEntries adds the "accountingEntries" edges to the AccountingEntry entity.
func (uu *UserUpdate) AddAccountingEntries(a ...*AccountingEntry) *UserUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddAccountingEntryIDs(ids...)
}

// AddCompanyIDs adds the "company" edge to the Company entity by IDs.
func (uu *UserUpdate) AddCompanyIDs(ids ...int) *UserUpdate {
	uu.mutation.AddCompanyIDs(ids...)
	return uu
}

// AddCompany adds the "company" edges to the Company entity.
func (uu *UserUpdate) AddCompany(c ...*Company) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddCompanyIDs(ids...)
}

// AddAssignedRoleIDs adds the "assignedRoles" edge to the UserRole entity by IDs.
func (uu *UserUpdate) AddAssignedRoleIDs(ids ...int) *UserUpdate {
	uu.mutation.AddAssignedRoleIDs(ids...)
	return uu
}

// AddAssignedRoles adds the "assignedRoles" edges to the UserRole entity.
func (uu *UserUpdate) AddAssignedRoles(u ...*UserRole) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddAssignedRoleIDs(ids...)
}

// AddSubordinateIDs adds the "subordinates" edge to the User entity by IDs.
func (uu *UserUpdate) AddSubordinateIDs(ids ...int) *UserUpdate {
	uu.mutation.AddSubordinateIDs(ids...)
	return uu
}

// AddSubordinates adds the "subordinates" edges to the User entity.
func (uu *UserUpdate) AddSubordinates(u ...*User) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddSubordinateIDs(ids...)
}

// SetLeaderID sets the "leader" edge to the User entity by ID.
func (uu *UserUpdate) SetLeaderID(id int) *UserUpdate {
	uu.mutation.SetLeaderID(id)
	return uu
}

// SetNillableLeaderID sets the "leader" edge to the User entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableLeaderID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetLeaderID(*id)
	}
	return uu
}

// SetLeader sets the "leader" edge to the User entity.
func (uu *UserUpdate) SetLeader(u *User) *UserUpdate {
	return uu.SetLeaderID(u.ID)
}

// AddCreatedMemberSignupTokenIDs adds the "createdMemberSignupTokens" edge to the MemberSignupToken entity by IDs.
func (uu *UserUpdate) AddCreatedMemberSignupTokenIDs(ids ...int) *UserUpdate {
	uu.mutation.AddCreatedMemberSignupTokenIDs(ids...)
	return uu
}

// AddCreatedMemberSignupTokens adds the "createdMemberSignupTokens" edges to the MemberSignupToken entity.
func (uu *UserUpdate) AddCreatedMemberSignupTokens(m ...*MemberSignupToken) *UserUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.AddCreatedMemberSignupTokenIDs(ids...)
}

// SetEmployeeID sets the "employee" edge to the Employee entity by ID.
func (uu *UserUpdate) SetEmployeeID(id int) *UserUpdate {
	uu.mutation.SetEmployeeID(id)
	return uu
}

// SetNillableEmployeeID sets the "employee" edge to the Employee entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableEmployeeID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetEmployeeID(*id)
	}
	return uu
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (uu *UserUpdate) SetEmployee(e *Employee) *UserUpdate {
	return uu.SetEmployeeID(e.ID)
}

// AddIssuedInvoiceIDs adds the "issuedInvoices" edge to the Invoice entity by IDs.
func (uu *UserUpdate) AddIssuedInvoiceIDs(ids ...int) *UserUpdate {
	uu.mutation.AddIssuedInvoiceIDs(ids...)
	return uu
}

// AddIssuedInvoices adds the "issuedInvoices" edges to the Invoice entity.
func (uu *UserUpdate) AddIssuedInvoices(i ...*Invoice) *UserUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.AddIssuedInvoiceIDs(ids...)
}

// AddCreatedProjectIDs adds the "createdProjects" edge to the Project entity by IDs.
func (uu *UserUpdate) AddCreatedProjectIDs(ids ...int) *UserUpdate {
	uu.mutation.AddCreatedProjectIDs(ids...)
	return uu
}

// AddCreatedProjects adds the "createdProjects" edges to the Project entity.
func (uu *UserUpdate) AddCreatedProjects(p ...*Project) *UserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddCreatedProjectIDs(ids...)
}

// AddLeaderedProjectIDs adds the "leaderedProjects" edge to the Project entity by IDs.
func (uu *UserUpdate) AddLeaderedProjectIDs(ids ...int) *UserUpdate {
	uu.mutation.AddLeaderedProjectIDs(ids...)
	return uu
}

// AddLeaderedProjects adds the "leaderedProjects" edges to the Project entity.
func (uu *UserUpdate) AddLeaderedProjects(p ...*Project) *UserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddLeaderedProjectIDs(ids...)
}

// AddAssignedProjectTaskIDs adds the "assignedProjectTasks" edge to the ProjectTask entity by IDs.
func (uu *UserUpdate) AddAssignedProjectTaskIDs(ids ...int) *UserUpdate {
	uu.mutation.AddAssignedProjectTaskIDs(ids...)
	return uu
}

// AddAssignedProjectTasks adds the "assignedProjectTasks" edges to the ProjectTask entity.
func (uu *UserUpdate) AddAssignedProjectTasks(p ...*ProjectTask) *UserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddAssignedProjectTaskIDs(ids...)
}

// AddParticipatedProjectTaskIDs adds the "participatedProjectTasks" edge to the ProjectTask entity by IDs.
func (uu *UserUpdate) AddParticipatedProjectTaskIDs(ids ...int) *UserUpdate {
	uu.mutation.AddParticipatedProjectTaskIDs(ids...)
	return uu
}

// AddParticipatedProjectTasks adds the "participatedProjectTasks" edges to the ProjectTask entity.
func (uu *UserUpdate) AddParticipatedProjectTasks(p ...*ProjectTask) *UserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddParticipatedProjectTaskIDs(ids...)
}

// AddTokenIDs adds the "tokens" edge to the Token entity by IDs.
func (uu *UserUpdate) AddTokenIDs(ids ...int) *UserUpdate {
	uu.mutation.AddTokenIDs(ids...)
	return uu
}

// AddTokens adds the "tokens" edges to the Token entity.
func (uu *UserUpdate) AddTokens(t ...*Token) *UserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddTokenIDs(ids...)
}

// AddApprovedWorkShiftIDs adds the "approvedWorkShifts" edge to the Workshift entity by IDs.
func (uu *UserUpdate) AddApprovedWorkShiftIDs(ids ...int) *UserUpdate {
	uu.mutation.AddApprovedWorkShiftIDs(ids...)
	return uu
}

// AddApprovedWorkShifts adds the "approvedWorkShifts" edges to the Workshift entity.
func (uu *UserUpdate) AddApprovedWorkShifts(w ...*Workshift) *UserUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uu.AddApprovedWorkShiftIDs(ids...)
}

// AddWorkShiftIDs adds the "workShifts" edge to the Workshift entity by IDs.
func (uu *UserUpdate) AddWorkShiftIDs(ids ...int) *UserUpdate {
	uu.mutation.AddWorkShiftIDs(ids...)
	return uu
}

// AddWorkShifts adds the "workShifts" edges to the Workshift entity.
func (uu *UserUpdate) AddWorkShifts(w ...*Workshift) *UserUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uu.AddWorkShiftIDs(ids...)
}

// AddUploadedDocumentIDs adds the "uploadedDocuments" edge to the CompanyDocument entity by IDs.
func (uu *UserUpdate) AddUploadedDocumentIDs(ids ...int) *UserUpdate {
	uu.mutation.AddUploadedDocumentIDs(ids...)
	return uu
}

// AddUploadedDocuments adds the "uploadedDocuments" edges to the CompanyDocument entity.
func (uu *UserUpdate) AddUploadedDocuments(c ...*CompanyDocument) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddUploadedDocumentIDs(ids...)
}

// AddApprovedDocumentIDs adds the "approvedDocuments" edge to the CompanyDocument entity by IDs.
func (uu *UserUpdate) AddApprovedDocumentIDs(ids ...int) *UserUpdate {
	uu.mutation.AddApprovedDocumentIDs(ids...)
	return uu
}

// AddApprovedDocuments adds the "approvedDocuments" edges to the CompanyDocument entity.
func (uu *UserUpdate) AddApprovedDocuments(c ...*CompanyDocument) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddApprovedDocumentIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearAccountingEntries clears all "accountingEntries" edges to the AccountingEntry entity.
func (uu *UserUpdate) ClearAccountingEntries() *UserUpdate {
	uu.mutation.ClearAccountingEntries()
	return uu
}

// RemoveAccountingEntryIDs removes the "accountingEntries" edge to AccountingEntry entities by IDs.
func (uu *UserUpdate) RemoveAccountingEntryIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveAccountingEntryIDs(ids...)
	return uu
}

// RemoveAccountingEntries removes "accountingEntries" edges to AccountingEntry entities.
func (uu *UserUpdate) RemoveAccountingEntries(a ...*AccountingEntry) *UserUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveAccountingEntryIDs(ids...)
}

// ClearCompany clears all "company" edges to the Company entity.
func (uu *UserUpdate) ClearCompany() *UserUpdate {
	uu.mutation.ClearCompany()
	return uu
}

// RemoveCompanyIDs removes the "company" edge to Company entities by IDs.
func (uu *UserUpdate) RemoveCompanyIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveCompanyIDs(ids...)
	return uu
}

// RemoveCompany removes "company" edges to Company entities.
func (uu *UserUpdate) RemoveCompany(c ...*Company) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveCompanyIDs(ids...)
}

// ClearAssignedRoles clears all "assignedRoles" edges to the UserRole entity.
func (uu *UserUpdate) ClearAssignedRoles() *UserUpdate {
	uu.mutation.ClearAssignedRoles()
	return uu
}

// RemoveAssignedRoleIDs removes the "assignedRoles" edge to UserRole entities by IDs.
func (uu *UserUpdate) RemoveAssignedRoleIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveAssignedRoleIDs(ids...)
	return uu
}

// RemoveAssignedRoles removes "assignedRoles" edges to UserRole entities.
func (uu *UserUpdate) RemoveAssignedRoles(u ...*UserRole) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveAssignedRoleIDs(ids...)
}

// ClearSubordinates clears all "subordinates" edges to the User entity.
func (uu *UserUpdate) ClearSubordinates() *UserUpdate {
	uu.mutation.ClearSubordinates()
	return uu
}

// RemoveSubordinateIDs removes the "subordinates" edge to User entities by IDs.
func (uu *UserUpdate) RemoveSubordinateIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveSubordinateIDs(ids...)
	return uu
}

// RemoveSubordinates removes "subordinates" edges to User entities.
func (uu *UserUpdate) RemoveSubordinates(u ...*User) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveSubordinateIDs(ids...)
}

// ClearLeader clears the "leader" edge to the User entity.
func (uu *UserUpdate) ClearLeader() *UserUpdate {
	uu.mutation.ClearLeader()
	return uu
}

// ClearCreatedMemberSignupTokens clears all "createdMemberSignupTokens" edges to the MemberSignupToken entity.
func (uu *UserUpdate) ClearCreatedMemberSignupTokens() *UserUpdate {
	uu.mutation.ClearCreatedMemberSignupTokens()
	return uu
}

// RemoveCreatedMemberSignupTokenIDs removes the "createdMemberSignupTokens" edge to MemberSignupToken entities by IDs.
func (uu *UserUpdate) RemoveCreatedMemberSignupTokenIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveCreatedMemberSignupTokenIDs(ids...)
	return uu
}

// RemoveCreatedMemberSignupTokens removes "createdMemberSignupTokens" edges to MemberSignupToken entities.
func (uu *UserUpdate) RemoveCreatedMemberSignupTokens(m ...*MemberSignupToken) *UserUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.RemoveCreatedMemberSignupTokenIDs(ids...)
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (uu *UserUpdate) ClearEmployee() *UserUpdate {
	uu.mutation.ClearEmployee()
	return uu
}

// ClearIssuedInvoices clears all "issuedInvoices" edges to the Invoice entity.
func (uu *UserUpdate) ClearIssuedInvoices() *UserUpdate {
	uu.mutation.ClearIssuedInvoices()
	return uu
}

// RemoveIssuedInvoiceIDs removes the "issuedInvoices" edge to Invoice entities by IDs.
func (uu *UserUpdate) RemoveIssuedInvoiceIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveIssuedInvoiceIDs(ids...)
	return uu
}

// RemoveIssuedInvoices removes "issuedInvoices" edges to Invoice entities.
func (uu *UserUpdate) RemoveIssuedInvoices(i ...*Invoice) *UserUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.RemoveIssuedInvoiceIDs(ids...)
}

// ClearCreatedProjects clears all "createdProjects" edges to the Project entity.
func (uu *UserUpdate) ClearCreatedProjects() *UserUpdate {
	uu.mutation.ClearCreatedProjects()
	return uu
}

// RemoveCreatedProjectIDs removes the "createdProjects" edge to Project entities by IDs.
func (uu *UserUpdate) RemoveCreatedProjectIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveCreatedProjectIDs(ids...)
	return uu
}

// RemoveCreatedProjects removes "createdProjects" edges to Project entities.
func (uu *UserUpdate) RemoveCreatedProjects(p ...*Project) *UserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemoveCreatedProjectIDs(ids...)
}

// ClearLeaderedProjects clears all "leaderedProjects" edges to the Project entity.
func (uu *UserUpdate) ClearLeaderedProjects() *UserUpdate {
	uu.mutation.ClearLeaderedProjects()
	return uu
}

// RemoveLeaderedProjectIDs removes the "leaderedProjects" edge to Project entities by IDs.
func (uu *UserUpdate) RemoveLeaderedProjectIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveLeaderedProjectIDs(ids...)
	return uu
}

// RemoveLeaderedProjects removes "leaderedProjects" edges to Project entities.
func (uu *UserUpdate) RemoveLeaderedProjects(p ...*Project) *UserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemoveLeaderedProjectIDs(ids...)
}

// ClearAssignedProjectTasks clears all "assignedProjectTasks" edges to the ProjectTask entity.
func (uu *UserUpdate) ClearAssignedProjectTasks() *UserUpdate {
	uu.mutation.ClearAssignedProjectTasks()
	return uu
}

// RemoveAssignedProjectTaskIDs removes the "assignedProjectTasks" edge to ProjectTask entities by IDs.
func (uu *UserUpdate) RemoveAssignedProjectTaskIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveAssignedProjectTaskIDs(ids...)
	return uu
}

// RemoveAssignedProjectTasks removes "assignedProjectTasks" edges to ProjectTask entities.
func (uu *UserUpdate) RemoveAssignedProjectTasks(p ...*ProjectTask) *UserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemoveAssignedProjectTaskIDs(ids...)
}

// ClearParticipatedProjectTasks clears all "participatedProjectTasks" edges to the ProjectTask entity.
func (uu *UserUpdate) ClearParticipatedProjectTasks() *UserUpdate {
	uu.mutation.ClearParticipatedProjectTasks()
	return uu
}

// RemoveParticipatedProjectTaskIDs removes the "participatedProjectTasks" edge to ProjectTask entities by IDs.
func (uu *UserUpdate) RemoveParticipatedProjectTaskIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveParticipatedProjectTaskIDs(ids...)
	return uu
}

// RemoveParticipatedProjectTasks removes "participatedProjectTasks" edges to ProjectTask entities.
func (uu *UserUpdate) RemoveParticipatedProjectTasks(p ...*ProjectTask) *UserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemoveParticipatedProjectTaskIDs(ids...)
}

// ClearTokens clears all "tokens" edges to the Token entity.
func (uu *UserUpdate) ClearTokens() *UserUpdate {
	uu.mutation.ClearTokens()
	return uu
}

// RemoveTokenIDs removes the "tokens" edge to Token entities by IDs.
func (uu *UserUpdate) RemoveTokenIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveTokenIDs(ids...)
	return uu
}

// RemoveTokens removes "tokens" edges to Token entities.
func (uu *UserUpdate) RemoveTokens(t ...*Token) *UserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveTokenIDs(ids...)
}

// ClearApprovedWorkShifts clears all "approvedWorkShifts" edges to the Workshift entity.
func (uu *UserUpdate) ClearApprovedWorkShifts() *UserUpdate {
	uu.mutation.ClearApprovedWorkShifts()
	return uu
}

// RemoveApprovedWorkShiftIDs removes the "approvedWorkShifts" edge to Workshift entities by IDs.
func (uu *UserUpdate) RemoveApprovedWorkShiftIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveApprovedWorkShiftIDs(ids...)
	return uu
}

// RemoveApprovedWorkShifts removes "approvedWorkShifts" edges to Workshift entities.
func (uu *UserUpdate) RemoveApprovedWorkShifts(w ...*Workshift) *UserUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uu.RemoveApprovedWorkShiftIDs(ids...)
}

// ClearWorkShifts clears all "workShifts" edges to the Workshift entity.
func (uu *UserUpdate) ClearWorkShifts() *UserUpdate {
	uu.mutation.ClearWorkShifts()
	return uu
}

// RemoveWorkShiftIDs removes the "workShifts" edge to Workshift entities by IDs.
func (uu *UserUpdate) RemoveWorkShiftIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveWorkShiftIDs(ids...)
	return uu
}

// RemoveWorkShifts removes "workShifts" edges to Workshift entities.
func (uu *UserUpdate) RemoveWorkShifts(w ...*Workshift) *UserUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uu.RemoveWorkShiftIDs(ids...)
}

// ClearUploadedDocuments clears all "uploadedDocuments" edges to the CompanyDocument entity.
func (uu *UserUpdate) ClearUploadedDocuments() *UserUpdate {
	uu.mutation.ClearUploadedDocuments()
	return uu
}

// RemoveUploadedDocumentIDs removes the "uploadedDocuments" edge to CompanyDocument entities by IDs.
func (uu *UserUpdate) RemoveUploadedDocumentIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveUploadedDocumentIDs(ids...)
	return uu
}

// RemoveUploadedDocuments removes "uploadedDocuments" edges to CompanyDocument entities.
func (uu *UserUpdate) RemoveUploadedDocuments(c ...*CompanyDocument) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveUploadedDocumentIDs(ids...)
}

// ClearApprovedDocuments clears all "approvedDocuments" edges to the CompanyDocument entity.
func (uu *UserUpdate) ClearApprovedDocuments() *UserUpdate {
	uu.mutation.ClearApprovedDocuments()
	return uu
}

// RemoveApprovedDocumentIDs removes the "approvedDocuments" edge to CompanyDocument entities by IDs.
func (uu *UserUpdate) RemoveApprovedDocumentIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveApprovedDocumentIDs(ids...)
	return uu
}

// RemoveApprovedDocuments removes "approvedDocuments" edges to CompanyDocument entities.
func (uu *UserUpdate) RemoveApprovedDocuments(c ...*CompanyDocument) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveApprovedDocumentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.FirebaseUID(); ok {
		if err := user.FirebaseUIDValidator(v); err != nil {
			return &ValidationError{Name: "firebaseUID", err: fmt.Errorf(`generated: validator failed for field "User.firebaseUID": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Gender(); ok {
		if err := user.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`generated: validator failed for field "User.gender": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uu *UserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdate {
	uu.modifiers = append(uu.modifiers, modifiers...)
	return uu
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
	}
	if uu.mutation.DeletedAtCleared() {
		_spec.ClearField(user.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.IsDemoUser(); ok {
		_spec.SetField(user.FieldIsDemoUser, field.TypeBool, value)
	}
	if uu.mutation.IsDemoUserCleared() {
		_spec.ClearField(user.FieldIsDemoUser, field.TypeBool)
	}
	if value, ok := uu.mutation.FirebaseUID(); ok {
		_spec.SetField(user.FieldFirebaseUID, field.TypeString, value)
	}
	if value, ok := uu.mutation.FcmToken(); ok {
		_spec.SetField(user.FieldFcmToken, field.TypeString, value)
	}
	if uu.mutation.FcmTokenCleared() {
		_spec.ClearField(user.FieldFcmToken, field.TypeString)
	}
	if value, ok := uu.mutation.ExpoPushToken(); ok {
		_spec.SetField(user.FieldExpoPushToken, field.TypeString, value)
	}
	if uu.mutation.ExpoPushTokenCleared() {
		_spec.ClearField(user.FieldExpoPushToken, field.TypeString)
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uu.mutation.Address(); ok {
		_spec.SetField(user.FieldAddress, field.TypeString, value)
	}
	if uu.mutation.AddressCleared() {
		_spec.ClearField(user.FieldAddress, field.TypeString)
	}
	if value, ok := uu.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
	}
	if uu.mutation.AvatarCleared() {
		_spec.ClearField(user.FieldAvatar, field.TypeString)
	}
	if value, ok := uu.mutation.PhotoURL(); ok {
		_spec.SetField(user.FieldPhotoURL, field.TypeString, value)
	}
	if uu.mutation.PhotoURLCleared() {
		_spec.ClearField(user.FieldPhotoURL, field.TypeString)
	}
	if value, ok := uu.mutation.Department(); ok {
		_spec.SetField(user.FieldDepartment, field.TypeString, value)
	}
	if uu.mutation.DepartmentCleared() {
		_spec.ClearField(user.FieldDepartment, field.TypeString)
	}
	if value, ok := uu.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if uu.mutation.PhoneCleared() {
		_spec.ClearField(user.FieldPhone, field.TypeString)
	}
	if value, ok := uu.mutation.Birthdate(); ok {
		_spec.SetField(user.FieldBirthdate, field.TypeTime, value)
	}
	if uu.mutation.BirthdateCleared() {
		_spec.ClearField(user.FieldBirthdate, field.TypeTime)
	}
	if value, ok := uu.mutation.LastLogin(); ok {
		_spec.SetField(user.FieldLastLogin, field.TypeTime, value)
	}
	if uu.mutation.LastLoginCleared() {
		_spec.ClearField(user.FieldLastLogin, field.TypeTime)
	}
	if value, ok := uu.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.Active(); ok {
		_spec.SetField(user.FieldActive, field.TypeBool, value)
	}
	if uu.mutation.AccountingEntriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AccountingEntriesTable,
			Columns: []string{user.AccountingEntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountingentry.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAccountingEntriesIDs(); len(nodes) > 0 && !uu.mutation.AccountingEntriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AccountingEntriesTable,
			Columns: []string{user.AccountingEntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountingentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AccountingEntriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AccountingEntriesTable,
			Columns: []string{user.AccountingEntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountingentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.CompanyTable,
			Columns: user.CompanyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCompanyIDs(); len(nodes) > 0 && !uu.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.CompanyTable,
			Columns: user.CompanyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.CompanyTable,
			Columns: user.CompanyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.AssignedRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedRolesTable,
			Columns: []string{user.AssignedRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAssignedRolesIDs(); len(nodes) > 0 && !uu.mutation.AssignedRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedRolesTable,
			Columns: []string{user.AssignedRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AssignedRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedRolesTable,
			Columns: []string{user.AssignedRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SubordinatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubordinatesTable,
			Columns: []string{user.SubordinatesColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSubordinatesIDs(); len(nodes) > 0 && !uu.mutation.SubordinatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubordinatesTable,
			Columns: []string{user.SubordinatesColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SubordinatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubordinatesTable,
			Columns: []string{user.SubordinatesColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.LeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.LeaderTable,
			Columns: []string{user.LeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.LeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.LeaderTable,
			Columns: []string{user.LeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CreatedMemberSignupTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedMemberSignupTokensTable,
			Columns: []string{user.CreatedMemberSignupTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membersignuptoken.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCreatedMemberSignupTokensIDs(); len(nodes) > 0 && !uu.mutation.CreatedMemberSignupTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedMemberSignupTokensTable,
			Columns: []string{user.CreatedMemberSignupTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membersignuptoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CreatedMemberSignupTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedMemberSignupTokensTable,
			Columns: []string{user.CreatedMemberSignupTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membersignuptoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.EmployeeTable,
			Columns: []string{user.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.EmployeeTable,
			Columns: []string{user.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.IssuedInvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IssuedInvoicesTable,
			Columns: []string{user.IssuedInvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedIssuedInvoicesIDs(); len(nodes) > 0 && !uu.mutation.IssuedInvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IssuedInvoicesTable,
			Columns: []string{user.IssuedInvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.IssuedInvoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IssuedInvoicesTable,
			Columns: []string{user.IssuedInvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CreatedProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedProjectsTable,
			Columns: []string{user.CreatedProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCreatedProjectsIDs(); len(nodes) > 0 && !uu.mutation.CreatedProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedProjectsTable,
			Columns: []string{user.CreatedProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CreatedProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedProjectsTable,
			Columns: []string{user.CreatedProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.LeaderedProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LeaderedProjectsTable,
			Columns: []string{user.LeaderedProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedLeaderedProjectsIDs(); len(nodes) > 0 && !uu.mutation.LeaderedProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LeaderedProjectsTable,
			Columns: []string{user.LeaderedProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.LeaderedProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LeaderedProjectsTable,
			Columns: []string{user.LeaderedProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.AssignedProjectTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedProjectTasksTable,
			Columns: []string{user.AssignedProjectTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttask.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAssignedProjectTasksIDs(); len(nodes) > 0 && !uu.mutation.AssignedProjectTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedProjectTasksTable,
			Columns: []string{user.AssignedProjectTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AssignedProjectTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedProjectTasksTable,
			Columns: []string{user.AssignedProjectTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ParticipatedProjectTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ParticipatedProjectTasksTable,
			Columns: user.ParticipatedProjectTasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttask.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedParticipatedProjectTasksIDs(); len(nodes) > 0 && !uu.mutation.ParticipatedProjectTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ParticipatedProjectTasksTable,
			Columns: user.ParticipatedProjectTasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ParticipatedProjectTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ParticipatedProjectTasksTable,
			Columns: user.ParticipatedProjectTasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TokensTable,
			Columns: []string{user.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedTokensIDs(); len(nodes) > 0 && !uu.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TokensTable,
			Columns: []string{user.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TokensTable,
			Columns: []string{user.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ApprovedWorkShiftsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApprovedWorkShiftsTable,
			Columns: []string{user.ApprovedWorkShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedApprovedWorkShiftsIDs(); len(nodes) > 0 && !uu.mutation.ApprovedWorkShiftsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApprovedWorkShiftsTable,
			Columns: []string{user.ApprovedWorkShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ApprovedWorkShiftsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApprovedWorkShiftsTable,
			Columns: []string{user.ApprovedWorkShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.WorkShiftsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WorkShiftsTable,
			Columns: []string{user.WorkShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedWorkShiftsIDs(); len(nodes) > 0 && !uu.mutation.WorkShiftsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WorkShiftsTable,
			Columns: []string{user.WorkShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.WorkShiftsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WorkShiftsTable,
			Columns: []string{user.WorkShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UploadedDocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UploadedDocumentsTable,
			Columns: []string{user.UploadedDocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companydocument.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUploadedDocumentsIDs(); len(nodes) > 0 && !uu.mutation.UploadedDocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UploadedDocumentsTable,
			Columns: []string{user.UploadedDocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companydocument.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UploadedDocumentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UploadedDocumentsTable,
			Columns: []string{user.UploadedDocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companydocument.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ApprovedDocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApprovedDocumentsTable,
			Columns: []string{user.ApprovedDocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companydocument.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedApprovedDocumentsIDs(); len(nodes) > 0 && !uu.mutation.ApprovedDocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApprovedDocumentsTable,
			Columns: []string{user.ApprovedDocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companydocument.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ApprovedDocumentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApprovedDocumentsTable,
			Columns: []string{user.ApprovedDocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companydocument.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updatedAt" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetDeletedAt sets the "deletedAt" field.
func (uuo *UserUpdateOne) SetDeletedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetDeletedAt(t)
	return uuo
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDeletedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetDeletedAt(*t)
	}
	return uuo
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (uuo *UserUpdateOne) ClearDeletedAt() *UserUpdateOne {
	uuo.mutation.ClearDeletedAt()
	return uuo
}

// SetIsDemoUser sets the "isDemoUser" field.
func (uuo *UserUpdateOne) SetIsDemoUser(b bool) *UserUpdateOne {
	uuo.mutation.SetIsDemoUser(b)
	return uuo
}

// SetNillableIsDemoUser sets the "isDemoUser" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsDemoUser(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsDemoUser(*b)
	}
	return uuo
}

// ClearIsDemoUser clears the value of the "isDemoUser" field.
func (uuo *UserUpdateOne) ClearIsDemoUser() *UserUpdateOne {
	uuo.mutation.ClearIsDemoUser()
	return uuo
}

// SetFirebaseUID sets the "firebaseUID" field.
func (uuo *UserUpdateOne) SetFirebaseUID(s string) *UserUpdateOne {
	uuo.mutation.SetFirebaseUID(s)
	return uuo
}

// SetNillableFirebaseUID sets the "firebaseUID" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFirebaseUID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetFirebaseUID(*s)
	}
	return uuo
}

// SetFcmToken sets the "fcmToken" field.
func (uuo *UserUpdateOne) SetFcmToken(s string) *UserUpdateOne {
	uuo.mutation.SetFcmToken(s)
	return uuo
}

// SetNillableFcmToken sets the "fcmToken" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFcmToken(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetFcmToken(*s)
	}
	return uuo
}

// ClearFcmToken clears the value of the "fcmToken" field.
func (uuo *UserUpdateOne) ClearFcmToken() *UserUpdateOne {
	uuo.mutation.ClearFcmToken()
	return uuo
}

// SetExpoPushToken sets the "expoPushToken" field.
func (uuo *UserUpdateOne) SetExpoPushToken(s string) *UserUpdateOne {
	uuo.mutation.SetExpoPushToken(s)
	return uuo
}

// SetNillableExpoPushToken sets the "expoPushToken" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableExpoPushToken(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetExpoPushToken(*s)
	}
	return uuo
}

// ClearExpoPushToken clears the value of the "expoPushToken" field.
func (uuo *UserUpdateOne) ClearExpoPushToken() *UserUpdateOne {
	uuo.mutation.ClearExpoPushToken()
	return uuo
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// SetAddress sets the "address" field.
func (uuo *UserUpdateOne) SetAddress(s string) *UserUpdateOne {
	uuo.mutation.SetAddress(s)
	return uuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAddress(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAddress(*s)
	}
	return uuo
}

// ClearAddress clears the value of the "address" field.
func (uuo *UserUpdateOne) ClearAddress() *UserUpdateOne {
	uuo.mutation.ClearAddress()
	return uuo
}

// SetAvatar sets the "avatar" field.
func (uuo *UserUpdateOne) SetAvatar(s string) *UserUpdateOne {
	uuo.mutation.SetAvatar(s)
	return uuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAvatar(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAvatar(*s)
	}
	return uuo
}

// ClearAvatar clears the value of the "avatar" field.
func (uuo *UserUpdateOne) ClearAvatar() *UserUpdateOne {
	uuo.mutation.ClearAvatar()
	return uuo
}

// SetPhotoURL sets the "photoURL" field.
func (uuo *UserUpdateOne) SetPhotoURL(s string) *UserUpdateOne {
	uuo.mutation.SetPhotoURL(s)
	return uuo
}

// SetNillablePhotoURL sets the "photoURL" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhotoURL(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPhotoURL(*s)
	}
	return uuo
}

// ClearPhotoURL clears the value of the "photoURL" field.
func (uuo *UserUpdateOne) ClearPhotoURL() *UserUpdateOne {
	uuo.mutation.ClearPhotoURL()
	return uuo
}

// SetDepartment sets the "department" field.
func (uuo *UserUpdateOne) SetDepartment(s string) *UserUpdateOne {
	uuo.mutation.SetDepartment(s)
	return uuo
}

// SetNillableDepartment sets the "department" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDepartment(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetDepartment(*s)
	}
	return uuo
}

// ClearDepartment clears the value of the "department" field.
func (uuo *UserUpdateOne) ClearDepartment() *UserUpdateOne {
	uuo.mutation.ClearDepartment()
	return uuo
}

// SetPhone sets the "phone" field.
func (uuo *UserUpdateOne) SetPhone(s string) *UserUpdateOne {
	uuo.mutation.SetPhone(s)
	return uuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhone(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPhone(*s)
	}
	return uuo
}

// ClearPhone clears the value of the "phone" field.
func (uuo *UserUpdateOne) ClearPhone() *UserUpdateOne {
	uuo.mutation.ClearPhone()
	return uuo
}

// SetBirthdate sets the "birthdate" field.
func (uuo *UserUpdateOne) SetBirthdate(t time.Time) *UserUpdateOne {
	uuo.mutation.SetBirthdate(t)
	return uuo
}

// SetNillableBirthdate sets the "birthdate" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBirthdate(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetBirthdate(*t)
	}
	return uuo
}

// ClearBirthdate clears the value of the "birthdate" field.
func (uuo *UserUpdateOne) ClearBirthdate() *UserUpdateOne {
	uuo.mutation.ClearBirthdate()
	return uuo
}

// SetLastLogin sets the "lastLogin" field.
func (uuo *UserUpdateOne) SetLastLogin(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLastLogin(t)
	return uuo
}

// SetNillableLastLogin sets the "lastLogin" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastLogin(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLastLogin(*t)
	}
	return uuo
}

// ClearLastLogin clears the value of the "lastLogin" field.
func (uuo *UserUpdateOne) ClearLastLogin() *UserUpdateOne {
	uuo.mutation.ClearLastLogin()
	return uuo
}

// SetGender sets the "gender" field.
func (uuo *UserUpdateOne) SetGender(u user.Gender) *UserUpdateOne {
	uuo.mutation.SetGender(u)
	return uuo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableGender(u *user.Gender) *UserUpdateOne {
	if u != nil {
		uuo.SetGender(*u)
	}
	return uuo
}

// SetActive sets the "active" field.
func (uuo *UserUpdateOne) SetActive(b bool) *UserUpdateOne {
	uuo.mutation.SetActive(b)
	return uuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableActive(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetActive(*b)
	}
	return uuo
}

// AddAccountingEntryIDs adds the "accountingEntries" edge to the AccountingEntry entity by IDs.
func (uuo *UserUpdateOne) AddAccountingEntryIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddAccountingEntryIDs(ids...)
	return uuo
}

// AddAccountingEntries adds the "accountingEntries" edges to the AccountingEntry entity.
func (uuo *UserUpdateOne) AddAccountingEntries(a ...*AccountingEntry) *UserUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddAccountingEntryIDs(ids...)
}

// AddCompanyIDs adds the "company" edge to the Company entity by IDs.
func (uuo *UserUpdateOne) AddCompanyIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddCompanyIDs(ids...)
	return uuo
}

// AddCompany adds the "company" edges to the Company entity.
func (uuo *UserUpdateOne) AddCompany(c ...*Company) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddCompanyIDs(ids...)
}

// AddAssignedRoleIDs adds the "assignedRoles" edge to the UserRole entity by IDs.
func (uuo *UserUpdateOne) AddAssignedRoleIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddAssignedRoleIDs(ids...)
	return uuo
}

// AddAssignedRoles adds the "assignedRoles" edges to the UserRole entity.
func (uuo *UserUpdateOne) AddAssignedRoles(u ...*UserRole) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddAssignedRoleIDs(ids...)
}

// AddSubordinateIDs adds the "subordinates" edge to the User entity by IDs.
func (uuo *UserUpdateOne) AddSubordinateIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddSubordinateIDs(ids...)
	return uuo
}

// AddSubordinates adds the "subordinates" edges to the User entity.
func (uuo *UserUpdateOne) AddSubordinates(u ...*User) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddSubordinateIDs(ids...)
}

// SetLeaderID sets the "leader" edge to the User entity by ID.
func (uuo *UserUpdateOne) SetLeaderID(id int) *UserUpdateOne {
	uuo.mutation.SetLeaderID(id)
	return uuo
}

// SetNillableLeaderID sets the "leader" edge to the User entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLeaderID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetLeaderID(*id)
	}
	return uuo
}

// SetLeader sets the "leader" edge to the User entity.
func (uuo *UserUpdateOne) SetLeader(u *User) *UserUpdateOne {
	return uuo.SetLeaderID(u.ID)
}

// AddCreatedMemberSignupTokenIDs adds the "createdMemberSignupTokens" edge to the MemberSignupToken entity by IDs.
func (uuo *UserUpdateOne) AddCreatedMemberSignupTokenIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddCreatedMemberSignupTokenIDs(ids...)
	return uuo
}

// AddCreatedMemberSignupTokens adds the "createdMemberSignupTokens" edges to the MemberSignupToken entity.
func (uuo *UserUpdateOne) AddCreatedMemberSignupTokens(m ...*MemberSignupToken) *UserUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.AddCreatedMemberSignupTokenIDs(ids...)
}

// SetEmployeeID sets the "employee" edge to the Employee entity by ID.
func (uuo *UserUpdateOne) SetEmployeeID(id int) *UserUpdateOne {
	uuo.mutation.SetEmployeeID(id)
	return uuo
}

// SetNillableEmployeeID sets the "employee" edge to the Employee entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmployeeID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetEmployeeID(*id)
	}
	return uuo
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (uuo *UserUpdateOne) SetEmployee(e *Employee) *UserUpdateOne {
	return uuo.SetEmployeeID(e.ID)
}

// AddIssuedInvoiceIDs adds the "issuedInvoices" edge to the Invoice entity by IDs.
func (uuo *UserUpdateOne) AddIssuedInvoiceIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddIssuedInvoiceIDs(ids...)
	return uuo
}

// AddIssuedInvoices adds the "issuedInvoices" edges to the Invoice entity.
func (uuo *UserUpdateOne) AddIssuedInvoices(i ...*Invoice) *UserUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.AddIssuedInvoiceIDs(ids...)
}

// AddCreatedProjectIDs adds the "createdProjects" edge to the Project entity by IDs.
func (uuo *UserUpdateOne) AddCreatedProjectIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddCreatedProjectIDs(ids...)
	return uuo
}

// AddCreatedProjects adds the "createdProjects" edges to the Project entity.
func (uuo *UserUpdateOne) AddCreatedProjects(p ...*Project) *UserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddCreatedProjectIDs(ids...)
}

// AddLeaderedProjectIDs adds the "leaderedProjects" edge to the Project entity by IDs.
func (uuo *UserUpdateOne) AddLeaderedProjectIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddLeaderedProjectIDs(ids...)
	return uuo
}

// AddLeaderedProjects adds the "leaderedProjects" edges to the Project entity.
func (uuo *UserUpdateOne) AddLeaderedProjects(p ...*Project) *UserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddLeaderedProjectIDs(ids...)
}

// AddAssignedProjectTaskIDs adds the "assignedProjectTasks" edge to the ProjectTask entity by IDs.
func (uuo *UserUpdateOne) AddAssignedProjectTaskIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddAssignedProjectTaskIDs(ids...)
	return uuo
}

// AddAssignedProjectTasks adds the "assignedProjectTasks" edges to the ProjectTask entity.
func (uuo *UserUpdateOne) AddAssignedProjectTasks(p ...*ProjectTask) *UserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddAssignedProjectTaskIDs(ids...)
}

// AddParticipatedProjectTaskIDs adds the "participatedProjectTasks" edge to the ProjectTask entity by IDs.
func (uuo *UserUpdateOne) AddParticipatedProjectTaskIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddParticipatedProjectTaskIDs(ids...)
	return uuo
}

// AddParticipatedProjectTasks adds the "participatedProjectTasks" edges to the ProjectTask entity.
func (uuo *UserUpdateOne) AddParticipatedProjectTasks(p ...*ProjectTask) *UserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddParticipatedProjectTaskIDs(ids...)
}

// AddTokenIDs adds the "tokens" edge to the Token entity by IDs.
func (uuo *UserUpdateOne) AddTokenIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddTokenIDs(ids...)
	return uuo
}

// AddTokens adds the "tokens" edges to the Token entity.
func (uuo *UserUpdateOne) AddTokens(t ...*Token) *UserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddTokenIDs(ids...)
}

// AddApprovedWorkShiftIDs adds the "approvedWorkShifts" edge to the Workshift entity by IDs.
func (uuo *UserUpdateOne) AddApprovedWorkShiftIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddApprovedWorkShiftIDs(ids...)
	return uuo
}

// AddApprovedWorkShifts adds the "approvedWorkShifts" edges to the Workshift entity.
func (uuo *UserUpdateOne) AddApprovedWorkShifts(w ...*Workshift) *UserUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uuo.AddApprovedWorkShiftIDs(ids...)
}

// AddWorkShiftIDs adds the "workShifts" edge to the Workshift entity by IDs.
func (uuo *UserUpdateOne) AddWorkShiftIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddWorkShiftIDs(ids...)
	return uuo
}

// AddWorkShifts adds the "workShifts" edges to the Workshift entity.
func (uuo *UserUpdateOne) AddWorkShifts(w ...*Workshift) *UserUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uuo.AddWorkShiftIDs(ids...)
}

// AddUploadedDocumentIDs adds the "uploadedDocuments" edge to the CompanyDocument entity by IDs.
func (uuo *UserUpdateOne) AddUploadedDocumentIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddUploadedDocumentIDs(ids...)
	return uuo
}

// AddUploadedDocuments adds the "uploadedDocuments" edges to the CompanyDocument entity.
func (uuo *UserUpdateOne) AddUploadedDocuments(c ...*CompanyDocument) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddUploadedDocumentIDs(ids...)
}

// AddApprovedDocumentIDs adds the "approvedDocuments" edge to the CompanyDocument entity by IDs.
func (uuo *UserUpdateOne) AddApprovedDocumentIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddApprovedDocumentIDs(ids...)
	return uuo
}

// AddApprovedDocuments adds the "approvedDocuments" edges to the CompanyDocument entity.
func (uuo *UserUpdateOne) AddApprovedDocuments(c ...*CompanyDocument) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddApprovedDocumentIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearAccountingEntries clears all "accountingEntries" edges to the AccountingEntry entity.
func (uuo *UserUpdateOne) ClearAccountingEntries() *UserUpdateOne {
	uuo.mutation.ClearAccountingEntries()
	return uuo
}

// RemoveAccountingEntryIDs removes the "accountingEntries" edge to AccountingEntry entities by IDs.
func (uuo *UserUpdateOne) RemoveAccountingEntryIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveAccountingEntryIDs(ids...)
	return uuo
}

// RemoveAccountingEntries removes "accountingEntries" edges to AccountingEntry entities.
func (uuo *UserUpdateOne) RemoveAccountingEntries(a ...*AccountingEntry) *UserUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveAccountingEntryIDs(ids...)
}

// ClearCompany clears all "company" edges to the Company entity.
func (uuo *UserUpdateOne) ClearCompany() *UserUpdateOne {
	uuo.mutation.ClearCompany()
	return uuo
}

// RemoveCompanyIDs removes the "company" edge to Company entities by IDs.
func (uuo *UserUpdateOne) RemoveCompanyIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveCompanyIDs(ids...)
	return uuo
}

// RemoveCompany removes "company" edges to Company entities.
func (uuo *UserUpdateOne) RemoveCompany(c ...*Company) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveCompanyIDs(ids...)
}

// ClearAssignedRoles clears all "assignedRoles" edges to the UserRole entity.
func (uuo *UserUpdateOne) ClearAssignedRoles() *UserUpdateOne {
	uuo.mutation.ClearAssignedRoles()
	return uuo
}

// RemoveAssignedRoleIDs removes the "assignedRoles" edge to UserRole entities by IDs.
func (uuo *UserUpdateOne) RemoveAssignedRoleIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveAssignedRoleIDs(ids...)
	return uuo
}

// RemoveAssignedRoles removes "assignedRoles" edges to UserRole entities.
func (uuo *UserUpdateOne) RemoveAssignedRoles(u ...*UserRole) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveAssignedRoleIDs(ids...)
}

// ClearSubordinates clears all "subordinates" edges to the User entity.
func (uuo *UserUpdateOne) ClearSubordinates() *UserUpdateOne {
	uuo.mutation.ClearSubordinates()
	return uuo
}

// RemoveSubordinateIDs removes the "subordinates" edge to User entities by IDs.
func (uuo *UserUpdateOne) RemoveSubordinateIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveSubordinateIDs(ids...)
	return uuo
}

// RemoveSubordinates removes "subordinates" edges to User entities.
func (uuo *UserUpdateOne) RemoveSubordinates(u ...*User) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveSubordinateIDs(ids...)
}

// ClearLeader clears the "leader" edge to the User entity.
func (uuo *UserUpdateOne) ClearLeader() *UserUpdateOne {
	uuo.mutation.ClearLeader()
	return uuo
}

// ClearCreatedMemberSignupTokens clears all "createdMemberSignupTokens" edges to the MemberSignupToken entity.
func (uuo *UserUpdateOne) ClearCreatedMemberSignupTokens() *UserUpdateOne {
	uuo.mutation.ClearCreatedMemberSignupTokens()
	return uuo
}

// RemoveCreatedMemberSignupTokenIDs removes the "createdMemberSignupTokens" edge to MemberSignupToken entities by IDs.
func (uuo *UserUpdateOne) RemoveCreatedMemberSignupTokenIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveCreatedMemberSignupTokenIDs(ids...)
	return uuo
}

// RemoveCreatedMemberSignupTokens removes "createdMemberSignupTokens" edges to MemberSignupToken entities.
func (uuo *UserUpdateOne) RemoveCreatedMemberSignupTokens(m ...*MemberSignupToken) *UserUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.RemoveCreatedMemberSignupTokenIDs(ids...)
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (uuo *UserUpdateOne) ClearEmployee() *UserUpdateOne {
	uuo.mutation.ClearEmployee()
	return uuo
}

// ClearIssuedInvoices clears all "issuedInvoices" edges to the Invoice entity.
func (uuo *UserUpdateOne) ClearIssuedInvoices() *UserUpdateOne {
	uuo.mutation.ClearIssuedInvoices()
	return uuo
}

// RemoveIssuedInvoiceIDs removes the "issuedInvoices" edge to Invoice entities by IDs.
func (uuo *UserUpdateOne) RemoveIssuedInvoiceIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveIssuedInvoiceIDs(ids...)
	return uuo
}

// RemoveIssuedInvoices removes "issuedInvoices" edges to Invoice entities.
func (uuo *UserUpdateOne) RemoveIssuedInvoices(i ...*Invoice) *UserUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.RemoveIssuedInvoiceIDs(ids...)
}

// ClearCreatedProjects clears all "createdProjects" edges to the Project entity.
func (uuo *UserUpdateOne) ClearCreatedProjects() *UserUpdateOne {
	uuo.mutation.ClearCreatedProjects()
	return uuo
}

// RemoveCreatedProjectIDs removes the "createdProjects" edge to Project entities by IDs.
func (uuo *UserUpdateOne) RemoveCreatedProjectIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveCreatedProjectIDs(ids...)
	return uuo
}

// RemoveCreatedProjects removes "createdProjects" edges to Project entities.
func (uuo *UserUpdateOne) RemoveCreatedProjects(p ...*Project) *UserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemoveCreatedProjectIDs(ids...)
}

// ClearLeaderedProjects clears all "leaderedProjects" edges to the Project entity.
func (uuo *UserUpdateOne) ClearLeaderedProjects() *UserUpdateOne {
	uuo.mutation.ClearLeaderedProjects()
	return uuo
}

// RemoveLeaderedProjectIDs removes the "leaderedProjects" edge to Project entities by IDs.
func (uuo *UserUpdateOne) RemoveLeaderedProjectIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveLeaderedProjectIDs(ids...)
	return uuo
}

// RemoveLeaderedProjects removes "leaderedProjects" edges to Project entities.
func (uuo *UserUpdateOne) RemoveLeaderedProjects(p ...*Project) *UserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemoveLeaderedProjectIDs(ids...)
}

// ClearAssignedProjectTasks clears all "assignedProjectTasks" edges to the ProjectTask entity.
func (uuo *UserUpdateOne) ClearAssignedProjectTasks() *UserUpdateOne {
	uuo.mutation.ClearAssignedProjectTasks()
	return uuo
}

// RemoveAssignedProjectTaskIDs removes the "assignedProjectTasks" edge to ProjectTask entities by IDs.
func (uuo *UserUpdateOne) RemoveAssignedProjectTaskIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveAssignedProjectTaskIDs(ids...)
	return uuo
}

// RemoveAssignedProjectTasks removes "assignedProjectTasks" edges to ProjectTask entities.
func (uuo *UserUpdateOne) RemoveAssignedProjectTasks(p ...*ProjectTask) *UserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemoveAssignedProjectTaskIDs(ids...)
}

// ClearParticipatedProjectTasks clears all "participatedProjectTasks" edges to the ProjectTask entity.
func (uuo *UserUpdateOne) ClearParticipatedProjectTasks() *UserUpdateOne {
	uuo.mutation.ClearParticipatedProjectTasks()
	return uuo
}

// RemoveParticipatedProjectTaskIDs removes the "participatedProjectTasks" edge to ProjectTask entities by IDs.
func (uuo *UserUpdateOne) RemoveParticipatedProjectTaskIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveParticipatedProjectTaskIDs(ids...)
	return uuo
}

// RemoveParticipatedProjectTasks removes "participatedProjectTasks" edges to ProjectTask entities.
func (uuo *UserUpdateOne) RemoveParticipatedProjectTasks(p ...*ProjectTask) *UserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemoveParticipatedProjectTaskIDs(ids...)
}

// ClearTokens clears all "tokens" edges to the Token entity.
func (uuo *UserUpdateOne) ClearTokens() *UserUpdateOne {
	uuo.mutation.ClearTokens()
	return uuo
}

// RemoveTokenIDs removes the "tokens" edge to Token entities by IDs.
func (uuo *UserUpdateOne) RemoveTokenIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveTokenIDs(ids...)
	return uuo
}

// RemoveTokens removes "tokens" edges to Token entities.
func (uuo *UserUpdateOne) RemoveTokens(t ...*Token) *UserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveTokenIDs(ids...)
}

// ClearApprovedWorkShifts clears all "approvedWorkShifts" edges to the Workshift entity.
func (uuo *UserUpdateOne) ClearApprovedWorkShifts() *UserUpdateOne {
	uuo.mutation.ClearApprovedWorkShifts()
	return uuo
}

// RemoveApprovedWorkShiftIDs removes the "approvedWorkShifts" edge to Workshift entities by IDs.
func (uuo *UserUpdateOne) RemoveApprovedWorkShiftIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveApprovedWorkShiftIDs(ids...)
	return uuo
}

// RemoveApprovedWorkShifts removes "approvedWorkShifts" edges to Workshift entities.
func (uuo *UserUpdateOne) RemoveApprovedWorkShifts(w ...*Workshift) *UserUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uuo.RemoveApprovedWorkShiftIDs(ids...)
}

// ClearWorkShifts clears all "workShifts" edges to the Workshift entity.
func (uuo *UserUpdateOne) ClearWorkShifts() *UserUpdateOne {
	uuo.mutation.ClearWorkShifts()
	return uuo
}

// RemoveWorkShiftIDs removes the "workShifts" edge to Workshift entities by IDs.
func (uuo *UserUpdateOne) RemoveWorkShiftIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveWorkShiftIDs(ids...)
	return uuo
}

// RemoveWorkShifts removes "workShifts" edges to Workshift entities.
func (uuo *UserUpdateOne) RemoveWorkShifts(w ...*Workshift) *UserUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uuo.RemoveWorkShiftIDs(ids...)
}

// ClearUploadedDocuments clears all "uploadedDocuments" edges to the CompanyDocument entity.
func (uuo *UserUpdateOne) ClearUploadedDocuments() *UserUpdateOne {
	uuo.mutation.ClearUploadedDocuments()
	return uuo
}

// RemoveUploadedDocumentIDs removes the "uploadedDocuments" edge to CompanyDocument entities by IDs.
func (uuo *UserUpdateOne) RemoveUploadedDocumentIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveUploadedDocumentIDs(ids...)
	return uuo
}

// RemoveUploadedDocuments removes "uploadedDocuments" edges to CompanyDocument entities.
func (uuo *UserUpdateOne) RemoveUploadedDocuments(c ...*CompanyDocument) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveUploadedDocumentIDs(ids...)
}

// ClearApprovedDocuments clears all "approvedDocuments" edges to the CompanyDocument entity.
func (uuo *UserUpdateOne) ClearApprovedDocuments() *UserUpdateOne {
	uuo.mutation.ClearApprovedDocuments()
	return uuo
}

// RemoveApprovedDocumentIDs removes the "approvedDocuments" edge to CompanyDocument entities by IDs.
func (uuo *UserUpdateOne) RemoveApprovedDocumentIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveApprovedDocumentIDs(ids...)
	return uuo
}

// RemoveApprovedDocuments removes "approvedDocuments" edges to CompanyDocument entities.
func (uuo *UserUpdateOne) RemoveApprovedDocuments(c ...*CompanyDocument) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveApprovedDocumentIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.FirebaseUID(); ok {
		if err := user.FirebaseUIDValidator(v); err != nil {
			return &ValidationError{Name: "firebaseUID", err: fmt.Errorf(`generated: validator failed for field "User.firebaseUID": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Gender(); ok {
		if err := user.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`generated: validator failed for field "User.gender": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uuo *UserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdateOne {
	uuo.modifiers = append(uuo.modifiers, modifiers...)
	return uuo
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
	}
	if uuo.mutation.DeletedAtCleared() {
		_spec.ClearField(user.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.IsDemoUser(); ok {
		_spec.SetField(user.FieldIsDemoUser, field.TypeBool, value)
	}
	if uuo.mutation.IsDemoUserCleared() {
		_spec.ClearField(user.FieldIsDemoUser, field.TypeBool)
	}
	if value, ok := uuo.mutation.FirebaseUID(); ok {
		_spec.SetField(user.FieldFirebaseUID, field.TypeString, value)
	}
	if value, ok := uuo.mutation.FcmToken(); ok {
		_spec.SetField(user.FieldFcmToken, field.TypeString, value)
	}
	if uuo.mutation.FcmTokenCleared() {
		_spec.ClearField(user.FieldFcmToken, field.TypeString)
	}
	if value, ok := uuo.mutation.ExpoPushToken(); ok {
		_spec.SetField(user.FieldExpoPushToken, field.TypeString, value)
	}
	if uuo.mutation.ExpoPushTokenCleared() {
		_spec.ClearField(user.FieldExpoPushToken, field.TypeString)
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Address(); ok {
		_spec.SetField(user.FieldAddress, field.TypeString, value)
	}
	if uuo.mutation.AddressCleared() {
		_spec.ClearField(user.FieldAddress, field.TypeString)
	}
	if value, ok := uuo.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
	}
	if uuo.mutation.AvatarCleared() {
		_spec.ClearField(user.FieldAvatar, field.TypeString)
	}
	if value, ok := uuo.mutation.PhotoURL(); ok {
		_spec.SetField(user.FieldPhotoURL, field.TypeString, value)
	}
	if uuo.mutation.PhotoURLCleared() {
		_spec.ClearField(user.FieldPhotoURL, field.TypeString)
	}
	if value, ok := uuo.mutation.Department(); ok {
		_spec.SetField(user.FieldDepartment, field.TypeString, value)
	}
	if uuo.mutation.DepartmentCleared() {
		_spec.ClearField(user.FieldDepartment, field.TypeString)
	}
	if value, ok := uuo.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if uuo.mutation.PhoneCleared() {
		_spec.ClearField(user.FieldPhone, field.TypeString)
	}
	if value, ok := uuo.mutation.Birthdate(); ok {
		_spec.SetField(user.FieldBirthdate, field.TypeTime, value)
	}
	if uuo.mutation.BirthdateCleared() {
		_spec.ClearField(user.FieldBirthdate, field.TypeTime)
	}
	if value, ok := uuo.mutation.LastLogin(); ok {
		_spec.SetField(user.FieldLastLogin, field.TypeTime, value)
	}
	if uuo.mutation.LastLoginCleared() {
		_spec.ClearField(user.FieldLastLogin, field.TypeTime)
	}
	if value, ok := uuo.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.Active(); ok {
		_spec.SetField(user.FieldActive, field.TypeBool, value)
	}
	if uuo.mutation.AccountingEntriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AccountingEntriesTable,
			Columns: []string{user.AccountingEntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountingentry.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAccountingEntriesIDs(); len(nodes) > 0 && !uuo.mutation.AccountingEntriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AccountingEntriesTable,
			Columns: []string{user.AccountingEntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountingentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AccountingEntriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AccountingEntriesTable,
			Columns: []string{user.AccountingEntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountingentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.CompanyTable,
			Columns: user.CompanyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCompanyIDs(); len(nodes) > 0 && !uuo.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.CompanyTable,
			Columns: user.CompanyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.CompanyTable,
			Columns: user.CompanyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.AssignedRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedRolesTable,
			Columns: []string{user.AssignedRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAssignedRolesIDs(); len(nodes) > 0 && !uuo.mutation.AssignedRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedRolesTable,
			Columns: []string{user.AssignedRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AssignedRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedRolesTable,
			Columns: []string{user.AssignedRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SubordinatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubordinatesTable,
			Columns: []string{user.SubordinatesColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSubordinatesIDs(); len(nodes) > 0 && !uuo.mutation.SubordinatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubordinatesTable,
			Columns: []string{user.SubordinatesColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SubordinatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubordinatesTable,
			Columns: []string{user.SubordinatesColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.LeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.LeaderTable,
			Columns: []string{user.LeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.LeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.LeaderTable,
			Columns: []string{user.LeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CreatedMemberSignupTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedMemberSignupTokensTable,
			Columns: []string{user.CreatedMemberSignupTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membersignuptoken.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCreatedMemberSignupTokensIDs(); len(nodes) > 0 && !uuo.mutation.CreatedMemberSignupTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedMemberSignupTokensTable,
			Columns: []string{user.CreatedMemberSignupTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membersignuptoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CreatedMemberSignupTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedMemberSignupTokensTable,
			Columns: []string{user.CreatedMemberSignupTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membersignuptoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.EmployeeTable,
			Columns: []string{user.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.EmployeeTable,
			Columns: []string{user.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.IssuedInvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IssuedInvoicesTable,
			Columns: []string{user.IssuedInvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedIssuedInvoicesIDs(); len(nodes) > 0 && !uuo.mutation.IssuedInvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IssuedInvoicesTable,
			Columns: []string{user.IssuedInvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.IssuedInvoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IssuedInvoicesTable,
			Columns: []string{user.IssuedInvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CreatedProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedProjectsTable,
			Columns: []string{user.CreatedProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCreatedProjectsIDs(); len(nodes) > 0 && !uuo.mutation.CreatedProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedProjectsTable,
			Columns: []string{user.CreatedProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CreatedProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedProjectsTable,
			Columns: []string{user.CreatedProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.LeaderedProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LeaderedProjectsTable,
			Columns: []string{user.LeaderedProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedLeaderedProjectsIDs(); len(nodes) > 0 && !uuo.mutation.LeaderedProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LeaderedProjectsTable,
			Columns: []string{user.LeaderedProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.LeaderedProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LeaderedProjectsTable,
			Columns: []string{user.LeaderedProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.AssignedProjectTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedProjectTasksTable,
			Columns: []string{user.AssignedProjectTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttask.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAssignedProjectTasksIDs(); len(nodes) > 0 && !uuo.mutation.AssignedProjectTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedProjectTasksTable,
			Columns: []string{user.AssignedProjectTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AssignedProjectTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedProjectTasksTable,
			Columns: []string{user.AssignedProjectTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ParticipatedProjectTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ParticipatedProjectTasksTable,
			Columns: user.ParticipatedProjectTasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttask.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedParticipatedProjectTasksIDs(); len(nodes) > 0 && !uuo.mutation.ParticipatedProjectTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ParticipatedProjectTasksTable,
			Columns: user.ParticipatedProjectTasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ParticipatedProjectTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ParticipatedProjectTasksTable,
			Columns: user.ParticipatedProjectTasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TokensTable,
			Columns: []string{user.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedTokensIDs(); len(nodes) > 0 && !uuo.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TokensTable,
			Columns: []string{user.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TokensTable,
			Columns: []string{user.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ApprovedWorkShiftsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApprovedWorkShiftsTable,
			Columns: []string{user.ApprovedWorkShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedApprovedWorkShiftsIDs(); len(nodes) > 0 && !uuo.mutation.ApprovedWorkShiftsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApprovedWorkShiftsTable,
			Columns: []string{user.ApprovedWorkShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ApprovedWorkShiftsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApprovedWorkShiftsTable,
			Columns: []string{user.ApprovedWorkShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.WorkShiftsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WorkShiftsTable,
			Columns: []string{user.WorkShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedWorkShiftsIDs(); len(nodes) > 0 && !uuo.mutation.WorkShiftsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WorkShiftsTable,
			Columns: []string{user.WorkShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.WorkShiftsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WorkShiftsTable,
			Columns: []string{user.WorkShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UploadedDocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UploadedDocumentsTable,
			Columns: []string{user.UploadedDocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companydocument.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUploadedDocumentsIDs(); len(nodes) > 0 && !uuo.mutation.UploadedDocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UploadedDocumentsTable,
			Columns: []string{user.UploadedDocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companydocument.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UploadedDocumentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UploadedDocumentsTable,
			Columns: []string{user.UploadedDocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companydocument.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ApprovedDocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApprovedDocumentsTable,
			Columns: []string{user.ApprovedDocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companydocument.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedApprovedDocumentsIDs(); len(nodes) > 0 && !uuo.mutation.ApprovedDocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApprovedDocumentsTable,
			Columns: []string{user.ApprovedDocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companydocument.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ApprovedDocumentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApprovedDocumentsTable,
			Columns: []string{user.ApprovedDocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companydocument.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uuo.modifiers...)
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
