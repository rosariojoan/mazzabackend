// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"mazza/ent/generated/product"
	"mazza/ent/generated/productmovement"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProductMovement is the model entity for the ProductMovement schema.
type ProductMovement struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// DeletedAt holds the value of the "deletedAt" field.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	// EntryGroup holds the value of the "entryGroup" field.
	EntryGroup int `json:"entryGroup,omitempty"`
	// AverageCost holds the value of the "averageCost" field.
	AverageCost float64 `json:"averageCost,omitempty"`
	// UnitCost holds the value of the "unitCost" field.
	UnitCost float64 `json:"unitCost,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductMovementQuery when eager-loading is set.
	Edges                     ProductMovementEdges `json:"edges"`
	product_product_movements *int
	selectValues              sql.SelectValues
}

// ProductMovementEdges holds the relations/edges for other nodes in the graph.
type ProductMovementEdges struct {
	// Product holds the value of the product edge.
	Product *Product `json:"product,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductMovementEdges) ProductOrErr() (*Product, error) {
	if e.Product != nil {
		return e.Product, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: product.Label}
	}
	return nil, &NotLoadedError{edge: "product"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductMovement) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case productmovement.FieldAverageCost, productmovement.FieldUnitCost, productmovement.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case productmovement.FieldID, productmovement.FieldEntryGroup, productmovement.FieldQuantity:
			values[i] = new(sql.NullInt64)
		case productmovement.FieldCreatedAt, productmovement.FieldUpdatedAt, productmovement.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case productmovement.ForeignKeys[0]: // product_product_movements
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductMovement fields.
func (pm *ProductMovement) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productmovement.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pm.ID = int(value.Int64)
		case productmovement.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				pm.CreatedAt = value.Time
			}
		case productmovement.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				pm.UpdatedAt = value.Time
			}
		case productmovement.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deletedAt", values[i])
			} else if value.Valid {
				pm.DeletedAt = new(time.Time)
				*pm.DeletedAt = value.Time
			}
		case productmovement.FieldEntryGroup:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field entryGroup", values[i])
			} else if value.Valid {
				pm.EntryGroup = int(value.Int64)
			}
		case productmovement.FieldAverageCost:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field averageCost", values[i])
			} else if value.Valid {
				pm.AverageCost = value.Float64
			}
		case productmovement.FieldUnitCost:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field unitCost", values[i])
			} else if value.Valid {
				pm.UnitCost = value.Float64
			}
		case productmovement.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				pm.Price = value.Float64
			}
		case productmovement.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				pm.Quantity = int(value.Int64)
			}
		case productmovement.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_product_movements", value)
			} else if value.Valid {
				pm.product_product_movements = new(int)
				*pm.product_product_movements = int(value.Int64)
			}
		default:
			pm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProductMovement.
// This includes values selected through modifiers, order, etc.
func (pm *ProductMovement) Value(name string) (ent.Value, error) {
	return pm.selectValues.Get(name)
}

// QueryProduct queries the "product" edge of the ProductMovement entity.
func (pm *ProductMovement) QueryProduct() *ProductQuery {
	return NewProductMovementClient(pm.config).QueryProduct(pm)
}

// Update returns a builder for updating this ProductMovement.
// Note that you need to call ProductMovement.Unwrap() before calling this method if this ProductMovement
// was returned from a transaction, and the transaction was committed or rolled back.
func (pm *ProductMovement) Update() *ProductMovementUpdateOne {
	return NewProductMovementClient(pm.config).UpdateOne(pm)
}

// Unwrap unwraps the ProductMovement entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pm *ProductMovement) Unwrap() *ProductMovement {
	_tx, ok := pm.config.driver.(*txDriver)
	if !ok {
		panic("generated: ProductMovement is not a transactional entity")
	}
	pm.config.driver = _tx.drv
	return pm
}

// String implements the fmt.Stringer.
func (pm *ProductMovement) String() string {
	var builder strings.Builder
	builder.WriteString("ProductMovement(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pm.ID))
	builder.WriteString("createdAt=")
	builder.WriteString(pm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(pm.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pm.DeletedAt; v != nil {
		builder.WriteString("deletedAt=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("entryGroup=")
	builder.WriteString(fmt.Sprintf("%v", pm.EntryGroup))
	builder.WriteString(", ")
	builder.WriteString("averageCost=")
	builder.WriteString(fmt.Sprintf("%v", pm.AverageCost))
	builder.WriteString(", ")
	builder.WriteString("unitCost=")
	builder.WriteString(fmt.Sprintf("%v", pm.UnitCost))
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", pm.Price))
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", pm.Quantity))
	builder.WriteByte(')')
	return builder.String()
}

// ProductMovements is a parsable slice of ProductMovement.
type ProductMovements []*ProductMovement
