// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"mazza/ent/generated/company"
	"mazza/ent/generated/loan"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Loan is the model entity for the Loan schema.
type Loan struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// DeletedAt holds the value of the "deletedAt" field.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// Category holds the value of the "category" field.
	Category loan.Category `json:"category,omitempty"`
	// Collateral holds the value of the "collateral" field.
	Collateral string `json:"collateral,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// InterestRate holds the value of the "interestRate" field.
	InterestRate float64 `json:"interestRate,omitempty"`
	// Installments holds the value of the "installments" field.
	Installments int `json:"installments,omitempty"`
	// MaturityDate holds the value of the "maturityDate" field.
	MaturityDate time.Time `json:"maturityDate,omitempty"`
	// NextPayment holds the value of the "nextPayment" field.
	NextPayment time.Time `json:"nextPayment,omitempty"`
	// NextPaymentAmount holds the value of the "nextPaymentAmount" field.
	NextPaymentAmount float64 `json:"nextPaymentAmount,omitempty"`
	// OutstandingAmount holds the value of the "outstandingAmount" field.
	OutstandingAmount float64 `json:"outstandingAmount,omitempty"`
	// PaymentFrequency holds the value of the "paymentFrequency" field.
	PaymentFrequency loan.PaymentFrequency `json:"paymentFrequency,omitempty"`
	// PaidInstallments holds the value of the "paidInstallments" field.
	PaidInstallments int `json:"paidInstallments,omitempty"`
	// Provider holds the value of the "provider" field.
	Provider string `json:"provider,omitempty"`
	// StartDate holds the value of the "startDate" field.
	StartDate time.Time `json:"startDate,omitempty"`
	// Status holds the value of the "status" field.
	Status loan.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LoanQuery when eager-loading is set.
	Edges         LoanEdges `json:"edges"`
	company_loans *int
	selectValues  sql.SelectValues
}

// LoanEdges holds the relations/edges for other nodes in the graph.
type LoanEdges struct {
	// Company holds the value of the company edge.
	Company *Company `json:"company,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// CompanyOrErr returns the Company value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LoanEdges) CompanyOrErr() (*Company, error) {
	if e.Company != nil {
		return e.Company, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: company.Label}
	}
	return nil, &NotLoadedError{edge: "company"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Loan) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case loan.FieldAmount, loan.FieldInterestRate, loan.FieldNextPaymentAmount, loan.FieldOutstandingAmount:
			values[i] = new(sql.NullFloat64)
		case loan.FieldID, loan.FieldInstallments, loan.FieldPaidInstallments:
			values[i] = new(sql.NullInt64)
		case loan.FieldCategory, loan.FieldCollateral, loan.FieldDescription, loan.FieldPaymentFrequency, loan.FieldProvider, loan.FieldStatus:
			values[i] = new(sql.NullString)
		case loan.FieldCreatedAt, loan.FieldUpdatedAt, loan.FieldDeletedAt, loan.FieldMaturityDate, loan.FieldNextPayment, loan.FieldStartDate:
			values[i] = new(sql.NullTime)
		case loan.ForeignKeys[0]: // company_loans
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Loan fields.
func (l *Loan) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case loan.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = int(value.Int64)
		case loan.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				l.CreatedAt = value.Time
			}
		case loan.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				l.UpdatedAt = value.Time
			}
		case loan.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deletedAt", values[i])
			} else if value.Valid {
				l.DeletedAt = new(time.Time)
				*l.DeletedAt = value.Time
			}
		case loan.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				l.Amount = value.Float64
			}
		case loan.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				l.Category = loan.Category(value.String)
			}
		case loan.FieldCollateral:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field collateral", values[i])
			} else if value.Valid {
				l.Collateral = value.String
			}
		case loan.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				l.Description = value.String
			}
		case loan.FieldInterestRate:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field interestRate", values[i])
			} else if value.Valid {
				l.InterestRate = value.Float64
			}
		case loan.FieldInstallments:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field installments", values[i])
			} else if value.Valid {
				l.Installments = int(value.Int64)
			}
		case loan.FieldMaturityDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field maturityDate", values[i])
			} else if value.Valid {
				l.MaturityDate = value.Time
			}
		case loan.FieldNextPayment:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field nextPayment", values[i])
			} else if value.Valid {
				l.NextPayment = value.Time
			}
		case loan.FieldNextPaymentAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field nextPaymentAmount", values[i])
			} else if value.Valid {
				l.NextPaymentAmount = value.Float64
			}
		case loan.FieldOutstandingAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field outstandingAmount", values[i])
			} else if value.Valid {
				l.OutstandingAmount = value.Float64
			}
		case loan.FieldPaymentFrequency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field paymentFrequency", values[i])
			} else if value.Valid {
				l.PaymentFrequency = loan.PaymentFrequency(value.String)
			}
		case loan.FieldPaidInstallments:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field paidInstallments", values[i])
			} else if value.Valid {
				l.PaidInstallments = int(value.Int64)
			}
		case loan.FieldProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider", values[i])
			} else if value.Valid {
				l.Provider = value.String
			}
		case loan.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field startDate", values[i])
			} else if value.Valid {
				l.StartDate = value.Time
			}
		case loan.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				l.Status = loan.Status(value.String)
			}
		case loan.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field company_loans", value)
			} else if value.Valid {
				l.company_loans = new(int)
				*l.company_loans = int(value.Int64)
			}
		default:
			l.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Loan.
// This includes values selected through modifiers, order, etc.
func (l *Loan) Value(name string) (ent.Value, error) {
	return l.selectValues.Get(name)
}

// QueryCompany queries the "company" edge of the Loan entity.
func (l *Loan) QueryCompany() *CompanyQuery {
	return NewLoanClient(l.config).QueryCompany(l)
}

// Update returns a builder for updating this Loan.
// Note that you need to call Loan.Unwrap() before calling this method if this Loan
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Loan) Update() *LoanUpdateOne {
	return NewLoanClient(l.config).UpdateOne(l)
}

// Unwrap unwraps the Loan entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Loan) Unwrap() *Loan {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("generated: Loan is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Loan) String() string {
	var builder strings.Builder
	builder.WriteString("Loan(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("createdAt=")
	builder.WriteString(l.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(l.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := l.DeletedAt; v != nil {
		builder.WriteString("deletedAt=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", l.Amount))
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(fmt.Sprintf("%v", l.Category))
	builder.WriteString(", ")
	builder.WriteString("collateral=")
	builder.WriteString(l.Collateral)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(l.Description)
	builder.WriteString(", ")
	builder.WriteString("interestRate=")
	builder.WriteString(fmt.Sprintf("%v", l.InterestRate))
	builder.WriteString(", ")
	builder.WriteString("installments=")
	builder.WriteString(fmt.Sprintf("%v", l.Installments))
	builder.WriteString(", ")
	builder.WriteString("maturityDate=")
	builder.WriteString(l.MaturityDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("nextPayment=")
	builder.WriteString(l.NextPayment.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("nextPaymentAmount=")
	builder.WriteString(fmt.Sprintf("%v", l.NextPaymentAmount))
	builder.WriteString(", ")
	builder.WriteString("outstandingAmount=")
	builder.WriteString(fmt.Sprintf("%v", l.OutstandingAmount))
	builder.WriteString(", ")
	builder.WriteString("paymentFrequency=")
	builder.WriteString(fmt.Sprintf("%v", l.PaymentFrequency))
	builder.WriteString(", ")
	builder.WriteString("paidInstallments=")
	builder.WriteString(fmt.Sprintf("%v", l.PaidInstallments))
	builder.WriteString(", ")
	builder.WriteString("provider=")
	builder.WriteString(l.Provider)
	builder.WriteString(", ")
	builder.WriteString("startDate=")
	builder.WriteString(l.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", l.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Loans is a parsable slice of Loan.
type Loans []*Loan
