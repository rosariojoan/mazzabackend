// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"mazza/ent/generated/company"
	"mazza/ent/generated/inventory"
	"mazza/ent/generated/inventorymovement"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InventoryCreate is the builder for creating a Inventory entity.
type InventoryCreate struct {
	config
	mutation *InventoryMutation
	hooks    []Hook
}

// SetCreatedAt sets the "createdAt" field.
func (ic *InventoryCreate) SetCreatedAt(t time.Time) *InventoryCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (ic *InventoryCreate) SetNillableCreatedAt(t *time.Time) *InventoryCreate {
	if t != nil {
		ic.SetCreatedAt(*t)
	}
	return ic
}

// SetUpdatedAt sets the "updatedAt" field.
func (ic *InventoryCreate) SetUpdatedAt(t time.Time) *InventoryCreate {
	ic.mutation.SetUpdatedAt(t)
	return ic
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (ic *InventoryCreate) SetNillableUpdatedAt(t *time.Time) *InventoryCreate {
	if t != nil {
		ic.SetUpdatedAt(*t)
	}
	return ic
}

// SetDeletedAt sets the "deletedAt" field.
func (ic *InventoryCreate) SetDeletedAt(t time.Time) *InventoryCreate {
	ic.mutation.SetDeletedAt(t)
	return ic
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (ic *InventoryCreate) SetNillableDeletedAt(t *time.Time) *InventoryCreate {
	if t != nil {
		ic.SetDeletedAt(*t)
	}
	return ic
}

// SetName sets the "name" field.
func (ic *InventoryCreate) SetName(s string) *InventoryCreate {
	ic.mutation.SetName(s)
	return ic
}

// SetCategory sets the "category" field.
func (ic *InventoryCreate) SetCategory(i inventory.Category) *InventoryCreate {
	ic.mutation.SetCategory(i)
	return ic
}

// SetQuantity sets the "quantity" field.
func (ic *InventoryCreate) SetQuantity(f float64) *InventoryCreate {
	ic.mutation.SetQuantity(f)
	return ic
}

// SetUnit sets the "unit" field.
func (ic *InventoryCreate) SetUnit(s string) *InventoryCreate {
	ic.mutation.SetUnit(s)
	return ic
}

// SetMinimumLevel sets the "minimumLevel" field.
func (ic *InventoryCreate) SetMinimumLevel(f float64) *InventoryCreate {
	ic.mutation.SetMinimumLevel(f)
	return ic
}

// SetCurrentValue sets the "currentValue" field.
func (ic *InventoryCreate) SetCurrentValue(f float64) *InventoryCreate {
	ic.mutation.SetCurrentValue(f)
	return ic
}

// SetNotes sets the "notes" field.
func (ic *InventoryCreate) SetNotes(s string) *InventoryCreate {
	ic.mutation.SetNotes(s)
	return ic
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (ic *InventoryCreate) SetCompanyID(id int) *InventoryCreate {
	ic.mutation.SetCompanyID(id)
	return ic
}

// SetCompany sets the "company" edge to the Company entity.
func (ic *InventoryCreate) SetCompany(c *Company) *InventoryCreate {
	return ic.SetCompanyID(c.ID)
}

// AddMovementIDs adds the "movements" edge to the InventoryMovement entity by IDs.
func (ic *InventoryCreate) AddMovementIDs(ids ...int) *InventoryCreate {
	ic.mutation.AddMovementIDs(ids...)
	return ic
}

// AddMovements adds the "movements" edges to the InventoryMovement entity.
func (ic *InventoryCreate) AddMovements(i ...*InventoryMovement) *InventoryCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ic.AddMovementIDs(ids...)
}

// Mutation returns the InventoryMutation object of the builder.
func (ic *InventoryCreate) Mutation() *InventoryMutation {
	return ic.mutation
}

// Save creates the Inventory in the database.
func (ic *InventoryCreate) Save(ctx context.Context) (*Inventory, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InventoryCreate) SaveX(ctx context.Context) *Inventory {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *InventoryCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *InventoryCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *InventoryCreate) defaults() {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		v := inventory.DefaultCreatedAt()
		ic.mutation.SetCreatedAt(v)
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		v := inventory.DefaultUpdatedAt()
		ic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *InventoryCreate) check() error {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`generated: missing required field "Inventory.createdAt"`)}
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`generated: missing required field "Inventory.updatedAt"`)}
	}
	if _, ok := ic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "Inventory.name"`)}
	}
	if v, ok := ic.mutation.Name(); ok {
		if err := inventory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Inventory.name": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`generated: missing required field "Inventory.category"`)}
	}
	if v, ok := ic.mutation.Category(); ok {
		if err := inventory.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`generated: validator failed for field "Inventory.category": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`generated: missing required field "Inventory.quantity"`)}
	}
	if v, ok := ic.mutation.Quantity(); ok {
		if err := inventory.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`generated: validator failed for field "Inventory.quantity": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Unit(); !ok {
		return &ValidationError{Name: "unit", err: errors.New(`generated: missing required field "Inventory.unit"`)}
	}
	if _, ok := ic.mutation.MinimumLevel(); !ok {
		return &ValidationError{Name: "minimumLevel", err: errors.New(`generated: missing required field "Inventory.minimumLevel"`)}
	}
	if v, ok := ic.mutation.MinimumLevel(); ok {
		if err := inventory.MinimumLevelValidator(v); err != nil {
			return &ValidationError{Name: "minimumLevel", err: fmt.Errorf(`generated: validator failed for field "Inventory.minimumLevel": %w`, err)}
		}
	}
	if _, ok := ic.mutation.CurrentValue(); !ok {
		return &ValidationError{Name: "currentValue", err: errors.New(`generated: missing required field "Inventory.currentValue"`)}
	}
	if v, ok := ic.mutation.CurrentValue(); ok {
		if err := inventory.CurrentValueValidator(v); err != nil {
			return &ValidationError{Name: "currentValue", err: fmt.Errorf(`generated: validator failed for field "Inventory.currentValue": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Notes(); !ok {
		return &ValidationError{Name: "notes", err: errors.New(`generated: missing required field "Inventory.notes"`)}
	}
	if v, ok := ic.mutation.Notes(); ok {
		if err := inventory.NotesValidator(v); err != nil {
			return &ValidationError{Name: "notes", err: fmt.Errorf(`generated: validator failed for field "Inventory.notes": %w`, err)}
		}
	}
	if len(ic.mutation.CompanyIDs()) == 0 {
		return &ValidationError{Name: "company", err: errors.New(`generated: missing required edge "Inventory.company"`)}
	}
	return nil
}

func (ic *InventoryCreate) sqlSave(ctx context.Context) (*Inventory, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *InventoryCreate) createSpec() (*Inventory, *sqlgraph.CreateSpec) {
	var (
		_node = &Inventory{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(inventory.Table, sqlgraph.NewFieldSpec(inventory.FieldID, field.TypeInt))
	)
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.SetField(inventory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.SetField(inventory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ic.mutation.DeletedAt(); ok {
		_spec.SetField(inventory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := ic.mutation.Name(); ok {
		_spec.SetField(inventory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ic.mutation.Category(); ok {
		_spec.SetField(inventory.FieldCategory, field.TypeEnum, value)
		_node.Category = value
	}
	if value, ok := ic.mutation.Quantity(); ok {
		_spec.SetField(inventory.FieldQuantity, field.TypeFloat64, value)
		_node.Quantity = value
	}
	if value, ok := ic.mutation.Unit(); ok {
		_spec.SetField(inventory.FieldUnit, field.TypeString, value)
		_node.Unit = value
	}
	if value, ok := ic.mutation.MinimumLevel(); ok {
		_spec.SetField(inventory.FieldMinimumLevel, field.TypeFloat64, value)
		_node.MinimumLevel = value
	}
	if value, ok := ic.mutation.CurrentValue(); ok {
		_spec.SetField(inventory.FieldCurrentValue, field.TypeFloat64, value)
		_node.CurrentValue = value
	}
	if value, ok := ic.mutation.Notes(); ok {
		_spec.SetField(inventory.FieldNotes, field.TypeString, value)
		_node.Notes = value
	}
	if nodes := ic.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventory.CompanyTable,
			Columns: []string{inventory.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.company_inventory = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.MovementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventory.MovementsTable,
			Columns: []string{inventory.MovementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventorymovement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InventoryCreateBulk is the builder for creating many Inventory entities in bulk.
type InventoryCreateBulk struct {
	config
	err      error
	builders []*InventoryCreate
}

// Save creates the Inventory entities in the database.
func (icb *InventoryCreateBulk) Save(ctx context.Context) ([]*Inventory, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Inventory, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InventoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *InventoryCreateBulk) SaveX(ctx context.Context) []*Inventory {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *InventoryCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *InventoryCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
