// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"mazza/ent/generated/company"
	"mazza/ent/generated/file"
	"mazza/ent/generated/predicate"
	"mazza/ent/generated/product"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FileUpdate is the builder for updating File entities.
type FileUpdate struct {
	config
	hooks     []Hook
	mutation  *FileMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the FileUpdate builder.
func (fu *FileUpdate) Where(ps ...predicate.File) *FileUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetUpdatedAt sets the "updatedAt" field.
func (fu *FileUpdate) SetUpdatedAt(t time.Time) *FileUpdate {
	fu.mutation.SetUpdatedAt(t)
	return fu
}

// SetDeletedAt sets the "deletedAt" field.
func (fu *FileUpdate) SetDeletedAt(t time.Time) *FileUpdate {
	fu.mutation.SetDeletedAt(t)
	return fu
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (fu *FileUpdate) SetNillableDeletedAt(t *time.Time) *FileUpdate {
	if t != nil {
		fu.SetDeletedAt(*t)
	}
	return fu
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (fu *FileUpdate) ClearDeletedAt() *FileUpdate {
	fu.mutation.ClearDeletedAt()
	return fu
}

// SetCategory sets the "category" field.
func (fu *FileUpdate) SetCategory(f file.Category) *FileUpdate {
	fu.mutation.SetCategory(f)
	return fu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (fu *FileUpdate) SetNillableCategory(f *file.Category) *FileUpdate {
	if f != nil {
		fu.SetCategory(*f)
	}
	return fu
}

// SetExtension sets the "extension" field.
func (fu *FileUpdate) SetExtension(s string) *FileUpdate {
	fu.mutation.SetExtension(s)
	return fu
}

// SetNillableExtension sets the "extension" field if the given value is not nil.
func (fu *FileUpdate) SetNillableExtension(s *string) *FileUpdate {
	if s != nil {
		fu.SetExtension(*s)
	}
	return fu
}

// SetSize sets the "size" field.
func (fu *FileUpdate) SetSize(s string) *FileUpdate {
	fu.mutation.SetSize(s)
	return fu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (fu *FileUpdate) SetNillableSize(s *string) *FileUpdate {
	if s != nil {
		fu.SetSize(*s)
	}
	return fu
}

// SetURI sets the "uri" field.
func (fu *FileUpdate) SetURI(s string) *FileUpdate {
	fu.mutation.SetURI(s)
	return fu
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (fu *FileUpdate) SetNillableURI(s *string) *FileUpdate {
	if s != nil {
		fu.SetURI(*s)
	}
	return fu
}

// SetURL sets the "url" field.
func (fu *FileUpdate) SetURL(s string) *FileUpdate {
	fu.mutation.SetURL(s)
	return fu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (fu *FileUpdate) SetNillableURL(s *string) *FileUpdate {
	if s != nil {
		fu.SetURL(*s)
	}
	return fu
}

// SetDescription sets the "description" field.
func (fu *FileUpdate) SetDescription(s string) *FileUpdate {
	fu.mutation.SetDescription(s)
	return fu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fu *FileUpdate) SetNillableDescription(s *string) *FileUpdate {
	if s != nil {
		fu.SetDescription(*s)
	}
	return fu
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (fu *FileUpdate) SetCompanyID(id int) *FileUpdate {
	fu.mutation.SetCompanyID(id)
	return fu
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (fu *FileUpdate) SetNillableCompanyID(id *int) *FileUpdate {
	if id != nil {
		fu = fu.SetCompanyID(*id)
	}
	return fu
}

// SetCompany sets the "company" edge to the Company entity.
func (fu *FileUpdate) SetCompany(c *Company) *FileUpdate {
	return fu.SetCompanyID(c.ID)
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (fu *FileUpdate) SetProductID(id int) *FileUpdate {
	fu.mutation.SetProductID(id)
	return fu
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (fu *FileUpdate) SetNillableProductID(id *int) *FileUpdate {
	if id != nil {
		fu = fu.SetProductID(*id)
	}
	return fu
}

// SetProduct sets the "product" edge to the Product entity.
func (fu *FileUpdate) SetProduct(p *Product) *FileUpdate {
	return fu.SetProductID(p.ID)
}

// Mutation returns the FileMutation object of the builder.
func (fu *FileUpdate) Mutation() *FileMutation {
	return fu.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (fu *FileUpdate) ClearCompany() *FileUpdate {
	fu.mutation.ClearCompany()
	return fu
}

// ClearProduct clears the "product" edge to the Product entity.
func (fu *FileUpdate) ClearProduct() *FileUpdate {
	fu.mutation.ClearProduct()
	return fu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FileUpdate) Save(ctx context.Context) (int, error) {
	fu.defaults()
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FileUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FileUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FileUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FileUpdate) defaults() {
	if _, ok := fu.mutation.UpdatedAt(); !ok {
		v := file.UpdateDefaultUpdatedAt()
		fu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FileUpdate) check() error {
	if v, ok := fu.mutation.Category(); ok {
		if err := file.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`generated: validator failed for field "File.category": %w`, err)}
		}
	}
	if v, ok := fu.mutation.URI(); ok {
		if err := file.URIValidator(v); err != nil {
			return &ValidationError{Name: "uri", err: fmt.Errorf(`generated: validator failed for field "File.uri": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fu *FileUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FileUpdate {
	fu.modifiers = append(fu.modifiers, modifiers...)
	return fu
}

func (fu *FileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.SetField(file.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fu.mutation.DeletedAt(); ok {
		_spec.SetField(file.FieldDeletedAt, field.TypeTime, value)
	}
	if fu.mutation.DeletedAtCleared() {
		_spec.ClearField(file.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := fu.mutation.Category(); ok {
		_spec.SetField(file.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := fu.mutation.Extension(); ok {
		_spec.SetField(file.FieldExtension, field.TypeString, value)
	}
	if value, ok := fu.mutation.Size(); ok {
		_spec.SetField(file.FieldSize, field.TypeString, value)
	}
	if value, ok := fu.mutation.URI(); ok {
		_spec.SetField(file.FieldURI, field.TypeString, value)
	}
	if value, ok := fu.mutation.URL(); ok {
		_spec.SetField(file.FieldURL, field.TypeString, value)
	}
	if value, ok := fu.mutation.Description(); ok {
		_spec.SetField(file.FieldDescription, field.TypeString, value)
	}
	if fu.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.CompanyTable,
			Columns: []string{file.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.CompanyTable,
			Columns: []string{file.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.ProductTable,
			Columns: []string{file.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.ProductTable,
			Columns: []string{file.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(fu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FileUpdateOne is the builder for updating a single File entity.
type FileUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *FileMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updatedAt" field.
func (fuo *FileUpdateOne) SetUpdatedAt(t time.Time) *FileUpdateOne {
	fuo.mutation.SetUpdatedAt(t)
	return fuo
}

// SetDeletedAt sets the "deletedAt" field.
func (fuo *FileUpdateOne) SetDeletedAt(t time.Time) *FileUpdateOne {
	fuo.mutation.SetDeletedAt(t)
	return fuo
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableDeletedAt(t *time.Time) *FileUpdateOne {
	if t != nil {
		fuo.SetDeletedAt(*t)
	}
	return fuo
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (fuo *FileUpdateOne) ClearDeletedAt() *FileUpdateOne {
	fuo.mutation.ClearDeletedAt()
	return fuo
}

// SetCategory sets the "category" field.
func (fuo *FileUpdateOne) SetCategory(f file.Category) *FileUpdateOne {
	fuo.mutation.SetCategory(f)
	return fuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableCategory(f *file.Category) *FileUpdateOne {
	if f != nil {
		fuo.SetCategory(*f)
	}
	return fuo
}

// SetExtension sets the "extension" field.
func (fuo *FileUpdateOne) SetExtension(s string) *FileUpdateOne {
	fuo.mutation.SetExtension(s)
	return fuo
}

// SetNillableExtension sets the "extension" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableExtension(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetExtension(*s)
	}
	return fuo
}

// SetSize sets the "size" field.
func (fuo *FileUpdateOne) SetSize(s string) *FileUpdateOne {
	fuo.mutation.SetSize(s)
	return fuo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableSize(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetSize(*s)
	}
	return fuo
}

// SetURI sets the "uri" field.
func (fuo *FileUpdateOne) SetURI(s string) *FileUpdateOne {
	fuo.mutation.SetURI(s)
	return fuo
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableURI(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetURI(*s)
	}
	return fuo
}

// SetURL sets the "url" field.
func (fuo *FileUpdateOne) SetURL(s string) *FileUpdateOne {
	fuo.mutation.SetURL(s)
	return fuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableURL(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetURL(*s)
	}
	return fuo
}

// SetDescription sets the "description" field.
func (fuo *FileUpdateOne) SetDescription(s string) *FileUpdateOne {
	fuo.mutation.SetDescription(s)
	return fuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableDescription(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetDescription(*s)
	}
	return fuo
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (fuo *FileUpdateOne) SetCompanyID(id int) *FileUpdateOne {
	fuo.mutation.SetCompanyID(id)
	return fuo
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableCompanyID(id *int) *FileUpdateOne {
	if id != nil {
		fuo = fuo.SetCompanyID(*id)
	}
	return fuo
}

// SetCompany sets the "company" edge to the Company entity.
func (fuo *FileUpdateOne) SetCompany(c *Company) *FileUpdateOne {
	return fuo.SetCompanyID(c.ID)
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (fuo *FileUpdateOne) SetProductID(id int) *FileUpdateOne {
	fuo.mutation.SetProductID(id)
	return fuo
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableProductID(id *int) *FileUpdateOne {
	if id != nil {
		fuo = fuo.SetProductID(*id)
	}
	return fuo
}

// SetProduct sets the "product" edge to the Product entity.
func (fuo *FileUpdateOne) SetProduct(p *Product) *FileUpdateOne {
	return fuo.SetProductID(p.ID)
}

// Mutation returns the FileMutation object of the builder.
func (fuo *FileUpdateOne) Mutation() *FileMutation {
	return fuo.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (fuo *FileUpdateOne) ClearCompany() *FileUpdateOne {
	fuo.mutation.ClearCompany()
	return fuo
}

// ClearProduct clears the "product" edge to the Product entity.
func (fuo *FileUpdateOne) ClearProduct() *FileUpdateOne {
	fuo.mutation.ClearProduct()
	return fuo
}

// Where appends a list predicates to the FileUpdate builder.
func (fuo *FileUpdateOne) Where(ps ...predicate.File) *FileUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FileUpdateOne) Select(field string, fields ...string) *FileUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated File entity.
func (fuo *FileUpdateOne) Save(ctx context.Context) (*File, error) {
	fuo.defaults()
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FileUpdateOne) SaveX(ctx context.Context) *File {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FileUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FileUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FileUpdateOne) defaults() {
	if _, ok := fuo.mutation.UpdatedAt(); !ok {
		v := file.UpdateDefaultUpdatedAt()
		fuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FileUpdateOne) check() error {
	if v, ok := fuo.mutation.Category(); ok {
		if err := file.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`generated: validator failed for field "File.category": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.URI(); ok {
		if err := file.URIValidator(v); err != nil {
			return &ValidationError{Name: "uri", err: fmt.Errorf(`generated: validator failed for field "File.uri": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fuo *FileUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FileUpdateOne {
	fuo.modifiers = append(fuo.modifiers, modifiers...)
	return fuo
}

func (fuo *FileUpdateOne) sqlSave(ctx context.Context) (_node *File, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "File.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, file.FieldID)
		for _, f := range fields {
			if !file.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != file.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.SetField(file.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.DeletedAt(); ok {
		_spec.SetField(file.FieldDeletedAt, field.TypeTime, value)
	}
	if fuo.mutation.DeletedAtCleared() {
		_spec.ClearField(file.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := fuo.mutation.Category(); ok {
		_spec.SetField(file.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := fuo.mutation.Extension(); ok {
		_spec.SetField(file.FieldExtension, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Size(); ok {
		_spec.SetField(file.FieldSize, field.TypeString, value)
	}
	if value, ok := fuo.mutation.URI(); ok {
		_spec.SetField(file.FieldURI, field.TypeString, value)
	}
	if value, ok := fuo.mutation.URL(); ok {
		_spec.SetField(file.FieldURL, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Description(); ok {
		_spec.SetField(file.FieldDescription, field.TypeString, value)
	}
	if fuo.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.CompanyTable,
			Columns: []string{file.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.CompanyTable,
			Columns: []string{file.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.ProductTable,
			Columns: []string{file.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.ProductTable,
			Columns: []string{file.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(fuo.modifiers...)
	_node = &File{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
