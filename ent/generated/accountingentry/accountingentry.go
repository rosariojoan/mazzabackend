// Code generated by ent, DO NOT EDIT.

package accountingentry

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the accountingentry type in the database.
	Label = "accounting_entry"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deletedat field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldNumber holds the string denoting the number field in the database.
	FieldNumber = "number"
	// FieldGroup holds the string denoting the group field in the database.
	FieldGroup = "group"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// FieldAccount holds the string denoting the account field in the database.
	FieldAccount = "account"
	// FieldLabel holds the string denoting the label field in the database.
	FieldLabel = "label"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldAccountType holds the string denoting the accounttype field in the database.
	FieldAccountType = "account_type"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldIsDebit holds the string denoting the isdebit field in the database.
	FieldIsDebit = "is_debit"
	// FieldIsReversal holds the string denoting the isreversal field in the database.
	FieldIsReversal = "is_reversal"
	// FieldReversed holds the string denoting the reversed field in the database.
	FieldReversed = "reversed"
	// EdgeCompany holds the string denoting the company edge name in mutations.
	EdgeCompany = "company"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the accountingentry in the database.
	Table = "accounting_entries"
	// CompanyTable is the table that holds the company relation/edge.
	CompanyTable = "accounting_entries"
	// CompanyInverseTable is the table name for the Company entity.
	// It exists in this package in order to avoid circular dependency with the "company" package.
	CompanyInverseTable = "companies"
	// CompanyColumn is the table column denoting the company relation/edge.
	CompanyColumn = "company_accounting_entries"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "accounting_entries"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_accounting_entries"
)

// Columns holds all SQL columns for accountingentry fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldNumber,
	FieldGroup,
	FieldDate,
	FieldAccount,
	FieldLabel,
	FieldAmount,
	FieldDescription,
	FieldAccountType,
	FieldCategory,
	FieldIsDebit,
	FieldIsReversal,
	FieldReversed,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "accounting_entries"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"company_accounting_entries",
	"user_accounting_entries",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NumberValidator is a validator for the "number" field. It is called by the builders before save.
	NumberValidator func(int) error
	// GroupValidator is a validator for the "group" field. It is called by the builders before save.
	GroupValidator func(int) error
	// DefaultDate holds the default value on creation for the "date" field.
	DefaultDate func() time.Time
	// AccountValidator is a validator for the "account" field. It is called by the builders before save.
	AccountValidator func(string) error
	// DefaultCategory holds the default value on creation for the "category" field.
	DefaultCategory string
	// DefaultIsReversal holds the default value on creation for the "isReversal" field.
	DefaultIsReversal bool
	// DefaultReversed holds the default value on creation for the "reversed" field.
	DefaultReversed bool
)

// AccountType defines the type for the "accountType" enum field.
type AccountType string

// AccountType values.
const (
	AccountTypeASSET            AccountType = "ASSET"
	AccountTypeLIABILITY        AccountType = "LIABILITY"
	AccountTypeEQUITY           AccountType = "EQUITY"
	AccountTypeREVENUE          AccountType = "REVENUE"
	AccountTypeEXPENSE          AccountType = "EXPENSE"
	AccountTypeTAX_EXPENSE      AccountType = "TAX_EXPENSE"
	AccountTypeINCOME           AccountType = "INCOME"
	AccountTypeDIVIDEND_EXPENSE AccountType = "DIVIDEND_EXPENSE"
	AccountTypeCONTRA_ASSET     AccountType = "CONTRA_ASSET"
	AccountTypeCONTRA_LIABILITY AccountType = "CONTRA_LIABILITY"
	AccountTypeCONTRA_REVENUE   AccountType = "CONTRA_REVENUE"
	AccountTypeCONTRA_EXPENSE   AccountType = "CONTRA_EXPENSE"
)

func (at AccountType) String() string {
	return string(at)
}

// AccountTypeValidator is a validator for the "accountType" field enum values. It is called by the builders before save.
func AccountTypeValidator(at AccountType) error {
	switch at {
	case AccountTypeASSET, AccountTypeLIABILITY, AccountTypeEQUITY, AccountTypeREVENUE, AccountTypeEXPENSE, AccountTypeTAX_EXPENSE, AccountTypeINCOME, AccountTypeDIVIDEND_EXPENSE, AccountTypeCONTRA_ASSET, AccountTypeCONTRA_LIABILITY, AccountTypeCONTRA_REVENUE, AccountTypeCONTRA_EXPENSE:
		return nil
	default:
		return fmt.Errorf("accountingentry: invalid enum value for accountType field: %q", at)
	}
}

// OrderOption defines the ordering options for the AccountingEntry queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deletedAt field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByNumber orders the results by the number field.
func ByNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumber, opts...).ToFunc()
}

// ByGroup orders the results by the group field.
func ByGroup(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGroup, opts...).ToFunc()
}

// ByDate orders the results by the date field.
func ByDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDate, opts...).ToFunc()
}

// ByAccount orders the results by the account field.
func ByAccount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccount, opts...).ToFunc()
}

// ByLabel orders the results by the label field.
func ByLabel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabel, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByAccountType orders the results by the accountType field.
func ByAccountType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountType, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByIsDebit orders the results by the isDebit field.
func ByIsDebit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDebit, opts...).ToFunc()
}

// ByIsReversal orders the results by the isReversal field.
func ByIsReversal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsReversal, opts...).ToFunc()
}

// ByReversed orders the results by the reversed field.
func ByReversed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReversed, opts...).ToFunc()
}

// ByCompanyField orders the results by company field.
func ByCompanyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompanyStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newCompanyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompanyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e AccountType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *AccountType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = AccountType(str)
	if err := AccountTypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid AccountType", str)
	}
	return nil
}
