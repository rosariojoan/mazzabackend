// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"mazza/ent/generated/company"
	"mazza/ent/generated/loan"
	"mazza/ent/generated/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LoanUpdate is the builder for updating Loan entities.
type LoanUpdate struct {
	config
	hooks     []Hook
	mutation  *LoanMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the LoanUpdate builder.
func (lu *LoanUpdate) Where(ps ...predicate.Loan) *LoanUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetUpdatedAt sets the "updatedAt" field.
func (lu *LoanUpdate) SetUpdatedAt(t time.Time) *LoanUpdate {
	lu.mutation.SetUpdatedAt(t)
	return lu
}

// SetDeletedAt sets the "deletedAt" field.
func (lu *LoanUpdate) SetDeletedAt(t time.Time) *LoanUpdate {
	lu.mutation.SetDeletedAt(t)
	return lu
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (lu *LoanUpdate) SetNillableDeletedAt(t *time.Time) *LoanUpdate {
	if t != nil {
		lu.SetDeletedAt(*t)
	}
	return lu
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (lu *LoanUpdate) ClearDeletedAt() *LoanUpdate {
	lu.mutation.ClearDeletedAt()
	return lu
}

// SetAmount sets the "amount" field.
func (lu *LoanUpdate) SetAmount(f float64) *LoanUpdate {
	lu.mutation.ResetAmount()
	lu.mutation.SetAmount(f)
	return lu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (lu *LoanUpdate) SetNillableAmount(f *float64) *LoanUpdate {
	if f != nil {
		lu.SetAmount(*f)
	}
	return lu
}

// AddAmount adds f to the "amount" field.
func (lu *LoanUpdate) AddAmount(f float64) *LoanUpdate {
	lu.mutation.AddAmount(f)
	return lu
}

// SetCategory sets the "category" field.
func (lu *LoanUpdate) SetCategory(l loan.Category) *LoanUpdate {
	lu.mutation.SetCategory(l)
	return lu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (lu *LoanUpdate) SetNillableCategory(l *loan.Category) *LoanUpdate {
	if l != nil {
		lu.SetCategory(*l)
	}
	return lu
}

// SetCollateral sets the "collateral" field.
func (lu *LoanUpdate) SetCollateral(s string) *LoanUpdate {
	lu.mutation.SetCollateral(s)
	return lu
}

// SetNillableCollateral sets the "collateral" field if the given value is not nil.
func (lu *LoanUpdate) SetNillableCollateral(s *string) *LoanUpdate {
	if s != nil {
		lu.SetCollateral(*s)
	}
	return lu
}

// ClearCollateral clears the value of the "collateral" field.
func (lu *LoanUpdate) ClearCollateral() *LoanUpdate {
	lu.mutation.ClearCollateral()
	return lu
}

// SetDescription sets the "description" field.
func (lu *LoanUpdate) SetDescription(s string) *LoanUpdate {
	lu.mutation.SetDescription(s)
	return lu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (lu *LoanUpdate) SetNillableDescription(s *string) *LoanUpdate {
	if s != nil {
		lu.SetDescription(*s)
	}
	return lu
}

// ClearDescription clears the value of the "description" field.
func (lu *LoanUpdate) ClearDescription() *LoanUpdate {
	lu.mutation.ClearDescription()
	return lu
}

// SetInterestRate sets the "interestRate" field.
func (lu *LoanUpdate) SetInterestRate(f float64) *LoanUpdate {
	lu.mutation.ResetInterestRate()
	lu.mutation.SetInterestRate(f)
	return lu
}

// SetNillableInterestRate sets the "interestRate" field if the given value is not nil.
func (lu *LoanUpdate) SetNillableInterestRate(f *float64) *LoanUpdate {
	if f != nil {
		lu.SetInterestRate(*f)
	}
	return lu
}

// AddInterestRate adds f to the "interestRate" field.
func (lu *LoanUpdate) AddInterestRate(f float64) *LoanUpdate {
	lu.mutation.AddInterestRate(f)
	return lu
}

// SetInstallments sets the "installments" field.
func (lu *LoanUpdate) SetInstallments(i int) *LoanUpdate {
	lu.mutation.ResetInstallments()
	lu.mutation.SetInstallments(i)
	return lu
}

// SetNillableInstallments sets the "installments" field if the given value is not nil.
func (lu *LoanUpdate) SetNillableInstallments(i *int) *LoanUpdate {
	if i != nil {
		lu.SetInstallments(*i)
	}
	return lu
}

// AddInstallments adds i to the "installments" field.
func (lu *LoanUpdate) AddInstallments(i int) *LoanUpdate {
	lu.mutation.AddInstallments(i)
	return lu
}

// SetMaturityDate sets the "maturityDate" field.
func (lu *LoanUpdate) SetMaturityDate(t time.Time) *LoanUpdate {
	lu.mutation.SetMaturityDate(t)
	return lu
}

// SetNillableMaturityDate sets the "maturityDate" field if the given value is not nil.
func (lu *LoanUpdate) SetNillableMaturityDate(t *time.Time) *LoanUpdate {
	if t != nil {
		lu.SetMaturityDate(*t)
	}
	return lu
}

// SetNextPayment sets the "nextPayment" field.
func (lu *LoanUpdate) SetNextPayment(t time.Time) *LoanUpdate {
	lu.mutation.SetNextPayment(t)
	return lu
}

// SetNillableNextPayment sets the "nextPayment" field if the given value is not nil.
func (lu *LoanUpdate) SetNillableNextPayment(t *time.Time) *LoanUpdate {
	if t != nil {
		lu.SetNextPayment(*t)
	}
	return lu
}

// ClearNextPayment clears the value of the "nextPayment" field.
func (lu *LoanUpdate) ClearNextPayment() *LoanUpdate {
	lu.mutation.ClearNextPayment()
	return lu
}

// SetNextPaymentAmount sets the "nextPaymentAmount" field.
func (lu *LoanUpdate) SetNextPaymentAmount(f float64) *LoanUpdate {
	lu.mutation.ResetNextPaymentAmount()
	lu.mutation.SetNextPaymentAmount(f)
	return lu
}

// SetNillableNextPaymentAmount sets the "nextPaymentAmount" field if the given value is not nil.
func (lu *LoanUpdate) SetNillableNextPaymentAmount(f *float64) *LoanUpdate {
	if f != nil {
		lu.SetNextPaymentAmount(*f)
	}
	return lu
}

// AddNextPaymentAmount adds f to the "nextPaymentAmount" field.
func (lu *LoanUpdate) AddNextPaymentAmount(f float64) *LoanUpdate {
	lu.mutation.AddNextPaymentAmount(f)
	return lu
}

// ClearNextPaymentAmount clears the value of the "nextPaymentAmount" field.
func (lu *LoanUpdate) ClearNextPaymentAmount() *LoanUpdate {
	lu.mutation.ClearNextPaymentAmount()
	return lu
}

// SetOutstandingAmount sets the "outstandingAmount" field.
func (lu *LoanUpdate) SetOutstandingAmount(f float64) *LoanUpdate {
	lu.mutation.ResetOutstandingAmount()
	lu.mutation.SetOutstandingAmount(f)
	return lu
}

// SetNillableOutstandingAmount sets the "outstandingAmount" field if the given value is not nil.
func (lu *LoanUpdate) SetNillableOutstandingAmount(f *float64) *LoanUpdate {
	if f != nil {
		lu.SetOutstandingAmount(*f)
	}
	return lu
}

// AddOutstandingAmount adds f to the "outstandingAmount" field.
func (lu *LoanUpdate) AddOutstandingAmount(f float64) *LoanUpdate {
	lu.mutation.AddOutstandingAmount(f)
	return lu
}

// SetPaymentFrequency sets the "paymentFrequency" field.
func (lu *LoanUpdate) SetPaymentFrequency(lf loan.PaymentFrequency) *LoanUpdate {
	lu.mutation.SetPaymentFrequency(lf)
	return lu
}

// SetNillablePaymentFrequency sets the "paymentFrequency" field if the given value is not nil.
func (lu *LoanUpdate) SetNillablePaymentFrequency(lf *loan.PaymentFrequency) *LoanUpdate {
	if lf != nil {
		lu.SetPaymentFrequency(*lf)
	}
	return lu
}

// SetPaidInstallments sets the "paidInstallments" field.
func (lu *LoanUpdate) SetPaidInstallments(i int) *LoanUpdate {
	lu.mutation.ResetPaidInstallments()
	lu.mutation.SetPaidInstallments(i)
	return lu
}

// SetNillablePaidInstallments sets the "paidInstallments" field if the given value is not nil.
func (lu *LoanUpdate) SetNillablePaidInstallments(i *int) *LoanUpdate {
	if i != nil {
		lu.SetPaidInstallments(*i)
	}
	return lu
}

// AddPaidInstallments adds i to the "paidInstallments" field.
func (lu *LoanUpdate) AddPaidInstallments(i int) *LoanUpdate {
	lu.mutation.AddPaidInstallments(i)
	return lu
}

// SetProvider sets the "provider" field.
func (lu *LoanUpdate) SetProvider(s string) *LoanUpdate {
	lu.mutation.SetProvider(s)
	return lu
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (lu *LoanUpdate) SetNillableProvider(s *string) *LoanUpdate {
	if s != nil {
		lu.SetProvider(*s)
	}
	return lu
}

// SetStartDate sets the "startDate" field.
func (lu *LoanUpdate) SetStartDate(t time.Time) *LoanUpdate {
	lu.mutation.SetStartDate(t)
	return lu
}

// SetNillableStartDate sets the "startDate" field if the given value is not nil.
func (lu *LoanUpdate) SetNillableStartDate(t *time.Time) *LoanUpdate {
	if t != nil {
		lu.SetStartDate(*t)
	}
	return lu
}

// SetStatus sets the "status" field.
func (lu *LoanUpdate) SetStatus(l loan.Status) *LoanUpdate {
	lu.mutation.SetStatus(l)
	return lu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (lu *LoanUpdate) SetNillableStatus(l *loan.Status) *LoanUpdate {
	if l != nil {
		lu.SetStatus(*l)
	}
	return lu
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (lu *LoanUpdate) SetCompanyID(id int) *LoanUpdate {
	lu.mutation.SetCompanyID(id)
	return lu
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (lu *LoanUpdate) SetNillableCompanyID(id *int) *LoanUpdate {
	if id != nil {
		lu = lu.SetCompanyID(*id)
	}
	return lu
}

// SetCompany sets the "company" edge to the Company entity.
func (lu *LoanUpdate) SetCompany(c *Company) *LoanUpdate {
	return lu.SetCompanyID(c.ID)
}

// Mutation returns the LoanMutation object of the builder.
func (lu *LoanUpdate) Mutation() *LoanMutation {
	return lu.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (lu *LoanUpdate) ClearCompany() *LoanUpdate {
	lu.mutation.ClearCompany()
	return lu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LoanUpdate) Save(ctx context.Context) (int, error) {
	lu.defaults()
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LoanUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LoanUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LoanUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lu *LoanUpdate) defaults() {
	if _, ok := lu.mutation.UpdatedAt(); !ok {
		v := loan.UpdateDefaultUpdatedAt()
		lu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lu *LoanUpdate) check() error {
	if v, ok := lu.mutation.Amount(); ok {
		if err := loan.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`generated: validator failed for field "Loan.amount": %w`, err)}
		}
	}
	if v, ok := lu.mutation.Category(); ok {
		if err := loan.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`generated: validator failed for field "Loan.category": %w`, err)}
		}
	}
	if v, ok := lu.mutation.InterestRate(); ok {
		if err := loan.InterestRateValidator(v); err != nil {
			return &ValidationError{Name: "interestRate", err: fmt.Errorf(`generated: validator failed for field "Loan.interestRate": %w`, err)}
		}
	}
	if v, ok := lu.mutation.Installments(); ok {
		if err := loan.InstallmentsValidator(v); err != nil {
			return &ValidationError{Name: "installments", err: fmt.Errorf(`generated: validator failed for field "Loan.installments": %w`, err)}
		}
	}
	if v, ok := lu.mutation.NextPaymentAmount(); ok {
		if err := loan.NextPaymentAmountValidator(v); err != nil {
			return &ValidationError{Name: "nextPaymentAmount", err: fmt.Errorf(`generated: validator failed for field "Loan.nextPaymentAmount": %w`, err)}
		}
	}
	if v, ok := lu.mutation.OutstandingAmount(); ok {
		if err := loan.OutstandingAmountValidator(v); err != nil {
			return &ValidationError{Name: "outstandingAmount", err: fmt.Errorf(`generated: validator failed for field "Loan.outstandingAmount": %w`, err)}
		}
	}
	if v, ok := lu.mutation.PaymentFrequency(); ok {
		if err := loan.PaymentFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "paymentFrequency", err: fmt.Errorf(`generated: validator failed for field "Loan.paymentFrequency": %w`, err)}
		}
	}
	if v, ok := lu.mutation.Provider(); ok {
		if err := loan.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`generated: validator failed for field "Loan.provider": %w`, err)}
		}
	}
	if v, ok := lu.mutation.Status(); ok {
		if err := loan.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Loan.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (lu *LoanUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LoanUpdate {
	lu.modifiers = append(lu.modifiers, modifiers...)
	return lu
}

func (lu *LoanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(loan.Table, loan.Columns, sqlgraph.NewFieldSpec(loan.FieldID, field.TypeInt))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.UpdatedAt(); ok {
		_spec.SetField(loan.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lu.mutation.DeletedAt(); ok {
		_spec.SetField(loan.FieldDeletedAt, field.TypeTime, value)
	}
	if lu.mutation.DeletedAtCleared() {
		_spec.ClearField(loan.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := lu.mutation.Amount(); ok {
		_spec.SetField(loan.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := lu.mutation.AddedAmount(); ok {
		_spec.AddField(loan.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := lu.mutation.Category(); ok {
		_spec.SetField(loan.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := lu.mutation.Collateral(); ok {
		_spec.SetField(loan.FieldCollateral, field.TypeString, value)
	}
	if lu.mutation.CollateralCleared() {
		_spec.ClearField(loan.FieldCollateral, field.TypeString)
	}
	if value, ok := lu.mutation.Description(); ok {
		_spec.SetField(loan.FieldDescription, field.TypeString, value)
	}
	if lu.mutation.DescriptionCleared() {
		_spec.ClearField(loan.FieldDescription, field.TypeString)
	}
	if value, ok := lu.mutation.InterestRate(); ok {
		_spec.SetField(loan.FieldInterestRate, field.TypeFloat64, value)
	}
	if value, ok := lu.mutation.AddedInterestRate(); ok {
		_spec.AddField(loan.FieldInterestRate, field.TypeFloat64, value)
	}
	if value, ok := lu.mutation.Installments(); ok {
		_spec.SetField(loan.FieldInstallments, field.TypeInt, value)
	}
	if value, ok := lu.mutation.AddedInstallments(); ok {
		_spec.AddField(loan.FieldInstallments, field.TypeInt, value)
	}
	if value, ok := lu.mutation.MaturityDate(); ok {
		_spec.SetField(loan.FieldMaturityDate, field.TypeTime, value)
	}
	if value, ok := lu.mutation.NextPayment(); ok {
		_spec.SetField(loan.FieldNextPayment, field.TypeTime, value)
	}
	if lu.mutation.NextPaymentCleared() {
		_spec.ClearField(loan.FieldNextPayment, field.TypeTime)
	}
	if value, ok := lu.mutation.NextPaymentAmount(); ok {
		_spec.SetField(loan.FieldNextPaymentAmount, field.TypeFloat64, value)
	}
	if value, ok := lu.mutation.AddedNextPaymentAmount(); ok {
		_spec.AddField(loan.FieldNextPaymentAmount, field.TypeFloat64, value)
	}
	if lu.mutation.NextPaymentAmountCleared() {
		_spec.ClearField(loan.FieldNextPaymentAmount, field.TypeFloat64)
	}
	if value, ok := lu.mutation.OutstandingAmount(); ok {
		_spec.SetField(loan.FieldOutstandingAmount, field.TypeFloat64, value)
	}
	if value, ok := lu.mutation.AddedOutstandingAmount(); ok {
		_spec.AddField(loan.FieldOutstandingAmount, field.TypeFloat64, value)
	}
	if value, ok := lu.mutation.PaymentFrequency(); ok {
		_spec.SetField(loan.FieldPaymentFrequency, field.TypeEnum, value)
	}
	if value, ok := lu.mutation.PaidInstallments(); ok {
		_spec.SetField(loan.FieldPaidInstallments, field.TypeInt, value)
	}
	if value, ok := lu.mutation.AddedPaidInstallments(); ok {
		_spec.AddField(loan.FieldPaidInstallments, field.TypeInt, value)
	}
	if value, ok := lu.mutation.Provider(); ok {
		_spec.SetField(loan.FieldProvider, field.TypeString, value)
	}
	if value, ok := lu.mutation.StartDate(); ok {
		_spec.SetField(loan.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := lu.mutation.Status(); ok {
		_spec.SetField(loan.FieldStatus, field.TypeEnum, value)
	}
	if lu.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loan.CompanyTable,
			Columns: []string{loan.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loan.CompanyTable,
			Columns: []string{loan.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(lu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LoanUpdateOne is the builder for updating a single Loan entity.
type LoanUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *LoanMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updatedAt" field.
func (luo *LoanUpdateOne) SetUpdatedAt(t time.Time) *LoanUpdateOne {
	luo.mutation.SetUpdatedAt(t)
	return luo
}

// SetDeletedAt sets the "deletedAt" field.
func (luo *LoanUpdateOne) SetDeletedAt(t time.Time) *LoanUpdateOne {
	luo.mutation.SetDeletedAt(t)
	return luo
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (luo *LoanUpdateOne) SetNillableDeletedAt(t *time.Time) *LoanUpdateOne {
	if t != nil {
		luo.SetDeletedAt(*t)
	}
	return luo
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (luo *LoanUpdateOne) ClearDeletedAt() *LoanUpdateOne {
	luo.mutation.ClearDeletedAt()
	return luo
}

// SetAmount sets the "amount" field.
func (luo *LoanUpdateOne) SetAmount(f float64) *LoanUpdateOne {
	luo.mutation.ResetAmount()
	luo.mutation.SetAmount(f)
	return luo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (luo *LoanUpdateOne) SetNillableAmount(f *float64) *LoanUpdateOne {
	if f != nil {
		luo.SetAmount(*f)
	}
	return luo
}

// AddAmount adds f to the "amount" field.
func (luo *LoanUpdateOne) AddAmount(f float64) *LoanUpdateOne {
	luo.mutation.AddAmount(f)
	return luo
}

// SetCategory sets the "category" field.
func (luo *LoanUpdateOne) SetCategory(l loan.Category) *LoanUpdateOne {
	luo.mutation.SetCategory(l)
	return luo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (luo *LoanUpdateOne) SetNillableCategory(l *loan.Category) *LoanUpdateOne {
	if l != nil {
		luo.SetCategory(*l)
	}
	return luo
}

// SetCollateral sets the "collateral" field.
func (luo *LoanUpdateOne) SetCollateral(s string) *LoanUpdateOne {
	luo.mutation.SetCollateral(s)
	return luo
}

// SetNillableCollateral sets the "collateral" field if the given value is not nil.
func (luo *LoanUpdateOne) SetNillableCollateral(s *string) *LoanUpdateOne {
	if s != nil {
		luo.SetCollateral(*s)
	}
	return luo
}

// ClearCollateral clears the value of the "collateral" field.
func (luo *LoanUpdateOne) ClearCollateral() *LoanUpdateOne {
	luo.mutation.ClearCollateral()
	return luo
}

// SetDescription sets the "description" field.
func (luo *LoanUpdateOne) SetDescription(s string) *LoanUpdateOne {
	luo.mutation.SetDescription(s)
	return luo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (luo *LoanUpdateOne) SetNillableDescription(s *string) *LoanUpdateOne {
	if s != nil {
		luo.SetDescription(*s)
	}
	return luo
}

// ClearDescription clears the value of the "description" field.
func (luo *LoanUpdateOne) ClearDescription() *LoanUpdateOne {
	luo.mutation.ClearDescription()
	return luo
}

// SetInterestRate sets the "interestRate" field.
func (luo *LoanUpdateOne) SetInterestRate(f float64) *LoanUpdateOne {
	luo.mutation.ResetInterestRate()
	luo.mutation.SetInterestRate(f)
	return luo
}

// SetNillableInterestRate sets the "interestRate" field if the given value is not nil.
func (luo *LoanUpdateOne) SetNillableInterestRate(f *float64) *LoanUpdateOne {
	if f != nil {
		luo.SetInterestRate(*f)
	}
	return luo
}

// AddInterestRate adds f to the "interestRate" field.
func (luo *LoanUpdateOne) AddInterestRate(f float64) *LoanUpdateOne {
	luo.mutation.AddInterestRate(f)
	return luo
}

// SetInstallments sets the "installments" field.
func (luo *LoanUpdateOne) SetInstallments(i int) *LoanUpdateOne {
	luo.mutation.ResetInstallments()
	luo.mutation.SetInstallments(i)
	return luo
}

// SetNillableInstallments sets the "installments" field if the given value is not nil.
func (luo *LoanUpdateOne) SetNillableInstallments(i *int) *LoanUpdateOne {
	if i != nil {
		luo.SetInstallments(*i)
	}
	return luo
}

// AddInstallments adds i to the "installments" field.
func (luo *LoanUpdateOne) AddInstallments(i int) *LoanUpdateOne {
	luo.mutation.AddInstallments(i)
	return luo
}

// SetMaturityDate sets the "maturityDate" field.
func (luo *LoanUpdateOne) SetMaturityDate(t time.Time) *LoanUpdateOne {
	luo.mutation.SetMaturityDate(t)
	return luo
}

// SetNillableMaturityDate sets the "maturityDate" field if the given value is not nil.
func (luo *LoanUpdateOne) SetNillableMaturityDate(t *time.Time) *LoanUpdateOne {
	if t != nil {
		luo.SetMaturityDate(*t)
	}
	return luo
}

// SetNextPayment sets the "nextPayment" field.
func (luo *LoanUpdateOne) SetNextPayment(t time.Time) *LoanUpdateOne {
	luo.mutation.SetNextPayment(t)
	return luo
}

// SetNillableNextPayment sets the "nextPayment" field if the given value is not nil.
func (luo *LoanUpdateOne) SetNillableNextPayment(t *time.Time) *LoanUpdateOne {
	if t != nil {
		luo.SetNextPayment(*t)
	}
	return luo
}

// ClearNextPayment clears the value of the "nextPayment" field.
func (luo *LoanUpdateOne) ClearNextPayment() *LoanUpdateOne {
	luo.mutation.ClearNextPayment()
	return luo
}

// SetNextPaymentAmount sets the "nextPaymentAmount" field.
func (luo *LoanUpdateOne) SetNextPaymentAmount(f float64) *LoanUpdateOne {
	luo.mutation.ResetNextPaymentAmount()
	luo.mutation.SetNextPaymentAmount(f)
	return luo
}

// SetNillableNextPaymentAmount sets the "nextPaymentAmount" field if the given value is not nil.
func (luo *LoanUpdateOne) SetNillableNextPaymentAmount(f *float64) *LoanUpdateOne {
	if f != nil {
		luo.SetNextPaymentAmount(*f)
	}
	return luo
}

// AddNextPaymentAmount adds f to the "nextPaymentAmount" field.
func (luo *LoanUpdateOne) AddNextPaymentAmount(f float64) *LoanUpdateOne {
	luo.mutation.AddNextPaymentAmount(f)
	return luo
}

// ClearNextPaymentAmount clears the value of the "nextPaymentAmount" field.
func (luo *LoanUpdateOne) ClearNextPaymentAmount() *LoanUpdateOne {
	luo.mutation.ClearNextPaymentAmount()
	return luo
}

// SetOutstandingAmount sets the "outstandingAmount" field.
func (luo *LoanUpdateOne) SetOutstandingAmount(f float64) *LoanUpdateOne {
	luo.mutation.ResetOutstandingAmount()
	luo.mutation.SetOutstandingAmount(f)
	return luo
}

// SetNillableOutstandingAmount sets the "outstandingAmount" field if the given value is not nil.
func (luo *LoanUpdateOne) SetNillableOutstandingAmount(f *float64) *LoanUpdateOne {
	if f != nil {
		luo.SetOutstandingAmount(*f)
	}
	return luo
}

// AddOutstandingAmount adds f to the "outstandingAmount" field.
func (luo *LoanUpdateOne) AddOutstandingAmount(f float64) *LoanUpdateOne {
	luo.mutation.AddOutstandingAmount(f)
	return luo
}

// SetPaymentFrequency sets the "paymentFrequency" field.
func (luo *LoanUpdateOne) SetPaymentFrequency(lf loan.PaymentFrequency) *LoanUpdateOne {
	luo.mutation.SetPaymentFrequency(lf)
	return luo
}

// SetNillablePaymentFrequency sets the "paymentFrequency" field if the given value is not nil.
func (luo *LoanUpdateOne) SetNillablePaymentFrequency(lf *loan.PaymentFrequency) *LoanUpdateOne {
	if lf != nil {
		luo.SetPaymentFrequency(*lf)
	}
	return luo
}

// SetPaidInstallments sets the "paidInstallments" field.
func (luo *LoanUpdateOne) SetPaidInstallments(i int) *LoanUpdateOne {
	luo.mutation.ResetPaidInstallments()
	luo.mutation.SetPaidInstallments(i)
	return luo
}

// SetNillablePaidInstallments sets the "paidInstallments" field if the given value is not nil.
func (luo *LoanUpdateOne) SetNillablePaidInstallments(i *int) *LoanUpdateOne {
	if i != nil {
		luo.SetPaidInstallments(*i)
	}
	return luo
}

// AddPaidInstallments adds i to the "paidInstallments" field.
func (luo *LoanUpdateOne) AddPaidInstallments(i int) *LoanUpdateOne {
	luo.mutation.AddPaidInstallments(i)
	return luo
}

// SetProvider sets the "provider" field.
func (luo *LoanUpdateOne) SetProvider(s string) *LoanUpdateOne {
	luo.mutation.SetProvider(s)
	return luo
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (luo *LoanUpdateOne) SetNillableProvider(s *string) *LoanUpdateOne {
	if s != nil {
		luo.SetProvider(*s)
	}
	return luo
}

// SetStartDate sets the "startDate" field.
func (luo *LoanUpdateOne) SetStartDate(t time.Time) *LoanUpdateOne {
	luo.mutation.SetStartDate(t)
	return luo
}

// SetNillableStartDate sets the "startDate" field if the given value is not nil.
func (luo *LoanUpdateOne) SetNillableStartDate(t *time.Time) *LoanUpdateOne {
	if t != nil {
		luo.SetStartDate(*t)
	}
	return luo
}

// SetStatus sets the "status" field.
func (luo *LoanUpdateOne) SetStatus(l loan.Status) *LoanUpdateOne {
	luo.mutation.SetStatus(l)
	return luo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (luo *LoanUpdateOne) SetNillableStatus(l *loan.Status) *LoanUpdateOne {
	if l != nil {
		luo.SetStatus(*l)
	}
	return luo
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (luo *LoanUpdateOne) SetCompanyID(id int) *LoanUpdateOne {
	luo.mutation.SetCompanyID(id)
	return luo
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (luo *LoanUpdateOne) SetNillableCompanyID(id *int) *LoanUpdateOne {
	if id != nil {
		luo = luo.SetCompanyID(*id)
	}
	return luo
}

// SetCompany sets the "company" edge to the Company entity.
func (luo *LoanUpdateOne) SetCompany(c *Company) *LoanUpdateOne {
	return luo.SetCompanyID(c.ID)
}

// Mutation returns the LoanMutation object of the builder.
func (luo *LoanUpdateOne) Mutation() *LoanMutation {
	return luo.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (luo *LoanUpdateOne) ClearCompany() *LoanUpdateOne {
	luo.mutation.ClearCompany()
	return luo
}

// Where appends a list predicates to the LoanUpdate builder.
func (luo *LoanUpdateOne) Where(ps ...predicate.Loan) *LoanUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LoanUpdateOne) Select(field string, fields ...string) *LoanUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Loan entity.
func (luo *LoanUpdateOne) Save(ctx context.Context) (*Loan, error) {
	luo.defaults()
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LoanUpdateOne) SaveX(ctx context.Context) *Loan {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LoanUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LoanUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (luo *LoanUpdateOne) defaults() {
	if _, ok := luo.mutation.UpdatedAt(); !ok {
		v := loan.UpdateDefaultUpdatedAt()
		luo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luo *LoanUpdateOne) check() error {
	if v, ok := luo.mutation.Amount(); ok {
		if err := loan.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`generated: validator failed for field "Loan.amount": %w`, err)}
		}
	}
	if v, ok := luo.mutation.Category(); ok {
		if err := loan.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`generated: validator failed for field "Loan.category": %w`, err)}
		}
	}
	if v, ok := luo.mutation.InterestRate(); ok {
		if err := loan.InterestRateValidator(v); err != nil {
			return &ValidationError{Name: "interestRate", err: fmt.Errorf(`generated: validator failed for field "Loan.interestRate": %w`, err)}
		}
	}
	if v, ok := luo.mutation.Installments(); ok {
		if err := loan.InstallmentsValidator(v); err != nil {
			return &ValidationError{Name: "installments", err: fmt.Errorf(`generated: validator failed for field "Loan.installments": %w`, err)}
		}
	}
	if v, ok := luo.mutation.NextPaymentAmount(); ok {
		if err := loan.NextPaymentAmountValidator(v); err != nil {
			return &ValidationError{Name: "nextPaymentAmount", err: fmt.Errorf(`generated: validator failed for field "Loan.nextPaymentAmount": %w`, err)}
		}
	}
	if v, ok := luo.mutation.OutstandingAmount(); ok {
		if err := loan.OutstandingAmountValidator(v); err != nil {
			return &ValidationError{Name: "outstandingAmount", err: fmt.Errorf(`generated: validator failed for field "Loan.outstandingAmount": %w`, err)}
		}
	}
	if v, ok := luo.mutation.PaymentFrequency(); ok {
		if err := loan.PaymentFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "paymentFrequency", err: fmt.Errorf(`generated: validator failed for field "Loan.paymentFrequency": %w`, err)}
		}
	}
	if v, ok := luo.mutation.Provider(); ok {
		if err := loan.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`generated: validator failed for field "Loan.provider": %w`, err)}
		}
	}
	if v, ok := luo.mutation.Status(); ok {
		if err := loan.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Loan.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (luo *LoanUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LoanUpdateOne {
	luo.modifiers = append(luo.modifiers, modifiers...)
	return luo
}

func (luo *LoanUpdateOne) sqlSave(ctx context.Context) (_node *Loan, err error) {
	if err := luo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(loan.Table, loan.Columns, sqlgraph.NewFieldSpec(loan.FieldID, field.TypeInt))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Loan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, loan.FieldID)
		for _, f := range fields {
			if !loan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != loan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.UpdatedAt(); ok {
		_spec.SetField(loan.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := luo.mutation.DeletedAt(); ok {
		_spec.SetField(loan.FieldDeletedAt, field.TypeTime, value)
	}
	if luo.mutation.DeletedAtCleared() {
		_spec.ClearField(loan.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := luo.mutation.Amount(); ok {
		_spec.SetField(loan.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := luo.mutation.AddedAmount(); ok {
		_spec.AddField(loan.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := luo.mutation.Category(); ok {
		_spec.SetField(loan.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := luo.mutation.Collateral(); ok {
		_spec.SetField(loan.FieldCollateral, field.TypeString, value)
	}
	if luo.mutation.CollateralCleared() {
		_spec.ClearField(loan.FieldCollateral, field.TypeString)
	}
	if value, ok := luo.mutation.Description(); ok {
		_spec.SetField(loan.FieldDescription, field.TypeString, value)
	}
	if luo.mutation.DescriptionCleared() {
		_spec.ClearField(loan.FieldDescription, field.TypeString)
	}
	if value, ok := luo.mutation.InterestRate(); ok {
		_spec.SetField(loan.FieldInterestRate, field.TypeFloat64, value)
	}
	if value, ok := luo.mutation.AddedInterestRate(); ok {
		_spec.AddField(loan.FieldInterestRate, field.TypeFloat64, value)
	}
	if value, ok := luo.mutation.Installments(); ok {
		_spec.SetField(loan.FieldInstallments, field.TypeInt, value)
	}
	if value, ok := luo.mutation.AddedInstallments(); ok {
		_spec.AddField(loan.FieldInstallments, field.TypeInt, value)
	}
	if value, ok := luo.mutation.MaturityDate(); ok {
		_spec.SetField(loan.FieldMaturityDate, field.TypeTime, value)
	}
	if value, ok := luo.mutation.NextPayment(); ok {
		_spec.SetField(loan.FieldNextPayment, field.TypeTime, value)
	}
	if luo.mutation.NextPaymentCleared() {
		_spec.ClearField(loan.FieldNextPayment, field.TypeTime)
	}
	if value, ok := luo.mutation.NextPaymentAmount(); ok {
		_spec.SetField(loan.FieldNextPaymentAmount, field.TypeFloat64, value)
	}
	if value, ok := luo.mutation.AddedNextPaymentAmount(); ok {
		_spec.AddField(loan.FieldNextPaymentAmount, field.TypeFloat64, value)
	}
	if luo.mutation.NextPaymentAmountCleared() {
		_spec.ClearField(loan.FieldNextPaymentAmount, field.TypeFloat64)
	}
	if value, ok := luo.mutation.OutstandingAmount(); ok {
		_spec.SetField(loan.FieldOutstandingAmount, field.TypeFloat64, value)
	}
	if value, ok := luo.mutation.AddedOutstandingAmount(); ok {
		_spec.AddField(loan.FieldOutstandingAmount, field.TypeFloat64, value)
	}
	if value, ok := luo.mutation.PaymentFrequency(); ok {
		_spec.SetField(loan.FieldPaymentFrequency, field.TypeEnum, value)
	}
	if value, ok := luo.mutation.PaidInstallments(); ok {
		_spec.SetField(loan.FieldPaidInstallments, field.TypeInt, value)
	}
	if value, ok := luo.mutation.AddedPaidInstallments(); ok {
		_spec.AddField(loan.FieldPaidInstallments, field.TypeInt, value)
	}
	if value, ok := luo.mutation.Provider(); ok {
		_spec.SetField(loan.FieldProvider, field.TypeString, value)
	}
	if value, ok := luo.mutation.StartDate(); ok {
		_spec.SetField(loan.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := luo.mutation.Status(); ok {
		_spec.SetField(loan.FieldStatus, field.TypeEnum, value)
	}
	if luo.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loan.CompanyTable,
			Columns: []string{loan.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loan.CompanyTable,
			Columns: []string{loan.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(luo.modifiers...)
	_node = &Loan{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
