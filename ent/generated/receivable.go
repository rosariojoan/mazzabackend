// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"mazza/ent/generated/company"
	"mazza/ent/generated/invoice"
	"mazza/ent/generated/receivable"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Receivable is the model entity for the Receivable schema.
type Receivable struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// DeletedAt holds the value of the "deletedAt" field.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	// EntryGroup holds the value of the "entryGroup" field.
	EntryGroup int `json:"entryGroup,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// OutstandingBalance holds the value of the "outstandingBalance" field.
	OutstandingBalance float64 `json:"outstandingBalance,omitempty"`
	// TotalTransaction holds the value of the "totalTransaction" field.
	TotalTransaction float64 `json:"totalTransaction,omitempty"`
	// DueDate holds the value of the "dueDate" field.
	DueDate time.Time `json:"dueDate,omitempty"`
	// Status holds the value of the "status" field.
	Status receivable.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReceivableQuery when eager-loading is set.
	Edges                ReceivableEdges `json:"edges"`
	company_receivables  *int
	customer_receivables *int
	invoice_receivable   *int
	selectValues         sql.SelectValues
}

// ReceivableEdges holds the relations/edges for other nodes in the graph.
type ReceivableEdges struct {
	// Company holds the value of the company edge.
	Company *Company `json:"company,omitempty"`
	// Invoice holds the value of the invoice edge.
	Invoice *Invoice `json:"invoice,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// CompanyOrErr returns the Company value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReceivableEdges) CompanyOrErr() (*Company, error) {
	if e.Company != nil {
		return e.Company, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: company.Label}
	}
	return nil, &NotLoadedError{edge: "company"}
}

// InvoiceOrErr returns the Invoice value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReceivableEdges) InvoiceOrErr() (*Invoice, error) {
	if e.Invoice != nil {
		return e.Invoice, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: invoice.Label}
	}
	return nil, &NotLoadedError{edge: "invoice"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Receivable) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case receivable.FieldOutstandingBalance, receivable.FieldTotalTransaction:
			values[i] = new(sql.NullFloat64)
		case receivable.FieldID, receivable.FieldEntryGroup:
			values[i] = new(sql.NullInt64)
		case receivable.FieldName, receivable.FieldStatus:
			values[i] = new(sql.NullString)
		case receivable.FieldCreatedAt, receivable.FieldUpdatedAt, receivable.FieldDeletedAt, receivable.FieldDate, receivable.FieldDueDate:
			values[i] = new(sql.NullTime)
		case receivable.ForeignKeys[0]: // company_receivables
			values[i] = new(sql.NullInt64)
		case receivable.ForeignKeys[1]: // customer_receivables
			values[i] = new(sql.NullInt64)
		case receivable.ForeignKeys[2]: // invoice_receivable
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Receivable fields.
func (r *Receivable) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case receivable.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case receivable.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case receivable.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case receivable.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deletedAt", values[i])
			} else if value.Valid {
				r.DeletedAt = new(time.Time)
				*r.DeletedAt = value.Time
			}
		case receivable.FieldEntryGroup:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field entryGroup", values[i])
			} else if value.Valid {
				r.EntryGroup = int(value.Int64)
			}
		case receivable.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				r.Date = value.Time
			}
		case receivable.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case receivable.FieldOutstandingBalance:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field outstandingBalance", values[i])
			} else if value.Valid {
				r.OutstandingBalance = value.Float64
			}
		case receivable.FieldTotalTransaction:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field totalTransaction", values[i])
			} else if value.Valid {
				r.TotalTransaction = value.Float64
			}
		case receivable.FieldDueDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field dueDate", values[i])
			} else if value.Valid {
				r.DueDate = value.Time
			}
		case receivable.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				r.Status = receivable.Status(value.String)
			}
		case receivable.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field company_receivables", value)
			} else if value.Valid {
				r.company_receivables = new(int)
				*r.company_receivables = int(value.Int64)
			}
		case receivable.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field customer_receivables", value)
			} else if value.Valid {
				r.customer_receivables = new(int)
				*r.customer_receivables = int(value.Int64)
			}
		case receivable.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field invoice_receivable", value)
			} else if value.Valid {
				r.invoice_receivable = new(int)
				*r.invoice_receivable = int(value.Int64)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Receivable.
// This includes values selected through modifiers, order, etc.
func (r *Receivable) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryCompany queries the "company" edge of the Receivable entity.
func (r *Receivable) QueryCompany() *CompanyQuery {
	return NewReceivableClient(r.config).QueryCompany(r)
}

// QueryInvoice queries the "invoice" edge of the Receivable entity.
func (r *Receivable) QueryInvoice() *InvoiceQuery {
	return NewReceivableClient(r.config).QueryInvoice(r)
}

// Update returns a builder for updating this Receivable.
// Note that you need to call Receivable.Unwrap() before calling this method if this Receivable
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Receivable) Update() *ReceivableUpdateOne {
	return NewReceivableClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Receivable entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Receivable) Unwrap() *Receivable {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("generated: Receivable is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Receivable) String() string {
	var builder strings.Builder
	builder.WriteString("Receivable(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("createdAt=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := r.DeletedAt; v != nil {
		builder.WriteString("deletedAt=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("entryGroup=")
	builder.WriteString(fmt.Sprintf("%v", r.EntryGroup))
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(r.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ")
	builder.WriteString("outstandingBalance=")
	builder.WriteString(fmt.Sprintf("%v", r.OutstandingBalance))
	builder.WriteString(", ")
	builder.WriteString("totalTransaction=")
	builder.WriteString(fmt.Sprintf("%v", r.TotalTransaction))
	builder.WriteString(", ")
	builder.WriteString("dueDate=")
	builder.WriteString(r.DueDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", r.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Receivables is a parsable slice of Receivable.
type Receivables []*Receivable
