// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"mazza/ent/generated/payable"
	"mazza/ent/generated/supplier"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Payable is the model entity for the Payable schema.
type Payable struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// DeletedAt holds the value of the "deletedAt" field.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	// EntryGroup holds the value of the "entryGroup" field.
	EntryGroup int `json:"entryGroup,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// OutstandingBalance holds the value of the "outstandingBalance" field.
	OutstandingBalance float64 `json:"outstandingBalance,omitempty"`
	// TotalTransaction holds the value of the "totalTransaction" field.
	TotalTransaction float64 `json:"totalTransaction,omitempty"`
	// DaysDue holds the value of the "daysDue" field.
	DaysDue int `json:"daysDue,omitempty"`
	// Status holds the value of the "status" field.
	Status payable.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PayableQuery when eager-loading is set.
	Edges             PayableEdges `json:"edges"`
	supplier_payables *int
	selectValues      sql.SelectValues
}

// PayableEdges holds the relations/edges for other nodes in the graph.
type PayableEdges struct {
	// Supplier holds the value of the supplier edge.
	Supplier *Supplier `json:"supplier,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// SupplierOrErr returns the Supplier value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PayableEdges) SupplierOrErr() (*Supplier, error) {
	if e.Supplier != nil {
		return e.Supplier, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: supplier.Label}
	}
	return nil, &NotLoadedError{edge: "supplier"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Payable) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case payable.FieldOutstandingBalance, payable.FieldTotalTransaction:
			values[i] = new(sql.NullFloat64)
		case payable.FieldID, payable.FieldEntryGroup, payable.FieldDaysDue:
			values[i] = new(sql.NullInt64)
		case payable.FieldStatus:
			values[i] = new(sql.NullString)
		case payable.FieldCreatedAt, payable.FieldUpdatedAt, payable.FieldDeletedAt, payable.FieldDate:
			values[i] = new(sql.NullTime)
		case payable.ForeignKeys[0]: // supplier_payables
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Payable fields.
func (pa *Payable) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case payable.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = int(value.Int64)
		case payable.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				pa.CreatedAt = value.Time
			}
		case payable.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				pa.UpdatedAt = value.Time
			}
		case payable.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deletedAt", values[i])
			} else if value.Valid {
				pa.DeletedAt = new(time.Time)
				*pa.DeletedAt = value.Time
			}
		case payable.FieldEntryGroup:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field entryGroup", values[i])
			} else if value.Valid {
				pa.EntryGroup = int(value.Int64)
			}
		case payable.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				pa.Date = value.Time
			}
		case payable.FieldOutstandingBalance:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field outstandingBalance", values[i])
			} else if value.Valid {
				pa.OutstandingBalance = value.Float64
			}
		case payable.FieldTotalTransaction:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field totalTransaction", values[i])
			} else if value.Valid {
				pa.TotalTransaction = value.Float64
			}
		case payable.FieldDaysDue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field daysDue", values[i])
			} else if value.Valid {
				pa.DaysDue = int(value.Int64)
			}
		case payable.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pa.Status = payable.Status(value.String)
			}
		case payable.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field supplier_payables", value)
			} else if value.Valid {
				pa.supplier_payables = new(int)
				*pa.supplier_payables = int(value.Int64)
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Payable.
// This includes values selected through modifiers, order, etc.
func (pa *Payable) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// QuerySupplier queries the "supplier" edge of the Payable entity.
func (pa *Payable) QuerySupplier() *SupplierQuery {
	return NewPayableClient(pa.config).QuerySupplier(pa)
}

// Update returns a builder for updating this Payable.
// Note that you need to call Payable.Unwrap() before calling this method if this Payable
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Payable) Update() *PayableUpdateOne {
	return NewPayableClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the Payable entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Payable) Unwrap() *Payable {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("generated: Payable is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Payable) String() string {
	var builder strings.Builder
	builder.WriteString("Payable(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("createdAt=")
	builder.WriteString(pa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(pa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pa.DeletedAt; v != nil {
		builder.WriteString("deletedAt=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("entryGroup=")
	builder.WriteString(fmt.Sprintf("%v", pa.EntryGroup))
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(pa.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("outstandingBalance=")
	builder.WriteString(fmt.Sprintf("%v", pa.OutstandingBalance))
	builder.WriteString(", ")
	builder.WriteString("totalTransaction=")
	builder.WriteString(fmt.Sprintf("%v", pa.TotalTransaction))
	builder.WriteString(", ")
	builder.WriteString("daysDue=")
	builder.WriteString(fmt.Sprintf("%v", pa.DaysDue))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pa.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Payables is a parsable slice of Payable.
type Payables []*Payable
