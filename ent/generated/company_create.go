// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"mazza/ent/generated/accountingentry"
	"mazza/ent/generated/company"
	"mazza/ent/generated/customer"
	"mazza/ent/generated/employee"
	"mazza/ent/generated/file"
	"mazza/ent/generated/product"
	"mazza/ent/generated/project"
	"mazza/ent/generated/supplier"
	"mazza/ent/generated/token"
	"mazza/ent/generated/treasury"
	"mazza/ent/generated/user"
	"mazza/ent/generated/userrole"
	"mazza/ent/generated/workshift"
	"mazza/ent/generated/worktag"
	"mazza/ent/generated/worktask"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CompanyCreate is the builder for creating a Company entity.
type CompanyCreate struct {
	config
	mutation *CompanyMutation
	hooks    []Hook
}

// SetCreatedAt sets the "createdAt" field.
func (cc *CompanyCreate) SetCreatedAt(t time.Time) *CompanyCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (cc *CompanyCreate) SetNillableCreatedAt(t *time.Time) *CompanyCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updatedAt" field.
func (cc *CompanyCreate) SetUpdatedAt(t time.Time) *CompanyCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (cc *CompanyCreate) SetNillableUpdatedAt(t *time.Time) *CompanyCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetDeletedAt sets the "deletedAt" field.
func (cc *CompanyCreate) SetDeletedAt(t time.Time) *CompanyCreate {
	cc.mutation.SetDeletedAt(t)
	return cc
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (cc *CompanyCreate) SetNillableDeletedAt(t *time.Time) *CompanyCreate {
	if t != nil {
		cc.SetDeletedAt(*t)
	}
	return cc
}

// SetAddress sets the "address" field.
func (cc *CompanyCreate) SetAddress(s string) *CompanyCreate {
	cc.mutation.SetAddress(s)
	return cc
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (cc *CompanyCreate) SetNillableAddress(s *string) *CompanyCreate {
	if s != nil {
		cc.SetAddress(*s)
	}
	return cc
}

// SetBaseCurrency sets the "baseCurrency" field.
func (cc *CompanyCreate) SetBaseCurrency(s string) *CompanyCreate {
	cc.mutation.SetBaseCurrency(s)
	return cc
}

// SetNillableBaseCurrency sets the "baseCurrency" field if the given value is not nil.
func (cc *CompanyCreate) SetNillableBaseCurrency(s *string) *CompanyCreate {
	if s != nil {
		cc.SetBaseCurrency(*s)
	}
	return cc
}

// SetCeoName sets the "ceoName" field.
func (cc *CompanyCreate) SetCeoName(s string) *CompanyCreate {
	cc.mutation.SetCeoName(s)
	return cc
}

// SetNillableCeoName sets the "ceoName" field if the given value is not nil.
func (cc *CompanyCreate) SetNillableCeoName(s *string) *CompanyCreate {
	if s != nil {
		cc.SetCeoName(*s)
	}
	return cc
}

// SetCity sets the "city" field.
func (cc *CompanyCreate) SetCity(s string) *CompanyCreate {
	cc.mutation.SetCity(s)
	return cc
}

// SetCountry sets the "country" field.
func (cc *CompanyCreate) SetCountry(s string) *CompanyCreate {
	cc.mutation.SetCountry(s)
	return cc
}

// SetEstablishedAt sets the "establishedAt" field.
func (cc *CompanyCreate) SetEstablishedAt(t time.Time) *CompanyCreate {
	cc.mutation.SetEstablishedAt(t)
	return cc
}

// SetDescription sets the "description" field.
func (cc *CompanyCreate) SetDescription(s string) *CompanyCreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cc *CompanyCreate) SetNillableDescription(s *string) *CompanyCreate {
	if s != nil {
		cc.SetDescription(*s)
	}
	return cc
}

// SetEmail sets the "email" field.
func (cc *CompanyCreate) SetEmail(s string) *CompanyCreate {
	cc.mutation.SetEmail(s)
	return cc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cc *CompanyCreate) SetNillableEmail(s *string) *CompanyCreate {
	if s != nil {
		cc.SetEmail(*s)
	}
	return cc
}

// SetLastEntryDate sets the "lastEntryDate" field.
func (cc *CompanyCreate) SetLastEntryDate(t time.Time) *CompanyCreate {
	cc.mutation.SetLastEntryDate(t)
	return cc
}

// SetLastInvoiceNumber sets the "lastInvoiceNumber" field.
func (cc *CompanyCreate) SetLastInvoiceNumber(i int32) *CompanyCreate {
	cc.mutation.SetLastInvoiceNumber(i)
	return cc
}

// SetNillableLastInvoiceNumber sets the "lastInvoiceNumber" field if the given value is not nil.
func (cc *CompanyCreate) SetNillableLastInvoiceNumber(i *int32) *CompanyCreate {
	if i != nil {
		cc.SetLastInvoiceNumber(*i)
	}
	return cc
}

// SetLogo sets the "logo" field.
func (cc *CompanyCreate) SetLogo(s string) *CompanyCreate {
	cc.mutation.SetLogo(s)
	return cc
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (cc *CompanyCreate) SetNillableLogo(s *string) *CompanyCreate {
	if s != nil {
		cc.SetLogo(*s)
	}
	return cc
}

// SetName sets the "name" field.
func (cc *CompanyCreate) SetName(s string) *CompanyCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetNumberOfEmployees sets the "numberOfEmployees" field.
func (cc *CompanyCreate) SetNumberOfEmployees(i int32) *CompanyCreate {
	cc.mutation.SetNumberOfEmployees(i)
	return cc
}

// SetNillableNumberOfEmployees sets the "numberOfEmployees" field if the given value is not nil.
func (cc *CompanyCreate) SetNillableNumberOfEmployees(i *int32) *CompanyCreate {
	if i != nil {
		cc.SetNumberOfEmployees(*i)
	}
	return cc
}

// SetPhone sets the "phone" field.
func (cc *CompanyCreate) SetPhone(s string) *CompanyCreate {
	cc.mutation.SetPhone(s)
	return cc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (cc *CompanyCreate) SetNillablePhone(s *string) *CompanyCreate {
	if s != nil {
		cc.SetPhone(*s)
	}
	return cc
}

// SetSector sets the "sector" field.
func (cc *CompanyCreate) SetSector(s string) *CompanyCreate {
	cc.mutation.SetSector(s)
	return cc
}

// SetNillableSector sets the "sector" field if the given value is not nil.
func (cc *CompanyCreate) SetNillableSector(s *string) *CompanyCreate {
	if s != nil {
		cc.SetSector(*s)
	}
	return cc
}

// SetTaxId sets the "taxId" field.
func (cc *CompanyCreate) SetTaxId(s string) *CompanyCreate {
	cc.mutation.SetTaxId(s)
	return cc
}

// SetVatRate sets the "vatRate" field.
func (cc *CompanyCreate) SetVatRate(f float64) *CompanyCreate {
	cc.mutation.SetVatRate(f)
	return cc
}

// SetNillableVatRate sets the "vatRate" field if the given value is not nil.
func (cc *CompanyCreate) SetNillableVatRate(f *float64) *CompanyCreate {
	if f != nil {
		cc.SetVatRate(*f)
	}
	return cc
}

// SetWebsite sets the "website" field.
func (cc *CompanyCreate) SetWebsite(s string) *CompanyCreate {
	cc.mutation.SetWebsite(s)
	return cc
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (cc *CompanyCreate) SetNillableWebsite(s *string) *CompanyCreate {
	if s != nil {
		cc.SetWebsite(*s)
	}
	return cc
}

// SetIncompleteSetup sets the "incompleteSetup" field.
func (cc *CompanyCreate) SetIncompleteSetup(b bool) *CompanyCreate {
	cc.mutation.SetIncompleteSetup(b)
	return cc
}

// SetNillableIncompleteSetup sets the "incompleteSetup" field if the given value is not nil.
func (cc *CompanyCreate) SetNillableIncompleteSetup(b *bool) *CompanyCreate {
	if b != nil {
		cc.SetIncompleteSetup(*b)
	}
	return cc
}

// AddAvailableRoleIDs adds the "availableRoles" edge to the UserRole entity by IDs.
func (cc *CompanyCreate) AddAvailableRoleIDs(ids ...int) *CompanyCreate {
	cc.mutation.AddAvailableRoleIDs(ids...)
	return cc
}

// AddAvailableRoles adds the "availableRoles" edges to the UserRole entity.
func (cc *CompanyCreate) AddAvailableRoles(u ...*UserRole) *CompanyCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cc.AddAvailableRoleIDs(ids...)
}

// AddAccountingEntryIDs adds the "accountingEntries" edge to the AccountingEntry entity by IDs.
func (cc *CompanyCreate) AddAccountingEntryIDs(ids ...int) *CompanyCreate {
	cc.mutation.AddAccountingEntryIDs(ids...)
	return cc
}

// AddAccountingEntries adds the "accountingEntries" edges to the AccountingEntry entity.
func (cc *CompanyCreate) AddAccountingEntries(a ...*AccountingEntry) *CompanyCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cc.AddAccountingEntryIDs(ids...)
}

// AddCustomerIDs adds the "customers" edge to the Customer entity by IDs.
func (cc *CompanyCreate) AddCustomerIDs(ids ...int) *CompanyCreate {
	cc.mutation.AddCustomerIDs(ids...)
	return cc
}

// AddCustomers adds the "customers" edges to the Customer entity.
func (cc *CompanyCreate) AddCustomers(c ...*Customer) *CompanyCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddCustomerIDs(ids...)
}

// AddEmployeeIDs adds the "employees" edge to the Employee entity by IDs.
func (cc *CompanyCreate) AddEmployeeIDs(ids ...int) *CompanyCreate {
	cc.mutation.AddEmployeeIDs(ids...)
	return cc
}

// AddEmployees adds the "employees" edges to the Employee entity.
func (cc *CompanyCreate) AddEmployees(e ...*Employee) *CompanyCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cc.AddEmployeeIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (cc *CompanyCreate) AddFileIDs(ids ...int) *CompanyCreate {
	cc.mutation.AddFileIDs(ids...)
	return cc
}

// AddFiles adds the "files" edges to the File entity.
func (cc *CompanyCreate) AddFiles(f ...*File) *CompanyCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cc.AddFileIDs(ids...)
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (cc *CompanyCreate) AddProductIDs(ids ...int) *CompanyCreate {
	cc.mutation.AddProductIDs(ids...)
	return cc
}

// AddProducts adds the "products" edges to the Product entity.
func (cc *CompanyCreate) AddProducts(p ...*Product) *CompanyCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cc.AddProductIDs(ids...)
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (cc *CompanyCreate) AddProjectIDs(ids ...int) *CompanyCreate {
	cc.mutation.AddProjectIDs(ids...)
	return cc
}

// AddProjects adds the "projects" edges to the Project entity.
func (cc *CompanyCreate) AddProjects(p ...*Project) *CompanyCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cc.AddProjectIDs(ids...)
}

// AddSupplierIDs adds the "suppliers" edge to the Supplier entity by IDs.
func (cc *CompanyCreate) AddSupplierIDs(ids ...int) *CompanyCreate {
	cc.mutation.AddSupplierIDs(ids...)
	return cc
}

// AddSuppliers adds the "suppliers" edges to the Supplier entity.
func (cc *CompanyCreate) AddSuppliers(s ...*Supplier) *CompanyCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cc.AddSupplierIDs(ids...)
}

// AddTokenIDs adds the "tokens" edge to the Token entity by IDs.
func (cc *CompanyCreate) AddTokenIDs(ids ...int) *CompanyCreate {
	cc.mutation.AddTokenIDs(ids...)
	return cc
}

// AddTokens adds the "tokens" edges to the Token entity.
func (cc *CompanyCreate) AddTokens(t ...*Token) *CompanyCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cc.AddTokenIDs(ids...)
}

// AddTreasuryIDs adds the "treasuries" edge to the Treasury entity by IDs.
func (cc *CompanyCreate) AddTreasuryIDs(ids ...int) *CompanyCreate {
	cc.mutation.AddTreasuryIDs(ids...)
	return cc
}

// AddTreasuries adds the "treasuries" edges to the Treasury entity.
func (cc *CompanyCreate) AddTreasuries(t ...*Treasury) *CompanyCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cc.AddTreasuryIDs(ids...)
}

// AddWorkShiftIDs adds the "workShifts" edge to the Workshift entity by IDs.
func (cc *CompanyCreate) AddWorkShiftIDs(ids ...int) *CompanyCreate {
	cc.mutation.AddWorkShiftIDs(ids...)
	return cc
}

// AddWorkShifts adds the "workShifts" edges to the Workshift entity.
func (cc *CompanyCreate) AddWorkShifts(w ...*Workshift) *CompanyCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cc.AddWorkShiftIDs(ids...)
}

// AddWorkTaskIDs adds the "workTasks" edge to the Worktask entity by IDs.
func (cc *CompanyCreate) AddWorkTaskIDs(ids ...int) *CompanyCreate {
	cc.mutation.AddWorkTaskIDs(ids...)
	return cc
}

// AddWorkTasks adds the "workTasks" edges to the Worktask entity.
func (cc *CompanyCreate) AddWorkTasks(w ...*Worktask) *CompanyCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cc.AddWorkTaskIDs(ids...)
}

// AddWorkTagIDs adds the "workTags" edge to the Worktag entity by IDs.
func (cc *CompanyCreate) AddWorkTagIDs(ids ...int) *CompanyCreate {
	cc.mutation.AddWorkTagIDs(ids...)
	return cc
}

// AddWorkTags adds the "workTags" edges to the Worktag entity.
func (cc *CompanyCreate) AddWorkTags(w ...*Worktag) *CompanyCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cc.AddWorkTagIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (cc *CompanyCreate) AddUserIDs(ids ...int) *CompanyCreate {
	cc.mutation.AddUserIDs(ids...)
	return cc
}

// AddUsers adds the "users" edges to the User entity.
func (cc *CompanyCreate) AddUsers(u ...*User) *CompanyCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cc.AddUserIDs(ids...)
}

// AddDaughterCompanyIDs adds the "daughterCompanies" edge to the Company entity by IDs.
func (cc *CompanyCreate) AddDaughterCompanyIDs(ids ...int) *CompanyCreate {
	cc.mutation.AddDaughterCompanyIDs(ids...)
	return cc
}

// AddDaughterCompanies adds the "daughterCompanies" edges to the Company entity.
func (cc *CompanyCreate) AddDaughterCompanies(c ...*Company) *CompanyCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddDaughterCompanyIDs(ids...)
}

// SetParentCompanyID sets the "parentCompany" edge to the Company entity by ID.
func (cc *CompanyCreate) SetParentCompanyID(id int) *CompanyCreate {
	cc.mutation.SetParentCompanyID(id)
	return cc
}

// SetNillableParentCompanyID sets the "parentCompany" edge to the Company entity by ID if the given value is not nil.
func (cc *CompanyCreate) SetNillableParentCompanyID(id *int) *CompanyCreate {
	if id != nil {
		cc = cc.SetParentCompanyID(*id)
	}
	return cc
}

// SetParentCompany sets the "parentCompany" edge to the Company entity.
func (cc *CompanyCreate) SetParentCompany(c *Company) *CompanyCreate {
	return cc.SetParentCompanyID(c.ID)
}

// Mutation returns the CompanyMutation object of the builder.
func (cc *CompanyCreate) Mutation() *CompanyMutation {
	return cc.mutation
}

// Save creates the Company in the database.
func (cc *CompanyCreate) Save(ctx context.Context) (*Company, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CompanyCreate) SaveX(ctx context.Context) *Company {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CompanyCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CompanyCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CompanyCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := company.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := company.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.BaseCurrency(); !ok {
		v := company.DefaultBaseCurrency
		cc.mutation.SetBaseCurrency(v)
	}
	if _, ok := cc.mutation.LastInvoiceNumber(); !ok {
		v := company.DefaultLastInvoiceNumber
		cc.mutation.SetLastInvoiceNumber(v)
	}
	if _, ok := cc.mutation.NumberOfEmployees(); !ok {
		v := company.DefaultNumberOfEmployees
		cc.mutation.SetNumberOfEmployees(v)
	}
	if _, ok := cc.mutation.VatRate(); !ok {
		v := company.DefaultVatRate
		cc.mutation.SetVatRate(v)
	}
	if _, ok := cc.mutation.IncompleteSetup(); !ok {
		v := company.DefaultIncompleteSetup
		cc.mutation.SetIncompleteSetup(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CompanyCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`generated: missing required field "Company.createdAt"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`generated: missing required field "Company.updatedAt"`)}
	}
	if _, ok := cc.mutation.BaseCurrency(); !ok {
		return &ValidationError{Name: "baseCurrency", err: errors.New(`generated: missing required field "Company.baseCurrency"`)}
	}
	if _, ok := cc.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`generated: missing required field "Company.city"`)}
	}
	if _, ok := cc.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`generated: missing required field "Company.country"`)}
	}
	if _, ok := cc.mutation.EstablishedAt(); !ok {
		return &ValidationError{Name: "establishedAt", err: errors.New(`generated: missing required field "Company.establishedAt"`)}
	}
	if _, ok := cc.mutation.LastEntryDate(); !ok {
		return &ValidationError{Name: "lastEntryDate", err: errors.New(`generated: missing required field "Company.lastEntryDate"`)}
	}
	if v, ok := cc.mutation.LastInvoiceNumber(); ok {
		if err := company.LastInvoiceNumberValidator(v); err != nil {
			return &ValidationError{Name: "lastInvoiceNumber", err: fmt.Errorf(`generated: validator failed for field "Company.lastInvoiceNumber": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "Company.name"`)}
	}
	if _, ok := cc.mutation.NumberOfEmployees(); !ok {
		return &ValidationError{Name: "numberOfEmployees", err: errors.New(`generated: missing required field "Company.numberOfEmployees"`)}
	}
	if v, ok := cc.mutation.NumberOfEmployees(); ok {
		if err := company.NumberOfEmployeesValidator(v); err != nil {
			return &ValidationError{Name: "numberOfEmployees", err: fmt.Errorf(`generated: validator failed for field "Company.numberOfEmployees": %w`, err)}
		}
	}
	if _, ok := cc.mutation.TaxId(); !ok {
		return &ValidationError{Name: "taxId", err: errors.New(`generated: missing required field "Company.taxId"`)}
	}
	if _, ok := cc.mutation.VatRate(); !ok {
		return &ValidationError{Name: "vatRate", err: errors.New(`generated: missing required field "Company.vatRate"`)}
	}
	return nil
}

func (cc *CompanyCreate) sqlSave(ctx context.Context) (*Company, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CompanyCreate) createSpec() (*Company, *sqlgraph.CreateSpec) {
	var (
		_node = &Company{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(company.Table, sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt))
	)
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(company.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(company.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.DeletedAt(); ok {
		_spec.SetField(company.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := cc.mutation.Address(); ok {
		_spec.SetField(company.FieldAddress, field.TypeString, value)
		_node.Address = &value
	}
	if value, ok := cc.mutation.BaseCurrency(); ok {
		_spec.SetField(company.FieldBaseCurrency, field.TypeString, value)
		_node.BaseCurrency = value
	}
	if value, ok := cc.mutation.CeoName(); ok {
		_spec.SetField(company.FieldCeoName, field.TypeString, value)
		_node.CeoName = &value
	}
	if value, ok := cc.mutation.City(); ok {
		_spec.SetField(company.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := cc.mutation.Country(); ok {
		_spec.SetField(company.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if value, ok := cc.mutation.EstablishedAt(); ok {
		_spec.SetField(company.FieldEstablishedAt, field.TypeTime, value)
		_node.EstablishedAt = value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.SetField(company.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := cc.mutation.Email(); ok {
		_spec.SetField(company.FieldEmail, field.TypeString, value)
		_node.Email = &value
	}
	if value, ok := cc.mutation.LastEntryDate(); ok {
		_spec.SetField(company.FieldLastEntryDate, field.TypeTime, value)
		_node.LastEntryDate = &value
	}
	if value, ok := cc.mutation.LastInvoiceNumber(); ok {
		_spec.SetField(company.FieldLastInvoiceNumber, field.TypeInt32, value)
		_node.LastInvoiceNumber = value
	}
	if value, ok := cc.mutation.Logo(); ok {
		_spec.SetField(company.FieldLogo, field.TypeString, value)
		_node.Logo = &value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(company.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.NumberOfEmployees(); ok {
		_spec.SetField(company.FieldNumberOfEmployees, field.TypeInt32, value)
		_node.NumberOfEmployees = value
	}
	if value, ok := cc.mutation.Phone(); ok {
		_spec.SetField(company.FieldPhone, field.TypeString, value)
		_node.Phone = &value
	}
	if value, ok := cc.mutation.Sector(); ok {
		_spec.SetField(company.FieldSector, field.TypeString, value)
		_node.Sector = &value
	}
	if value, ok := cc.mutation.TaxId(); ok {
		_spec.SetField(company.FieldTaxId, field.TypeString, value)
		_node.TaxId = &value
	}
	if value, ok := cc.mutation.VatRate(); ok {
		_spec.SetField(company.FieldVatRate, field.TypeFloat64, value)
		_node.VatRate = value
	}
	if value, ok := cc.mutation.Website(); ok {
		_spec.SetField(company.FieldWebsite, field.TypeString, value)
		_node.Website = &value
	}
	if value, ok := cc.mutation.IncompleteSetup(); ok {
		_spec.SetField(company.FieldIncompleteSetup, field.TypeBool, value)
		_node.IncompleteSetup = value
	}
	if nodes := cc.mutation.AvailableRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.AvailableRolesTable,
			Columns: []string{company.AvailableRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.AccountingEntriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.AccountingEntriesTable,
			Columns: []string{company.AccountingEntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountingentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CustomersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.CustomersTable,
			Columns: []string{company.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.EmployeesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.EmployeesTable,
			Columns: []string{company.EmployeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.FilesTable,
			Columns: []string{company.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.ProductsTable,
			Columns: []string{company.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.ProjectsTable,
			Columns: []string{company.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.SuppliersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.SuppliersTable,
			Columns: []string{company.SuppliersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(supplier.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TokensTable,
			Columns: []string{company.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.TreasuriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TreasuriesTable,
			Columns: []string{company.TreasuriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(treasury.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.WorkShiftsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.WorkShiftsTable,
			Columns: []string{company.WorkShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.WorkTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.WorkTasksTable,
			Columns: []string{company.WorkTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worktask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.WorkTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.WorkTagsTable,
			Columns: []string{company.WorkTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worktag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   company.UsersTable,
			Columns: company.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.DaughterCompaniesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.DaughterCompaniesTable,
			Columns: []string{company.DaughterCompaniesColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ParentCompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   company.ParentCompanyTable,
			Columns: []string{company.ParentCompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.company_daughter_companies = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CompanyCreateBulk is the builder for creating many Company entities in bulk.
type CompanyCreateBulk struct {
	config
	err      error
	builders []*CompanyCreate
}

// Save creates the Company entities in the database.
func (ccb *CompanyCreateBulk) Save(ctx context.Context) ([]*Company, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Company, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CompanyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CompanyCreateBulk) SaveX(ctx context.Context) []*Company {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CompanyCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CompanyCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
