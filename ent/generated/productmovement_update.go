// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"mazza/ent/generated/predicate"
	"mazza/ent/generated/product"
	"mazza/ent/generated/productmovement"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductMovementUpdate is the builder for updating ProductMovement entities.
type ProductMovementUpdate struct {
	config
	hooks    []Hook
	mutation *ProductMovementMutation
}

// Where appends a list predicates to the ProductMovementUpdate builder.
func (pmu *ProductMovementUpdate) Where(ps ...predicate.ProductMovement) *ProductMovementUpdate {
	pmu.mutation.Where(ps...)
	return pmu
}

// SetUpdatedAt sets the "updatedAt" field.
func (pmu *ProductMovementUpdate) SetUpdatedAt(t time.Time) *ProductMovementUpdate {
	pmu.mutation.SetUpdatedAt(t)
	return pmu
}

// SetDeletedAt sets the "deletedAt" field.
func (pmu *ProductMovementUpdate) SetDeletedAt(t time.Time) *ProductMovementUpdate {
	pmu.mutation.SetDeletedAt(t)
	return pmu
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (pmu *ProductMovementUpdate) SetNillableDeletedAt(t *time.Time) *ProductMovementUpdate {
	if t != nil {
		pmu.SetDeletedAt(*t)
	}
	return pmu
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (pmu *ProductMovementUpdate) ClearDeletedAt() *ProductMovementUpdate {
	pmu.mutation.ClearDeletedAt()
	return pmu
}

// SetEntryGroup sets the "entryGroup" field.
func (pmu *ProductMovementUpdate) SetEntryGroup(i int) *ProductMovementUpdate {
	pmu.mutation.ResetEntryGroup()
	pmu.mutation.SetEntryGroup(i)
	return pmu
}

// SetNillableEntryGroup sets the "entryGroup" field if the given value is not nil.
func (pmu *ProductMovementUpdate) SetNillableEntryGroup(i *int) *ProductMovementUpdate {
	if i != nil {
		pmu.SetEntryGroup(*i)
	}
	return pmu
}

// AddEntryGroup adds i to the "entryGroup" field.
func (pmu *ProductMovementUpdate) AddEntryGroup(i int) *ProductMovementUpdate {
	pmu.mutation.AddEntryGroup(i)
	return pmu
}

// SetAverageCost sets the "averageCost" field.
func (pmu *ProductMovementUpdate) SetAverageCost(f float64) *ProductMovementUpdate {
	pmu.mutation.ResetAverageCost()
	pmu.mutation.SetAverageCost(f)
	return pmu
}

// SetNillableAverageCost sets the "averageCost" field if the given value is not nil.
func (pmu *ProductMovementUpdate) SetNillableAverageCost(f *float64) *ProductMovementUpdate {
	if f != nil {
		pmu.SetAverageCost(*f)
	}
	return pmu
}

// AddAverageCost adds f to the "averageCost" field.
func (pmu *ProductMovementUpdate) AddAverageCost(f float64) *ProductMovementUpdate {
	pmu.mutation.AddAverageCost(f)
	return pmu
}

// SetUnitCost sets the "unitCost" field.
func (pmu *ProductMovementUpdate) SetUnitCost(f float64) *ProductMovementUpdate {
	pmu.mutation.ResetUnitCost()
	pmu.mutation.SetUnitCost(f)
	return pmu
}

// SetNillableUnitCost sets the "unitCost" field if the given value is not nil.
func (pmu *ProductMovementUpdate) SetNillableUnitCost(f *float64) *ProductMovementUpdate {
	if f != nil {
		pmu.SetUnitCost(*f)
	}
	return pmu
}

// AddUnitCost adds f to the "unitCost" field.
func (pmu *ProductMovementUpdate) AddUnitCost(f float64) *ProductMovementUpdate {
	pmu.mutation.AddUnitCost(f)
	return pmu
}

// SetPrice sets the "price" field.
func (pmu *ProductMovementUpdate) SetPrice(f float64) *ProductMovementUpdate {
	pmu.mutation.ResetPrice()
	pmu.mutation.SetPrice(f)
	return pmu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (pmu *ProductMovementUpdate) SetNillablePrice(f *float64) *ProductMovementUpdate {
	if f != nil {
		pmu.SetPrice(*f)
	}
	return pmu
}

// AddPrice adds f to the "price" field.
func (pmu *ProductMovementUpdate) AddPrice(f float64) *ProductMovementUpdate {
	pmu.mutation.AddPrice(f)
	return pmu
}

// SetQuantity sets the "quantity" field.
func (pmu *ProductMovementUpdate) SetQuantity(i int) *ProductMovementUpdate {
	pmu.mutation.ResetQuantity()
	pmu.mutation.SetQuantity(i)
	return pmu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (pmu *ProductMovementUpdate) SetNillableQuantity(i *int) *ProductMovementUpdate {
	if i != nil {
		pmu.SetQuantity(*i)
	}
	return pmu
}

// AddQuantity adds i to the "quantity" field.
func (pmu *ProductMovementUpdate) AddQuantity(i int) *ProductMovementUpdate {
	pmu.mutation.AddQuantity(i)
	return pmu
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (pmu *ProductMovementUpdate) SetProductID(id int) *ProductMovementUpdate {
	pmu.mutation.SetProductID(id)
	return pmu
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (pmu *ProductMovementUpdate) SetNillableProductID(id *int) *ProductMovementUpdate {
	if id != nil {
		pmu = pmu.SetProductID(*id)
	}
	return pmu
}

// SetProduct sets the "product" edge to the Product entity.
func (pmu *ProductMovementUpdate) SetProduct(p *Product) *ProductMovementUpdate {
	return pmu.SetProductID(p.ID)
}

// Mutation returns the ProductMovementMutation object of the builder.
func (pmu *ProductMovementUpdate) Mutation() *ProductMovementMutation {
	return pmu.mutation
}

// ClearProduct clears the "product" edge to the Product entity.
func (pmu *ProductMovementUpdate) ClearProduct() *ProductMovementUpdate {
	pmu.mutation.ClearProduct()
	return pmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pmu *ProductMovementUpdate) Save(ctx context.Context) (int, error) {
	pmu.defaults()
	return withHooks(ctx, pmu.sqlSave, pmu.mutation, pmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pmu *ProductMovementUpdate) SaveX(ctx context.Context) int {
	affected, err := pmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pmu *ProductMovementUpdate) Exec(ctx context.Context) error {
	_, err := pmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmu *ProductMovementUpdate) ExecX(ctx context.Context) {
	if err := pmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmu *ProductMovementUpdate) defaults() {
	if _, ok := pmu.mutation.UpdatedAt(); !ok {
		v := productmovement.UpdateDefaultUpdatedAt()
		pmu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmu *ProductMovementUpdate) check() error {
	if v, ok := pmu.mutation.EntryGroup(); ok {
		if err := productmovement.EntryGroupValidator(v); err != nil {
			return &ValidationError{Name: "entryGroup", err: fmt.Errorf(`generated: validator failed for field "ProductMovement.entryGroup": %w`, err)}
		}
	}
	if v, ok := pmu.mutation.AverageCost(); ok {
		if err := productmovement.AverageCostValidator(v); err != nil {
			return &ValidationError{Name: "averageCost", err: fmt.Errorf(`generated: validator failed for field "ProductMovement.averageCost": %w`, err)}
		}
	}
	if v, ok := pmu.mutation.UnitCost(); ok {
		if err := productmovement.UnitCostValidator(v); err != nil {
			return &ValidationError{Name: "unitCost", err: fmt.Errorf(`generated: validator failed for field "ProductMovement.unitCost": %w`, err)}
		}
	}
	if v, ok := pmu.mutation.Price(); ok {
		if err := productmovement.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`generated: validator failed for field "ProductMovement.price": %w`, err)}
		}
	}
	return nil
}

func (pmu *ProductMovementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(productmovement.Table, productmovement.Columns, sqlgraph.NewFieldSpec(productmovement.FieldID, field.TypeInt))
	if ps := pmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmu.mutation.UpdatedAt(); ok {
		_spec.SetField(productmovement.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pmu.mutation.DeletedAt(); ok {
		_spec.SetField(productmovement.FieldDeletedAt, field.TypeTime, value)
	}
	if pmu.mutation.DeletedAtCleared() {
		_spec.ClearField(productmovement.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pmu.mutation.EntryGroup(); ok {
		_spec.SetField(productmovement.FieldEntryGroup, field.TypeInt, value)
	}
	if value, ok := pmu.mutation.AddedEntryGroup(); ok {
		_spec.AddField(productmovement.FieldEntryGroup, field.TypeInt, value)
	}
	if value, ok := pmu.mutation.AverageCost(); ok {
		_spec.SetField(productmovement.FieldAverageCost, field.TypeFloat64, value)
	}
	if value, ok := pmu.mutation.AddedAverageCost(); ok {
		_spec.AddField(productmovement.FieldAverageCost, field.TypeFloat64, value)
	}
	if value, ok := pmu.mutation.UnitCost(); ok {
		_spec.SetField(productmovement.FieldUnitCost, field.TypeFloat64, value)
	}
	if value, ok := pmu.mutation.AddedUnitCost(); ok {
		_spec.AddField(productmovement.FieldUnitCost, field.TypeFloat64, value)
	}
	if value, ok := pmu.mutation.Price(); ok {
		_spec.SetField(productmovement.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := pmu.mutation.AddedPrice(); ok {
		_spec.AddField(productmovement.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := pmu.mutation.Quantity(); ok {
		_spec.SetField(productmovement.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := pmu.mutation.AddedQuantity(); ok {
		_spec.AddField(productmovement.FieldQuantity, field.TypeInt, value)
	}
	if pmu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productmovement.ProductTable,
			Columns: []string{productmovement.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productmovement.ProductTable,
			Columns: []string{productmovement.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productmovement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pmu.mutation.done = true
	return n, nil
}

// ProductMovementUpdateOne is the builder for updating a single ProductMovement entity.
type ProductMovementUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductMovementMutation
}

// SetUpdatedAt sets the "updatedAt" field.
func (pmuo *ProductMovementUpdateOne) SetUpdatedAt(t time.Time) *ProductMovementUpdateOne {
	pmuo.mutation.SetUpdatedAt(t)
	return pmuo
}

// SetDeletedAt sets the "deletedAt" field.
func (pmuo *ProductMovementUpdateOne) SetDeletedAt(t time.Time) *ProductMovementUpdateOne {
	pmuo.mutation.SetDeletedAt(t)
	return pmuo
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (pmuo *ProductMovementUpdateOne) SetNillableDeletedAt(t *time.Time) *ProductMovementUpdateOne {
	if t != nil {
		pmuo.SetDeletedAt(*t)
	}
	return pmuo
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (pmuo *ProductMovementUpdateOne) ClearDeletedAt() *ProductMovementUpdateOne {
	pmuo.mutation.ClearDeletedAt()
	return pmuo
}

// SetEntryGroup sets the "entryGroup" field.
func (pmuo *ProductMovementUpdateOne) SetEntryGroup(i int) *ProductMovementUpdateOne {
	pmuo.mutation.ResetEntryGroup()
	pmuo.mutation.SetEntryGroup(i)
	return pmuo
}

// SetNillableEntryGroup sets the "entryGroup" field if the given value is not nil.
func (pmuo *ProductMovementUpdateOne) SetNillableEntryGroup(i *int) *ProductMovementUpdateOne {
	if i != nil {
		pmuo.SetEntryGroup(*i)
	}
	return pmuo
}

// AddEntryGroup adds i to the "entryGroup" field.
func (pmuo *ProductMovementUpdateOne) AddEntryGroup(i int) *ProductMovementUpdateOne {
	pmuo.mutation.AddEntryGroup(i)
	return pmuo
}

// SetAverageCost sets the "averageCost" field.
func (pmuo *ProductMovementUpdateOne) SetAverageCost(f float64) *ProductMovementUpdateOne {
	pmuo.mutation.ResetAverageCost()
	pmuo.mutation.SetAverageCost(f)
	return pmuo
}

// SetNillableAverageCost sets the "averageCost" field if the given value is not nil.
func (pmuo *ProductMovementUpdateOne) SetNillableAverageCost(f *float64) *ProductMovementUpdateOne {
	if f != nil {
		pmuo.SetAverageCost(*f)
	}
	return pmuo
}

// AddAverageCost adds f to the "averageCost" field.
func (pmuo *ProductMovementUpdateOne) AddAverageCost(f float64) *ProductMovementUpdateOne {
	pmuo.mutation.AddAverageCost(f)
	return pmuo
}

// SetUnitCost sets the "unitCost" field.
func (pmuo *ProductMovementUpdateOne) SetUnitCost(f float64) *ProductMovementUpdateOne {
	pmuo.mutation.ResetUnitCost()
	pmuo.mutation.SetUnitCost(f)
	return pmuo
}

// SetNillableUnitCost sets the "unitCost" field if the given value is not nil.
func (pmuo *ProductMovementUpdateOne) SetNillableUnitCost(f *float64) *ProductMovementUpdateOne {
	if f != nil {
		pmuo.SetUnitCost(*f)
	}
	return pmuo
}

// AddUnitCost adds f to the "unitCost" field.
func (pmuo *ProductMovementUpdateOne) AddUnitCost(f float64) *ProductMovementUpdateOne {
	pmuo.mutation.AddUnitCost(f)
	return pmuo
}

// SetPrice sets the "price" field.
func (pmuo *ProductMovementUpdateOne) SetPrice(f float64) *ProductMovementUpdateOne {
	pmuo.mutation.ResetPrice()
	pmuo.mutation.SetPrice(f)
	return pmuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (pmuo *ProductMovementUpdateOne) SetNillablePrice(f *float64) *ProductMovementUpdateOne {
	if f != nil {
		pmuo.SetPrice(*f)
	}
	return pmuo
}

// AddPrice adds f to the "price" field.
func (pmuo *ProductMovementUpdateOne) AddPrice(f float64) *ProductMovementUpdateOne {
	pmuo.mutation.AddPrice(f)
	return pmuo
}

// SetQuantity sets the "quantity" field.
func (pmuo *ProductMovementUpdateOne) SetQuantity(i int) *ProductMovementUpdateOne {
	pmuo.mutation.ResetQuantity()
	pmuo.mutation.SetQuantity(i)
	return pmuo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (pmuo *ProductMovementUpdateOne) SetNillableQuantity(i *int) *ProductMovementUpdateOne {
	if i != nil {
		pmuo.SetQuantity(*i)
	}
	return pmuo
}

// AddQuantity adds i to the "quantity" field.
func (pmuo *ProductMovementUpdateOne) AddQuantity(i int) *ProductMovementUpdateOne {
	pmuo.mutation.AddQuantity(i)
	return pmuo
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (pmuo *ProductMovementUpdateOne) SetProductID(id int) *ProductMovementUpdateOne {
	pmuo.mutation.SetProductID(id)
	return pmuo
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (pmuo *ProductMovementUpdateOne) SetNillableProductID(id *int) *ProductMovementUpdateOne {
	if id != nil {
		pmuo = pmuo.SetProductID(*id)
	}
	return pmuo
}

// SetProduct sets the "product" edge to the Product entity.
func (pmuo *ProductMovementUpdateOne) SetProduct(p *Product) *ProductMovementUpdateOne {
	return pmuo.SetProductID(p.ID)
}

// Mutation returns the ProductMovementMutation object of the builder.
func (pmuo *ProductMovementUpdateOne) Mutation() *ProductMovementMutation {
	return pmuo.mutation
}

// ClearProduct clears the "product" edge to the Product entity.
func (pmuo *ProductMovementUpdateOne) ClearProduct() *ProductMovementUpdateOne {
	pmuo.mutation.ClearProduct()
	return pmuo
}

// Where appends a list predicates to the ProductMovementUpdate builder.
func (pmuo *ProductMovementUpdateOne) Where(ps ...predicate.ProductMovement) *ProductMovementUpdateOne {
	pmuo.mutation.Where(ps...)
	return pmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pmuo *ProductMovementUpdateOne) Select(field string, fields ...string) *ProductMovementUpdateOne {
	pmuo.fields = append([]string{field}, fields...)
	return pmuo
}

// Save executes the query and returns the updated ProductMovement entity.
func (pmuo *ProductMovementUpdateOne) Save(ctx context.Context) (*ProductMovement, error) {
	pmuo.defaults()
	return withHooks(ctx, pmuo.sqlSave, pmuo.mutation, pmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pmuo *ProductMovementUpdateOne) SaveX(ctx context.Context) *ProductMovement {
	node, err := pmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pmuo *ProductMovementUpdateOne) Exec(ctx context.Context) error {
	_, err := pmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmuo *ProductMovementUpdateOne) ExecX(ctx context.Context) {
	if err := pmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmuo *ProductMovementUpdateOne) defaults() {
	if _, ok := pmuo.mutation.UpdatedAt(); !ok {
		v := productmovement.UpdateDefaultUpdatedAt()
		pmuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmuo *ProductMovementUpdateOne) check() error {
	if v, ok := pmuo.mutation.EntryGroup(); ok {
		if err := productmovement.EntryGroupValidator(v); err != nil {
			return &ValidationError{Name: "entryGroup", err: fmt.Errorf(`generated: validator failed for field "ProductMovement.entryGroup": %w`, err)}
		}
	}
	if v, ok := pmuo.mutation.AverageCost(); ok {
		if err := productmovement.AverageCostValidator(v); err != nil {
			return &ValidationError{Name: "averageCost", err: fmt.Errorf(`generated: validator failed for field "ProductMovement.averageCost": %w`, err)}
		}
	}
	if v, ok := pmuo.mutation.UnitCost(); ok {
		if err := productmovement.UnitCostValidator(v); err != nil {
			return &ValidationError{Name: "unitCost", err: fmt.Errorf(`generated: validator failed for field "ProductMovement.unitCost": %w`, err)}
		}
	}
	if v, ok := pmuo.mutation.Price(); ok {
		if err := productmovement.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`generated: validator failed for field "ProductMovement.price": %w`, err)}
		}
	}
	return nil
}

func (pmuo *ProductMovementUpdateOne) sqlSave(ctx context.Context) (_node *ProductMovement, err error) {
	if err := pmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(productmovement.Table, productmovement.Columns, sqlgraph.NewFieldSpec(productmovement.FieldID, field.TypeInt))
	id, ok := pmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ProductMovement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productmovement.FieldID)
		for _, f := range fields {
			if !productmovement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != productmovement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(productmovement.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pmuo.mutation.DeletedAt(); ok {
		_spec.SetField(productmovement.FieldDeletedAt, field.TypeTime, value)
	}
	if pmuo.mutation.DeletedAtCleared() {
		_spec.ClearField(productmovement.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pmuo.mutation.EntryGroup(); ok {
		_spec.SetField(productmovement.FieldEntryGroup, field.TypeInt, value)
	}
	if value, ok := pmuo.mutation.AddedEntryGroup(); ok {
		_spec.AddField(productmovement.FieldEntryGroup, field.TypeInt, value)
	}
	if value, ok := pmuo.mutation.AverageCost(); ok {
		_spec.SetField(productmovement.FieldAverageCost, field.TypeFloat64, value)
	}
	if value, ok := pmuo.mutation.AddedAverageCost(); ok {
		_spec.AddField(productmovement.FieldAverageCost, field.TypeFloat64, value)
	}
	if value, ok := pmuo.mutation.UnitCost(); ok {
		_spec.SetField(productmovement.FieldUnitCost, field.TypeFloat64, value)
	}
	if value, ok := pmuo.mutation.AddedUnitCost(); ok {
		_spec.AddField(productmovement.FieldUnitCost, field.TypeFloat64, value)
	}
	if value, ok := pmuo.mutation.Price(); ok {
		_spec.SetField(productmovement.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := pmuo.mutation.AddedPrice(); ok {
		_spec.AddField(productmovement.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := pmuo.mutation.Quantity(); ok {
		_spec.SetField(productmovement.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := pmuo.mutation.AddedQuantity(); ok {
		_spec.AddField(productmovement.FieldQuantity, field.TypeInt, value)
	}
	if pmuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productmovement.ProductTable,
			Columns: []string{productmovement.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productmovement.ProductTable,
			Columns: []string{productmovement.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductMovement{config: pmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productmovement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pmuo.mutation.done = true
	return _node, nil
}
