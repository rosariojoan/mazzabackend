// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"mazza/ent/generated/company"
	"mazza/ent/generated/inventory"
	"mazza/ent/generated/inventorymovement"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// InventoryMovement is the model entity for the InventoryMovement schema.
type InventoryMovement struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// DeletedAt holds the value of the "deletedAt" field.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	// Category holds the value of the "category" field.
	Category inventorymovement.Category `json:"category,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity float64 `json:"quantity,omitempty"`
	// Value holds the value of the "value" field.
	Value float64 `json:"value,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Source holds the value of the "source" field.
	Source *string `json:"source,omitempty"`
	// Destination holds the value of the "destination" field.
	Destination *string `json:"destination,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes string `json:"notes,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InventoryMovementQuery when eager-loading is set.
	Edges                       InventoryMovementEdges `json:"edges"`
	company_inventory_movements *int
	inventory_movements         *int
	selectValues                sql.SelectValues
}

// InventoryMovementEdges holds the relations/edges for other nodes in the graph.
type InventoryMovementEdges struct {
	// Company holds the value of the company edge.
	Company *Company `json:"company,omitempty"`
	// Inventory holds the value of the inventory edge.
	Inventory *Inventory `json:"inventory,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// CompanyOrErr returns the Company value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InventoryMovementEdges) CompanyOrErr() (*Company, error) {
	if e.Company != nil {
		return e.Company, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: company.Label}
	}
	return nil, &NotLoadedError{edge: "company"}
}

// InventoryOrErr returns the Inventory value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InventoryMovementEdges) InventoryOrErr() (*Inventory, error) {
	if e.Inventory != nil {
		return e.Inventory, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: inventory.Label}
	}
	return nil, &NotLoadedError{edge: "inventory"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InventoryMovement) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case inventorymovement.FieldQuantity, inventorymovement.FieldValue:
			values[i] = new(sql.NullFloat64)
		case inventorymovement.FieldID:
			values[i] = new(sql.NullInt64)
		case inventorymovement.FieldCategory, inventorymovement.FieldSource, inventorymovement.FieldDestination, inventorymovement.FieldNotes:
			values[i] = new(sql.NullString)
		case inventorymovement.FieldCreatedAt, inventorymovement.FieldUpdatedAt, inventorymovement.FieldDeletedAt, inventorymovement.FieldDate:
			values[i] = new(sql.NullTime)
		case inventorymovement.ForeignKeys[0]: // company_inventory_movements
			values[i] = new(sql.NullInt64)
		case inventorymovement.ForeignKeys[1]: // inventory_movements
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InventoryMovement fields.
func (im *InventoryMovement) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case inventorymovement.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			im.ID = int(value.Int64)
		case inventorymovement.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				im.CreatedAt = value.Time
			}
		case inventorymovement.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				im.UpdatedAt = value.Time
			}
		case inventorymovement.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deletedAt", values[i])
			} else if value.Valid {
				im.DeletedAt = new(time.Time)
				*im.DeletedAt = value.Time
			}
		case inventorymovement.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				im.Category = inventorymovement.Category(value.String)
			}
		case inventorymovement.FieldQuantity:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				im.Quantity = value.Float64
			}
		case inventorymovement.FieldValue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				im.Value = value.Float64
			}
		case inventorymovement.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				im.Date = value.Time
			}
		case inventorymovement.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				im.Source = new(string)
				*im.Source = value.String
			}
		case inventorymovement.FieldDestination:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field destination", values[i])
			} else if value.Valid {
				im.Destination = new(string)
				*im.Destination = value.String
			}
		case inventorymovement.FieldNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value.Valid {
				im.Notes = value.String
			}
		case inventorymovement.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field company_inventory_movements", value)
			} else if value.Valid {
				im.company_inventory_movements = new(int)
				*im.company_inventory_movements = int(value.Int64)
			}
		case inventorymovement.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field inventory_movements", value)
			} else if value.Valid {
				im.inventory_movements = new(int)
				*im.inventory_movements = int(value.Int64)
			}
		default:
			im.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the InventoryMovement.
// This includes values selected through modifiers, order, etc.
func (im *InventoryMovement) GetValue(name string) (ent.Value, error) {
	return im.selectValues.Get(name)
}

// QueryCompany queries the "company" edge of the InventoryMovement entity.
func (im *InventoryMovement) QueryCompany() *CompanyQuery {
	return NewInventoryMovementClient(im.config).QueryCompany(im)
}

// QueryInventory queries the "inventory" edge of the InventoryMovement entity.
func (im *InventoryMovement) QueryInventory() *InventoryQuery {
	return NewInventoryMovementClient(im.config).QueryInventory(im)
}

// Update returns a builder for updating this InventoryMovement.
// Note that you need to call InventoryMovement.Unwrap() before calling this method if this InventoryMovement
// was returned from a transaction, and the transaction was committed or rolled back.
func (im *InventoryMovement) Update() *InventoryMovementUpdateOne {
	return NewInventoryMovementClient(im.config).UpdateOne(im)
}

// Unwrap unwraps the InventoryMovement entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (im *InventoryMovement) Unwrap() *InventoryMovement {
	_tx, ok := im.config.driver.(*txDriver)
	if !ok {
		panic("generated: InventoryMovement is not a transactional entity")
	}
	im.config.driver = _tx.drv
	return im
}

// String implements the fmt.Stringer.
func (im *InventoryMovement) String() string {
	var builder strings.Builder
	builder.WriteString("InventoryMovement(")
	builder.WriteString(fmt.Sprintf("id=%v, ", im.ID))
	builder.WriteString("createdAt=")
	builder.WriteString(im.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(im.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := im.DeletedAt; v != nil {
		builder.WriteString("deletedAt=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(fmt.Sprintf("%v", im.Category))
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", im.Quantity))
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(fmt.Sprintf("%v", im.Value))
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(im.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := im.Source; v != nil {
		builder.WriteString("source=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := im.Destination; v != nil {
		builder.WriteString("destination=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("notes=")
	builder.WriteString(im.Notes)
	builder.WriteByte(')')
	return builder.String()
}

// InventoryMovements is a parsable slice of InventoryMovement.
type InventoryMovements []*InventoryMovement
