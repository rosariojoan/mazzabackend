// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"mazza/ent/generated/company"
	"mazza/ent/generated/receivable"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReceivableCreate is the builder for creating a Receivable entity.
type ReceivableCreate struct {
	config
	mutation *ReceivableMutation
	hooks    []Hook
}

// SetCreatedAt sets the "createdAt" field.
func (rc *ReceivableCreate) SetCreatedAt(t time.Time) *ReceivableCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (rc *ReceivableCreate) SetNillableCreatedAt(t *time.Time) *ReceivableCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updatedAt" field.
func (rc *ReceivableCreate) SetUpdatedAt(t time.Time) *ReceivableCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (rc *ReceivableCreate) SetNillableUpdatedAt(t *time.Time) *ReceivableCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetDeletedAt sets the "deletedAt" field.
func (rc *ReceivableCreate) SetDeletedAt(t time.Time) *ReceivableCreate {
	rc.mutation.SetDeletedAt(t)
	return rc
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (rc *ReceivableCreate) SetNillableDeletedAt(t *time.Time) *ReceivableCreate {
	if t != nil {
		rc.SetDeletedAt(*t)
	}
	return rc
}

// SetEntryGroup sets the "entryGroup" field.
func (rc *ReceivableCreate) SetEntryGroup(i int) *ReceivableCreate {
	rc.mutation.SetEntryGroup(i)
	return rc
}

// SetDate sets the "date" field.
func (rc *ReceivableCreate) SetDate(t time.Time) *ReceivableCreate {
	rc.mutation.SetDate(t)
	return rc
}

// SetName sets the "name" field.
func (rc *ReceivableCreate) SetName(s string) *ReceivableCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rc *ReceivableCreate) SetNillableName(s *string) *ReceivableCreate {
	if s != nil {
		rc.SetName(*s)
	}
	return rc
}

// SetOutstandingBalance sets the "outstandingBalance" field.
func (rc *ReceivableCreate) SetOutstandingBalance(f float64) *ReceivableCreate {
	rc.mutation.SetOutstandingBalance(f)
	return rc
}

// SetTotalTransaction sets the "totalTransaction" field.
func (rc *ReceivableCreate) SetTotalTransaction(f float64) *ReceivableCreate {
	rc.mutation.SetTotalTransaction(f)
	return rc
}

// SetDueDate sets the "dueDate" field.
func (rc *ReceivableCreate) SetDueDate(t time.Time) *ReceivableCreate {
	rc.mutation.SetDueDate(t)
	return rc
}

// SetStatus sets the "status" field.
func (rc *ReceivableCreate) SetStatus(r receivable.Status) *ReceivableCreate {
	rc.mutation.SetStatus(r)
	return rc
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (rc *ReceivableCreate) SetCompanyID(id int) *ReceivableCreate {
	rc.mutation.SetCompanyID(id)
	return rc
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (rc *ReceivableCreate) SetNillableCompanyID(id *int) *ReceivableCreate {
	if id != nil {
		rc = rc.SetCompanyID(*id)
	}
	return rc
}

// SetCompany sets the "company" edge to the Company entity.
func (rc *ReceivableCreate) SetCompany(c *Company) *ReceivableCreate {
	return rc.SetCompanyID(c.ID)
}

// Mutation returns the ReceivableMutation object of the builder.
func (rc *ReceivableCreate) Mutation() *ReceivableMutation {
	return rc.mutation
}

// Save creates the Receivable in the database.
func (rc *ReceivableCreate) Save(ctx context.Context) (*Receivable, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ReceivableCreate) SaveX(ctx context.Context) *Receivable {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ReceivableCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ReceivableCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *ReceivableCreate) defaults() {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := receivable.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		v := receivable.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.Name(); !ok {
		v := receivable.DefaultName
		rc.mutation.SetName(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *ReceivableCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`generated: missing required field "Receivable.createdAt"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`generated: missing required field "Receivable.updatedAt"`)}
	}
	if _, ok := rc.mutation.EntryGroup(); !ok {
		return &ValidationError{Name: "entryGroup", err: errors.New(`generated: missing required field "Receivable.entryGroup"`)}
	}
	if v, ok := rc.mutation.EntryGroup(); ok {
		if err := receivable.EntryGroupValidator(v); err != nil {
			return &ValidationError{Name: "entryGroup", err: fmt.Errorf(`generated: validator failed for field "Receivable.entryGroup": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`generated: missing required field "Receivable.date"`)}
	}
	if _, ok := rc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "Receivable.name"`)}
	}
	if _, ok := rc.mutation.OutstandingBalance(); !ok {
		return &ValidationError{Name: "outstandingBalance", err: errors.New(`generated: missing required field "Receivable.outstandingBalance"`)}
	}
	if _, ok := rc.mutation.TotalTransaction(); !ok {
		return &ValidationError{Name: "totalTransaction", err: errors.New(`generated: missing required field "Receivable.totalTransaction"`)}
	}
	if _, ok := rc.mutation.DueDate(); !ok {
		return &ValidationError{Name: "dueDate", err: errors.New(`generated: missing required field "Receivable.dueDate"`)}
	}
	if _, ok := rc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`generated: missing required field "Receivable.status"`)}
	}
	if v, ok := rc.mutation.Status(); ok {
		if err := receivable.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Receivable.status": %w`, err)}
		}
	}
	return nil
}

func (rc *ReceivableCreate) sqlSave(ctx context.Context) (*Receivable, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *ReceivableCreate) createSpec() (*Receivable, *sqlgraph.CreateSpec) {
	var (
		_node = &Receivable{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(receivable.Table, sqlgraph.NewFieldSpec(receivable.FieldID, field.TypeInt))
	)
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(receivable.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(receivable.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.DeletedAt(); ok {
		_spec.SetField(receivable.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := rc.mutation.EntryGroup(); ok {
		_spec.SetField(receivable.FieldEntryGroup, field.TypeInt, value)
		_node.EntryGroup = value
	}
	if value, ok := rc.mutation.Date(); ok {
		_spec.SetField(receivable.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if value, ok := rc.mutation.Name(); ok {
		_spec.SetField(receivable.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rc.mutation.OutstandingBalance(); ok {
		_spec.SetField(receivable.FieldOutstandingBalance, field.TypeFloat64, value)
		_node.OutstandingBalance = value
	}
	if value, ok := rc.mutation.TotalTransaction(); ok {
		_spec.SetField(receivable.FieldTotalTransaction, field.TypeFloat64, value)
		_node.TotalTransaction = value
	}
	if value, ok := rc.mutation.DueDate(); ok {
		_spec.SetField(receivable.FieldDueDate, field.TypeTime, value)
		_node.DueDate = value
	}
	if value, ok := rc.mutation.Status(); ok {
		_spec.SetField(receivable.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := rc.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   receivable.CompanyTable,
			Columns: []string{receivable.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.company_receivables = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReceivableCreateBulk is the builder for creating many Receivable entities in bulk.
type ReceivableCreateBulk struct {
	config
	err      error
	builders []*ReceivableCreate
}

// Save creates the Receivable entities in the database.
func (rcb *ReceivableCreateBulk) Save(ctx context.Context) ([]*Receivable, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Receivable, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReceivableMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ReceivableCreateBulk) SaveX(ctx context.Context) []*Receivable {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ReceivableCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ReceivableCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
