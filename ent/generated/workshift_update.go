// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"mazza/ent/generated/company"
	"mazza/ent/generated/employee"
	"mazza/ent/generated/predicate"
	"mazza/ent/generated/workshift"
	"mazza/ent/generated/worktask"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkshiftUpdate is the builder for updating Workshift entities.
type WorkshiftUpdate struct {
	config
	hooks     []Hook
	mutation  *WorkshiftMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the WorkshiftUpdate builder.
func (wu *WorkshiftUpdate) Where(ps ...predicate.Workshift) *WorkshiftUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetUpdatedAt sets the "updatedAt" field.
func (wu *WorkshiftUpdate) SetUpdatedAt(t time.Time) *WorkshiftUpdate {
	wu.mutation.SetUpdatedAt(t)
	return wu
}

// SetDeletedAt sets the "deletedAt" field.
func (wu *WorkshiftUpdate) SetDeletedAt(t time.Time) *WorkshiftUpdate {
	wu.mutation.SetDeletedAt(t)
	return wu
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (wu *WorkshiftUpdate) SetNillableDeletedAt(t *time.Time) *WorkshiftUpdate {
	if t != nil {
		wu.SetDeletedAt(*t)
	}
	return wu
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (wu *WorkshiftUpdate) ClearDeletedAt() *WorkshiftUpdate {
	wu.mutation.ClearDeletedAt()
	return wu
}

// SetApprovedAt sets the "approvedAt" field.
func (wu *WorkshiftUpdate) SetApprovedAt(t time.Time) *WorkshiftUpdate {
	wu.mutation.SetApprovedAt(t)
	return wu
}

// SetNillableApprovedAt sets the "approvedAt" field if the given value is not nil.
func (wu *WorkshiftUpdate) SetNillableApprovedAt(t *time.Time) *WorkshiftUpdate {
	if t != nil {
		wu.SetApprovedAt(*t)
	}
	return wu
}

// ClearApprovedAt clears the value of the "approvedAt" field.
func (wu *WorkshiftUpdate) ClearApprovedAt() *WorkshiftUpdate {
	wu.mutation.ClearApprovedAt()
	return wu
}

// SetClockIn sets the "clockIn" field.
func (wu *WorkshiftUpdate) SetClockIn(t time.Time) *WorkshiftUpdate {
	wu.mutation.SetClockIn(t)
	return wu
}

// SetNillableClockIn sets the "clockIn" field if the given value is not nil.
func (wu *WorkshiftUpdate) SetNillableClockIn(t *time.Time) *WorkshiftUpdate {
	if t != nil {
		wu.SetClockIn(*t)
	}
	return wu
}

// SetClockOut sets the "clockOut" field.
func (wu *WorkshiftUpdate) SetClockOut(t time.Time) *WorkshiftUpdate {
	wu.mutation.SetClockOut(t)
	return wu
}

// SetNillableClockOut sets the "clockOut" field if the given value is not nil.
func (wu *WorkshiftUpdate) SetNillableClockOut(t *time.Time) *WorkshiftUpdate {
	if t != nil {
		wu.SetClockOut(*t)
	}
	return wu
}

// ClearClockOut clears the value of the "clockOut" field.
func (wu *WorkshiftUpdate) ClearClockOut() *WorkshiftUpdate {
	wu.mutation.ClearClockOut()
	return wu
}

// SetClockInLocation sets the "clockInLocation" field.
func (wu *WorkshiftUpdate) SetClockInLocation(s string) *WorkshiftUpdate {
	wu.mutation.SetClockInLocation(s)
	return wu
}

// SetNillableClockInLocation sets the "clockInLocation" field if the given value is not nil.
func (wu *WorkshiftUpdate) SetNillableClockInLocation(s *string) *WorkshiftUpdate {
	if s != nil {
		wu.SetClockInLocation(*s)
	}
	return wu
}

// SetClockOutLocation sets the "clockOutLocation" field.
func (wu *WorkshiftUpdate) SetClockOutLocation(s string) *WorkshiftUpdate {
	wu.mutation.SetClockOutLocation(s)
	return wu
}

// SetNillableClockOutLocation sets the "clockOutLocation" field if the given value is not nil.
func (wu *WorkshiftUpdate) SetNillableClockOutLocation(s *string) *WorkshiftUpdate {
	if s != nil {
		wu.SetClockOutLocation(*s)
	}
	return wu
}

// ClearClockOutLocation clears the value of the "clockOutLocation" field.
func (wu *WorkshiftUpdate) ClearClockOutLocation() *WorkshiftUpdate {
	wu.mutation.ClearClockOutLocation()
	return wu
}

// SetDescription sets the "description" field.
func (wu *WorkshiftUpdate) SetDescription(s string) *WorkshiftUpdate {
	wu.mutation.SetDescription(s)
	return wu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wu *WorkshiftUpdate) SetNillableDescription(s *string) *WorkshiftUpdate {
	if s != nil {
		wu.SetDescription(*s)
	}
	return wu
}

// ClearDescription clears the value of the "description" field.
func (wu *WorkshiftUpdate) ClearDescription() *WorkshiftUpdate {
	wu.mutation.ClearDescription()
	return wu
}

// SetNote sets the "note" field.
func (wu *WorkshiftUpdate) SetNote(s string) *WorkshiftUpdate {
	wu.mutation.SetNote(s)
	return wu
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (wu *WorkshiftUpdate) SetNillableNote(s *string) *WorkshiftUpdate {
	if s != nil {
		wu.SetNote(*s)
	}
	return wu
}

// ClearNote clears the value of the "note" field.
func (wu *WorkshiftUpdate) ClearNote() *WorkshiftUpdate {
	wu.mutation.ClearNote()
	return wu
}

// SetStatus sets the "status" field.
func (wu *WorkshiftUpdate) SetStatus(w workshift.Status) *WorkshiftUpdate {
	wu.mutation.SetStatus(w)
	return wu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wu *WorkshiftUpdate) SetNillableStatus(w *workshift.Status) *WorkshiftUpdate {
	if w != nil {
		wu.SetStatus(*w)
	}
	return wu
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (wu *WorkshiftUpdate) SetCompanyID(id int) *WorkshiftUpdate {
	wu.mutation.SetCompanyID(id)
	return wu
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (wu *WorkshiftUpdate) SetNillableCompanyID(id *int) *WorkshiftUpdate {
	if id != nil {
		wu = wu.SetCompanyID(*id)
	}
	return wu
}

// SetCompany sets the "company" edge to the Company entity.
func (wu *WorkshiftUpdate) SetCompany(c *Company) *WorkshiftUpdate {
	return wu.SetCompanyID(c.ID)
}

// SetEmployeeID sets the "employee" edge to the Employee entity by ID.
func (wu *WorkshiftUpdate) SetEmployeeID(id int) *WorkshiftUpdate {
	wu.mutation.SetEmployeeID(id)
	return wu
}

// SetNillableEmployeeID sets the "employee" edge to the Employee entity by ID if the given value is not nil.
func (wu *WorkshiftUpdate) SetNillableEmployeeID(id *int) *WorkshiftUpdate {
	if id != nil {
		wu = wu.SetEmployeeID(*id)
	}
	return wu
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (wu *WorkshiftUpdate) SetEmployee(e *Employee) *WorkshiftUpdate {
	return wu.SetEmployeeID(e.ID)
}

// SetApprovedByID sets the "approvedBy" edge to the Employee entity by ID.
func (wu *WorkshiftUpdate) SetApprovedByID(id int) *WorkshiftUpdate {
	wu.mutation.SetApprovedByID(id)
	return wu
}

// SetNillableApprovedByID sets the "approvedBy" edge to the Employee entity by ID if the given value is not nil.
func (wu *WorkshiftUpdate) SetNillableApprovedByID(id *int) *WorkshiftUpdate {
	if id != nil {
		wu = wu.SetApprovedByID(*id)
	}
	return wu
}

// SetApprovedBy sets the "approvedBy" edge to the Employee entity.
func (wu *WorkshiftUpdate) SetApprovedBy(e *Employee) *WorkshiftUpdate {
	return wu.SetApprovedByID(e.ID)
}

// SetWorkTaskID sets the "workTask" edge to the Worktask entity by ID.
func (wu *WorkshiftUpdate) SetWorkTaskID(id int) *WorkshiftUpdate {
	wu.mutation.SetWorkTaskID(id)
	return wu
}

// SetNillableWorkTaskID sets the "workTask" edge to the Worktask entity by ID if the given value is not nil.
func (wu *WorkshiftUpdate) SetNillableWorkTaskID(id *int) *WorkshiftUpdate {
	if id != nil {
		wu = wu.SetWorkTaskID(*id)
	}
	return wu
}

// SetWorkTask sets the "workTask" edge to the Worktask entity.
func (wu *WorkshiftUpdate) SetWorkTask(w *Worktask) *WorkshiftUpdate {
	return wu.SetWorkTaskID(w.ID)
}

// SetEditRequestID sets the "editRequest" edge to the Workshift entity by ID.
func (wu *WorkshiftUpdate) SetEditRequestID(id int) *WorkshiftUpdate {
	wu.mutation.SetEditRequestID(id)
	return wu
}

// SetNillableEditRequestID sets the "editRequest" edge to the Workshift entity by ID if the given value is not nil.
func (wu *WorkshiftUpdate) SetNillableEditRequestID(id *int) *WorkshiftUpdate {
	if id != nil {
		wu = wu.SetEditRequestID(*id)
	}
	return wu
}

// SetEditRequest sets the "editRequest" edge to the Workshift entity.
func (wu *WorkshiftUpdate) SetEditRequest(w *Workshift) *WorkshiftUpdate {
	return wu.SetEditRequestID(w.ID)
}

// SetWorkShiftID sets the "workShift" edge to the Workshift entity by ID.
func (wu *WorkshiftUpdate) SetWorkShiftID(id int) *WorkshiftUpdate {
	wu.mutation.SetWorkShiftID(id)
	return wu
}

// SetNillableWorkShiftID sets the "workShift" edge to the Workshift entity by ID if the given value is not nil.
func (wu *WorkshiftUpdate) SetNillableWorkShiftID(id *int) *WorkshiftUpdate {
	if id != nil {
		wu = wu.SetWorkShiftID(*id)
	}
	return wu
}

// SetWorkShift sets the "workShift" edge to the Workshift entity.
func (wu *WorkshiftUpdate) SetWorkShift(w *Workshift) *WorkshiftUpdate {
	return wu.SetWorkShiftID(w.ID)
}

// Mutation returns the WorkshiftMutation object of the builder.
func (wu *WorkshiftUpdate) Mutation() *WorkshiftMutation {
	return wu.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (wu *WorkshiftUpdate) ClearCompany() *WorkshiftUpdate {
	wu.mutation.ClearCompany()
	return wu
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (wu *WorkshiftUpdate) ClearEmployee() *WorkshiftUpdate {
	wu.mutation.ClearEmployee()
	return wu
}

// ClearApprovedBy clears the "approvedBy" edge to the Employee entity.
func (wu *WorkshiftUpdate) ClearApprovedBy() *WorkshiftUpdate {
	wu.mutation.ClearApprovedBy()
	return wu
}

// ClearWorkTask clears the "workTask" edge to the Worktask entity.
func (wu *WorkshiftUpdate) ClearWorkTask() *WorkshiftUpdate {
	wu.mutation.ClearWorkTask()
	return wu
}

// ClearEditRequest clears the "editRequest" edge to the Workshift entity.
func (wu *WorkshiftUpdate) ClearEditRequest() *WorkshiftUpdate {
	wu.mutation.ClearEditRequest()
	return wu
}

// ClearWorkShift clears the "workShift" edge to the Workshift entity.
func (wu *WorkshiftUpdate) ClearWorkShift() *WorkshiftUpdate {
	wu.mutation.ClearWorkShift()
	return wu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WorkshiftUpdate) Save(ctx context.Context) (int, error) {
	if err := wu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WorkshiftUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WorkshiftUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WorkshiftUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wu *WorkshiftUpdate) defaults() error {
	if _, ok := wu.mutation.UpdatedAt(); !ok {
		if workshift.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized workshift.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := workshift.UpdateDefaultUpdatedAt()
		wu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wu *WorkshiftUpdate) check() error {
	if v, ok := wu.mutation.Status(); ok {
		if err := workshift.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Workshift.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wu *WorkshiftUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WorkshiftUpdate {
	wu.modifiers = append(wu.modifiers, modifiers...)
	return wu
}

func (wu *WorkshiftUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workshift.Table, workshift.Columns, sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.UpdatedAt(); ok {
		_spec.SetField(workshift.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wu.mutation.DeletedAt(); ok {
		_spec.SetField(workshift.FieldDeletedAt, field.TypeTime, value)
	}
	if wu.mutation.DeletedAtCleared() {
		_spec.ClearField(workshift.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := wu.mutation.ApprovedAt(); ok {
		_spec.SetField(workshift.FieldApprovedAt, field.TypeTime, value)
	}
	if wu.mutation.ApprovedAtCleared() {
		_spec.ClearField(workshift.FieldApprovedAt, field.TypeTime)
	}
	if value, ok := wu.mutation.ClockIn(); ok {
		_spec.SetField(workshift.FieldClockIn, field.TypeTime, value)
	}
	if value, ok := wu.mutation.ClockOut(); ok {
		_spec.SetField(workshift.FieldClockOut, field.TypeTime, value)
	}
	if wu.mutation.ClockOutCleared() {
		_spec.ClearField(workshift.FieldClockOut, field.TypeTime)
	}
	if value, ok := wu.mutation.ClockInLocation(); ok {
		_spec.SetField(workshift.FieldClockInLocation, field.TypeString, value)
	}
	if value, ok := wu.mutation.ClockOutLocation(); ok {
		_spec.SetField(workshift.FieldClockOutLocation, field.TypeString, value)
	}
	if wu.mutation.ClockOutLocationCleared() {
		_spec.ClearField(workshift.FieldClockOutLocation, field.TypeString)
	}
	if value, ok := wu.mutation.Description(); ok {
		_spec.SetField(workshift.FieldDescription, field.TypeString, value)
	}
	if wu.mutation.DescriptionCleared() {
		_spec.ClearField(workshift.FieldDescription, field.TypeString)
	}
	if value, ok := wu.mutation.Note(); ok {
		_spec.SetField(workshift.FieldNote, field.TypeString, value)
	}
	if wu.mutation.NoteCleared() {
		_spec.ClearField(workshift.FieldNote, field.TypeString)
	}
	if value, ok := wu.mutation.Status(); ok {
		_spec.SetField(workshift.FieldStatus, field.TypeEnum, value)
	}
	if wu.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workshift.CompanyTable,
			Columns: []string{workshift.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workshift.CompanyTable,
			Columns: []string{workshift.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workshift.EmployeeTable,
			Columns: []string{workshift.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workshift.EmployeeTable,
			Columns: []string{workshift.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.ApprovedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workshift.ApprovedByTable,
			Columns: []string{workshift.ApprovedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.ApprovedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workshift.ApprovedByTable,
			Columns: []string{workshift.ApprovedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.WorkTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workshift.WorkTaskTable,
			Columns: []string{workshift.WorkTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worktask.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.WorkTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workshift.WorkTaskTable,
			Columns: []string{workshift.WorkTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worktask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.EditRequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   workshift.EditRequestTable,
			Columns: []string{workshift.EditRequestColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.EditRequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   workshift.EditRequestTable,
			Columns: []string{workshift.EditRequestColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.WorkShiftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   workshift.WorkShiftTable,
			Columns: []string{workshift.WorkShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.WorkShiftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   workshift.WorkShiftTable,
			Columns: []string{workshift.WorkShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(wu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workshift.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WorkshiftUpdateOne is the builder for updating a single Workshift entity.
type WorkshiftUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *WorkshiftMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updatedAt" field.
func (wuo *WorkshiftUpdateOne) SetUpdatedAt(t time.Time) *WorkshiftUpdateOne {
	wuo.mutation.SetUpdatedAt(t)
	return wuo
}

// SetDeletedAt sets the "deletedAt" field.
func (wuo *WorkshiftUpdateOne) SetDeletedAt(t time.Time) *WorkshiftUpdateOne {
	wuo.mutation.SetDeletedAt(t)
	return wuo
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (wuo *WorkshiftUpdateOne) SetNillableDeletedAt(t *time.Time) *WorkshiftUpdateOne {
	if t != nil {
		wuo.SetDeletedAt(*t)
	}
	return wuo
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (wuo *WorkshiftUpdateOne) ClearDeletedAt() *WorkshiftUpdateOne {
	wuo.mutation.ClearDeletedAt()
	return wuo
}

// SetApprovedAt sets the "approvedAt" field.
func (wuo *WorkshiftUpdateOne) SetApprovedAt(t time.Time) *WorkshiftUpdateOne {
	wuo.mutation.SetApprovedAt(t)
	return wuo
}

// SetNillableApprovedAt sets the "approvedAt" field if the given value is not nil.
func (wuo *WorkshiftUpdateOne) SetNillableApprovedAt(t *time.Time) *WorkshiftUpdateOne {
	if t != nil {
		wuo.SetApprovedAt(*t)
	}
	return wuo
}

// ClearApprovedAt clears the value of the "approvedAt" field.
func (wuo *WorkshiftUpdateOne) ClearApprovedAt() *WorkshiftUpdateOne {
	wuo.mutation.ClearApprovedAt()
	return wuo
}

// SetClockIn sets the "clockIn" field.
func (wuo *WorkshiftUpdateOne) SetClockIn(t time.Time) *WorkshiftUpdateOne {
	wuo.mutation.SetClockIn(t)
	return wuo
}

// SetNillableClockIn sets the "clockIn" field if the given value is not nil.
func (wuo *WorkshiftUpdateOne) SetNillableClockIn(t *time.Time) *WorkshiftUpdateOne {
	if t != nil {
		wuo.SetClockIn(*t)
	}
	return wuo
}

// SetClockOut sets the "clockOut" field.
func (wuo *WorkshiftUpdateOne) SetClockOut(t time.Time) *WorkshiftUpdateOne {
	wuo.mutation.SetClockOut(t)
	return wuo
}

// SetNillableClockOut sets the "clockOut" field if the given value is not nil.
func (wuo *WorkshiftUpdateOne) SetNillableClockOut(t *time.Time) *WorkshiftUpdateOne {
	if t != nil {
		wuo.SetClockOut(*t)
	}
	return wuo
}

// ClearClockOut clears the value of the "clockOut" field.
func (wuo *WorkshiftUpdateOne) ClearClockOut() *WorkshiftUpdateOne {
	wuo.mutation.ClearClockOut()
	return wuo
}

// SetClockInLocation sets the "clockInLocation" field.
func (wuo *WorkshiftUpdateOne) SetClockInLocation(s string) *WorkshiftUpdateOne {
	wuo.mutation.SetClockInLocation(s)
	return wuo
}

// SetNillableClockInLocation sets the "clockInLocation" field if the given value is not nil.
func (wuo *WorkshiftUpdateOne) SetNillableClockInLocation(s *string) *WorkshiftUpdateOne {
	if s != nil {
		wuo.SetClockInLocation(*s)
	}
	return wuo
}

// SetClockOutLocation sets the "clockOutLocation" field.
func (wuo *WorkshiftUpdateOne) SetClockOutLocation(s string) *WorkshiftUpdateOne {
	wuo.mutation.SetClockOutLocation(s)
	return wuo
}

// SetNillableClockOutLocation sets the "clockOutLocation" field if the given value is not nil.
func (wuo *WorkshiftUpdateOne) SetNillableClockOutLocation(s *string) *WorkshiftUpdateOne {
	if s != nil {
		wuo.SetClockOutLocation(*s)
	}
	return wuo
}

// ClearClockOutLocation clears the value of the "clockOutLocation" field.
func (wuo *WorkshiftUpdateOne) ClearClockOutLocation() *WorkshiftUpdateOne {
	wuo.mutation.ClearClockOutLocation()
	return wuo
}

// SetDescription sets the "description" field.
func (wuo *WorkshiftUpdateOne) SetDescription(s string) *WorkshiftUpdateOne {
	wuo.mutation.SetDescription(s)
	return wuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wuo *WorkshiftUpdateOne) SetNillableDescription(s *string) *WorkshiftUpdateOne {
	if s != nil {
		wuo.SetDescription(*s)
	}
	return wuo
}

// ClearDescription clears the value of the "description" field.
func (wuo *WorkshiftUpdateOne) ClearDescription() *WorkshiftUpdateOne {
	wuo.mutation.ClearDescription()
	return wuo
}

// SetNote sets the "note" field.
func (wuo *WorkshiftUpdateOne) SetNote(s string) *WorkshiftUpdateOne {
	wuo.mutation.SetNote(s)
	return wuo
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (wuo *WorkshiftUpdateOne) SetNillableNote(s *string) *WorkshiftUpdateOne {
	if s != nil {
		wuo.SetNote(*s)
	}
	return wuo
}

// ClearNote clears the value of the "note" field.
func (wuo *WorkshiftUpdateOne) ClearNote() *WorkshiftUpdateOne {
	wuo.mutation.ClearNote()
	return wuo
}

// SetStatus sets the "status" field.
func (wuo *WorkshiftUpdateOne) SetStatus(w workshift.Status) *WorkshiftUpdateOne {
	wuo.mutation.SetStatus(w)
	return wuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wuo *WorkshiftUpdateOne) SetNillableStatus(w *workshift.Status) *WorkshiftUpdateOne {
	if w != nil {
		wuo.SetStatus(*w)
	}
	return wuo
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (wuo *WorkshiftUpdateOne) SetCompanyID(id int) *WorkshiftUpdateOne {
	wuo.mutation.SetCompanyID(id)
	return wuo
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (wuo *WorkshiftUpdateOne) SetNillableCompanyID(id *int) *WorkshiftUpdateOne {
	if id != nil {
		wuo = wuo.SetCompanyID(*id)
	}
	return wuo
}

// SetCompany sets the "company" edge to the Company entity.
func (wuo *WorkshiftUpdateOne) SetCompany(c *Company) *WorkshiftUpdateOne {
	return wuo.SetCompanyID(c.ID)
}

// SetEmployeeID sets the "employee" edge to the Employee entity by ID.
func (wuo *WorkshiftUpdateOne) SetEmployeeID(id int) *WorkshiftUpdateOne {
	wuo.mutation.SetEmployeeID(id)
	return wuo
}

// SetNillableEmployeeID sets the "employee" edge to the Employee entity by ID if the given value is not nil.
func (wuo *WorkshiftUpdateOne) SetNillableEmployeeID(id *int) *WorkshiftUpdateOne {
	if id != nil {
		wuo = wuo.SetEmployeeID(*id)
	}
	return wuo
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (wuo *WorkshiftUpdateOne) SetEmployee(e *Employee) *WorkshiftUpdateOne {
	return wuo.SetEmployeeID(e.ID)
}

// SetApprovedByID sets the "approvedBy" edge to the Employee entity by ID.
func (wuo *WorkshiftUpdateOne) SetApprovedByID(id int) *WorkshiftUpdateOne {
	wuo.mutation.SetApprovedByID(id)
	return wuo
}

// SetNillableApprovedByID sets the "approvedBy" edge to the Employee entity by ID if the given value is not nil.
func (wuo *WorkshiftUpdateOne) SetNillableApprovedByID(id *int) *WorkshiftUpdateOne {
	if id != nil {
		wuo = wuo.SetApprovedByID(*id)
	}
	return wuo
}

// SetApprovedBy sets the "approvedBy" edge to the Employee entity.
func (wuo *WorkshiftUpdateOne) SetApprovedBy(e *Employee) *WorkshiftUpdateOne {
	return wuo.SetApprovedByID(e.ID)
}

// SetWorkTaskID sets the "workTask" edge to the Worktask entity by ID.
func (wuo *WorkshiftUpdateOne) SetWorkTaskID(id int) *WorkshiftUpdateOne {
	wuo.mutation.SetWorkTaskID(id)
	return wuo
}

// SetNillableWorkTaskID sets the "workTask" edge to the Worktask entity by ID if the given value is not nil.
func (wuo *WorkshiftUpdateOne) SetNillableWorkTaskID(id *int) *WorkshiftUpdateOne {
	if id != nil {
		wuo = wuo.SetWorkTaskID(*id)
	}
	return wuo
}

// SetWorkTask sets the "workTask" edge to the Worktask entity.
func (wuo *WorkshiftUpdateOne) SetWorkTask(w *Worktask) *WorkshiftUpdateOne {
	return wuo.SetWorkTaskID(w.ID)
}

// SetEditRequestID sets the "editRequest" edge to the Workshift entity by ID.
func (wuo *WorkshiftUpdateOne) SetEditRequestID(id int) *WorkshiftUpdateOne {
	wuo.mutation.SetEditRequestID(id)
	return wuo
}

// SetNillableEditRequestID sets the "editRequest" edge to the Workshift entity by ID if the given value is not nil.
func (wuo *WorkshiftUpdateOne) SetNillableEditRequestID(id *int) *WorkshiftUpdateOne {
	if id != nil {
		wuo = wuo.SetEditRequestID(*id)
	}
	return wuo
}

// SetEditRequest sets the "editRequest" edge to the Workshift entity.
func (wuo *WorkshiftUpdateOne) SetEditRequest(w *Workshift) *WorkshiftUpdateOne {
	return wuo.SetEditRequestID(w.ID)
}

// SetWorkShiftID sets the "workShift" edge to the Workshift entity by ID.
func (wuo *WorkshiftUpdateOne) SetWorkShiftID(id int) *WorkshiftUpdateOne {
	wuo.mutation.SetWorkShiftID(id)
	return wuo
}

// SetNillableWorkShiftID sets the "workShift" edge to the Workshift entity by ID if the given value is not nil.
func (wuo *WorkshiftUpdateOne) SetNillableWorkShiftID(id *int) *WorkshiftUpdateOne {
	if id != nil {
		wuo = wuo.SetWorkShiftID(*id)
	}
	return wuo
}

// SetWorkShift sets the "workShift" edge to the Workshift entity.
func (wuo *WorkshiftUpdateOne) SetWorkShift(w *Workshift) *WorkshiftUpdateOne {
	return wuo.SetWorkShiftID(w.ID)
}

// Mutation returns the WorkshiftMutation object of the builder.
func (wuo *WorkshiftUpdateOne) Mutation() *WorkshiftMutation {
	return wuo.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (wuo *WorkshiftUpdateOne) ClearCompany() *WorkshiftUpdateOne {
	wuo.mutation.ClearCompany()
	return wuo
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (wuo *WorkshiftUpdateOne) ClearEmployee() *WorkshiftUpdateOne {
	wuo.mutation.ClearEmployee()
	return wuo
}

// ClearApprovedBy clears the "approvedBy" edge to the Employee entity.
func (wuo *WorkshiftUpdateOne) ClearApprovedBy() *WorkshiftUpdateOne {
	wuo.mutation.ClearApprovedBy()
	return wuo
}

// ClearWorkTask clears the "workTask" edge to the Worktask entity.
func (wuo *WorkshiftUpdateOne) ClearWorkTask() *WorkshiftUpdateOne {
	wuo.mutation.ClearWorkTask()
	return wuo
}

// ClearEditRequest clears the "editRequest" edge to the Workshift entity.
func (wuo *WorkshiftUpdateOne) ClearEditRequest() *WorkshiftUpdateOne {
	wuo.mutation.ClearEditRequest()
	return wuo
}

// ClearWorkShift clears the "workShift" edge to the Workshift entity.
func (wuo *WorkshiftUpdateOne) ClearWorkShift() *WorkshiftUpdateOne {
	wuo.mutation.ClearWorkShift()
	return wuo
}

// Where appends a list predicates to the WorkshiftUpdate builder.
func (wuo *WorkshiftUpdateOne) Where(ps ...predicate.Workshift) *WorkshiftUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WorkshiftUpdateOne) Select(field string, fields ...string) *WorkshiftUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Workshift entity.
func (wuo *WorkshiftUpdateOne) Save(ctx context.Context) (*Workshift, error) {
	if err := wuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WorkshiftUpdateOne) SaveX(ctx context.Context) *Workshift {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WorkshiftUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WorkshiftUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wuo *WorkshiftUpdateOne) defaults() error {
	if _, ok := wuo.mutation.UpdatedAt(); !ok {
		if workshift.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized workshift.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := workshift.UpdateDefaultUpdatedAt()
		wuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wuo *WorkshiftUpdateOne) check() error {
	if v, ok := wuo.mutation.Status(); ok {
		if err := workshift.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Workshift.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wuo *WorkshiftUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WorkshiftUpdateOne {
	wuo.modifiers = append(wuo.modifiers, modifiers...)
	return wuo
}

func (wuo *WorkshiftUpdateOne) sqlSave(ctx context.Context) (_node *Workshift, err error) {
	if err := wuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workshift.Table, workshift.Columns, sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Workshift.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workshift.FieldID)
		for _, f := range fields {
			if !workshift.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != workshift.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.UpdatedAt(); ok {
		_spec.SetField(workshift.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wuo.mutation.DeletedAt(); ok {
		_spec.SetField(workshift.FieldDeletedAt, field.TypeTime, value)
	}
	if wuo.mutation.DeletedAtCleared() {
		_spec.ClearField(workshift.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := wuo.mutation.ApprovedAt(); ok {
		_spec.SetField(workshift.FieldApprovedAt, field.TypeTime, value)
	}
	if wuo.mutation.ApprovedAtCleared() {
		_spec.ClearField(workshift.FieldApprovedAt, field.TypeTime)
	}
	if value, ok := wuo.mutation.ClockIn(); ok {
		_spec.SetField(workshift.FieldClockIn, field.TypeTime, value)
	}
	if value, ok := wuo.mutation.ClockOut(); ok {
		_spec.SetField(workshift.FieldClockOut, field.TypeTime, value)
	}
	if wuo.mutation.ClockOutCleared() {
		_spec.ClearField(workshift.FieldClockOut, field.TypeTime)
	}
	if value, ok := wuo.mutation.ClockInLocation(); ok {
		_spec.SetField(workshift.FieldClockInLocation, field.TypeString, value)
	}
	if value, ok := wuo.mutation.ClockOutLocation(); ok {
		_spec.SetField(workshift.FieldClockOutLocation, field.TypeString, value)
	}
	if wuo.mutation.ClockOutLocationCleared() {
		_spec.ClearField(workshift.FieldClockOutLocation, field.TypeString)
	}
	if value, ok := wuo.mutation.Description(); ok {
		_spec.SetField(workshift.FieldDescription, field.TypeString, value)
	}
	if wuo.mutation.DescriptionCleared() {
		_spec.ClearField(workshift.FieldDescription, field.TypeString)
	}
	if value, ok := wuo.mutation.Note(); ok {
		_spec.SetField(workshift.FieldNote, field.TypeString, value)
	}
	if wuo.mutation.NoteCleared() {
		_spec.ClearField(workshift.FieldNote, field.TypeString)
	}
	if value, ok := wuo.mutation.Status(); ok {
		_spec.SetField(workshift.FieldStatus, field.TypeEnum, value)
	}
	if wuo.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workshift.CompanyTable,
			Columns: []string{workshift.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workshift.CompanyTable,
			Columns: []string{workshift.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workshift.EmployeeTable,
			Columns: []string{workshift.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workshift.EmployeeTable,
			Columns: []string{workshift.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.ApprovedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workshift.ApprovedByTable,
			Columns: []string{workshift.ApprovedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.ApprovedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workshift.ApprovedByTable,
			Columns: []string{workshift.ApprovedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.WorkTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workshift.WorkTaskTable,
			Columns: []string{workshift.WorkTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worktask.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.WorkTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workshift.WorkTaskTable,
			Columns: []string{workshift.WorkTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worktask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.EditRequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   workshift.EditRequestTable,
			Columns: []string{workshift.EditRequestColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.EditRequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   workshift.EditRequestTable,
			Columns: []string{workshift.EditRequestColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.WorkShiftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   workshift.WorkShiftTable,
			Columns: []string{workshift.WorkShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.WorkShiftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   workshift.WorkShiftTable,
			Columns: []string{workshift.WorkShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(wuo.modifiers...)
	_node = &Workshift{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workshift.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
