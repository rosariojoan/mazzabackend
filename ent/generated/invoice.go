// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"mazza/ent/generated/company"
	"mazza/ent/generated/customer"
	"mazza/ent/generated/invoice"
	"mazza/ent/generated/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Invoice is the model entity for the Invoice schema.
type Invoice struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// DeletedAt holds the value of the "deletedAt" field.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	// CompanyLogo holds the value of the "companyLogo" field.
	CompanyLogo *string `json:"companyLogo,omitempty"`
	// CompanyName holds the value of the "companyName" field.
	CompanyName string `json:"companyName,omitempty"`
	// CompanyTaxID holds the value of the "companyTaxID" field.
	CompanyTaxID *string `json:"companyTaxID,omitempty"`
	// CompanyAddress holds the value of the "companyAddress" field.
	CompanyAddress string `json:"companyAddress,omitempty"`
	// CompanyCity holds the value of the "companyCity" field.
	CompanyCity string `json:"companyCity,omitempty"`
	// CompanyEmail holds the value of the "companyEmail" field.
	CompanyEmail *string `json:"companyEmail,omitempty"`
	// CompanyPhone holds the value of the "companyPhone" field.
	CompanyPhone *string `json:"companyPhone,omitempty"`
	// Number holds the value of the "number" field.
	Number *string `json:"number,omitempty"`
	// IssueDate holds the value of the "issueDate" field.
	IssueDate time.Time `json:"issueDate,omitempty"`
	// DueDate holds the value of the "dueDate" field.
	DueDate time.Time `json:"dueDate,omitempty"`
	// PaidAt holds the value of the "paidAt" field.
	PaidAt *time.Time `json:"paidAt,omitempty"`
	// Status holds the value of the "status" field.
	Status invoice.Status `json:"status,omitempty"`
	// CustomerName holds the value of the "customerName" field.
	CustomerName string `json:"customerName,omitempty"`
	// CustomerTaxID holds the value of the "customerTaxID" field.
	CustomerTaxID *string `json:"customerTaxID,omitempty"`
	// CustomerAddress holds the value of the "customerAddress" field.
	CustomerAddress *string `json:"customerAddress,omitempty"`
	// CustomerCity holds the value of the "customerCity" field.
	CustomerCity *string `json:"customerCity,omitempty"`
	// CustomerEmail holds the value of the "customerEmail" field.
	CustomerEmail *string `json:"customerEmail,omitempty"`
	// CustomerPhone holds the value of the "customerPhone" field.
	CustomerPhone *string `json:"customerPhone,omitempty"`
	// stringified JSON of product rows
	Items string `json:"items,omitempty"`
	// Subtotal holds the value of the "subtotal" field.
	Subtotal float64 `json:"subtotal,omitempty"`
	// Tax holds the value of the "tax" field.
	Tax float64 `json:"tax,omitempty"`
	// Total holds the value of the "total" field.
	Total float64 `json:"total,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes *string `json:"notes,omitempty"`
	// PaymentMethod holds the value of the "paymentMethod" field.
	PaymentMethod *string `json:"paymentMethod,omitempty"`
	// BankName holds the value of the "bankName" field.
	BankName *string `json:"bankName,omitempty"`
	// BankAgency holds the value of the "bankAgency" field.
	BankAgency *string `json:"bankAgency,omitempty"`
	// BankAccountNumber holds the value of the "bankAccountNumber" field.
	BankAccountNumber *string `json:"bankAccountNumber,omitempty"`
	// BankAccountName holds the value of the "bankAccountName" field.
	BankAccountName *string `json:"bankAccountName,omitempty"`
	// StorageURI holds the value of the "storageURI" field.
	StorageURI *string `json:"-"`
	// URL holds the value of the "URL" field.
	URL *string `json:"URL,omitempty"`
	// Filename holds the value of the "filename" field.
	Filename *string `json:"filename,omitempty"`
	// File size in KB
	Size *float64 `json:"size,omitempty"`
	// Keywords holds the value of the "keywords" field.
	Keywords string `json:"keywords,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InvoiceQuery when eager-loading is set.
	Edges                InvoiceEdges `json:"edges"`
	company_invoices     *int
	customer_invoices    *int
	user_issued_invoices *int
	selectValues         sql.SelectValues
}

// InvoiceEdges holds the relations/edges for other nodes in the graph.
type InvoiceEdges struct {
	// Company holds the value of the company edge.
	Company *Company `json:"company,omitempty"`
	// IssuedBy holds the value of the issuedBy edge.
	IssuedBy *User `json:"issuedBy,omitempty"`
	// Client holds the value of the client edge.
	Client *Customer `json:"client,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int
}

// CompanyOrErr returns the Company value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InvoiceEdges) CompanyOrErr() (*Company, error) {
	if e.Company != nil {
		return e.Company, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: company.Label}
	}
	return nil, &NotLoadedError{edge: "company"}
}

// IssuedByOrErr returns the IssuedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InvoiceEdges) IssuedByOrErr() (*User, error) {
	if e.IssuedBy != nil {
		return e.IssuedBy, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "issuedBy"}
}

// ClientOrErr returns the Client value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InvoiceEdges) ClientOrErr() (*Customer, error) {
	if e.Client != nil {
		return e.Client, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: customer.Label}
	}
	return nil, &NotLoadedError{edge: "client"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Invoice) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case invoice.FieldSubtotal, invoice.FieldTax, invoice.FieldTotal, invoice.FieldSize:
			values[i] = new(sql.NullFloat64)
		case invoice.FieldID:
			values[i] = new(sql.NullInt64)
		case invoice.FieldCompanyLogo, invoice.FieldCompanyName, invoice.FieldCompanyTaxID, invoice.FieldCompanyAddress, invoice.FieldCompanyCity, invoice.FieldCompanyEmail, invoice.FieldCompanyPhone, invoice.FieldNumber, invoice.FieldStatus, invoice.FieldCustomerName, invoice.FieldCustomerTaxID, invoice.FieldCustomerAddress, invoice.FieldCustomerCity, invoice.FieldCustomerEmail, invoice.FieldCustomerPhone, invoice.FieldItems, invoice.FieldNotes, invoice.FieldPaymentMethod, invoice.FieldBankName, invoice.FieldBankAgency, invoice.FieldBankAccountNumber, invoice.FieldBankAccountName, invoice.FieldStorageURI, invoice.FieldURL, invoice.FieldFilename, invoice.FieldKeywords:
			values[i] = new(sql.NullString)
		case invoice.FieldCreatedAt, invoice.FieldUpdatedAt, invoice.FieldDeletedAt, invoice.FieldIssueDate, invoice.FieldDueDate, invoice.FieldPaidAt:
			values[i] = new(sql.NullTime)
		case invoice.ForeignKeys[0]: // company_invoices
			values[i] = new(sql.NullInt64)
		case invoice.ForeignKeys[1]: // customer_invoices
			values[i] = new(sql.NullInt64)
		case invoice.ForeignKeys[2]: // user_issued_invoices
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Invoice fields.
func (i *Invoice) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case invoice.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case invoice.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case invoice.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[j])
			} else if value.Valid {
				i.UpdatedAt = value.Time
			}
		case invoice.FieldDeletedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deletedAt", values[j])
			} else if value.Valid {
				i.DeletedAt = new(time.Time)
				*i.DeletedAt = value.Time
			}
		case invoice.FieldCompanyLogo:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field companyLogo", values[j])
			} else if value.Valid {
				i.CompanyLogo = new(string)
				*i.CompanyLogo = value.String
			}
		case invoice.FieldCompanyName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field companyName", values[j])
			} else if value.Valid {
				i.CompanyName = value.String
			}
		case invoice.FieldCompanyTaxID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field companyTaxID", values[j])
			} else if value.Valid {
				i.CompanyTaxID = new(string)
				*i.CompanyTaxID = value.String
			}
		case invoice.FieldCompanyAddress:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field companyAddress", values[j])
			} else if value.Valid {
				i.CompanyAddress = value.String
			}
		case invoice.FieldCompanyCity:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field companyCity", values[j])
			} else if value.Valid {
				i.CompanyCity = value.String
			}
		case invoice.FieldCompanyEmail:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field companyEmail", values[j])
			} else if value.Valid {
				i.CompanyEmail = new(string)
				*i.CompanyEmail = value.String
			}
		case invoice.FieldCompanyPhone:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field companyPhone", values[j])
			} else if value.Valid {
				i.CompanyPhone = new(string)
				*i.CompanyPhone = value.String
			}
		case invoice.FieldNumber:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[j])
			} else if value.Valid {
				i.Number = new(string)
				*i.Number = value.String
			}
		case invoice.FieldIssueDate:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field issueDate", values[j])
			} else if value.Valid {
				i.IssueDate = value.Time
			}
		case invoice.FieldDueDate:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field dueDate", values[j])
			} else if value.Valid {
				i.DueDate = value.Time
			}
		case invoice.FieldPaidAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field paidAt", values[j])
			} else if value.Valid {
				i.PaidAt = new(time.Time)
				*i.PaidAt = value.Time
			}
		case invoice.FieldStatus:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[j])
			} else if value.Valid {
				i.Status = invoice.Status(value.String)
			}
		case invoice.FieldCustomerName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customerName", values[j])
			} else if value.Valid {
				i.CustomerName = value.String
			}
		case invoice.FieldCustomerTaxID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customerTaxID", values[j])
			} else if value.Valid {
				i.CustomerTaxID = new(string)
				*i.CustomerTaxID = value.String
			}
		case invoice.FieldCustomerAddress:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customerAddress", values[j])
			} else if value.Valid {
				i.CustomerAddress = new(string)
				*i.CustomerAddress = value.String
			}
		case invoice.FieldCustomerCity:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customerCity", values[j])
			} else if value.Valid {
				i.CustomerCity = new(string)
				*i.CustomerCity = value.String
			}
		case invoice.FieldCustomerEmail:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customerEmail", values[j])
			} else if value.Valid {
				i.CustomerEmail = new(string)
				*i.CustomerEmail = value.String
			}
		case invoice.FieldCustomerPhone:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customerPhone", values[j])
			} else if value.Valid {
				i.CustomerPhone = new(string)
				*i.CustomerPhone = value.String
			}
		case invoice.FieldItems:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field items", values[j])
			} else if value.Valid {
				i.Items = value.String
			}
		case invoice.FieldSubtotal:
			if value, ok := values[j].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field subtotal", values[j])
			} else if value.Valid {
				i.Subtotal = value.Float64
			}
		case invoice.FieldTax:
			if value, ok := values[j].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field tax", values[j])
			} else if value.Valid {
				i.Tax = value.Float64
			}
		case invoice.FieldTotal:
			if value, ok := values[j].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total", values[j])
			} else if value.Valid {
				i.Total = value.Float64
			}
		case invoice.FieldNotes:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[j])
			} else if value.Valid {
				i.Notes = new(string)
				*i.Notes = value.String
			}
		case invoice.FieldPaymentMethod:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field paymentMethod", values[j])
			} else if value.Valid {
				i.PaymentMethod = new(string)
				*i.PaymentMethod = value.String
			}
		case invoice.FieldBankName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bankName", values[j])
			} else if value.Valid {
				i.BankName = new(string)
				*i.BankName = value.String
			}
		case invoice.FieldBankAgency:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bankAgency", values[j])
			} else if value.Valid {
				i.BankAgency = new(string)
				*i.BankAgency = value.String
			}
		case invoice.FieldBankAccountNumber:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bankAccountNumber", values[j])
			} else if value.Valid {
				i.BankAccountNumber = new(string)
				*i.BankAccountNumber = value.String
			}
		case invoice.FieldBankAccountName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bankAccountName", values[j])
			} else if value.Valid {
				i.BankAccountName = new(string)
				*i.BankAccountName = value.String
			}
		case invoice.FieldStorageURI:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field storageURI", values[j])
			} else if value.Valid {
				i.StorageURI = new(string)
				*i.StorageURI = value.String
			}
		case invoice.FieldURL:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field URL", values[j])
			} else if value.Valid {
				i.URL = new(string)
				*i.URL = value.String
			}
		case invoice.FieldFilename:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field filename", values[j])
			} else if value.Valid {
				i.Filename = new(string)
				*i.Filename = value.String
			}
		case invoice.FieldSize:
			if value, ok := values[j].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[j])
			} else if value.Valid {
				i.Size = new(float64)
				*i.Size = value.Float64
			}
		case invoice.FieldKeywords:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field keywords", values[j])
			} else if value.Valid {
				i.Keywords = value.String
			}
		case invoice.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field company_invoices", value)
			} else if value.Valid {
				i.company_invoices = new(int)
				*i.company_invoices = int(value.Int64)
			}
		case invoice.ForeignKeys[1]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field customer_invoices", value)
			} else if value.Valid {
				i.customer_invoices = new(int)
				*i.customer_invoices = int(value.Int64)
			}
		case invoice.ForeignKeys[2]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_issued_invoices", value)
			} else if value.Valid {
				i.user_issued_invoices = new(int)
				*i.user_issued_invoices = int(value.Int64)
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Invoice.
// This includes values selected through modifiers, order, etc.
func (i *Invoice) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryCompany queries the "company" edge of the Invoice entity.
func (i *Invoice) QueryCompany() *CompanyQuery {
	return NewInvoiceClient(i.config).QueryCompany(i)
}

// QueryIssuedBy queries the "issuedBy" edge of the Invoice entity.
func (i *Invoice) QueryIssuedBy() *UserQuery {
	return NewInvoiceClient(i.config).QueryIssuedBy(i)
}

// QueryClient queries the "client" edge of the Invoice entity.
func (i *Invoice) QueryClient() *CustomerQuery {
	return NewInvoiceClient(i.config).QueryClient(i)
}

// Update returns a builder for updating this Invoice.
// Note that you need to call Invoice.Unwrap() before calling this method if this Invoice
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Invoice) Update() *InvoiceUpdateOne {
	return NewInvoiceClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Invoice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Invoice) Unwrap() *Invoice {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("generated: Invoice is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Invoice) String() string {
	var builder strings.Builder
	builder.WriteString("Invoice(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("createdAt=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(i.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := i.DeletedAt; v != nil {
		builder.WriteString("deletedAt=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := i.CompanyLogo; v != nil {
		builder.WriteString("companyLogo=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("companyName=")
	builder.WriteString(i.CompanyName)
	builder.WriteString(", ")
	if v := i.CompanyTaxID; v != nil {
		builder.WriteString("companyTaxID=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("companyAddress=")
	builder.WriteString(i.CompanyAddress)
	builder.WriteString(", ")
	builder.WriteString("companyCity=")
	builder.WriteString(i.CompanyCity)
	builder.WriteString(", ")
	if v := i.CompanyEmail; v != nil {
		builder.WriteString("companyEmail=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := i.CompanyPhone; v != nil {
		builder.WriteString("companyPhone=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := i.Number; v != nil {
		builder.WriteString("number=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("issueDate=")
	builder.WriteString(i.IssueDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("dueDate=")
	builder.WriteString(i.DueDate.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := i.PaidAt; v != nil {
		builder.WriteString("paidAt=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", i.Status))
	builder.WriteString(", ")
	builder.WriteString("customerName=")
	builder.WriteString(i.CustomerName)
	builder.WriteString(", ")
	if v := i.CustomerTaxID; v != nil {
		builder.WriteString("customerTaxID=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := i.CustomerAddress; v != nil {
		builder.WriteString("customerAddress=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := i.CustomerCity; v != nil {
		builder.WriteString("customerCity=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := i.CustomerEmail; v != nil {
		builder.WriteString("customerEmail=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := i.CustomerPhone; v != nil {
		builder.WriteString("customerPhone=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("items=")
	builder.WriteString(i.Items)
	builder.WriteString(", ")
	builder.WriteString("subtotal=")
	builder.WriteString(fmt.Sprintf("%v", i.Subtotal))
	builder.WriteString(", ")
	builder.WriteString("tax=")
	builder.WriteString(fmt.Sprintf("%v", i.Tax))
	builder.WriteString(", ")
	builder.WriteString("total=")
	builder.WriteString(fmt.Sprintf("%v", i.Total))
	builder.WriteString(", ")
	if v := i.Notes; v != nil {
		builder.WriteString("notes=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := i.PaymentMethod; v != nil {
		builder.WriteString("paymentMethod=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := i.BankName; v != nil {
		builder.WriteString("bankName=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := i.BankAgency; v != nil {
		builder.WriteString("bankAgency=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := i.BankAccountNumber; v != nil {
		builder.WriteString("bankAccountNumber=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := i.BankAccountName; v != nil {
		builder.WriteString("bankAccountName=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("storageURI=<sensitive>")
	builder.WriteString(", ")
	if v := i.URL; v != nil {
		builder.WriteString("URL=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := i.Filename; v != nil {
		builder.WriteString("filename=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := i.Size; v != nil {
		builder.WriteString("size=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("keywords=")
	builder.WriteString(i.Keywords)
	builder.WriteByte(')')
	return builder.String()
}

// Invoices is a parsable slice of Invoice.
type Invoices []*Invoice
