// Code generated by ent, DO NOT EDIT.

package generated

import (
	"mazza/ent/generated/accountingentry"
	"mazza/ent/generated/employee"
	"mazza/ent/generated/file"
	"mazza/ent/generated/payable"
	"mazza/ent/generated/product"
	"mazza/ent/generated/receivable"
	"mazza/ent/generated/treasury"
	"mazza/ent/generated/userrole"
	"mazza/ent/generated/workshift"
	"mazza/ent/generated/worktask"
	"time"
)

// CreateAccountingEntryInput represents a mutation input for creating accountingentries.
type CreateAccountingEntryInput struct {
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	DeletedAt   *time.Time
	Number      int
	Group       int
	Date        *time.Time
	Account     string
	Label       string
	Amount      float64
	Description string
	AccountType accountingentry.AccountType
	IsDebit     bool
	IsReversal  *bool
	Reversed    *bool
	CompanyID   *int
	UserID      *int
}

// Mutate applies the CreateAccountingEntryInput on the AccountingEntryMutation builder.
func (i *CreateAccountingEntryInput) Mutate(m *AccountingEntryMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	m.SetNumber(i.Number)
	m.SetGroup(i.Group)
	if v := i.Date; v != nil {
		m.SetDate(*v)
	}
	m.SetAccount(i.Account)
	m.SetLabel(i.Label)
	m.SetAmount(i.Amount)
	m.SetDescription(i.Description)
	m.SetAccountType(i.AccountType)
	m.SetIsDebit(i.IsDebit)
	if v := i.IsReversal; v != nil {
		m.SetIsReversal(*v)
	}
	if v := i.Reversed; v != nil {
		m.SetReversed(*v)
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
}

// SetInput applies the change-set in the CreateAccountingEntryInput on the AccountingEntryCreate builder.
func (c *AccountingEntryCreate) SetInput(i CreateAccountingEntryInput) *AccountingEntryCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateAccountingEntryInput represents a mutation input for updating accountingentries.
type UpdateAccountingEntryInput struct {
	UpdatedAt      *time.Time
	ClearDeletedAt bool
	DeletedAt      *time.Time
	Number         *int
	Group          *int
	Date           *time.Time
	Account        *string
	Label          *string
	Amount         *float64
	Description    *string
	AccountType    *accountingentry.AccountType
	IsDebit        *bool
	IsReversal     *bool
	Reversed       *bool
	ClearCompany   bool
	CompanyID      *int
	ClearUser      bool
	UserID         *int
}

// Mutate applies the UpdateAccountingEntryInput on the AccountingEntryMutation builder.
func (i *UpdateAccountingEntryInput) Mutate(m *AccountingEntryMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Number; v != nil {
		m.SetNumber(*v)
	}
	if v := i.Group; v != nil {
		m.SetGroup(*v)
	}
	if v := i.Date; v != nil {
		m.SetDate(*v)
	}
	if v := i.Account; v != nil {
		m.SetAccount(*v)
	}
	if v := i.Label; v != nil {
		m.SetLabel(*v)
	}
	if v := i.Amount; v != nil {
		m.SetAmount(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.AccountType; v != nil {
		m.SetAccountType(*v)
	}
	if v := i.IsDebit; v != nil {
		m.SetIsDebit(*v)
	}
	if v := i.IsReversal; v != nil {
		m.SetIsReversal(*v)
	}
	if v := i.Reversed; v != nil {
		m.SetReversed(*v)
	}
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if i.ClearUser {
		m.ClearUser()
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
}

// SetInput applies the change-set in the UpdateAccountingEntryInput on the AccountingEntryUpdate builder.
func (c *AccountingEntryUpdate) SetInput(i UpdateAccountingEntryInput) *AccountingEntryUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateAccountingEntryInput on the AccountingEntryUpdateOne builder.
func (c *AccountingEntryUpdateOne) SetInput(i UpdateAccountingEntryInput) *AccountingEntryUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCashMovementInput represents a mutation input for creating cashmovements.
type CreateCashMovementInput struct {
	CreatedAt  *time.Time
	UpdatedAt  *time.Time
	DeletedAt  *time.Time
	Amount     float64
	Date       time.Time
	EntryGroup int
	TreasuryID *int
}

// Mutate applies the CreateCashMovementInput on the CashMovementMutation builder.
func (i *CreateCashMovementInput) Mutate(m *CashMovementMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	m.SetAmount(i.Amount)
	m.SetDate(i.Date)
	m.SetEntryGroup(i.EntryGroup)
	if v := i.TreasuryID; v != nil {
		m.SetTreasuryID(*v)
	}
}

// SetInput applies the change-set in the CreateCashMovementInput on the CashMovementCreate builder.
func (c *CashMovementCreate) SetInput(i CreateCashMovementInput) *CashMovementCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCashMovementInput represents a mutation input for updating cashmovements.
type UpdateCashMovementInput struct {
	UpdatedAt      *time.Time
	ClearDeletedAt bool
	DeletedAt      *time.Time
	Amount         *float64
	Date           *time.Time
	EntryGroup     *int
	ClearTreasury  bool
	TreasuryID     *int
}

// Mutate applies the UpdateCashMovementInput on the CashMovementMutation builder.
func (i *UpdateCashMovementInput) Mutate(m *CashMovementMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Amount; v != nil {
		m.SetAmount(*v)
	}
	if v := i.Date; v != nil {
		m.SetDate(*v)
	}
	if v := i.EntryGroup; v != nil {
		m.SetEntryGroup(*v)
	}
	if i.ClearTreasury {
		m.ClearTreasury()
	}
	if v := i.TreasuryID; v != nil {
		m.SetTreasuryID(*v)
	}
}

// SetInput applies the change-set in the UpdateCashMovementInput on the CashMovementUpdate builder.
func (c *CashMovementUpdate) SetInput(i UpdateCashMovementInput) *CashMovementUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCashMovementInput on the CashMovementUpdateOne builder.
func (c *CashMovementUpdateOne) SetInput(i UpdateCashMovementInput) *CashMovementUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCompanyInput represents a mutation input for creating companies.
type CreateCompanyInput struct {
	CreatedAt          *time.Time
	UpdatedAt          *time.Time
	DeletedAt          *time.Time
	Address            *string
	BaseCurrency       *string
	CeoName            *string
	City               string
	Country            string
	EstablishedAt      time.Time
	Description        *string
	Email              *string
	LastEntryDate      time.Time
	LastInvoiceNumber  *int32
	Logo               *string
	Name               string
	NumberOfEmployees  *int32
	Phone              *string
	Sector             *string
	TaxId              string
	VatRate            *float64
	Website            *string
	AvailableRoleIDs   []int
	AccountingEntryIDs []int
	CustomerIDs        []int
	EmployeeIDs        []int
	FileIDs            []int
	ProductIDs         []int
	SupplierIDs        []int
	TokenIDs           []int
	TreasuryIDs        []int
	WorkShiftIDs       []int
	WorkTaskIDs        []int
	WorkTagIDs         []int
	UserIDs            []int
	DaughterCompanyIDs []int
	ParentCompanyID    *int
}

// Mutate applies the CreateCompanyInput on the CompanyMutation builder.
func (i *CreateCompanyInput) Mutate(m *CompanyMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if v := i.BaseCurrency; v != nil {
		m.SetBaseCurrency(*v)
	}
	if v := i.CeoName; v != nil {
		m.SetCeoName(*v)
	}
	m.SetCity(i.City)
	m.SetCountry(i.Country)
	m.SetEstablishedAt(i.EstablishedAt)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	m.SetLastEntryDate(i.LastEntryDate)
	if v := i.LastInvoiceNumber; v != nil {
		m.SetLastInvoiceNumber(*v)
	}
	if v := i.Logo; v != nil {
		m.SetLogo(*v)
	}
	m.SetName(i.Name)
	if v := i.NumberOfEmployees; v != nil {
		m.SetNumberOfEmployees(*v)
	}
	if v := i.Phone; v != nil {
		m.SetPhone(*v)
	}
	if v := i.Sector; v != nil {
		m.SetSector(*v)
	}
	m.SetTaxId(i.TaxId)
	if v := i.VatRate; v != nil {
		m.SetVatRate(*v)
	}
	if v := i.Website; v != nil {
		m.SetWebsite(*v)
	}
	if v := i.AvailableRoleIDs; len(v) > 0 {
		m.AddAvailableRoleIDs(v...)
	}
	if v := i.AccountingEntryIDs; len(v) > 0 {
		m.AddAccountingEntryIDs(v...)
	}
	if v := i.CustomerIDs; len(v) > 0 {
		m.AddCustomerIDs(v...)
	}
	if v := i.EmployeeIDs; len(v) > 0 {
		m.AddEmployeeIDs(v...)
	}
	if v := i.FileIDs; len(v) > 0 {
		m.AddFileIDs(v...)
	}
	if v := i.ProductIDs; len(v) > 0 {
		m.AddProductIDs(v...)
	}
	if v := i.SupplierIDs; len(v) > 0 {
		m.AddSupplierIDs(v...)
	}
	if v := i.TokenIDs; len(v) > 0 {
		m.AddTokenIDs(v...)
	}
	if v := i.TreasuryIDs; len(v) > 0 {
		m.AddTreasuryIDs(v...)
	}
	if v := i.WorkShiftIDs; len(v) > 0 {
		m.AddWorkShiftIDs(v...)
	}
	if v := i.WorkTaskIDs; len(v) > 0 {
		m.AddWorkTaskIDs(v...)
	}
	if v := i.WorkTagIDs; len(v) > 0 {
		m.AddWorkTagIDs(v...)
	}
	if v := i.UserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.DaughterCompanyIDs; len(v) > 0 {
		m.AddDaughterCompanyIDs(v...)
	}
	if v := i.ParentCompanyID; v != nil {
		m.SetParentCompanyID(*v)
	}
}

// SetInput applies the change-set in the CreateCompanyInput on the CompanyCreate builder.
func (c *CompanyCreate) SetInput(i CreateCompanyInput) *CompanyCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCompanyInput represents a mutation input for updating companies.
type UpdateCompanyInput struct {
	UpdatedAt                *time.Time
	ClearDeletedAt           bool
	DeletedAt                *time.Time
	ClearAddress             bool
	Address                  *string
	BaseCurrency             *string
	ClearCeoName             bool
	CeoName                  *string
	City                     *string
	Country                  *string
	EstablishedAt            *time.Time
	ClearDescription         bool
	Description              *string
	ClearEmail               bool
	Email                    *string
	LastEntryDate            *time.Time
	ClearLastInvoiceNumber   bool
	LastInvoiceNumber        *int32
	ClearLogo                bool
	Logo                     *string
	Name                     *string
	NumberOfEmployees        *int32
	ClearPhone               bool
	Phone                    *string
	ClearSector              bool
	Sector                   *string
	TaxId                    *string
	VatRate                  *float64
	ClearWebsite             bool
	Website                  *string
	ClearAvailableRoles      bool
	AddAvailableRoleIDs      []int
	RemoveAvailableRoleIDs   []int
	ClearAccountingEntries   bool
	AddAccountingEntryIDs    []int
	RemoveAccountingEntryIDs []int
	ClearCustomers           bool
	AddCustomerIDs           []int
	RemoveCustomerIDs        []int
	ClearEmployees           bool
	AddEmployeeIDs           []int
	RemoveEmployeeIDs        []int
	ClearFiles               bool
	AddFileIDs               []int
	RemoveFileIDs            []int
	ClearProducts            bool
	AddProductIDs            []int
	RemoveProductIDs         []int
	ClearSuppliers           bool
	AddSupplierIDs           []int
	RemoveSupplierIDs        []int
	ClearTokens              bool
	AddTokenIDs              []int
	RemoveTokenIDs           []int
	ClearTreasuries          bool
	AddTreasuryIDs           []int
	RemoveTreasuryIDs        []int
	ClearWorkShifts          bool
	AddWorkShiftIDs          []int
	RemoveWorkShiftIDs       []int
	ClearWorkTasks           bool
	AddWorkTaskIDs           []int
	RemoveWorkTaskIDs        []int
	ClearWorkTags            bool
	AddWorkTagIDs            []int
	RemoveWorkTagIDs         []int
	ClearUsers               bool
	AddUserIDs               []int
	RemoveUserIDs            []int
	ClearDaughterCompanies   bool
	AddDaughterCompanyIDs    []int
	RemoveDaughterCompanyIDs []int
	ClearParentCompany       bool
	ParentCompanyID          *int
}

// Mutate applies the UpdateCompanyInput on the CompanyMutation builder.
func (i *UpdateCompanyInput) Mutate(m *CompanyMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if i.ClearAddress {
		m.ClearAddress()
	}
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if v := i.BaseCurrency; v != nil {
		m.SetBaseCurrency(*v)
	}
	if i.ClearCeoName {
		m.ClearCeoName()
	}
	if v := i.CeoName; v != nil {
		m.SetCeoName(*v)
	}
	if v := i.City; v != nil {
		m.SetCity(*v)
	}
	if v := i.Country; v != nil {
		m.SetCountry(*v)
	}
	if v := i.EstablishedAt; v != nil {
		m.SetEstablishedAt(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearEmail {
		m.ClearEmail()
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.LastEntryDate; v != nil {
		m.SetLastEntryDate(*v)
	}
	if i.ClearLastInvoiceNumber {
		m.ClearLastInvoiceNumber()
	}
	if v := i.LastInvoiceNumber; v != nil {
		m.SetLastInvoiceNumber(*v)
	}
	if i.ClearLogo {
		m.ClearLogo()
	}
	if v := i.Logo; v != nil {
		m.SetLogo(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.NumberOfEmployees; v != nil {
		m.SetNumberOfEmployees(*v)
	}
	if i.ClearPhone {
		m.ClearPhone()
	}
	if v := i.Phone; v != nil {
		m.SetPhone(*v)
	}
	if i.ClearSector {
		m.ClearSector()
	}
	if v := i.Sector; v != nil {
		m.SetSector(*v)
	}
	if v := i.TaxId; v != nil {
		m.SetTaxId(*v)
	}
	if v := i.VatRate; v != nil {
		m.SetVatRate(*v)
	}
	if i.ClearWebsite {
		m.ClearWebsite()
	}
	if v := i.Website; v != nil {
		m.SetWebsite(*v)
	}
	if i.ClearAvailableRoles {
		m.ClearAvailableRoles()
	}
	if v := i.AddAvailableRoleIDs; len(v) > 0 {
		m.AddAvailableRoleIDs(v...)
	}
	if v := i.RemoveAvailableRoleIDs; len(v) > 0 {
		m.RemoveAvailableRoleIDs(v...)
	}
	if i.ClearAccountingEntries {
		m.ClearAccountingEntries()
	}
	if v := i.AddAccountingEntryIDs; len(v) > 0 {
		m.AddAccountingEntryIDs(v...)
	}
	if v := i.RemoveAccountingEntryIDs; len(v) > 0 {
		m.RemoveAccountingEntryIDs(v...)
	}
	if i.ClearCustomers {
		m.ClearCustomers()
	}
	if v := i.AddCustomerIDs; len(v) > 0 {
		m.AddCustomerIDs(v...)
	}
	if v := i.RemoveCustomerIDs; len(v) > 0 {
		m.RemoveCustomerIDs(v...)
	}
	if i.ClearEmployees {
		m.ClearEmployees()
	}
	if v := i.AddEmployeeIDs; len(v) > 0 {
		m.AddEmployeeIDs(v...)
	}
	if v := i.RemoveEmployeeIDs; len(v) > 0 {
		m.RemoveEmployeeIDs(v...)
	}
	if i.ClearFiles {
		m.ClearFiles()
	}
	if v := i.AddFileIDs; len(v) > 0 {
		m.AddFileIDs(v...)
	}
	if v := i.RemoveFileIDs; len(v) > 0 {
		m.RemoveFileIDs(v...)
	}
	if i.ClearProducts {
		m.ClearProducts()
	}
	if v := i.AddProductIDs; len(v) > 0 {
		m.AddProductIDs(v...)
	}
	if v := i.RemoveProductIDs; len(v) > 0 {
		m.RemoveProductIDs(v...)
	}
	if i.ClearSuppliers {
		m.ClearSuppliers()
	}
	if v := i.AddSupplierIDs; len(v) > 0 {
		m.AddSupplierIDs(v...)
	}
	if v := i.RemoveSupplierIDs; len(v) > 0 {
		m.RemoveSupplierIDs(v...)
	}
	if i.ClearTokens {
		m.ClearTokens()
	}
	if v := i.AddTokenIDs; len(v) > 0 {
		m.AddTokenIDs(v...)
	}
	if v := i.RemoveTokenIDs; len(v) > 0 {
		m.RemoveTokenIDs(v...)
	}
	if i.ClearTreasuries {
		m.ClearTreasuries()
	}
	if v := i.AddTreasuryIDs; len(v) > 0 {
		m.AddTreasuryIDs(v...)
	}
	if v := i.RemoveTreasuryIDs; len(v) > 0 {
		m.RemoveTreasuryIDs(v...)
	}
	if i.ClearWorkShifts {
		m.ClearWorkShifts()
	}
	if v := i.AddWorkShiftIDs; len(v) > 0 {
		m.AddWorkShiftIDs(v...)
	}
	if v := i.RemoveWorkShiftIDs; len(v) > 0 {
		m.RemoveWorkShiftIDs(v...)
	}
	if i.ClearWorkTasks {
		m.ClearWorkTasks()
	}
	if v := i.AddWorkTaskIDs; len(v) > 0 {
		m.AddWorkTaskIDs(v...)
	}
	if v := i.RemoveWorkTaskIDs; len(v) > 0 {
		m.RemoveWorkTaskIDs(v...)
	}
	if i.ClearWorkTags {
		m.ClearWorkTags()
	}
	if v := i.AddWorkTagIDs; len(v) > 0 {
		m.AddWorkTagIDs(v...)
	}
	if v := i.RemoveWorkTagIDs; len(v) > 0 {
		m.RemoveWorkTagIDs(v...)
	}
	if i.ClearUsers {
		m.ClearUsers()
	}
	if v := i.AddUserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.RemoveUserIDs; len(v) > 0 {
		m.RemoveUserIDs(v...)
	}
	if i.ClearDaughterCompanies {
		m.ClearDaughterCompanies()
	}
	if v := i.AddDaughterCompanyIDs; len(v) > 0 {
		m.AddDaughterCompanyIDs(v...)
	}
	if v := i.RemoveDaughterCompanyIDs; len(v) > 0 {
		m.RemoveDaughterCompanyIDs(v...)
	}
	if i.ClearParentCompany {
		m.ClearParentCompany()
	}
	if v := i.ParentCompanyID; v != nil {
		m.SetParentCompanyID(*v)
	}
}

// SetInput applies the change-set in the UpdateCompanyInput on the CompanyUpdate builder.
func (c *CompanyUpdate) SetInput(i UpdateCompanyInput) *CompanyUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCompanyInput on the CompanyUpdateOne builder.
func (c *CompanyUpdateOne) SetInput(i UpdateCompanyInput) *CompanyUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCustomerInput represents a mutation input for creating customers.
type CreateCustomerInput struct {
	CreatedAt     *time.Time
	UpdatedAt     *time.Time
	DeletedAt     *time.Time
	Address       string
	City          string
	Country       string
	Description   string
	Email         string
	IsDefault     *bool
	Name          string
	Phone         string
	TaxId         string
	CompanyID     *int
	ReceivableIDs []int
}

// Mutate applies the CreateCustomerInput on the CustomerMutation builder.
func (i *CreateCustomerInput) Mutate(m *CustomerMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	m.SetAddress(i.Address)
	m.SetCity(i.City)
	m.SetCountry(i.Country)
	m.SetDescription(i.Description)
	m.SetEmail(i.Email)
	if v := i.IsDefault; v != nil {
		m.SetIsDefault(*v)
	}
	m.SetName(i.Name)
	m.SetPhone(i.Phone)
	m.SetTaxId(i.TaxId)
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if v := i.ReceivableIDs; len(v) > 0 {
		m.AddReceivableIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCustomerInput on the CustomerCreate builder.
func (c *CustomerCreate) SetInput(i CreateCustomerInput) *CustomerCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCustomerInput represents a mutation input for updating customers.
type UpdateCustomerInput struct {
	UpdatedAt           *time.Time
	ClearDeletedAt      bool
	DeletedAt           *time.Time
	Address             *string
	City                *string
	Country             *string
	Description         *string
	Email               *string
	ClearIsDefault      bool
	IsDefault           *bool
	Name                *string
	Phone               *string
	TaxId               *string
	ClearCompany        bool
	CompanyID           *int
	ClearReceivables    bool
	AddReceivableIDs    []int
	RemoveReceivableIDs []int
}

// Mutate applies the UpdateCustomerInput on the CustomerMutation builder.
func (i *UpdateCustomerInput) Mutate(m *CustomerMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if v := i.City; v != nil {
		m.SetCity(*v)
	}
	if v := i.Country; v != nil {
		m.SetCountry(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if i.ClearIsDefault {
		m.ClearIsDefault()
	}
	if v := i.IsDefault; v != nil {
		m.SetIsDefault(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Phone; v != nil {
		m.SetPhone(*v)
	}
	if v := i.TaxId; v != nil {
		m.SetTaxId(*v)
	}
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if i.ClearReceivables {
		m.ClearReceivables()
	}
	if v := i.AddReceivableIDs; len(v) > 0 {
		m.AddReceivableIDs(v...)
	}
	if v := i.RemoveReceivableIDs; len(v) > 0 {
		m.RemoveReceivableIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCustomerInput on the CustomerUpdate builder.
func (c *CustomerUpdate) SetInput(i UpdateCustomerInput) *CustomerUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCustomerInput on the CustomerUpdateOne builder.
func (c *CustomerUpdateOne) SetInput(i UpdateCustomerInput) *CustomerUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateEmployeeInput represents a mutation input for creating employees.
type CreateEmployeeInput struct {
	CreatedAt            *time.Time
	UpdatedAt            *time.Time
	DeletedAt            *time.Time
	Name                 string
	Gender               employee.Gender
	Position             *string
	Email                *string
	Phone                string
	CompanyID            *int
	UserID               *int
	SubordinateIDs       []int
	LeaderID             *int
	WorkShiftIDs         []int
	ApprovedWorkShiftIDs []int
	AssignedTaskIDs      []int
}

// Mutate applies the CreateEmployeeInput on the EmployeeMutation builder.
func (i *CreateEmployeeInput) Mutate(m *EmployeeMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	m.SetName(i.Name)
	m.SetGender(i.Gender)
	if v := i.Position; v != nil {
		m.SetPosition(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	m.SetPhone(i.Phone)
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
	if v := i.SubordinateIDs; len(v) > 0 {
		m.AddSubordinateIDs(v...)
	}
	if v := i.LeaderID; v != nil {
		m.SetLeaderID(*v)
	}
	if v := i.WorkShiftIDs; len(v) > 0 {
		m.AddWorkShiftIDs(v...)
	}
	if v := i.ApprovedWorkShiftIDs; len(v) > 0 {
		m.AddApprovedWorkShiftIDs(v...)
	}
	if v := i.AssignedTaskIDs; len(v) > 0 {
		m.AddAssignedTaskIDs(v...)
	}
}

// SetInput applies the change-set in the CreateEmployeeInput on the EmployeeCreate builder.
func (c *EmployeeCreate) SetInput(i CreateEmployeeInput) *EmployeeCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateEmployeeInput represents a mutation input for updating employees.
type UpdateEmployeeInput struct {
	UpdatedAt                  *time.Time
	ClearDeletedAt             bool
	DeletedAt                  *time.Time
	Name                       *string
	Gender                     *employee.Gender
	ClearPosition              bool
	Position                   *string
	ClearEmail                 bool
	Email                      *string
	Phone                      *string
	ClearCompany               bool
	CompanyID                  *int
	ClearUser                  bool
	UserID                     *int
	ClearSubordinates          bool
	AddSubordinateIDs          []int
	RemoveSubordinateIDs       []int
	ClearLeader                bool
	LeaderID                   *int
	ClearWorkShifts            bool
	AddWorkShiftIDs            []int
	RemoveWorkShiftIDs         []int
	ClearApprovedWorkShifts    bool
	AddApprovedWorkShiftIDs    []int
	RemoveApprovedWorkShiftIDs []int
	ClearAssignedTasks         bool
	AddAssignedTaskIDs         []int
	RemoveAssignedTaskIDs      []int
}

// Mutate applies the UpdateEmployeeInput on the EmployeeMutation builder.
func (i *UpdateEmployeeInput) Mutate(m *EmployeeMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Gender; v != nil {
		m.SetGender(*v)
	}
	if i.ClearPosition {
		m.ClearPosition()
	}
	if v := i.Position; v != nil {
		m.SetPosition(*v)
	}
	if i.ClearEmail {
		m.ClearEmail()
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.Phone; v != nil {
		m.SetPhone(*v)
	}
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if i.ClearUser {
		m.ClearUser()
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
	if i.ClearSubordinates {
		m.ClearSubordinates()
	}
	if v := i.AddSubordinateIDs; len(v) > 0 {
		m.AddSubordinateIDs(v...)
	}
	if v := i.RemoveSubordinateIDs; len(v) > 0 {
		m.RemoveSubordinateIDs(v...)
	}
	if i.ClearLeader {
		m.ClearLeader()
	}
	if v := i.LeaderID; v != nil {
		m.SetLeaderID(*v)
	}
	if i.ClearWorkShifts {
		m.ClearWorkShifts()
	}
	if v := i.AddWorkShiftIDs; len(v) > 0 {
		m.AddWorkShiftIDs(v...)
	}
	if v := i.RemoveWorkShiftIDs; len(v) > 0 {
		m.RemoveWorkShiftIDs(v...)
	}
	if i.ClearApprovedWorkShifts {
		m.ClearApprovedWorkShifts()
	}
	if v := i.AddApprovedWorkShiftIDs; len(v) > 0 {
		m.AddApprovedWorkShiftIDs(v...)
	}
	if v := i.RemoveApprovedWorkShiftIDs; len(v) > 0 {
		m.RemoveApprovedWorkShiftIDs(v...)
	}
	if i.ClearAssignedTasks {
		m.ClearAssignedTasks()
	}
	if v := i.AddAssignedTaskIDs; len(v) > 0 {
		m.AddAssignedTaskIDs(v...)
	}
	if v := i.RemoveAssignedTaskIDs; len(v) > 0 {
		m.RemoveAssignedTaskIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateEmployeeInput on the EmployeeUpdate builder.
func (c *EmployeeUpdate) SetInput(i UpdateEmployeeInput) *EmployeeUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateEmployeeInput on the EmployeeUpdateOne builder.
func (c *EmployeeUpdateOne) SetInput(i UpdateEmployeeInput) *EmployeeUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateFileInput represents a mutation input for creating files.
type CreateFileInput struct {
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	DeletedAt   *time.Time
	Category    file.Category
	Extension   string
	Size        string
	URL         string
	Description string
	CompanyID   *int
	ProductID   *int
}

// Mutate applies the CreateFileInput on the FileMutation builder.
func (i *CreateFileInput) Mutate(m *FileMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	m.SetCategory(i.Category)
	m.SetExtension(i.Extension)
	m.SetSize(i.Size)
	m.SetURL(i.URL)
	m.SetDescription(i.Description)
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if v := i.ProductID; v != nil {
		m.SetProductID(*v)
	}
}

// SetInput applies the change-set in the CreateFileInput on the FileCreate builder.
func (c *FileCreate) SetInput(i CreateFileInput) *FileCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateFileInput represents a mutation input for updating files.
type UpdateFileInput struct {
	UpdatedAt      *time.Time
	ClearDeletedAt bool
	DeletedAt      *time.Time
	Category       *file.Category
	Extension      *string
	Size           *string
	URL            *string
	Description    *string
	ClearCompany   bool
	CompanyID      *int
	ClearProduct   bool
	ProductID      *int
}

// Mutate applies the UpdateFileInput on the FileMutation builder.
func (i *UpdateFileInput) Mutate(m *FileMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Category; v != nil {
		m.SetCategory(*v)
	}
	if v := i.Extension; v != nil {
		m.SetExtension(*v)
	}
	if v := i.Size; v != nil {
		m.SetSize(*v)
	}
	if v := i.URL; v != nil {
		m.SetURL(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if i.ClearProduct {
		m.ClearProduct()
	}
	if v := i.ProductID; v != nil {
		m.SetProductID(*v)
	}
}

// SetInput applies the change-set in the UpdateFileInput on the FileUpdate builder.
func (c *FileUpdate) SetInput(i UpdateFileInput) *FileUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateFileInput on the FileUpdateOne builder.
func (c *FileUpdateOne) SetInput(i UpdateFileInput) *FileUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePayableInput represents a mutation input for creating payables.
type CreatePayableInput struct {
	CreatedAt          *time.Time
	UpdatedAt          *time.Time
	DeletedAt          *time.Time
	EntryGroup         int
	Date               time.Time
	OutstandingBalance float64
	TotalTransaction   float64
	DaysDue            int
	Status             payable.Status
	SupplierID         *int
}

// Mutate applies the CreatePayableInput on the PayableMutation builder.
func (i *CreatePayableInput) Mutate(m *PayableMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	m.SetEntryGroup(i.EntryGroup)
	m.SetDate(i.Date)
	m.SetOutstandingBalance(i.OutstandingBalance)
	m.SetTotalTransaction(i.TotalTransaction)
	m.SetDaysDue(i.DaysDue)
	m.SetStatus(i.Status)
	if v := i.SupplierID; v != nil {
		m.SetSupplierID(*v)
	}
}

// SetInput applies the change-set in the CreatePayableInput on the PayableCreate builder.
func (c *PayableCreate) SetInput(i CreatePayableInput) *PayableCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePayableInput represents a mutation input for updating payables.
type UpdatePayableInput struct {
	UpdatedAt          *time.Time
	ClearDeletedAt     bool
	DeletedAt          *time.Time
	EntryGroup         *int
	Date               *time.Time
	OutstandingBalance *float64
	TotalTransaction   *float64
	DaysDue            *int
	Status             *payable.Status
	ClearSupplier      bool
	SupplierID         *int
}

// Mutate applies the UpdatePayableInput on the PayableMutation builder.
func (i *UpdatePayableInput) Mutate(m *PayableMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.EntryGroup; v != nil {
		m.SetEntryGroup(*v)
	}
	if v := i.Date; v != nil {
		m.SetDate(*v)
	}
	if v := i.OutstandingBalance; v != nil {
		m.SetOutstandingBalance(*v)
	}
	if v := i.TotalTransaction; v != nil {
		m.SetTotalTransaction(*v)
	}
	if v := i.DaysDue; v != nil {
		m.SetDaysDue(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearSupplier {
		m.ClearSupplier()
	}
	if v := i.SupplierID; v != nil {
		m.SetSupplierID(*v)
	}
}

// SetInput applies the change-set in the UpdatePayableInput on the PayableUpdate builder.
func (c *PayableUpdate) SetInput(i UpdatePayableInput) *PayableUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePayableInput on the PayableUpdateOne builder.
func (c *PayableUpdateOne) SetInput(i UpdatePayableInput) *PayableUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateProductInput represents a mutation input for creating products.
type CreateProductInput struct {
	CreatedAt          *time.Time
	UpdatedAt          *time.Time
	DeletedAt          *time.Time
	Description        string
	IsDefault          *bool
	MinimumStock       *int
	Name               string
	Price              *int
	Sku                string
	Stock              *float64
	Category           product.Category
	UnitCost           float64
	CompanyID          *int
	PictureIDs         []int
	ProductMovementIDs []int
}

// Mutate applies the CreateProductInput on the ProductMutation builder.
func (i *CreateProductInput) Mutate(m *ProductMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	m.SetDescription(i.Description)
	if v := i.IsDefault; v != nil {
		m.SetIsDefault(*v)
	}
	if v := i.MinimumStock; v != nil {
		m.SetMinimumStock(*v)
	}
	m.SetName(i.Name)
	if v := i.Price; v != nil {
		m.SetPrice(*v)
	}
	m.SetSku(i.Sku)
	if v := i.Stock; v != nil {
		m.SetStock(*v)
	}
	m.SetCategory(i.Category)
	m.SetUnitCost(i.UnitCost)
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if v := i.PictureIDs; len(v) > 0 {
		m.AddPictureIDs(v...)
	}
	if v := i.ProductMovementIDs; len(v) > 0 {
		m.AddProductMovementIDs(v...)
	}
}

// SetInput applies the change-set in the CreateProductInput on the ProductCreate builder.
func (c *ProductCreate) SetInput(i CreateProductInput) *ProductCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateProductInput represents a mutation input for updating products.
type UpdateProductInput struct {
	UpdatedAt                *time.Time
	ClearDeletedAt           bool
	DeletedAt                *time.Time
	Description              *string
	IsDefault                *bool
	MinimumStock             *int
	Name                     *string
	Price                    *int
	Sku                      *string
	Stock                    *float64
	Category                 *product.Category
	UnitCost                 *float64
	ClearCompany             bool
	CompanyID                *int
	ClearPictures            bool
	AddPictureIDs            []int
	RemovePictureIDs         []int
	ClearProductMovements    bool
	AddProductMovementIDs    []int
	RemoveProductMovementIDs []int
}

// Mutate applies the UpdateProductInput on the ProductMutation builder.
func (i *UpdateProductInput) Mutate(m *ProductMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.IsDefault; v != nil {
		m.SetIsDefault(*v)
	}
	if v := i.MinimumStock; v != nil {
		m.SetMinimumStock(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Price; v != nil {
		m.SetPrice(*v)
	}
	if v := i.Sku; v != nil {
		m.SetSku(*v)
	}
	if v := i.Stock; v != nil {
		m.SetStock(*v)
	}
	if v := i.Category; v != nil {
		m.SetCategory(*v)
	}
	if v := i.UnitCost; v != nil {
		m.SetUnitCost(*v)
	}
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if i.ClearPictures {
		m.ClearPictures()
	}
	if v := i.AddPictureIDs; len(v) > 0 {
		m.AddPictureIDs(v...)
	}
	if v := i.RemovePictureIDs; len(v) > 0 {
		m.RemovePictureIDs(v...)
	}
	if i.ClearProductMovements {
		m.ClearProductMovements()
	}
	if v := i.AddProductMovementIDs; len(v) > 0 {
		m.AddProductMovementIDs(v...)
	}
	if v := i.RemoveProductMovementIDs; len(v) > 0 {
		m.RemoveProductMovementIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateProductInput on the ProductUpdate builder.
func (c *ProductUpdate) SetInput(i UpdateProductInput) *ProductUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateProductInput on the ProductUpdateOne builder.
func (c *ProductUpdateOne) SetInput(i UpdateProductInput) *ProductUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateProductMovementInput represents a mutation input for creating productmovements.
type CreateProductMovementInput struct {
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	DeletedAt   *time.Time
	EntryGroup  int
	AverageCost float64
	UnitCost    float64
	Price       *float64
	Quantity    int
	ProductID   *int
}

// Mutate applies the CreateProductMovementInput on the ProductMovementMutation builder.
func (i *CreateProductMovementInput) Mutate(m *ProductMovementMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	m.SetEntryGroup(i.EntryGroup)
	m.SetAverageCost(i.AverageCost)
	m.SetUnitCost(i.UnitCost)
	if v := i.Price; v != nil {
		m.SetPrice(*v)
	}
	m.SetQuantity(i.Quantity)
	if v := i.ProductID; v != nil {
		m.SetProductID(*v)
	}
}

// SetInput applies the change-set in the CreateProductMovementInput on the ProductMovementCreate builder.
func (c *ProductMovementCreate) SetInput(i CreateProductMovementInput) *ProductMovementCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateProductMovementInput represents a mutation input for updating productmovements.
type UpdateProductMovementInput struct {
	UpdatedAt      *time.Time
	ClearDeletedAt bool
	DeletedAt      *time.Time
	EntryGroup     *int
	AverageCost    *float64
	UnitCost       *float64
	Price          *float64
	Quantity       *int
	ClearProduct   bool
	ProductID      *int
}

// Mutate applies the UpdateProductMovementInput on the ProductMovementMutation builder.
func (i *UpdateProductMovementInput) Mutate(m *ProductMovementMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.EntryGroup; v != nil {
		m.SetEntryGroup(*v)
	}
	if v := i.AverageCost; v != nil {
		m.SetAverageCost(*v)
	}
	if v := i.UnitCost; v != nil {
		m.SetUnitCost(*v)
	}
	if v := i.Price; v != nil {
		m.SetPrice(*v)
	}
	if v := i.Quantity; v != nil {
		m.SetQuantity(*v)
	}
	if i.ClearProduct {
		m.ClearProduct()
	}
	if v := i.ProductID; v != nil {
		m.SetProductID(*v)
	}
}

// SetInput applies the change-set in the UpdateProductMovementInput on the ProductMovementUpdate builder.
func (c *ProductMovementUpdate) SetInput(i UpdateProductMovementInput) *ProductMovementUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateProductMovementInput on the ProductMovementUpdateOne builder.
func (c *ProductMovementUpdateOne) SetInput(i UpdateProductMovementInput) *ProductMovementUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateReceivableInput represents a mutation input for creating receivables.
type CreateReceivableInput struct {
	CreatedAt          *time.Time
	UpdatedAt          *time.Time
	DeletedAt          *time.Time
	EntryGroup         int
	Date               time.Time
	OutstandingBalance float64
	TotalTransaction   float64
	DaysDue            int
	Status             receivable.Status
	CustomerID         *int
}

// Mutate applies the CreateReceivableInput on the ReceivableMutation builder.
func (i *CreateReceivableInput) Mutate(m *ReceivableMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	m.SetEntryGroup(i.EntryGroup)
	m.SetDate(i.Date)
	m.SetOutstandingBalance(i.OutstandingBalance)
	m.SetTotalTransaction(i.TotalTransaction)
	m.SetDaysDue(i.DaysDue)
	m.SetStatus(i.Status)
	if v := i.CustomerID; v != nil {
		m.SetCustomerID(*v)
	}
}

// SetInput applies the change-set in the CreateReceivableInput on the ReceivableCreate builder.
func (c *ReceivableCreate) SetInput(i CreateReceivableInput) *ReceivableCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateReceivableInput represents a mutation input for updating receivables.
type UpdateReceivableInput struct {
	UpdatedAt          *time.Time
	ClearDeletedAt     bool
	DeletedAt          *time.Time
	EntryGroup         *int
	Date               *time.Time
	OutstandingBalance *float64
	TotalTransaction   *float64
	DaysDue            *int
	Status             *receivable.Status
	ClearCustomer      bool
	CustomerID         *int
}

// Mutate applies the UpdateReceivableInput on the ReceivableMutation builder.
func (i *UpdateReceivableInput) Mutate(m *ReceivableMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.EntryGroup; v != nil {
		m.SetEntryGroup(*v)
	}
	if v := i.Date; v != nil {
		m.SetDate(*v)
	}
	if v := i.OutstandingBalance; v != nil {
		m.SetOutstandingBalance(*v)
	}
	if v := i.TotalTransaction; v != nil {
		m.SetTotalTransaction(*v)
	}
	if v := i.DaysDue; v != nil {
		m.SetDaysDue(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearCustomer {
		m.ClearCustomer()
	}
	if v := i.CustomerID; v != nil {
		m.SetCustomerID(*v)
	}
}

// SetInput applies the change-set in the UpdateReceivableInput on the ReceivableUpdate builder.
func (c *ReceivableUpdate) SetInput(i UpdateReceivableInput) *ReceivableUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateReceivableInput on the ReceivableUpdateOne builder.
func (c *ReceivableUpdateOne) SetInput(i UpdateReceivableInput) *ReceivableUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateSupplierInput represents a mutation input for creating suppliers.
type CreateSupplierInput struct {
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	DeletedAt   *time.Time
	Address     string
	City        string
	Country     string
	Description string
	Email       string
	IsDefault   *bool
	Name        string
	Phone       string
	TaxId       string
	CompanyID   *int
	PayableIDs  []int
}

// Mutate applies the CreateSupplierInput on the SupplierMutation builder.
func (i *CreateSupplierInput) Mutate(m *SupplierMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	m.SetAddress(i.Address)
	m.SetCity(i.City)
	m.SetCountry(i.Country)
	m.SetDescription(i.Description)
	m.SetEmail(i.Email)
	if v := i.IsDefault; v != nil {
		m.SetIsDefault(*v)
	}
	m.SetName(i.Name)
	m.SetPhone(i.Phone)
	m.SetTaxId(i.TaxId)
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if v := i.PayableIDs; len(v) > 0 {
		m.AddPayableIDs(v...)
	}
}

// SetInput applies the change-set in the CreateSupplierInput on the SupplierCreate builder.
func (c *SupplierCreate) SetInput(i CreateSupplierInput) *SupplierCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateSupplierInput represents a mutation input for updating suppliers.
type UpdateSupplierInput struct {
	UpdatedAt        *time.Time
	ClearDeletedAt   bool
	DeletedAt        *time.Time
	Address          *string
	City             *string
	Country          *string
	Description      *string
	Email            *string
	ClearIsDefault   bool
	IsDefault        *bool
	Name             *string
	Phone            *string
	TaxId            *string
	ClearCompany     bool
	CompanyID        *int
	ClearPayables    bool
	AddPayableIDs    []int
	RemovePayableIDs []int
}

// Mutate applies the UpdateSupplierInput on the SupplierMutation builder.
func (i *UpdateSupplierInput) Mutate(m *SupplierMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if v := i.City; v != nil {
		m.SetCity(*v)
	}
	if v := i.Country; v != nil {
		m.SetCountry(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if i.ClearIsDefault {
		m.ClearIsDefault()
	}
	if v := i.IsDefault; v != nil {
		m.SetIsDefault(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Phone; v != nil {
		m.SetPhone(*v)
	}
	if v := i.TaxId; v != nil {
		m.SetTaxId(*v)
	}
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if i.ClearPayables {
		m.ClearPayables()
	}
	if v := i.AddPayableIDs; len(v) > 0 {
		m.AddPayableIDs(v...)
	}
	if v := i.RemovePayableIDs; len(v) > 0 {
		m.RemovePayableIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateSupplierInput on the SupplierUpdate builder.
func (c *SupplierUpdate) SetInput(i UpdateSupplierInput) *SupplierUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateSupplierInput on the SupplierUpdateOne builder.
func (c *SupplierUpdateOne) SetInput(i UpdateSupplierInput) *SupplierUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateTreasuryInput represents a mutation input for creating treasuries.
type CreateTreasuryInput struct {
	CreatedAt       *time.Time
	UpdatedAt       *time.Time
	DeletedAt       *time.Time
	AccountNumber   *string
	Balance         float64
	BankName        *string
	Currency        treasury.Currency
	Description     *string
	Iban            *string
	IsDefault       *bool
	IsMainAccount   *bool
	Name            string
	Category        treasury.Category
	SwiftCode       *string
	CompanyID       *int
	CashMovementIDs []int
}

// Mutate applies the CreateTreasuryInput on the TreasuryMutation builder.
func (i *CreateTreasuryInput) Mutate(m *TreasuryMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.AccountNumber; v != nil {
		m.SetAccountNumber(*v)
	}
	m.SetBalance(i.Balance)
	if v := i.BankName; v != nil {
		m.SetBankName(*v)
	}
	m.SetCurrency(i.Currency)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Iban; v != nil {
		m.SetIban(*v)
	}
	if v := i.IsDefault; v != nil {
		m.SetIsDefault(*v)
	}
	if v := i.IsMainAccount; v != nil {
		m.SetIsMainAccount(*v)
	}
	m.SetName(i.Name)
	m.SetCategory(i.Category)
	if v := i.SwiftCode; v != nil {
		m.SetSwiftCode(*v)
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if v := i.CashMovementIDs; len(v) > 0 {
		m.AddCashMovementIDs(v...)
	}
}

// SetInput applies the change-set in the CreateTreasuryInput on the TreasuryCreate builder.
func (c *TreasuryCreate) SetInput(i CreateTreasuryInput) *TreasuryCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateTreasuryInput represents a mutation input for updating treasuries.
type UpdateTreasuryInput struct {
	UpdatedAt             *time.Time
	ClearDeletedAt        bool
	DeletedAt             *time.Time
	ClearAccountNumber    bool
	AccountNumber         *string
	Balance               *float64
	ClearBankName         bool
	BankName              *string
	Currency              *treasury.Currency
	ClearDescription      bool
	Description           *string
	ClearIban             bool
	Iban                  *string
	ClearIsDefault        bool
	IsDefault             *bool
	ClearIsMainAccount    bool
	IsMainAccount         *bool
	Name                  *string
	Category              *treasury.Category
	ClearSwiftCode        bool
	SwiftCode             *string
	ClearCompany          bool
	CompanyID             *int
	ClearCashMovements    bool
	AddCashMovementIDs    []int
	RemoveCashMovementIDs []int
}

// Mutate applies the UpdateTreasuryInput on the TreasuryMutation builder.
func (i *UpdateTreasuryInput) Mutate(m *TreasuryMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if i.ClearAccountNumber {
		m.ClearAccountNumber()
	}
	if v := i.AccountNumber; v != nil {
		m.SetAccountNumber(*v)
	}
	if v := i.Balance; v != nil {
		m.SetBalance(*v)
	}
	if i.ClearBankName {
		m.ClearBankName()
	}
	if v := i.BankName; v != nil {
		m.SetBankName(*v)
	}
	if v := i.Currency; v != nil {
		m.SetCurrency(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearIban {
		m.ClearIban()
	}
	if v := i.Iban; v != nil {
		m.SetIban(*v)
	}
	if i.ClearIsDefault {
		m.ClearIsDefault()
	}
	if v := i.IsDefault; v != nil {
		m.SetIsDefault(*v)
	}
	if i.ClearIsMainAccount {
		m.ClearIsMainAccount()
	}
	if v := i.IsMainAccount; v != nil {
		m.SetIsMainAccount(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Category; v != nil {
		m.SetCategory(*v)
	}
	if i.ClearSwiftCode {
		m.ClearSwiftCode()
	}
	if v := i.SwiftCode; v != nil {
		m.SetSwiftCode(*v)
	}
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if i.ClearCashMovements {
		m.ClearCashMovements()
	}
	if v := i.AddCashMovementIDs; len(v) > 0 {
		m.AddCashMovementIDs(v...)
	}
	if v := i.RemoveCashMovementIDs; len(v) > 0 {
		m.RemoveCashMovementIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateTreasuryInput on the TreasuryUpdate builder.
func (c *TreasuryUpdate) SetInput(i UpdateTreasuryInput) *TreasuryUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateTreasuryInput on the TreasuryUpdateOne builder.
func (c *TreasuryUpdateOne) SetInput(i UpdateTreasuryInput) *TreasuryUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	CreatedAt          *time.Time
	UpdatedAt          *time.Time
	DeletedAt          *time.Time
	FcmToken           *string
	Email              *string
	Name               string
	Password           string
	Username           string
	Disabled           *bool
	NotVerified        *bool
	AccountingEntryIDs []int
	CompanyIDs         []int
	AssignedRoleIDs    []int
	CreatedTaskIDs     []int
	EmployeeID         *int
	TokenIDs           []int
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.FcmToken; v != nil {
		m.SetFcmToken(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	m.SetName(i.Name)
	m.SetPassword(i.Password)
	m.SetUsername(i.Username)
	if v := i.Disabled; v != nil {
		m.SetDisabled(*v)
	}
	if v := i.NotVerified; v != nil {
		m.SetNotVerified(*v)
	}
	if v := i.AccountingEntryIDs; len(v) > 0 {
		m.AddAccountingEntryIDs(v...)
	}
	if v := i.CompanyIDs; len(v) > 0 {
		m.AddCompanyIDs(v...)
	}
	if v := i.AssignedRoleIDs; len(v) > 0 {
		m.AddAssignedRoleIDs(v...)
	}
	if v := i.CreatedTaskIDs; len(v) > 0 {
		m.AddCreatedTaskIDs(v...)
	}
	if v := i.EmployeeID; v != nil {
		m.SetEmployeeID(*v)
	}
	if v := i.TokenIDs; len(v) > 0 {
		m.AddTokenIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	UpdatedAt                *time.Time
	ClearDeletedAt           bool
	DeletedAt                *time.Time
	ClearFcmToken            bool
	FcmToken                 *string
	ClearEmail               bool
	Email                    *string
	Name                     *string
	Password                 *string
	Username                 *string
	ClearDisabled            bool
	Disabled                 *bool
	ClearNotVerified         bool
	NotVerified              *bool
	ClearAccountingEntries   bool
	AddAccountingEntryIDs    []int
	RemoveAccountingEntryIDs []int
	AddCompanyIDs            []int
	RemoveCompanyIDs         []int
	ClearAssignedRoles       bool
	AddAssignedRoleIDs       []int
	RemoveAssignedRoleIDs    []int
	ClearCreatedTasks        bool
	AddCreatedTaskIDs        []int
	RemoveCreatedTaskIDs     []int
	ClearEmployee            bool
	EmployeeID               *int
	ClearTokens              bool
	AddTokenIDs              []int
	RemoveTokenIDs           []int
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if i.ClearFcmToken {
		m.ClearFcmToken()
	}
	if v := i.FcmToken; v != nil {
		m.SetFcmToken(*v)
	}
	if i.ClearEmail {
		m.ClearEmail()
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if v := i.Username; v != nil {
		m.SetUsername(*v)
	}
	if i.ClearDisabled {
		m.ClearDisabled()
	}
	if v := i.Disabled; v != nil {
		m.SetDisabled(*v)
	}
	if i.ClearNotVerified {
		m.ClearNotVerified()
	}
	if v := i.NotVerified; v != nil {
		m.SetNotVerified(*v)
	}
	if i.ClearAccountingEntries {
		m.ClearAccountingEntries()
	}
	if v := i.AddAccountingEntryIDs; len(v) > 0 {
		m.AddAccountingEntryIDs(v...)
	}
	if v := i.RemoveAccountingEntryIDs; len(v) > 0 {
		m.RemoveAccountingEntryIDs(v...)
	}
	if v := i.AddCompanyIDs; len(v) > 0 {
		m.AddCompanyIDs(v...)
	}
	if v := i.RemoveCompanyIDs; len(v) > 0 {
		m.RemoveCompanyIDs(v...)
	}
	if i.ClearAssignedRoles {
		m.ClearAssignedRoles()
	}
	if v := i.AddAssignedRoleIDs; len(v) > 0 {
		m.AddAssignedRoleIDs(v...)
	}
	if v := i.RemoveAssignedRoleIDs; len(v) > 0 {
		m.RemoveAssignedRoleIDs(v...)
	}
	if i.ClearCreatedTasks {
		m.ClearCreatedTasks()
	}
	if v := i.AddCreatedTaskIDs; len(v) > 0 {
		m.AddCreatedTaskIDs(v...)
	}
	if v := i.RemoveCreatedTaskIDs; len(v) > 0 {
		m.RemoveCreatedTaskIDs(v...)
	}
	if i.ClearEmployee {
		m.ClearEmployee()
	}
	if v := i.EmployeeID; v != nil {
		m.SetEmployeeID(*v)
	}
	if i.ClearTokens {
		m.ClearTokens()
	}
	if v := i.AddTokenIDs; len(v) > 0 {
		m.AddTokenIDs(v...)
	}
	if v := i.RemoveTokenIDs; len(v) > 0 {
		m.RemoveTokenIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserRoleInput represents a mutation input for creating userroles.
type CreateUserRoleInput struct {
	Role      userrole.Role
	CompanyID *int
	UserIDs   []int
}

// Mutate applies the CreateUserRoleInput on the UserRoleMutation builder.
func (i *CreateUserRoleInput) Mutate(m *UserRoleMutation) {
	m.SetRole(i.Role)
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if v := i.UserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserRoleInput on the UserRoleCreate builder.
func (c *UserRoleCreate) SetInput(i CreateUserRoleInput) *UserRoleCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserRoleInput represents a mutation input for updating userroles.
type UpdateUserRoleInput struct {
	Role          *userrole.Role
	ClearCompany  bool
	CompanyID     *int
	ClearUser     bool
	AddUserIDs    []int
	RemoveUserIDs []int
}

// Mutate applies the UpdateUserRoleInput on the UserRoleMutation builder.
func (i *UpdateUserRoleInput) Mutate(m *UserRoleMutation) {
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if i.ClearUser {
		m.ClearUser()
	}
	if v := i.AddUserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.RemoveUserIDs; len(v) > 0 {
		m.RemoveUserIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserRoleInput on the UserRoleUpdate builder.
func (c *UserRoleUpdate) SetInput(i UpdateUserRoleInput) *UserRoleUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserRoleInput on the UserRoleUpdateOne builder.
func (c *UserRoleUpdateOne) SetInput(i UpdateUserRoleInput) *UserRoleUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateWorkshiftInput represents a mutation input for creating workshifts.
type CreateWorkshiftInput struct {
	CreatedAt        *time.Time
	UpdatedAt        *time.Time
	DeletedAt        *time.Time
	ApprovedAt       *time.Time
	ClockIn          *time.Time
	ClockOut         *time.Time
	ClockInLocation  string
	ClockOutLocation *string
	Description      *string
	Note             *string
	Status           *workshift.Status
	CompanyID        *int
	EmployeeID       *int
	ApprovedByID     *int
	WorkTaskID       *int
	EditRequestID    *int
	WorkShiftID      *int
}

// Mutate applies the CreateWorkshiftInput on the WorkshiftMutation builder.
func (i *CreateWorkshiftInput) Mutate(m *WorkshiftMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.ApprovedAt; v != nil {
		m.SetApprovedAt(*v)
	}
	if v := i.ClockIn; v != nil {
		m.SetClockIn(*v)
	}
	if v := i.ClockOut; v != nil {
		m.SetClockOut(*v)
	}
	m.SetClockInLocation(i.ClockInLocation)
	if v := i.ClockOutLocation; v != nil {
		m.SetClockOutLocation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Note; v != nil {
		m.SetNote(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if v := i.EmployeeID; v != nil {
		m.SetEmployeeID(*v)
	}
	if v := i.ApprovedByID; v != nil {
		m.SetApprovedByID(*v)
	}
	if v := i.WorkTaskID; v != nil {
		m.SetWorkTaskID(*v)
	}
	if v := i.EditRequestID; v != nil {
		m.SetEditRequestID(*v)
	}
	if v := i.WorkShiftID; v != nil {
		m.SetWorkShiftID(*v)
	}
}

// SetInput applies the change-set in the CreateWorkshiftInput on the WorkshiftCreate builder.
func (c *WorkshiftCreate) SetInput(i CreateWorkshiftInput) *WorkshiftCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateWorkshiftInput represents a mutation input for updating workshifts.
type UpdateWorkshiftInput struct {
	UpdatedAt             *time.Time
	ClearDeletedAt        bool
	DeletedAt             *time.Time
	ClearApprovedAt       bool
	ApprovedAt            *time.Time
	ClockIn               *time.Time
	ClearClockOut         bool
	ClockOut              *time.Time
	ClockInLocation       *string
	ClearClockOutLocation bool
	ClockOutLocation      *string
	ClearDescription      bool
	Description           *string
	ClearNote             bool
	Note                  *string
	Status                *workshift.Status
	ClearCompany          bool
	CompanyID             *int
	ClearEmployee         bool
	EmployeeID            *int
	ClearApprovedBy       bool
	ApprovedByID          *int
	ClearWorkTask         bool
	WorkTaskID            *int
	ClearEditRequest      bool
	EditRequestID         *int
	ClearWorkShift        bool
	WorkShiftID           *int
}

// Mutate applies the UpdateWorkshiftInput on the WorkshiftMutation builder.
func (i *UpdateWorkshiftInput) Mutate(m *WorkshiftMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if i.ClearApprovedAt {
		m.ClearApprovedAt()
	}
	if v := i.ApprovedAt; v != nil {
		m.SetApprovedAt(*v)
	}
	if v := i.ClockIn; v != nil {
		m.SetClockIn(*v)
	}
	if i.ClearClockOut {
		m.ClearClockOut()
	}
	if v := i.ClockOut; v != nil {
		m.SetClockOut(*v)
	}
	if v := i.ClockInLocation; v != nil {
		m.SetClockInLocation(*v)
	}
	if i.ClearClockOutLocation {
		m.ClearClockOutLocation()
	}
	if v := i.ClockOutLocation; v != nil {
		m.SetClockOutLocation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearNote {
		m.ClearNote()
	}
	if v := i.Note; v != nil {
		m.SetNote(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if i.ClearEmployee {
		m.ClearEmployee()
	}
	if v := i.EmployeeID; v != nil {
		m.SetEmployeeID(*v)
	}
	if i.ClearApprovedBy {
		m.ClearApprovedBy()
	}
	if v := i.ApprovedByID; v != nil {
		m.SetApprovedByID(*v)
	}
	if i.ClearWorkTask {
		m.ClearWorkTask()
	}
	if v := i.WorkTaskID; v != nil {
		m.SetWorkTaskID(*v)
	}
	if i.ClearEditRequest {
		m.ClearEditRequest()
	}
	if v := i.EditRequestID; v != nil {
		m.SetEditRequestID(*v)
	}
	if i.ClearWorkShift {
		m.ClearWorkShift()
	}
	if v := i.WorkShiftID; v != nil {
		m.SetWorkShiftID(*v)
	}
}

// SetInput applies the change-set in the UpdateWorkshiftInput on the WorkshiftUpdate builder.
func (c *WorkshiftUpdate) SetInput(i UpdateWorkshiftInput) *WorkshiftUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateWorkshiftInput on the WorkshiftUpdateOne builder.
func (c *WorkshiftUpdateOne) SetInput(i UpdateWorkshiftInput) *WorkshiftUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateWorktagInput represents a mutation input for creating worktags.
type CreateWorktagInput struct {
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	DeletedAt   *time.Time
	Name        string
	Color       string
	CompanyID   *int
	WorkTaskIDs []int
}

// Mutate applies the CreateWorktagInput on the WorktagMutation builder.
func (i *CreateWorktagInput) Mutate(m *WorktagMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	m.SetName(i.Name)
	m.SetColor(i.Color)
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if v := i.WorkTaskIDs; len(v) > 0 {
		m.AddWorkTaskIDs(v...)
	}
}

// SetInput applies the change-set in the CreateWorktagInput on the WorktagCreate builder.
func (c *WorktagCreate) SetInput(i CreateWorktagInput) *WorktagCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateWorktagInput represents a mutation input for updating worktags.
type UpdateWorktagInput struct {
	UpdatedAt         *time.Time
	ClearDeletedAt    bool
	DeletedAt         *time.Time
	Name              *string
	Color             *string
	ClearCompany      bool
	CompanyID         *int
	ClearWorkTasks    bool
	AddWorkTaskIDs    []int
	RemoveWorkTaskIDs []int
}

// Mutate applies the UpdateWorktagInput on the WorktagMutation builder.
func (i *UpdateWorktagInput) Mutate(m *WorktagMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Color; v != nil {
		m.SetColor(*v)
	}
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if i.ClearWorkTasks {
		m.ClearWorkTasks()
	}
	if v := i.AddWorkTaskIDs; len(v) > 0 {
		m.AddWorkTaskIDs(v...)
	}
	if v := i.RemoveWorkTaskIDs; len(v) > 0 {
		m.RemoveWorkTaskIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateWorktagInput on the WorktagUpdate builder.
func (c *WorktagUpdate) SetInput(i UpdateWorktagInput) *WorktagUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateWorktagInput on the WorktagUpdateOne builder.
func (c *WorktagUpdateOne) SetInput(i UpdateWorktagInput) *WorktagUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateWorktaskInput represents a mutation input for creating worktasks.
type CreateWorktaskInput struct {
	CreatedAt     *time.Time
	UpdatedAt     *time.Time
	DeletedAt     *time.Time
	Description   *string
	Status        worktask.Status
	Subtasks      []string
	Title         string
	StartTime     time.Time
	EndTime       *time.Time
	CompanyID     *int
	CreatedByID   *int
	AssignedToIDs []int
	WorkShiftIDs  []int
	WorkTagIDs    []int
}

// Mutate applies the CreateWorktaskInput on the WorktaskMutation builder.
func (i *CreateWorktaskInput) Mutate(m *WorktaskMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	m.SetStatus(i.Status)
	if v := i.Subtasks; v != nil {
		m.SetSubtasks(v)
	}
	m.SetTitle(i.Title)
	m.SetStartTime(i.StartTime)
	if v := i.EndTime; v != nil {
		m.SetEndTime(*v)
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if v := i.CreatedByID; v != nil {
		m.SetCreatedByID(*v)
	}
	if v := i.AssignedToIDs; len(v) > 0 {
		m.AddAssignedToIDs(v...)
	}
	if v := i.WorkShiftIDs; len(v) > 0 {
		m.AddWorkShiftIDs(v...)
	}
	if v := i.WorkTagIDs; len(v) > 0 {
		m.AddWorkTagIDs(v...)
	}
}

// SetInput applies the change-set in the CreateWorktaskInput on the WorktaskCreate builder.
func (c *WorktaskCreate) SetInput(i CreateWorktaskInput) *WorktaskCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateWorktaskInput represents a mutation input for updating worktasks.
type UpdateWorktaskInput struct {
	UpdatedAt           *time.Time
	ClearDeletedAt      bool
	DeletedAt           *time.Time
	ClearDescription    bool
	Description         *string
	Status              *worktask.Status
	ClearSubtasks       bool
	Subtasks            []string
	AppendSubtasks      []string
	Title               *string
	StartTime           *time.Time
	ClearEndTime        bool
	EndTime             *time.Time
	ClearCompany        bool
	CompanyID           *int
	ClearCreatedBy      bool
	CreatedByID         *int
	ClearAssignedTo     bool
	AddAssignedToIDs    []int
	RemoveAssignedToIDs []int
	ClearWorkShifts     bool
	AddWorkShiftIDs     []int
	RemoveWorkShiftIDs  []int
	ClearWorkTags       bool
	AddWorkTagIDs       []int
	RemoveWorkTagIDs    []int
}

// Mutate applies the UpdateWorktaskInput on the WorktaskMutation builder.
func (i *UpdateWorktaskInput) Mutate(m *WorktaskMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearSubtasks {
		m.ClearSubtasks()
	}
	if v := i.Subtasks; v != nil {
		m.SetSubtasks(v)
	}
	if i.AppendSubtasks != nil {
		m.AppendSubtasks(i.Subtasks)
	}
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if v := i.StartTime; v != nil {
		m.SetStartTime(*v)
	}
	if i.ClearEndTime {
		m.ClearEndTime()
	}
	if v := i.EndTime; v != nil {
		m.SetEndTime(*v)
	}
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedByID; v != nil {
		m.SetCreatedByID(*v)
	}
	if i.ClearAssignedTo {
		m.ClearAssignedTo()
	}
	if v := i.AddAssignedToIDs; len(v) > 0 {
		m.AddAssignedToIDs(v...)
	}
	if v := i.RemoveAssignedToIDs; len(v) > 0 {
		m.RemoveAssignedToIDs(v...)
	}
	if i.ClearWorkShifts {
		m.ClearWorkShifts()
	}
	if v := i.AddWorkShiftIDs; len(v) > 0 {
		m.AddWorkShiftIDs(v...)
	}
	if v := i.RemoveWorkShiftIDs; len(v) > 0 {
		m.RemoveWorkShiftIDs(v...)
	}
	if i.ClearWorkTags {
		m.ClearWorkTags()
	}
	if v := i.AddWorkTagIDs; len(v) > 0 {
		m.AddWorkTagIDs(v...)
	}
	if v := i.RemoveWorkTagIDs; len(v) > 0 {
		m.RemoveWorkTagIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateWorktaskInput on the WorktaskUpdate builder.
func (c *WorktaskUpdate) SetInput(i UpdateWorktaskInput) *WorktaskUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateWorktaskInput on the WorktaskUpdateOne builder.
func (c *WorktaskUpdateOne) SetInput(i UpdateWorktaskInput) *WorktaskUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
