// Code generated by ent, DO NOT EDIT.

package generated

import (
	"mazza/ent/generated/accountingentry"
	"mazza/ent/generated/companydocument"
	"mazza/ent/generated/employee"
	"mazza/ent/generated/file"
	"mazza/ent/generated/inventory"
	"mazza/ent/generated/inventorymovement"
	"mazza/ent/generated/invoice"
	"mazza/ent/generated/membersignuptoken"
	"mazza/ent/generated/payable"
	"mazza/ent/generated/project"
	"mazza/ent/generated/projecttask"
	"mazza/ent/generated/receivable"
	"mazza/ent/generated/token"
	"mazza/ent/generated/user"
	"mazza/ent/generated/userrole"
	"mazza/ent/generated/workshift"
	"time"
)

// CreateAccountingEntryInput represents a mutation input for creating accountingentries.
type CreateAccountingEntryInput struct {
	Number      int
	Group       int
	Date        *time.Time
	Account     string
	Label       string
	Amount      float64
	Description string
	AccountType accountingentry.AccountType
	Category    *string
	IsDebit     bool
	IsReversal  *bool
	Reversed    *bool
	CompanyID   *int
	UserID      *int
}

// Mutate applies the CreateAccountingEntryInput on the AccountingEntryMutation builder.
func (i *CreateAccountingEntryInput) Mutate(m *AccountingEntryMutation) {
	m.SetNumber(i.Number)
	m.SetGroup(i.Group)
	if v := i.Date; v != nil {
		m.SetDate(*v)
	}
	m.SetAccount(i.Account)
	m.SetLabel(i.Label)
	m.SetAmount(i.Amount)
	m.SetDescription(i.Description)
	m.SetAccountType(i.AccountType)
	if v := i.Category; v != nil {
		m.SetCategory(*v)
	}
	m.SetIsDebit(i.IsDebit)
	if v := i.IsReversal; v != nil {
		m.SetIsReversal(*v)
	}
	if v := i.Reversed; v != nil {
		m.SetReversed(*v)
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
}

// SetInput applies the change-set in the CreateAccountingEntryInput on the AccountingEntryCreate builder.
func (c *AccountingEntryCreate) SetInput(i CreateAccountingEntryInput) *AccountingEntryCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateAccountingEntryInput represents a mutation input for updating accountingentries.
type UpdateAccountingEntryInput struct {
	Number       *int
	Group        *int
	Date         *time.Time
	Account      *string
	Label        *string
	Amount       *float64
	Description  *string
	AccountType  *accountingentry.AccountType
	Category     *string
	IsDebit      *bool
	IsReversal   *bool
	Reversed     *bool
	ClearCompany bool
	CompanyID    *int
	ClearUser    bool
	UserID       *int
}

// Mutate applies the UpdateAccountingEntryInput on the AccountingEntryMutation builder.
func (i *UpdateAccountingEntryInput) Mutate(m *AccountingEntryMutation) {
	if v := i.Number; v != nil {
		m.SetNumber(*v)
	}
	if v := i.Group; v != nil {
		m.SetGroup(*v)
	}
	if v := i.Date; v != nil {
		m.SetDate(*v)
	}
	if v := i.Account; v != nil {
		m.SetAccount(*v)
	}
	if v := i.Label; v != nil {
		m.SetLabel(*v)
	}
	if v := i.Amount; v != nil {
		m.SetAmount(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.AccountType; v != nil {
		m.SetAccountType(*v)
	}
	if v := i.Category; v != nil {
		m.SetCategory(*v)
	}
	if v := i.IsDebit; v != nil {
		m.SetIsDebit(*v)
	}
	if v := i.IsReversal; v != nil {
		m.SetIsReversal(*v)
	}
	if v := i.Reversed; v != nil {
		m.SetReversed(*v)
	}
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if i.ClearUser {
		m.ClearUser()
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
}

// SetInput applies the change-set in the UpdateAccountingEntryInput on the AccountingEntryUpdate builder.
func (c *AccountingEntryUpdate) SetInput(i UpdateAccountingEntryInput) *AccountingEntryUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateAccountingEntryInput on the AccountingEntryUpdateOne builder.
func (c *AccountingEntryUpdateOne) SetInput(i UpdateAccountingEntryInput) *AccountingEntryUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCompanyInput represents a mutation input for creating companies.
type CreateCompanyInput struct {
	Address              *string
	BaseCurrency         *string
	CeoName              *string
	City                 string
	Country              string
	EstablishedAt        time.Time
	Description          *string
	Email                *string
	Industry             *string
	LastEntryDate        time.Time
	LastInvoiceNumber    *int32
	Name                 string
	NumberOfEmployees    *int32
	Phone                *string
	TaxId                string
	VatRate              *float64
	Website              *string
	IncompleteSetup      *bool
	AvailableRoleIDs     []int
	AccountingEntryIDs   []int
	CustomerIDs          []int
	DocumentIDs          []int
	EmployeeIDs          []int
	FileIDs              []int
	InventoryIDs         []int
	InventoryMovementIDs []int
	InvoiceIDs           []int
	MemberSignupTokenIDs []int
	ProductIDs           []int
	ProjectIDs           []int
	PayableIDs           []int
	ReceivableIDs        []int
	SupplierIDs          []int
	TokenIDs             []int
	TreasuryIDs          []int
	WorkShiftIDs         []int
	UserIDs              []int
	DaughterCompanyIDs   []int
	ParentCompanyID      *int
}

// Mutate applies the CreateCompanyInput on the CompanyMutation builder.
func (i *CreateCompanyInput) Mutate(m *CompanyMutation) {
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if v := i.BaseCurrency; v != nil {
		m.SetBaseCurrency(*v)
	}
	if v := i.CeoName; v != nil {
		m.SetCeoName(*v)
	}
	m.SetCity(i.City)
	m.SetCountry(i.Country)
	m.SetEstablishedAt(i.EstablishedAt)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.Industry; v != nil {
		m.SetIndustry(*v)
	}
	m.SetLastEntryDate(i.LastEntryDate)
	if v := i.LastInvoiceNumber; v != nil {
		m.SetLastInvoiceNumber(*v)
	}
	m.SetName(i.Name)
	if v := i.NumberOfEmployees; v != nil {
		m.SetNumberOfEmployees(*v)
	}
	if v := i.Phone; v != nil {
		m.SetPhone(*v)
	}
	m.SetTaxId(i.TaxId)
	if v := i.VatRate; v != nil {
		m.SetVatRate(*v)
	}
	if v := i.Website; v != nil {
		m.SetWebsite(*v)
	}
	if v := i.IncompleteSetup; v != nil {
		m.SetIncompleteSetup(*v)
	}
	if v := i.AvailableRoleIDs; len(v) > 0 {
		m.AddAvailableRoleIDs(v...)
	}
	if v := i.AccountingEntryIDs; len(v) > 0 {
		m.AddAccountingEntryIDs(v...)
	}
	if v := i.CustomerIDs; len(v) > 0 {
		m.AddCustomerIDs(v...)
	}
	if v := i.DocumentIDs; len(v) > 0 {
		m.AddDocumentIDs(v...)
	}
	if v := i.EmployeeIDs; len(v) > 0 {
		m.AddEmployeeIDs(v...)
	}
	if v := i.FileIDs; len(v) > 0 {
		m.AddFileIDs(v...)
	}
	if v := i.InventoryIDs; len(v) > 0 {
		m.AddInventoryIDs(v...)
	}
	if v := i.InventoryMovementIDs; len(v) > 0 {
		m.AddInventoryMovementIDs(v...)
	}
	if v := i.InvoiceIDs; len(v) > 0 {
		m.AddInvoiceIDs(v...)
	}
	if v := i.MemberSignupTokenIDs; len(v) > 0 {
		m.AddMemberSignupTokenIDs(v...)
	}
	if v := i.ProductIDs; len(v) > 0 {
		m.AddProductIDs(v...)
	}
	if v := i.ProjectIDs; len(v) > 0 {
		m.AddProjectIDs(v...)
	}
	if v := i.PayableIDs; len(v) > 0 {
		m.AddPayableIDs(v...)
	}
	if v := i.ReceivableIDs; len(v) > 0 {
		m.AddReceivableIDs(v...)
	}
	if v := i.SupplierIDs; len(v) > 0 {
		m.AddSupplierIDs(v...)
	}
	if v := i.TokenIDs; len(v) > 0 {
		m.AddTokenIDs(v...)
	}
	if v := i.TreasuryIDs; len(v) > 0 {
		m.AddTreasuryIDs(v...)
	}
	if v := i.WorkShiftIDs; len(v) > 0 {
		m.AddWorkShiftIDs(v...)
	}
	if v := i.UserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.DaughterCompanyIDs; len(v) > 0 {
		m.AddDaughterCompanyIDs(v...)
	}
	if v := i.ParentCompanyID; v != nil {
		m.SetParentCompanyID(*v)
	}
}

// SetInput applies the change-set in the CreateCompanyInput on the CompanyCreate builder.
func (c *CompanyCreate) SetInput(i CreateCompanyInput) *CompanyCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCompanyInput represents a mutation input for updating companies.
type UpdateCompanyInput struct {
	ClearAddress               bool
	Address                    *string
	BaseCurrency               *string
	ClearCeoName               bool
	CeoName                    *string
	City                       *string
	Country                    *string
	EstablishedAt              *time.Time
	ClearDescription           bool
	Description                *string
	ClearEmail                 bool
	Email                      *string
	ClearIndustry              bool
	Industry                   *string
	LastEntryDate              *time.Time
	ClearLastInvoiceNumber     bool
	LastInvoiceNumber          *int32
	Name                       *string
	NumberOfEmployees          *int32
	ClearPhone                 bool
	Phone                      *string
	TaxId                      *string
	VatRate                    *float64
	ClearWebsite               bool
	Website                    *string
	ClearIncompleteSetup       bool
	IncompleteSetup            *bool
	ClearAvailableRoles        bool
	AddAvailableRoleIDs        []int
	RemoveAvailableRoleIDs     []int
	ClearAccountingEntries     bool
	AddAccountingEntryIDs      []int
	RemoveAccountingEntryIDs   []int
	ClearCustomers             bool
	AddCustomerIDs             []int
	RemoveCustomerIDs          []int
	ClearDocuments             bool
	AddDocumentIDs             []int
	RemoveDocumentIDs          []int
	ClearEmployees             bool
	AddEmployeeIDs             []int
	RemoveEmployeeIDs          []int
	ClearFiles                 bool
	AddFileIDs                 []int
	RemoveFileIDs              []int
	ClearInventory             bool
	AddInventoryIDs            []int
	RemoveInventoryIDs         []int
	ClearInventoryMovements    bool
	AddInventoryMovementIDs    []int
	RemoveInventoryMovementIDs []int
	ClearInvoices              bool
	AddInvoiceIDs              []int
	RemoveInvoiceIDs           []int
	ClearMemberSignupTokens    bool
	AddMemberSignupTokenIDs    []int
	RemoveMemberSignupTokenIDs []int
	ClearProducts              bool
	AddProductIDs              []int
	RemoveProductIDs           []int
	ClearProjects              bool
	AddProjectIDs              []int
	RemoveProjectIDs           []int
	ClearPayables              bool
	AddPayableIDs              []int
	RemovePayableIDs           []int
	ClearReceivables           bool
	AddReceivableIDs           []int
	RemoveReceivableIDs        []int
	ClearSuppliers             bool
	AddSupplierIDs             []int
	RemoveSupplierIDs          []int
	ClearTokens                bool
	AddTokenIDs                []int
	RemoveTokenIDs             []int
	ClearTreasuries            bool
	AddTreasuryIDs             []int
	RemoveTreasuryIDs          []int
	ClearWorkShifts            bool
	AddWorkShiftIDs            []int
	RemoveWorkShiftIDs         []int
	ClearUsers                 bool
	AddUserIDs                 []int
	RemoveUserIDs              []int
	ClearDaughterCompanies     bool
	AddDaughterCompanyIDs      []int
	RemoveDaughterCompanyIDs   []int
	ClearParentCompany         bool
	ParentCompanyID            *int
}

// Mutate applies the UpdateCompanyInput on the CompanyMutation builder.
func (i *UpdateCompanyInput) Mutate(m *CompanyMutation) {
	if i.ClearAddress {
		m.ClearAddress()
	}
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if v := i.BaseCurrency; v != nil {
		m.SetBaseCurrency(*v)
	}
	if i.ClearCeoName {
		m.ClearCeoName()
	}
	if v := i.CeoName; v != nil {
		m.SetCeoName(*v)
	}
	if v := i.City; v != nil {
		m.SetCity(*v)
	}
	if v := i.Country; v != nil {
		m.SetCountry(*v)
	}
	if v := i.EstablishedAt; v != nil {
		m.SetEstablishedAt(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearEmail {
		m.ClearEmail()
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if i.ClearIndustry {
		m.ClearIndustry()
	}
	if v := i.Industry; v != nil {
		m.SetIndustry(*v)
	}
	if v := i.LastEntryDate; v != nil {
		m.SetLastEntryDate(*v)
	}
	if i.ClearLastInvoiceNumber {
		m.ClearLastInvoiceNumber()
	}
	if v := i.LastInvoiceNumber; v != nil {
		m.SetLastInvoiceNumber(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.NumberOfEmployees; v != nil {
		m.SetNumberOfEmployees(*v)
	}
	if i.ClearPhone {
		m.ClearPhone()
	}
	if v := i.Phone; v != nil {
		m.SetPhone(*v)
	}
	if v := i.TaxId; v != nil {
		m.SetTaxId(*v)
	}
	if v := i.VatRate; v != nil {
		m.SetVatRate(*v)
	}
	if i.ClearWebsite {
		m.ClearWebsite()
	}
	if v := i.Website; v != nil {
		m.SetWebsite(*v)
	}
	if i.ClearIncompleteSetup {
		m.ClearIncompleteSetup()
	}
	if v := i.IncompleteSetup; v != nil {
		m.SetIncompleteSetup(*v)
	}
	if i.ClearAvailableRoles {
		m.ClearAvailableRoles()
	}
	if v := i.AddAvailableRoleIDs; len(v) > 0 {
		m.AddAvailableRoleIDs(v...)
	}
	if v := i.RemoveAvailableRoleIDs; len(v) > 0 {
		m.RemoveAvailableRoleIDs(v...)
	}
	if i.ClearAccountingEntries {
		m.ClearAccountingEntries()
	}
	if v := i.AddAccountingEntryIDs; len(v) > 0 {
		m.AddAccountingEntryIDs(v...)
	}
	if v := i.RemoveAccountingEntryIDs; len(v) > 0 {
		m.RemoveAccountingEntryIDs(v...)
	}
	if i.ClearCustomers {
		m.ClearCustomers()
	}
	if v := i.AddCustomerIDs; len(v) > 0 {
		m.AddCustomerIDs(v...)
	}
	if v := i.RemoveCustomerIDs; len(v) > 0 {
		m.RemoveCustomerIDs(v...)
	}
	if i.ClearDocuments {
		m.ClearDocuments()
	}
	if v := i.AddDocumentIDs; len(v) > 0 {
		m.AddDocumentIDs(v...)
	}
	if v := i.RemoveDocumentIDs; len(v) > 0 {
		m.RemoveDocumentIDs(v...)
	}
	if i.ClearEmployees {
		m.ClearEmployees()
	}
	if v := i.AddEmployeeIDs; len(v) > 0 {
		m.AddEmployeeIDs(v...)
	}
	if v := i.RemoveEmployeeIDs; len(v) > 0 {
		m.RemoveEmployeeIDs(v...)
	}
	if i.ClearFiles {
		m.ClearFiles()
	}
	if v := i.AddFileIDs; len(v) > 0 {
		m.AddFileIDs(v...)
	}
	if v := i.RemoveFileIDs; len(v) > 0 {
		m.RemoveFileIDs(v...)
	}
	if i.ClearInventory {
		m.ClearInventory()
	}
	if v := i.AddInventoryIDs; len(v) > 0 {
		m.AddInventoryIDs(v...)
	}
	if v := i.RemoveInventoryIDs; len(v) > 0 {
		m.RemoveInventoryIDs(v...)
	}
	if i.ClearInventoryMovements {
		m.ClearInventoryMovements()
	}
	if v := i.AddInventoryMovementIDs; len(v) > 0 {
		m.AddInventoryMovementIDs(v...)
	}
	if v := i.RemoveInventoryMovementIDs; len(v) > 0 {
		m.RemoveInventoryMovementIDs(v...)
	}
	if i.ClearInvoices {
		m.ClearInvoices()
	}
	if v := i.AddInvoiceIDs; len(v) > 0 {
		m.AddInvoiceIDs(v...)
	}
	if v := i.RemoveInvoiceIDs; len(v) > 0 {
		m.RemoveInvoiceIDs(v...)
	}
	if i.ClearMemberSignupTokens {
		m.ClearMemberSignupTokens()
	}
	if v := i.AddMemberSignupTokenIDs; len(v) > 0 {
		m.AddMemberSignupTokenIDs(v...)
	}
	if v := i.RemoveMemberSignupTokenIDs; len(v) > 0 {
		m.RemoveMemberSignupTokenIDs(v...)
	}
	if i.ClearProducts {
		m.ClearProducts()
	}
	if v := i.AddProductIDs; len(v) > 0 {
		m.AddProductIDs(v...)
	}
	if v := i.RemoveProductIDs; len(v) > 0 {
		m.RemoveProductIDs(v...)
	}
	if i.ClearProjects {
		m.ClearProjects()
	}
	if v := i.AddProjectIDs; len(v) > 0 {
		m.AddProjectIDs(v...)
	}
	if v := i.RemoveProjectIDs; len(v) > 0 {
		m.RemoveProjectIDs(v...)
	}
	if i.ClearPayables {
		m.ClearPayables()
	}
	if v := i.AddPayableIDs; len(v) > 0 {
		m.AddPayableIDs(v...)
	}
	if v := i.RemovePayableIDs; len(v) > 0 {
		m.RemovePayableIDs(v...)
	}
	if i.ClearReceivables {
		m.ClearReceivables()
	}
	if v := i.AddReceivableIDs; len(v) > 0 {
		m.AddReceivableIDs(v...)
	}
	if v := i.RemoveReceivableIDs; len(v) > 0 {
		m.RemoveReceivableIDs(v...)
	}
	if i.ClearSuppliers {
		m.ClearSuppliers()
	}
	if v := i.AddSupplierIDs; len(v) > 0 {
		m.AddSupplierIDs(v...)
	}
	if v := i.RemoveSupplierIDs; len(v) > 0 {
		m.RemoveSupplierIDs(v...)
	}
	if i.ClearTokens {
		m.ClearTokens()
	}
	if v := i.AddTokenIDs; len(v) > 0 {
		m.AddTokenIDs(v...)
	}
	if v := i.RemoveTokenIDs; len(v) > 0 {
		m.RemoveTokenIDs(v...)
	}
	if i.ClearTreasuries {
		m.ClearTreasuries()
	}
	if v := i.AddTreasuryIDs; len(v) > 0 {
		m.AddTreasuryIDs(v...)
	}
	if v := i.RemoveTreasuryIDs; len(v) > 0 {
		m.RemoveTreasuryIDs(v...)
	}
	if i.ClearWorkShifts {
		m.ClearWorkShifts()
	}
	if v := i.AddWorkShiftIDs; len(v) > 0 {
		m.AddWorkShiftIDs(v...)
	}
	if v := i.RemoveWorkShiftIDs; len(v) > 0 {
		m.RemoveWorkShiftIDs(v...)
	}
	if i.ClearUsers {
		m.ClearUsers()
	}
	if v := i.AddUserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.RemoveUserIDs; len(v) > 0 {
		m.RemoveUserIDs(v...)
	}
	if i.ClearDaughterCompanies {
		m.ClearDaughterCompanies()
	}
	if v := i.AddDaughterCompanyIDs; len(v) > 0 {
		m.AddDaughterCompanyIDs(v...)
	}
	if v := i.RemoveDaughterCompanyIDs; len(v) > 0 {
		m.RemoveDaughterCompanyIDs(v...)
	}
	if i.ClearParentCompany {
		m.ClearParentCompany()
	}
	if v := i.ParentCompanyID; v != nil {
		m.SetParentCompanyID(*v)
	}
}

// SetInput applies the change-set in the UpdateCompanyInput on the CompanyUpdate builder.
func (c *CompanyUpdate) SetInput(i UpdateCompanyInput) *CompanyUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCompanyInput on the CompanyUpdateOne builder.
func (c *CompanyUpdateOne) SetInput(i UpdateCompanyInput) *CompanyUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCompanyDocumentInput represents a mutation input for creating companydocuments.
type CreateCompanyDocumentInput struct {
	Filename   string
	Title      string
	Keywords   string
	Category   companydocument.Category
	Size       int
	FileType   string
	URL        string
	StorageURI string
	Thumbnail  *string
	ExpiryDate time.Time
}

// Mutate applies the CreateCompanyDocumentInput on the CompanyDocumentMutation builder.
func (i *CreateCompanyDocumentInput) Mutate(m *CompanyDocumentMutation) {
	m.SetFilename(i.Filename)
	m.SetTitle(i.Title)
	m.SetKeywords(i.Keywords)
	m.SetCategory(i.Category)
	m.SetSize(i.Size)
	m.SetFileType(i.FileType)
	m.SetURL(i.URL)
	m.SetStorageURI(i.StorageURI)
	if v := i.Thumbnail; v != nil {
		m.SetThumbnail(*v)
	}
	m.SetExpiryDate(i.ExpiryDate)
}

// SetInput applies the change-set in the CreateCompanyDocumentInput on the CompanyDocumentCreate builder.
func (c *CompanyDocumentCreate) SetInput(i CreateCompanyDocumentInput) *CompanyDocumentCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCompanyDocumentInput represents a mutation input for updating companydocuments.
type UpdateCompanyDocumentInput struct {
	Filename        *string
	Title           *string
	Keywords        *string
	Category        *companydocument.Category
	Size            *int
	FileType        *string
	Status          *companydocument.Status
	URL             *string
	StorageURI      *string
	ClearThumbnail  bool
	Thumbnail       *string
	ExpiryDate      *time.Time
	CompanyID       *int
	ClearUploadedBy bool
	UploadedByID    *int
	ClearApprovedBy bool
	ApprovedByID    *int
}

// Mutate applies the UpdateCompanyDocumentInput on the CompanyDocumentMutation builder.
func (i *UpdateCompanyDocumentInput) Mutate(m *CompanyDocumentMutation) {
	if v := i.Filename; v != nil {
		m.SetFilename(*v)
	}
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if v := i.Keywords; v != nil {
		m.SetKeywords(*v)
	}
	if v := i.Category; v != nil {
		m.SetCategory(*v)
	}
	if v := i.Size; v != nil {
		m.SetSize(*v)
	}
	if v := i.FileType; v != nil {
		m.SetFileType(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.URL; v != nil {
		m.SetURL(*v)
	}
	if v := i.StorageURI; v != nil {
		m.SetStorageURI(*v)
	}
	if i.ClearThumbnail {
		m.ClearThumbnail()
	}
	if v := i.Thumbnail; v != nil {
		m.SetThumbnail(*v)
	}
	if v := i.ExpiryDate; v != nil {
		m.SetExpiryDate(*v)
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if i.ClearUploadedBy {
		m.ClearUploadedBy()
	}
	if v := i.UploadedByID; v != nil {
		m.SetUploadedByID(*v)
	}
	if i.ClearApprovedBy {
		m.ClearApprovedBy()
	}
	if v := i.ApprovedByID; v != nil {
		m.SetApprovedByID(*v)
	}
}

// SetInput applies the change-set in the UpdateCompanyDocumentInput on the CompanyDocumentUpdate builder.
func (c *CompanyDocumentUpdate) SetInput(i UpdateCompanyDocumentInput) *CompanyDocumentUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCompanyDocumentInput on the CompanyDocumentUpdateOne builder.
func (c *CompanyDocumentUpdateOne) SetInput(i UpdateCompanyDocumentInput) *CompanyDocumentUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCustomerInput represents a mutation input for creating customers.
type CreateCustomerInput struct {
	Address     string
	City        string
	Country     *string
	Description *string
	Email       *string
	Name        string
	Phone       string
	TaxId       string
}

// Mutate applies the CreateCustomerInput on the CustomerMutation builder.
func (i *CreateCustomerInput) Mutate(m *CustomerMutation) {
	m.SetAddress(i.Address)
	m.SetCity(i.City)
	if v := i.Country; v != nil {
		m.SetCountry(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	m.SetName(i.Name)
	m.SetPhone(i.Phone)
	m.SetTaxId(i.TaxId)
}

// SetInput applies the change-set in the CreateCustomerInput on the CustomerCreate builder.
func (c *CustomerCreate) SetInput(i CreateCustomerInput) *CustomerCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCustomerInput represents a mutation input for updating customers.
type UpdateCustomerInput struct {
	Address          *string
	City             *string
	ClearCountry     bool
	Country          *string
	ClearDescription bool
	Description      *string
	ClearEmail       bool
	Email            *string
	Name             *string
	Phone            *string
	TaxId            *string
}

// Mutate applies the UpdateCustomerInput on the CustomerMutation builder.
func (i *UpdateCustomerInput) Mutate(m *CustomerMutation) {
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if v := i.City; v != nil {
		m.SetCity(*v)
	}
	if i.ClearCountry {
		m.ClearCountry()
	}
	if v := i.Country; v != nil {
		m.SetCountry(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearEmail {
		m.ClearEmail()
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Phone; v != nil {
		m.SetPhone(*v)
	}
	if v := i.TaxId; v != nil {
		m.SetTaxId(*v)
	}
}

// SetInput applies the change-set in the UpdateCustomerInput on the CustomerUpdate builder.
func (c *CustomerUpdate) SetInput(i UpdateCustomerInput) *CustomerUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCustomerInput on the CustomerUpdateOne builder.
func (c *CustomerUpdateOne) SetInput(i UpdateCustomerInput) *CustomerUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateEmployeeInput represents a mutation input for creating employees.
type CreateEmployeeInput struct {
	Name            string
	Birthdate       *time.Time
	Gender          employee.Gender
	Position        string
	Department      *string
	Email           *string
	Phone           *string
	Avatar          *string
	HireDate        time.Time
	MonthlySalary   *int
	Status          *employee.Status
	PerformaceScore *float64
	CompanyID       *int
	UserID          *int
	SubordinateIDs  []int
	LeaderID        *int
}

// Mutate applies the CreateEmployeeInput on the EmployeeMutation builder.
func (i *CreateEmployeeInput) Mutate(m *EmployeeMutation) {
	m.SetName(i.Name)
	if v := i.Birthdate; v != nil {
		m.SetBirthdate(*v)
	}
	m.SetGender(i.Gender)
	m.SetPosition(i.Position)
	if v := i.Department; v != nil {
		m.SetDepartment(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.Phone; v != nil {
		m.SetPhone(*v)
	}
	if v := i.Avatar; v != nil {
		m.SetAvatar(*v)
	}
	m.SetHireDate(i.HireDate)
	if v := i.MonthlySalary; v != nil {
		m.SetMonthlySalary(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.PerformaceScore; v != nil {
		m.SetPerformaceScore(*v)
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
	if v := i.SubordinateIDs; len(v) > 0 {
		m.AddSubordinateIDs(v...)
	}
	if v := i.LeaderID; v != nil {
		m.SetLeaderID(*v)
	}
}

// SetInput applies the change-set in the CreateEmployeeInput on the EmployeeCreate builder.
func (c *EmployeeCreate) SetInput(i CreateEmployeeInput) *EmployeeCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateEmployeeInput represents a mutation input for updating employees.
type UpdateEmployeeInput struct {
	Name                 *string
	ClearBirthdate       bool
	Birthdate            *time.Time
	Gender               *employee.Gender
	Position             *string
	ClearDepartment      bool
	Department           *string
	ClearEmail           bool
	Email                *string
	ClearPhone           bool
	Phone                *string
	ClearAvatar          bool
	Avatar               *string
	HireDate             *time.Time
	MonthlySalary        *int
	ClearStatus          bool
	Status               *employee.Status
	ClearPerformaceScore bool
	PerformaceScore      *float64
	ClearCompany         bool
	CompanyID            *int
	ClearUser            bool
	UserID               *int
	ClearSubordinates    bool
	AddSubordinateIDs    []int
	RemoveSubordinateIDs []int
	ClearLeader          bool
	LeaderID             *int
}

// Mutate applies the UpdateEmployeeInput on the EmployeeMutation builder.
func (i *UpdateEmployeeInput) Mutate(m *EmployeeMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearBirthdate {
		m.ClearBirthdate()
	}
	if v := i.Birthdate; v != nil {
		m.SetBirthdate(*v)
	}
	if v := i.Gender; v != nil {
		m.SetGender(*v)
	}
	if v := i.Position; v != nil {
		m.SetPosition(*v)
	}
	if i.ClearDepartment {
		m.ClearDepartment()
	}
	if v := i.Department; v != nil {
		m.SetDepartment(*v)
	}
	if i.ClearEmail {
		m.ClearEmail()
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if i.ClearPhone {
		m.ClearPhone()
	}
	if v := i.Phone; v != nil {
		m.SetPhone(*v)
	}
	if i.ClearAvatar {
		m.ClearAvatar()
	}
	if v := i.Avatar; v != nil {
		m.SetAvatar(*v)
	}
	if v := i.HireDate; v != nil {
		m.SetHireDate(*v)
	}
	if v := i.MonthlySalary; v != nil {
		m.SetMonthlySalary(*v)
	}
	if i.ClearStatus {
		m.ClearStatus()
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearPerformaceScore {
		m.ClearPerformaceScore()
	}
	if v := i.PerformaceScore; v != nil {
		m.SetPerformaceScore(*v)
	}
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if i.ClearUser {
		m.ClearUser()
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
	if i.ClearSubordinates {
		m.ClearSubordinates()
	}
	if v := i.AddSubordinateIDs; len(v) > 0 {
		m.AddSubordinateIDs(v...)
	}
	if v := i.RemoveSubordinateIDs; len(v) > 0 {
		m.RemoveSubordinateIDs(v...)
	}
	if i.ClearLeader {
		m.ClearLeader()
	}
	if v := i.LeaderID; v != nil {
		m.SetLeaderID(*v)
	}
}

// SetInput applies the change-set in the UpdateEmployeeInput on the EmployeeUpdate builder.
func (c *EmployeeUpdate) SetInput(i UpdateEmployeeInput) *EmployeeUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateEmployeeInput on the EmployeeUpdateOne builder.
func (c *EmployeeUpdateOne) SetInput(i UpdateEmployeeInput) *EmployeeUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateFileInput represents a mutation input for creating files.
type CreateFileInput struct {
	Category    file.Category
	Extension   string
	Size        string
	URI         string
	URL         string
	Description string
	CompanyID   *int
}

// Mutate applies the CreateFileInput on the FileMutation builder.
func (i *CreateFileInput) Mutate(m *FileMutation) {
	m.SetCategory(i.Category)
	m.SetExtension(i.Extension)
	m.SetSize(i.Size)
	m.SetURI(i.URI)
	m.SetURL(i.URL)
	m.SetDescription(i.Description)
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
}

// SetInput applies the change-set in the CreateFileInput on the FileCreate builder.
func (c *FileCreate) SetInput(i CreateFileInput) *FileCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateFileInput represents a mutation input for updating files.
type UpdateFileInput struct {
	Category     *file.Category
	Extension    *string
	Size         *string
	URI          *string
	URL          *string
	Description  *string
	ClearCompany bool
	CompanyID    *int
}

// Mutate applies the UpdateFileInput on the FileMutation builder.
func (i *UpdateFileInput) Mutate(m *FileMutation) {
	if v := i.Category; v != nil {
		m.SetCategory(*v)
	}
	if v := i.Extension; v != nil {
		m.SetExtension(*v)
	}
	if v := i.Size; v != nil {
		m.SetSize(*v)
	}
	if v := i.URI; v != nil {
		m.SetURI(*v)
	}
	if v := i.URL; v != nil {
		m.SetURL(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
}

// SetInput applies the change-set in the UpdateFileInput on the FileUpdate builder.
func (c *FileUpdate) SetInput(i UpdateFileInput) *FileUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateFileInput on the FileUpdateOne builder.
func (c *FileUpdateOne) SetInput(i UpdateFileInput) *FileUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateInventoryInput represents a mutation input for creating inventories.
type CreateInventoryInput struct {
	Name         string
	Category     inventory.Category
	Quantity     float64
	Unit         string
	MinimumLevel float64
	CurrentValue float64
	Notes        string
}

// Mutate applies the CreateInventoryInput on the InventoryMutation builder.
func (i *CreateInventoryInput) Mutate(m *InventoryMutation) {
	m.SetName(i.Name)
	m.SetCategory(i.Category)
	m.SetQuantity(i.Quantity)
	m.SetUnit(i.Unit)
	m.SetMinimumLevel(i.MinimumLevel)
	m.SetCurrentValue(i.CurrentValue)
	m.SetNotes(i.Notes)
}

// SetInput applies the change-set in the CreateInventoryInput on the InventoryCreate builder.
func (c *InventoryCreate) SetInput(i CreateInventoryInput) *InventoryCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateInventoryInput represents a mutation input for updating inventories.
type UpdateInventoryInput struct {
	Name         *string
	Category     *inventory.Category
	Quantity     *float64
	Unit         *string
	MinimumLevel *float64
	CurrentValue *float64
	Notes        *string
}

// Mutate applies the UpdateInventoryInput on the InventoryMutation builder.
func (i *UpdateInventoryInput) Mutate(m *InventoryMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Category; v != nil {
		m.SetCategory(*v)
	}
	if v := i.Quantity; v != nil {
		m.SetQuantity(*v)
	}
	if v := i.Unit; v != nil {
		m.SetUnit(*v)
	}
	if v := i.MinimumLevel; v != nil {
		m.SetMinimumLevel(*v)
	}
	if v := i.CurrentValue; v != nil {
		m.SetCurrentValue(*v)
	}
	if v := i.Notes; v != nil {
		m.SetNotes(*v)
	}
}

// SetInput applies the change-set in the UpdateInventoryInput on the InventoryUpdate builder.
func (c *InventoryUpdate) SetInput(i UpdateInventoryInput) *InventoryUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateInventoryInput on the InventoryUpdateOne builder.
func (c *InventoryUpdateOne) SetInput(i UpdateInventoryInput) *InventoryUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateInventoryMovementInput represents a mutation input for creating inventorymovements.
type CreateInventoryMovementInput struct {
	Category    inventorymovement.Category
	Quantity    float64
	Value       float64
	Date        *time.Time
	Source      *string
	Destination *string
	Notes       string
	InventoryID int
}

// Mutate applies the CreateInventoryMovementInput on the InventoryMovementMutation builder.
func (i *CreateInventoryMovementInput) Mutate(m *InventoryMovementMutation) {
	m.SetCategory(i.Category)
	m.SetQuantity(i.Quantity)
	m.SetValue(i.Value)
	if v := i.Date; v != nil {
		m.SetDate(*v)
	}
	if v := i.Source; v != nil {
		m.SetSource(*v)
	}
	if v := i.Destination; v != nil {
		m.SetDestination(*v)
	}
	m.SetNotes(i.Notes)
	m.SetInventoryID(i.InventoryID)
}

// SetInput applies the change-set in the CreateInventoryMovementInput on the InventoryMovementCreate builder.
func (c *InventoryMovementCreate) SetInput(i CreateInventoryMovementInput) *InventoryMovementCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateInventoryMovementInput represents a mutation input for updating inventorymovements.
type UpdateInventoryMovementInput struct {
	Category         *inventorymovement.Category
	Quantity         *float64
	Value            *float64
	Date             *time.Time
	ClearSource      bool
	Source           *string
	ClearDestination bool
	Destination      *string
	Notes            *string
}

// Mutate applies the UpdateInventoryMovementInput on the InventoryMovementMutation builder.
func (i *UpdateInventoryMovementInput) Mutate(m *InventoryMovementMutation) {
	if v := i.Category; v != nil {
		m.SetCategory(*v)
	}
	if v := i.Quantity; v != nil {
		m.SetQuantity(*v)
	}
	if v := i.Value; v != nil {
		m.SetValue(*v)
	}
	if v := i.Date; v != nil {
		m.SetDate(*v)
	}
	if i.ClearSource {
		m.ClearSource()
	}
	if v := i.Source; v != nil {
		m.SetSource(*v)
	}
	if i.ClearDestination {
		m.ClearDestination()
	}
	if v := i.Destination; v != nil {
		m.SetDestination(*v)
	}
	if v := i.Notes; v != nil {
		m.SetNotes(*v)
	}
}

// SetInput applies the change-set in the UpdateInventoryMovementInput on the InventoryMovementUpdate builder.
func (c *InventoryMovementUpdate) SetInput(i UpdateInventoryMovementInput) *InventoryMovementUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateInventoryMovementInput on the InventoryMovementUpdateOne builder.
func (c *InventoryMovementUpdateOne) SetInput(i UpdateInventoryMovementInput) *InventoryMovementUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateInvoiceInput represents a mutation input for creating invoices.
type CreateInvoiceInput struct {
	CompanyLogo       *string
	CompanyName       string
	CompanyTaxID      *string
	CompanyAddress    string
	CompanyCity       string
	CompanyEmail      *string
	CompanyPhone      *string
	Number            *string
	IssueDate         time.Time
	DueDate           time.Time
	PaidAt            *time.Time
	Status            *invoice.Status
	CustomerName      *string
	CustomerTaxID     *string
	CustomerAddress   *string
	CustomerCity      *string
	CustomerEmail     *string
	CustomerPhone     *string
	Items             string
	Subtotal          float64
	Tax               float64
	Total             float64
	Notes             *string
	PaymentMethod     *string
	BankName          *string
	BankAgency        *string
	BankAccountNumber *string
	BankAccountName   *string
	StorageURI        *string
	URL               *string
	Filename          *string
	Size              *float64
	Keywords          string
	ClientID          *int
	ReceivableID      *int
}

// Mutate applies the CreateInvoiceInput on the InvoiceMutation builder.
func (i *CreateInvoiceInput) Mutate(m *InvoiceMutation) {
	if v := i.CompanyLogo; v != nil {
		m.SetCompanyLogo(*v)
	}
	m.SetCompanyName(i.CompanyName)
	if v := i.CompanyTaxID; v != nil {
		m.SetCompanyTaxID(*v)
	}
	m.SetCompanyAddress(i.CompanyAddress)
	m.SetCompanyCity(i.CompanyCity)
	if v := i.CompanyEmail; v != nil {
		m.SetCompanyEmail(*v)
	}
	if v := i.CompanyPhone; v != nil {
		m.SetCompanyPhone(*v)
	}
	if v := i.Number; v != nil {
		m.SetNumber(*v)
	}
	m.SetIssueDate(i.IssueDate)
	m.SetDueDate(i.DueDate)
	if v := i.PaidAt; v != nil {
		m.SetPaidAt(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.CustomerName; v != nil {
		m.SetCustomerName(*v)
	}
	if v := i.CustomerTaxID; v != nil {
		m.SetCustomerTaxID(*v)
	}
	if v := i.CustomerAddress; v != nil {
		m.SetCustomerAddress(*v)
	}
	if v := i.CustomerCity; v != nil {
		m.SetCustomerCity(*v)
	}
	if v := i.CustomerEmail; v != nil {
		m.SetCustomerEmail(*v)
	}
	if v := i.CustomerPhone; v != nil {
		m.SetCustomerPhone(*v)
	}
	m.SetItems(i.Items)
	m.SetSubtotal(i.Subtotal)
	m.SetTax(i.Tax)
	m.SetTotal(i.Total)
	if v := i.Notes; v != nil {
		m.SetNotes(*v)
	}
	if v := i.PaymentMethod; v != nil {
		m.SetPaymentMethod(*v)
	}
	if v := i.BankName; v != nil {
		m.SetBankName(*v)
	}
	if v := i.BankAgency; v != nil {
		m.SetBankAgency(*v)
	}
	if v := i.BankAccountNumber; v != nil {
		m.SetBankAccountNumber(*v)
	}
	if v := i.BankAccountName; v != nil {
		m.SetBankAccountName(*v)
	}
	if v := i.StorageURI; v != nil {
		m.SetStorageURI(*v)
	}
	if v := i.URL; v != nil {
		m.SetURL(*v)
	}
	if v := i.Filename; v != nil {
		m.SetFilename(*v)
	}
	if v := i.Size; v != nil {
		m.SetSize(*v)
	}
	m.SetKeywords(i.Keywords)
	if v := i.ClientID; v != nil {
		m.SetClientID(*v)
	}
	if v := i.ReceivableID; v != nil {
		m.SetReceivableID(*v)
	}
}

// SetInput applies the change-set in the CreateInvoiceInput on the InvoiceCreate builder.
func (c *InvoiceCreate) SetInput(i CreateInvoiceInput) *InvoiceCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateInvoiceInput represents a mutation input for updating invoices.
type UpdateInvoiceInput struct {
	ClearCompanyLogo       bool
	CompanyLogo            *string
	CompanyName            *string
	ClearCompanyTaxID      bool
	CompanyTaxID           *string
	CompanyAddress         *string
	CompanyCity            *string
	ClearCompanyEmail      bool
	CompanyEmail           *string
	ClearCompanyPhone      bool
	CompanyPhone           *string
	ClearNumber            bool
	Number                 *string
	IssueDate              *time.Time
	DueDate                *time.Time
	ClearPaidAt            bool
	PaidAt                 *time.Time
	Status                 *invoice.Status
	ClearCustomerName      bool
	CustomerName           *string
	ClearCustomerTaxID     bool
	CustomerTaxID          *string
	ClearCustomerAddress   bool
	CustomerAddress        *string
	ClearCustomerCity      bool
	CustomerCity           *string
	ClearCustomerEmail     bool
	CustomerEmail          *string
	ClearCustomerPhone     bool
	CustomerPhone          *string
	Items                  *string
	Subtotal               *float64
	Tax                    *float64
	Total                  *float64
	ClearNotes             bool
	Notes                  *string
	ClearPaymentMethod     bool
	PaymentMethod          *string
	ClearBankName          bool
	BankName               *string
	ClearBankAgency        bool
	BankAgency             *string
	ClearBankAccountNumber bool
	BankAccountNumber      *string
	ClearBankAccountName   bool
	BankAccountName        *string
	ClearStorageURI        bool
	StorageURI             *string
	ClearURL               bool
	URL                    *string
	ClearFilename          bool
	Filename               *string
	ClearSize              bool
	Size                   *float64
	Keywords               *string
}

// Mutate applies the UpdateInvoiceInput on the InvoiceMutation builder.
func (i *UpdateInvoiceInput) Mutate(m *InvoiceMutation) {
	if i.ClearCompanyLogo {
		m.ClearCompanyLogo()
	}
	if v := i.CompanyLogo; v != nil {
		m.SetCompanyLogo(*v)
	}
	if v := i.CompanyName; v != nil {
		m.SetCompanyName(*v)
	}
	if i.ClearCompanyTaxID {
		m.ClearCompanyTaxID()
	}
	if v := i.CompanyTaxID; v != nil {
		m.SetCompanyTaxID(*v)
	}
	if v := i.CompanyAddress; v != nil {
		m.SetCompanyAddress(*v)
	}
	if v := i.CompanyCity; v != nil {
		m.SetCompanyCity(*v)
	}
	if i.ClearCompanyEmail {
		m.ClearCompanyEmail()
	}
	if v := i.CompanyEmail; v != nil {
		m.SetCompanyEmail(*v)
	}
	if i.ClearCompanyPhone {
		m.ClearCompanyPhone()
	}
	if v := i.CompanyPhone; v != nil {
		m.SetCompanyPhone(*v)
	}
	if i.ClearNumber {
		m.ClearNumber()
	}
	if v := i.Number; v != nil {
		m.SetNumber(*v)
	}
	if v := i.IssueDate; v != nil {
		m.SetIssueDate(*v)
	}
	if v := i.DueDate; v != nil {
		m.SetDueDate(*v)
	}
	if i.ClearPaidAt {
		m.ClearPaidAt()
	}
	if v := i.PaidAt; v != nil {
		m.SetPaidAt(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearCustomerName {
		m.ClearCustomerName()
	}
	if v := i.CustomerName; v != nil {
		m.SetCustomerName(*v)
	}
	if i.ClearCustomerTaxID {
		m.ClearCustomerTaxID()
	}
	if v := i.CustomerTaxID; v != nil {
		m.SetCustomerTaxID(*v)
	}
	if i.ClearCustomerAddress {
		m.ClearCustomerAddress()
	}
	if v := i.CustomerAddress; v != nil {
		m.SetCustomerAddress(*v)
	}
	if i.ClearCustomerCity {
		m.ClearCustomerCity()
	}
	if v := i.CustomerCity; v != nil {
		m.SetCustomerCity(*v)
	}
	if i.ClearCustomerEmail {
		m.ClearCustomerEmail()
	}
	if v := i.CustomerEmail; v != nil {
		m.SetCustomerEmail(*v)
	}
	if i.ClearCustomerPhone {
		m.ClearCustomerPhone()
	}
	if v := i.CustomerPhone; v != nil {
		m.SetCustomerPhone(*v)
	}
	if v := i.Items; v != nil {
		m.SetItems(*v)
	}
	if v := i.Subtotal; v != nil {
		m.SetSubtotal(*v)
	}
	if v := i.Tax; v != nil {
		m.SetTax(*v)
	}
	if v := i.Total; v != nil {
		m.SetTotal(*v)
	}
	if i.ClearNotes {
		m.ClearNotes()
	}
	if v := i.Notes; v != nil {
		m.SetNotes(*v)
	}
	if i.ClearPaymentMethod {
		m.ClearPaymentMethod()
	}
	if v := i.PaymentMethod; v != nil {
		m.SetPaymentMethod(*v)
	}
	if i.ClearBankName {
		m.ClearBankName()
	}
	if v := i.BankName; v != nil {
		m.SetBankName(*v)
	}
	if i.ClearBankAgency {
		m.ClearBankAgency()
	}
	if v := i.BankAgency; v != nil {
		m.SetBankAgency(*v)
	}
	if i.ClearBankAccountNumber {
		m.ClearBankAccountNumber()
	}
	if v := i.BankAccountNumber; v != nil {
		m.SetBankAccountNumber(*v)
	}
	if i.ClearBankAccountName {
		m.ClearBankAccountName()
	}
	if v := i.BankAccountName; v != nil {
		m.SetBankAccountName(*v)
	}
	if i.ClearStorageURI {
		m.ClearStorageURI()
	}
	if v := i.StorageURI; v != nil {
		m.SetStorageURI(*v)
	}
	if i.ClearURL {
		m.ClearURL()
	}
	if v := i.URL; v != nil {
		m.SetURL(*v)
	}
	if i.ClearFilename {
		m.ClearFilename()
	}
	if v := i.Filename; v != nil {
		m.SetFilename(*v)
	}
	if i.ClearSize {
		m.ClearSize()
	}
	if v := i.Size; v != nil {
		m.SetSize(*v)
	}
	if v := i.Keywords; v != nil {
		m.SetKeywords(*v)
	}
}

// SetInput applies the change-set in the UpdateInvoiceInput on the InvoiceUpdate builder.
func (c *InvoiceUpdate) SetInput(i UpdateInvoiceInput) *InvoiceUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateInvoiceInput on the InvoiceUpdateOne builder.
func (c *InvoiceUpdateOne) SetInput(i UpdateInvoiceInput) *InvoiceUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateMemberSignupTokenInput represents a mutation input for creating membersignuptokens.
type CreateMemberSignupTokenInput struct {
	Name   string
	Email  *string
	Avatar string
	Role   membersignuptoken.Role
	Note   string
}

// Mutate applies the CreateMemberSignupTokenInput on the MemberSignupTokenMutation builder.
func (i *CreateMemberSignupTokenInput) Mutate(m *MemberSignupTokenMutation) {
	m.SetName(i.Name)
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	m.SetAvatar(i.Avatar)
	m.SetRole(i.Role)
	m.SetNote(i.Note)
}

// SetInput applies the change-set in the CreateMemberSignupTokenInput on the MemberSignupTokenCreate builder.
func (c *MemberSignupTokenCreate) SetInput(i CreateMemberSignupTokenInput) *MemberSignupTokenCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateMemberSignupTokenInput represents a mutation input for updating membersignuptokens.
type UpdateMemberSignupTokenInput struct {
	Name           *string
	ClearEmail     bool
	Email          *string
	Avatar         *string
	Role           *membersignuptoken.Role
	Note           *string
	CompanyID      *int
	ClearCreatedBy bool
	CreatedByID    *int
}

// Mutate applies the UpdateMemberSignupTokenInput on the MemberSignupTokenMutation builder.
func (i *UpdateMemberSignupTokenInput) Mutate(m *MemberSignupTokenMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearEmail {
		m.ClearEmail()
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.Avatar; v != nil {
		m.SetAvatar(*v)
	}
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if v := i.Note; v != nil {
		m.SetNote(*v)
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedByID; v != nil {
		m.SetCreatedByID(*v)
	}
}

// SetInput applies the change-set in the UpdateMemberSignupTokenInput on the MemberSignupTokenUpdate builder.
func (c *MemberSignupTokenUpdate) SetInput(i UpdateMemberSignupTokenInput) *MemberSignupTokenUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateMemberSignupTokenInput on the MemberSignupTokenUpdateOne builder.
func (c *MemberSignupTokenUpdateOne) SetInput(i UpdateMemberSignupTokenInput) *MemberSignupTokenUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePayableInput represents a mutation input for creating payables.
type CreatePayableInput struct {
	EntryGroup         int
	Date               time.Time
	Name               *string
	OutstandingBalance float64
	TotalTransaction   float64
	DueDate            time.Time
	Status             payable.Status
	CompanyID          *int
}

// Mutate applies the CreatePayableInput on the PayableMutation builder.
func (i *CreatePayableInput) Mutate(m *PayableMutation) {
	m.SetEntryGroup(i.EntryGroup)
	m.SetDate(i.Date)
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	m.SetOutstandingBalance(i.OutstandingBalance)
	m.SetTotalTransaction(i.TotalTransaction)
	m.SetDueDate(i.DueDate)
	m.SetStatus(i.Status)
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
}

// SetInput applies the change-set in the CreatePayableInput on the PayableCreate builder.
func (c *PayableCreate) SetInput(i CreatePayableInput) *PayableCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePayableInput represents a mutation input for updating payables.
type UpdatePayableInput struct {
	EntryGroup         *int
	Date               *time.Time
	Name               *string
	OutstandingBalance *float64
	TotalTransaction   *float64
	DueDate            *time.Time
	Status             *payable.Status
	ClearCompany       bool
	CompanyID          *int
}

// Mutate applies the UpdatePayableInput on the PayableMutation builder.
func (i *UpdatePayableInput) Mutate(m *PayableMutation) {
	if v := i.EntryGroup; v != nil {
		m.SetEntryGroup(*v)
	}
	if v := i.Date; v != nil {
		m.SetDate(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.OutstandingBalance; v != nil {
		m.SetOutstandingBalance(*v)
	}
	if v := i.TotalTransaction; v != nil {
		m.SetTotalTransaction(*v)
	}
	if v := i.DueDate; v != nil {
		m.SetDueDate(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
}

// SetInput applies the change-set in the UpdatePayableInput on the PayableUpdate builder.
func (c *PayableUpdate) SetInput(i UpdatePayableInput) *PayableUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePayableInput on the PayableUpdateOne builder.
func (c *PayableUpdateOne) SetInput(i UpdatePayableInput) *PayableUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateProductInput represents a mutation input for creating products.
type CreateProductInput struct {
	Stock     *int
	CompanyID *int
}

// Mutate applies the CreateProductInput on the ProductMutation builder.
func (i *CreateProductInput) Mutate(m *ProductMutation) {
	if v := i.Stock; v != nil {
		m.SetStock(*v)
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
}

// SetInput applies the change-set in the CreateProductInput on the ProductCreate builder.
func (c *ProductCreate) SetInput(i CreateProductInput) *ProductCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateProductInput represents a mutation input for updating products.
type UpdateProductInput struct {
	Stock        *int
	ClearCompany bool
	CompanyID    *int
}

// Mutate applies the UpdateProductInput on the ProductMutation builder.
func (i *UpdateProductInput) Mutate(m *ProductMutation) {
	if v := i.Stock; v != nil {
		m.SetStock(*v)
	}
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
}

// SetInput applies the change-set in the UpdateProductInput on the ProductUpdate builder.
func (c *ProductUpdate) SetInput(i UpdateProductInput) *ProductUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateProductInput on the ProductUpdateOne builder.
func (c *ProductUpdateOne) SetInput(i UpdateProductInput) *ProductUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateProjectInput represents a mutation input for creating projects.
type CreateProjectInput struct {
	Name             string
	Description      string
	PlannedStartDate time.Time
	ActualStartDate  *time.Time
	PlannedEndDate   time.Time
	ActualEndDate    *time.Time
	Progress         *float64
	Status           *project.Status
	CompanyID        *int
	CreatedByID      *int
	LeaderID         *int
	TaskIDs          []int
	MilestoneIDs     []int
}

// Mutate applies the CreateProjectInput on the ProjectMutation builder.
func (i *CreateProjectInput) Mutate(m *ProjectMutation) {
	m.SetName(i.Name)
	m.SetDescription(i.Description)
	m.SetPlannedStartDate(i.PlannedStartDate)
	if v := i.ActualStartDate; v != nil {
		m.SetActualStartDate(*v)
	}
	m.SetPlannedEndDate(i.PlannedEndDate)
	if v := i.ActualEndDate; v != nil {
		m.SetActualEndDate(*v)
	}
	if v := i.Progress; v != nil {
		m.SetProgress(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if v := i.CreatedByID; v != nil {
		m.SetCreatedByID(*v)
	}
	if v := i.LeaderID; v != nil {
		m.SetLeaderID(*v)
	}
	if v := i.TaskIDs; len(v) > 0 {
		m.AddTaskIDs(v...)
	}
	if v := i.MilestoneIDs; len(v) > 0 {
		m.AddMilestoneIDs(v...)
	}
}

// SetInput applies the change-set in the CreateProjectInput on the ProjectCreate builder.
func (c *ProjectCreate) SetInput(i CreateProjectInput) *ProjectCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateProjectInput represents a mutation input for updating projects.
type UpdateProjectInput struct {
	Name                 *string
	Description          *string
	PlannedStartDate     *time.Time
	ClearActualStartDate bool
	ActualStartDate      *time.Time
	PlannedEndDate       *time.Time
	ClearActualEndDate   bool
	ActualEndDate        *time.Time
	Progress             *float64
	Status               *project.Status
	ClearCompany         bool
	CompanyID            *int
	ClearCreatedBy       bool
	CreatedByID          *int
	ClearLeader          bool
	LeaderID             *int
	ClearTasks           bool
	AddTaskIDs           []int
	RemoveTaskIDs        []int
	ClearMilestones      bool
	AddMilestoneIDs      []int
	RemoveMilestoneIDs   []int
}

// Mutate applies the UpdateProjectInput on the ProjectMutation builder.
func (i *UpdateProjectInput) Mutate(m *ProjectMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.PlannedStartDate; v != nil {
		m.SetPlannedStartDate(*v)
	}
	if i.ClearActualStartDate {
		m.ClearActualStartDate()
	}
	if v := i.ActualStartDate; v != nil {
		m.SetActualStartDate(*v)
	}
	if v := i.PlannedEndDate; v != nil {
		m.SetPlannedEndDate(*v)
	}
	if i.ClearActualEndDate {
		m.ClearActualEndDate()
	}
	if v := i.ActualEndDate; v != nil {
		m.SetActualEndDate(*v)
	}
	if v := i.Progress; v != nil {
		m.SetProgress(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedByID; v != nil {
		m.SetCreatedByID(*v)
	}
	if i.ClearLeader {
		m.ClearLeader()
	}
	if v := i.LeaderID; v != nil {
		m.SetLeaderID(*v)
	}
	if i.ClearTasks {
		m.ClearTasks()
	}
	if v := i.AddTaskIDs; len(v) > 0 {
		m.AddTaskIDs(v...)
	}
	if v := i.RemoveTaskIDs; len(v) > 0 {
		m.RemoveTaskIDs(v...)
	}
	if i.ClearMilestones {
		m.ClearMilestones()
	}
	if v := i.AddMilestoneIDs; len(v) > 0 {
		m.AddMilestoneIDs(v...)
	}
	if v := i.RemoveMilestoneIDs; len(v) > 0 {
		m.RemoveMilestoneIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateProjectInput on the ProjectUpdate builder.
func (c *ProjectUpdate) SetInput(i UpdateProjectInput) *ProjectUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateProjectInput on the ProjectUpdateOne builder.
func (c *ProjectUpdateOne) SetInput(i UpdateProjectInput) *ProjectUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateProjectMilestoneInput represents a mutation input for creating projectmilestones.
type CreateProjectMilestoneInput struct {
	Name      string
	DueDate   time.Time
	ProjectID int
}

// Mutate applies the CreateProjectMilestoneInput on the ProjectMilestoneMutation builder.
func (i *CreateProjectMilestoneInput) Mutate(m *ProjectMilestoneMutation) {
	m.SetName(i.Name)
	m.SetDueDate(i.DueDate)
	m.SetProjectID(i.ProjectID)
}

// SetInput applies the change-set in the CreateProjectMilestoneInput on the ProjectMilestoneCreate builder.
func (c *ProjectMilestoneCreate) SetInput(i CreateProjectMilestoneInput) *ProjectMilestoneCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateProjectMilestoneInput represents a mutation input for updating projectmilestones.
type UpdateProjectMilestoneInput struct {
	Name      *string
	DueDate   *time.Time
	ProjectID *int
}

// Mutate applies the UpdateProjectMilestoneInput on the ProjectMilestoneMutation builder.
func (i *UpdateProjectMilestoneInput) Mutate(m *ProjectMilestoneMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.DueDate; v != nil {
		m.SetDueDate(*v)
	}
	if v := i.ProjectID; v != nil {
		m.SetProjectID(*v)
	}
}

// SetInput applies the change-set in the UpdateProjectMilestoneInput on the ProjectMilestoneUpdate builder.
func (c *ProjectMilestoneUpdate) SetInput(i UpdateProjectMilestoneInput) *ProjectMilestoneUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateProjectMilestoneInput on the ProjectMilestoneUpdateOne builder.
func (c *ProjectMilestoneUpdateOne) SetInput(i UpdateProjectMilestoneInput) *ProjectMilestoneUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateProjectTaskInput represents a mutation input for creating projecttasks.
type CreateProjectTaskInput struct {
	CreatedAt      *time.Time
	Name           string
	AssigneeName   string
	Location       *string
	DueDate        time.Time
	StartDate      time.Time
	EndDate        *time.Time
	Description    *string
	Status         projecttask.Status
	ProjectID      int
	AssigneeID     *int
	ParticipantIDs []int
	CreatedByID    *int
	WorkShiftIDs   []int
}

// Mutate applies the CreateProjectTaskInput on the ProjectTaskMutation builder.
func (i *CreateProjectTaskInput) Mutate(m *ProjectTaskMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	m.SetName(i.Name)
	m.SetAssigneeName(i.AssigneeName)
	if v := i.Location; v != nil {
		m.SetLocation(*v)
	}
	m.SetDueDate(i.DueDate)
	m.SetStartDate(i.StartDate)
	if v := i.EndDate; v != nil {
		m.SetEndDate(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	m.SetStatus(i.Status)
	m.SetProjectID(i.ProjectID)
	if v := i.AssigneeID; v != nil {
		m.SetAssigneeID(*v)
	}
	if v := i.ParticipantIDs; len(v) > 0 {
		m.AddParticipantIDs(v...)
	}
	if v := i.CreatedByID; v != nil {
		m.SetCreatedByID(*v)
	}
	if v := i.WorkShiftIDs; len(v) > 0 {
		m.AddWorkShiftIDs(v...)
	}
}

// SetInput applies the change-set in the CreateProjectTaskInput on the ProjectTaskCreate builder.
func (c *ProjectTaskCreate) SetInput(i CreateProjectTaskInput) *ProjectTaskCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateProjectTaskInput represents a mutation input for updating projecttasks.
type UpdateProjectTaskInput struct {
	Name                 *string
	AssigneeName         *string
	ClearLocation        bool
	Location             *string
	DueDate              *time.Time
	StartDate            *time.Time
	ClearEndDate         bool
	EndDate              *time.Time
	ClearDescription     bool
	Description          *string
	Status               *projecttask.Status
	ProjectID            *int
	ClearAssignee        bool
	AssigneeID           *int
	ClearParticipants    bool
	AddParticipantIDs    []int
	RemoveParticipantIDs []int
	ClearWorkShifts      bool
	AddWorkShiftIDs      []int
	RemoveWorkShiftIDs   []int
}

// Mutate applies the UpdateProjectTaskInput on the ProjectTaskMutation builder.
func (i *UpdateProjectTaskInput) Mutate(m *ProjectTaskMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.AssigneeName; v != nil {
		m.SetAssigneeName(*v)
	}
	if i.ClearLocation {
		m.ClearLocation()
	}
	if v := i.Location; v != nil {
		m.SetLocation(*v)
	}
	if v := i.DueDate; v != nil {
		m.SetDueDate(*v)
	}
	if v := i.StartDate; v != nil {
		m.SetStartDate(*v)
	}
	if i.ClearEndDate {
		m.ClearEndDate()
	}
	if v := i.EndDate; v != nil {
		m.SetEndDate(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.ProjectID; v != nil {
		m.SetProjectID(*v)
	}
	if i.ClearAssignee {
		m.ClearAssignee()
	}
	if v := i.AssigneeID; v != nil {
		m.SetAssigneeID(*v)
	}
	if i.ClearParticipants {
		m.ClearParticipants()
	}
	if v := i.AddParticipantIDs; len(v) > 0 {
		m.AddParticipantIDs(v...)
	}
	if v := i.RemoveParticipantIDs; len(v) > 0 {
		m.RemoveParticipantIDs(v...)
	}
	if i.ClearWorkShifts {
		m.ClearWorkShifts()
	}
	if v := i.AddWorkShiftIDs; len(v) > 0 {
		m.AddWorkShiftIDs(v...)
	}
	if v := i.RemoveWorkShiftIDs; len(v) > 0 {
		m.RemoveWorkShiftIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateProjectTaskInput on the ProjectTaskUpdate builder.
func (c *ProjectTaskUpdate) SetInput(i UpdateProjectTaskInput) *ProjectTaskUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateProjectTaskInput on the ProjectTaskUpdateOne builder.
func (c *ProjectTaskUpdateOne) SetInput(i UpdateProjectTaskInput) *ProjectTaskUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateReceivableInput represents a mutation input for creating receivables.
type CreateReceivableInput struct {
	EntryGroup         int
	Date               time.Time
	Name               *string
	OutstandingBalance float64
	TotalTransaction   float64
	DueDate            time.Time
	Status             receivable.Status
	CompanyID          *int
	InvoiceID          *int
}

// Mutate applies the CreateReceivableInput on the ReceivableMutation builder.
func (i *CreateReceivableInput) Mutate(m *ReceivableMutation) {
	m.SetEntryGroup(i.EntryGroup)
	m.SetDate(i.Date)
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	m.SetOutstandingBalance(i.OutstandingBalance)
	m.SetTotalTransaction(i.TotalTransaction)
	m.SetDueDate(i.DueDate)
	m.SetStatus(i.Status)
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if v := i.InvoiceID; v != nil {
		m.SetInvoiceID(*v)
	}
}

// SetInput applies the change-set in the CreateReceivableInput on the ReceivableCreate builder.
func (c *ReceivableCreate) SetInput(i CreateReceivableInput) *ReceivableCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateReceivableInput represents a mutation input for updating receivables.
type UpdateReceivableInput struct {
	EntryGroup         *int
	Date               *time.Time
	Name               *string
	OutstandingBalance *float64
	TotalTransaction   *float64
	DueDate            *time.Time
	Status             *receivable.Status
	ClearCompany       bool
	CompanyID          *int
}

// Mutate applies the UpdateReceivableInput on the ReceivableMutation builder.
func (i *UpdateReceivableInput) Mutate(m *ReceivableMutation) {
	if v := i.EntryGroup; v != nil {
		m.SetEntryGroup(*v)
	}
	if v := i.Date; v != nil {
		m.SetDate(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.OutstandingBalance; v != nil {
		m.SetOutstandingBalance(*v)
	}
	if v := i.TotalTransaction; v != nil {
		m.SetTotalTransaction(*v)
	}
	if v := i.DueDate; v != nil {
		m.SetDueDate(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
}

// SetInput applies the change-set in the UpdateReceivableInput on the ReceivableUpdate builder.
func (c *ReceivableUpdate) SetInput(i UpdateReceivableInput) *ReceivableUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateReceivableInput on the ReceivableUpdateOne builder.
func (c *ReceivableUpdateOne) SetInput(i UpdateReceivableInput) *ReceivableUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateSupplierInput represents a mutation input for creating suppliers.
type CreateSupplierInput struct {
	Address     string
	City        string
	Country     string
	Description string
	Email       string
	IsDefault   *bool
	Name        string
	Phone       string
	TaxId       string
	CompanyID   *int
	PayableIDs  []int
}

// Mutate applies the CreateSupplierInput on the SupplierMutation builder.
func (i *CreateSupplierInput) Mutate(m *SupplierMutation) {
	m.SetAddress(i.Address)
	m.SetCity(i.City)
	m.SetCountry(i.Country)
	m.SetDescription(i.Description)
	m.SetEmail(i.Email)
	if v := i.IsDefault; v != nil {
		m.SetIsDefault(*v)
	}
	m.SetName(i.Name)
	m.SetPhone(i.Phone)
	m.SetTaxId(i.TaxId)
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if v := i.PayableIDs; len(v) > 0 {
		m.AddPayableIDs(v...)
	}
}

// SetInput applies the change-set in the CreateSupplierInput on the SupplierCreate builder.
func (c *SupplierCreate) SetInput(i CreateSupplierInput) *SupplierCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateSupplierInput represents a mutation input for updating suppliers.
type UpdateSupplierInput struct {
	Address          *string
	City             *string
	Country          *string
	Description      *string
	Email            *string
	ClearIsDefault   bool
	IsDefault        *bool
	Name             *string
	Phone            *string
	TaxId            *string
	ClearCompany     bool
	CompanyID        *int
	ClearPayables    bool
	AddPayableIDs    []int
	RemovePayableIDs []int
}

// Mutate applies the UpdateSupplierInput on the SupplierMutation builder.
func (i *UpdateSupplierInput) Mutate(m *SupplierMutation) {
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if v := i.City; v != nil {
		m.SetCity(*v)
	}
	if v := i.Country; v != nil {
		m.SetCountry(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if i.ClearIsDefault {
		m.ClearIsDefault()
	}
	if v := i.IsDefault; v != nil {
		m.SetIsDefault(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Phone; v != nil {
		m.SetPhone(*v)
	}
	if v := i.TaxId; v != nil {
		m.SetTaxId(*v)
	}
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if i.ClearPayables {
		m.ClearPayables()
	}
	if v := i.AddPayableIDs; len(v) > 0 {
		m.AddPayableIDs(v...)
	}
	if v := i.RemovePayableIDs; len(v) > 0 {
		m.RemovePayableIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateSupplierInput on the SupplierUpdate builder.
func (c *SupplierUpdate) SetInput(i UpdateSupplierInput) *SupplierUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateSupplierInput on the SupplierUpdateOne builder.
func (c *SupplierUpdateOne) SetInput(i UpdateSupplierInput) *SupplierUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateTokenInput represents a mutation input for creating tokens.
type CreateTokenInput struct {
	Expiry    time.Time
	Category  token.Category
	Token     string
	CompanyID *int
	UserID    *int
}

// Mutate applies the CreateTokenInput on the TokenMutation builder.
func (i *CreateTokenInput) Mutate(m *TokenMutation) {
	m.SetExpiry(i.Expiry)
	m.SetCategory(i.Category)
	m.SetToken(i.Token)
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
}

// SetInput applies the change-set in the CreateTokenInput on the TokenCreate builder.
func (c *TokenCreate) SetInput(i CreateTokenInput) *TokenCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateTokenInput represents a mutation input for updating tokens.
type UpdateTokenInput struct {
	Expiry       *time.Time
	Category     *token.Category
	Token        *string
	ClearCompany bool
	CompanyID    *int
	ClearUser    bool
	UserID       *int
}

// Mutate applies the UpdateTokenInput on the TokenMutation builder.
func (i *UpdateTokenInput) Mutate(m *TokenMutation) {
	if v := i.Expiry; v != nil {
		m.SetExpiry(*v)
	}
	if v := i.Category; v != nil {
		m.SetCategory(*v)
	}
	if v := i.Token; v != nil {
		m.SetToken(*v)
	}
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if i.ClearUser {
		m.ClearUser()
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
}

// SetInput applies the change-set in the UpdateTokenInput on the TokenUpdate builder.
func (c *TokenUpdate) SetInput(i UpdateTokenInput) *TokenUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateTokenInput on the TokenUpdateOne builder.
func (c *TokenUpdateOne) SetInput(i UpdateTokenInput) *TokenUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateTreasuryInput represents a mutation input for creating treasuries.
type CreateTreasuryInput struct {
	Balance   float64
	CompanyID *int
}

// Mutate applies the CreateTreasuryInput on the TreasuryMutation builder.
func (i *CreateTreasuryInput) Mutate(m *TreasuryMutation) {
	m.SetBalance(i.Balance)
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
}

// SetInput applies the change-set in the CreateTreasuryInput on the TreasuryCreate builder.
func (c *TreasuryCreate) SetInput(i CreateTreasuryInput) *TreasuryCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateTreasuryInput represents a mutation input for updating treasuries.
type UpdateTreasuryInput struct {
	Balance      *float64
	ClearCompany bool
	CompanyID    *int
}

// Mutate applies the UpdateTreasuryInput on the TreasuryMutation builder.
func (i *UpdateTreasuryInput) Mutate(m *TreasuryMutation) {
	if v := i.Balance; v != nil {
		m.SetBalance(*v)
	}
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
}

// SetInput applies the change-set in the UpdateTreasuryInput on the TreasuryUpdate builder.
func (c *TreasuryUpdate) SetInput(i UpdateTreasuryInput) *TreasuryUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateTreasuryInput on the TreasuryUpdateOne builder.
func (c *TreasuryUpdateOne) SetInput(i UpdateTreasuryInput) *TreasuryUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	FirebaseUID                 string
	FcmToken                    *string
	ExpoPushToken               *string
	Email                       string
	Name                        string
	Address                     *string
	Avatar                      *string
	PhotoURL                    *string
	Department                  *string
	Phone                       *string
	Birthdate                   *time.Time
	Gender                      user.Gender
	AccountingEntryIDs          []int
	AssignedRoleIDs             []int
	SubordinateIDs              []int
	LeaderID                    *int
	CreatedMemberSignupTokenIDs []int
	EmployeeID                  *int
	IssuedInvoiceIDs            []int
	CreatedProjectIDs           []int
	LeaderedProjectIDs          []int
	AssignedProjectTaskIDs      []int
	ParticipatedProjectTaskIDs  []int
	CreatedTaskIDs              []int
	TokenIDs                    []int
	ApprovedWorkShiftIDs        []int
	WorkShiftIDs                []int
	UploadedDocumentIDs         []int
	ApprovedDocumentIDs         []int
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	m.SetFirebaseUID(i.FirebaseUID)
	if v := i.FcmToken; v != nil {
		m.SetFcmToken(*v)
	}
	if v := i.ExpoPushToken; v != nil {
		m.SetExpoPushToken(*v)
	}
	m.SetEmail(i.Email)
	m.SetName(i.Name)
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if v := i.Avatar; v != nil {
		m.SetAvatar(*v)
	}
	if v := i.PhotoURL; v != nil {
		m.SetPhotoURL(*v)
	}
	if v := i.Department; v != nil {
		m.SetDepartment(*v)
	}
	if v := i.Phone; v != nil {
		m.SetPhone(*v)
	}
	if v := i.Birthdate; v != nil {
		m.SetBirthdate(*v)
	}
	m.SetGender(i.Gender)
	if v := i.AccountingEntryIDs; len(v) > 0 {
		m.AddAccountingEntryIDs(v...)
	}
	if v := i.AssignedRoleIDs; len(v) > 0 {
		m.AddAssignedRoleIDs(v...)
	}
	if v := i.SubordinateIDs; len(v) > 0 {
		m.AddSubordinateIDs(v...)
	}
	if v := i.LeaderID; v != nil {
		m.SetLeaderID(*v)
	}
	if v := i.CreatedMemberSignupTokenIDs; len(v) > 0 {
		m.AddCreatedMemberSignupTokenIDs(v...)
	}
	if v := i.EmployeeID; v != nil {
		m.SetEmployeeID(*v)
	}
	if v := i.IssuedInvoiceIDs; len(v) > 0 {
		m.AddIssuedInvoiceIDs(v...)
	}
	if v := i.CreatedProjectIDs; len(v) > 0 {
		m.AddCreatedProjectIDs(v...)
	}
	if v := i.LeaderedProjectIDs; len(v) > 0 {
		m.AddLeaderedProjectIDs(v...)
	}
	if v := i.AssignedProjectTaskIDs; len(v) > 0 {
		m.AddAssignedProjectTaskIDs(v...)
	}
	if v := i.ParticipatedProjectTaskIDs; len(v) > 0 {
		m.AddParticipatedProjectTaskIDs(v...)
	}
	if v := i.CreatedTaskIDs; len(v) > 0 {
		m.AddCreatedTaskIDs(v...)
	}
	if v := i.TokenIDs; len(v) > 0 {
		m.AddTokenIDs(v...)
	}
	if v := i.ApprovedWorkShiftIDs; len(v) > 0 {
		m.AddApprovedWorkShiftIDs(v...)
	}
	if v := i.WorkShiftIDs; len(v) > 0 {
		m.AddWorkShiftIDs(v...)
	}
	if v := i.UploadedDocumentIDs; len(v) > 0 {
		m.AddUploadedDocumentIDs(v...)
	}
	if v := i.ApprovedDocumentIDs; len(v) > 0 {
		m.AddApprovedDocumentIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	FirebaseUID                       *string
	ClearFcmToken                     bool
	FcmToken                          *string
	ClearExpoPushToken                bool
	ExpoPushToken                     *string
	Name                              *string
	ClearAddress                      bool
	Address                           *string
	ClearAvatar                       bool
	Avatar                            *string
	ClearPhotoURL                     bool
	PhotoURL                          *string
	ClearDepartment                   bool
	Department                        *string
	ClearPhone                        bool
	Phone                             *string
	ClearBirthdate                    bool
	Birthdate                         *time.Time
	Gender                            *user.Gender
	Active                            *bool
	ClearAccountingEntries            bool
	AddAccountingEntryIDs             []int
	RemoveAccountingEntryIDs          []int
	AddCompanyIDs                     []int
	RemoveCompanyIDs                  []int
	ClearAssignedRoles                bool
	AddAssignedRoleIDs                []int
	RemoveAssignedRoleIDs             []int
	ClearSubordinates                 bool
	AddSubordinateIDs                 []int
	RemoveSubordinateIDs              []int
	ClearLeader                       bool
	LeaderID                          *int
	ClearCreatedMemberSignupTokens    bool
	AddCreatedMemberSignupTokenIDs    []int
	RemoveCreatedMemberSignupTokenIDs []int
	ClearEmployee                     bool
	EmployeeID                        *int
	ClearIssuedInvoices               bool
	AddIssuedInvoiceIDs               []int
	RemoveIssuedInvoiceIDs            []int
	ClearCreatedProjects              bool
	AddCreatedProjectIDs              []int
	RemoveCreatedProjectIDs           []int
	ClearLeaderedProjects             bool
	AddLeaderedProjectIDs             []int
	RemoveLeaderedProjectIDs          []int
	ClearAssignedProjectTasks         bool
	AddAssignedProjectTaskIDs         []int
	RemoveAssignedProjectTaskIDs      []int
	ClearParticipatedProjectTasks     bool
	AddParticipatedProjectTaskIDs     []int
	RemoveParticipatedProjectTaskIDs  []int
	ClearTokens                       bool
	AddTokenIDs                       []int
	RemoveTokenIDs                    []int
	ClearApprovedWorkShifts           bool
	AddApprovedWorkShiftIDs           []int
	RemoveApprovedWorkShiftIDs        []int
	ClearWorkShifts                   bool
	AddWorkShiftIDs                   []int
	RemoveWorkShiftIDs                []int
	ClearUploadedDocuments            bool
	AddUploadedDocumentIDs            []int
	RemoveUploadedDocumentIDs         []int
	ClearApprovedDocuments            bool
	AddApprovedDocumentIDs            []int
	RemoveApprovedDocumentIDs         []int
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.FirebaseUID; v != nil {
		m.SetFirebaseUID(*v)
	}
	if i.ClearFcmToken {
		m.ClearFcmToken()
	}
	if v := i.FcmToken; v != nil {
		m.SetFcmToken(*v)
	}
	if i.ClearExpoPushToken {
		m.ClearExpoPushToken()
	}
	if v := i.ExpoPushToken; v != nil {
		m.SetExpoPushToken(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearAddress {
		m.ClearAddress()
	}
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if i.ClearAvatar {
		m.ClearAvatar()
	}
	if v := i.Avatar; v != nil {
		m.SetAvatar(*v)
	}
	if i.ClearPhotoURL {
		m.ClearPhotoURL()
	}
	if v := i.PhotoURL; v != nil {
		m.SetPhotoURL(*v)
	}
	if i.ClearDepartment {
		m.ClearDepartment()
	}
	if v := i.Department; v != nil {
		m.SetDepartment(*v)
	}
	if i.ClearPhone {
		m.ClearPhone()
	}
	if v := i.Phone; v != nil {
		m.SetPhone(*v)
	}
	if i.ClearBirthdate {
		m.ClearBirthdate()
	}
	if v := i.Birthdate; v != nil {
		m.SetBirthdate(*v)
	}
	if v := i.Gender; v != nil {
		m.SetGender(*v)
	}
	if v := i.Active; v != nil {
		m.SetActive(*v)
	}
	if i.ClearAccountingEntries {
		m.ClearAccountingEntries()
	}
	if v := i.AddAccountingEntryIDs; len(v) > 0 {
		m.AddAccountingEntryIDs(v...)
	}
	if v := i.RemoveAccountingEntryIDs; len(v) > 0 {
		m.RemoveAccountingEntryIDs(v...)
	}
	if v := i.AddCompanyIDs; len(v) > 0 {
		m.AddCompanyIDs(v...)
	}
	if v := i.RemoveCompanyIDs; len(v) > 0 {
		m.RemoveCompanyIDs(v...)
	}
	if i.ClearAssignedRoles {
		m.ClearAssignedRoles()
	}
	if v := i.AddAssignedRoleIDs; len(v) > 0 {
		m.AddAssignedRoleIDs(v...)
	}
	if v := i.RemoveAssignedRoleIDs; len(v) > 0 {
		m.RemoveAssignedRoleIDs(v...)
	}
	if i.ClearSubordinates {
		m.ClearSubordinates()
	}
	if v := i.AddSubordinateIDs; len(v) > 0 {
		m.AddSubordinateIDs(v...)
	}
	if v := i.RemoveSubordinateIDs; len(v) > 0 {
		m.RemoveSubordinateIDs(v...)
	}
	if i.ClearLeader {
		m.ClearLeader()
	}
	if v := i.LeaderID; v != nil {
		m.SetLeaderID(*v)
	}
	if i.ClearCreatedMemberSignupTokens {
		m.ClearCreatedMemberSignupTokens()
	}
	if v := i.AddCreatedMemberSignupTokenIDs; len(v) > 0 {
		m.AddCreatedMemberSignupTokenIDs(v...)
	}
	if v := i.RemoveCreatedMemberSignupTokenIDs; len(v) > 0 {
		m.RemoveCreatedMemberSignupTokenIDs(v...)
	}
	if i.ClearEmployee {
		m.ClearEmployee()
	}
	if v := i.EmployeeID; v != nil {
		m.SetEmployeeID(*v)
	}
	if i.ClearIssuedInvoices {
		m.ClearIssuedInvoices()
	}
	if v := i.AddIssuedInvoiceIDs; len(v) > 0 {
		m.AddIssuedInvoiceIDs(v...)
	}
	if v := i.RemoveIssuedInvoiceIDs; len(v) > 0 {
		m.RemoveIssuedInvoiceIDs(v...)
	}
	if i.ClearCreatedProjects {
		m.ClearCreatedProjects()
	}
	if v := i.AddCreatedProjectIDs; len(v) > 0 {
		m.AddCreatedProjectIDs(v...)
	}
	if v := i.RemoveCreatedProjectIDs; len(v) > 0 {
		m.RemoveCreatedProjectIDs(v...)
	}
	if i.ClearLeaderedProjects {
		m.ClearLeaderedProjects()
	}
	if v := i.AddLeaderedProjectIDs; len(v) > 0 {
		m.AddLeaderedProjectIDs(v...)
	}
	if v := i.RemoveLeaderedProjectIDs; len(v) > 0 {
		m.RemoveLeaderedProjectIDs(v...)
	}
	if i.ClearAssignedProjectTasks {
		m.ClearAssignedProjectTasks()
	}
	if v := i.AddAssignedProjectTaskIDs; len(v) > 0 {
		m.AddAssignedProjectTaskIDs(v...)
	}
	if v := i.RemoveAssignedProjectTaskIDs; len(v) > 0 {
		m.RemoveAssignedProjectTaskIDs(v...)
	}
	if i.ClearParticipatedProjectTasks {
		m.ClearParticipatedProjectTasks()
	}
	if v := i.AddParticipatedProjectTaskIDs; len(v) > 0 {
		m.AddParticipatedProjectTaskIDs(v...)
	}
	if v := i.RemoveParticipatedProjectTaskIDs; len(v) > 0 {
		m.RemoveParticipatedProjectTaskIDs(v...)
	}
	if i.ClearTokens {
		m.ClearTokens()
	}
	if v := i.AddTokenIDs; len(v) > 0 {
		m.AddTokenIDs(v...)
	}
	if v := i.RemoveTokenIDs; len(v) > 0 {
		m.RemoveTokenIDs(v...)
	}
	if i.ClearApprovedWorkShifts {
		m.ClearApprovedWorkShifts()
	}
	if v := i.AddApprovedWorkShiftIDs; len(v) > 0 {
		m.AddApprovedWorkShiftIDs(v...)
	}
	if v := i.RemoveApprovedWorkShiftIDs; len(v) > 0 {
		m.RemoveApprovedWorkShiftIDs(v...)
	}
	if i.ClearWorkShifts {
		m.ClearWorkShifts()
	}
	if v := i.AddWorkShiftIDs; len(v) > 0 {
		m.AddWorkShiftIDs(v...)
	}
	if v := i.RemoveWorkShiftIDs; len(v) > 0 {
		m.RemoveWorkShiftIDs(v...)
	}
	if i.ClearUploadedDocuments {
		m.ClearUploadedDocuments()
	}
	if v := i.AddUploadedDocumentIDs; len(v) > 0 {
		m.AddUploadedDocumentIDs(v...)
	}
	if v := i.RemoveUploadedDocumentIDs; len(v) > 0 {
		m.RemoveUploadedDocumentIDs(v...)
	}
	if i.ClearApprovedDocuments {
		m.ClearApprovedDocuments()
	}
	if v := i.AddApprovedDocumentIDs; len(v) > 0 {
		m.AddApprovedDocumentIDs(v...)
	}
	if v := i.RemoveApprovedDocumentIDs; len(v) > 0 {
		m.RemoveApprovedDocumentIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserRoleInput represents a mutation input for creating userroles.
type CreateUserRoleInput struct {
	Role      userrole.Role
	Notes     string
	CompanyID *int
	UserID    *int
}

// Mutate applies the CreateUserRoleInput on the UserRoleMutation builder.
func (i *CreateUserRoleInput) Mutate(m *UserRoleMutation) {
	m.SetRole(i.Role)
	m.SetNotes(i.Notes)
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
}

// SetInput applies the change-set in the CreateUserRoleInput on the UserRoleCreate builder.
func (c *UserRoleCreate) SetInput(i CreateUserRoleInput) *UserRoleCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserRoleInput represents a mutation input for updating userroles.
type UpdateUserRoleInput struct {
	Role         *userrole.Role
	Notes        *string
	ClearCompany bool
	CompanyID    *int
	ClearUser    bool
	UserID       *int
}

// Mutate applies the UpdateUserRoleInput on the UserRoleMutation builder.
func (i *UpdateUserRoleInput) Mutate(m *UserRoleMutation) {
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if v := i.Notes; v != nil {
		m.SetNotes(*v)
	}
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if i.ClearUser {
		m.ClearUser()
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
}

// SetInput applies the change-set in the UpdateUserRoleInput on the UserRoleUpdate builder.
func (c *UserRoleUpdate) SetInput(i UpdateUserRoleInput) *UserRoleUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserRoleInput on the UserRoleUpdateOne builder.
func (c *UserRoleUpdateOne) SetInput(i UpdateUserRoleInput) *UserRoleUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateWorkshiftInput represents a mutation input for creating workshifts.
type CreateWorkshiftInput struct {
	ApprovedAt       *time.Time
	ClockIn          *time.Time
	ClockOut         *time.Time
	ClockInLocation  string
	ClockOutLocation *string
	Description      *string
	Note             *string
	Status           *workshift.Status
	CompanyID        *int
	UserID           *int
	ApprovedByID     *int
	TaskID           *int
	EditRequestID    *int
	WorkShiftID      *int
}

// Mutate applies the CreateWorkshiftInput on the WorkshiftMutation builder.
func (i *CreateWorkshiftInput) Mutate(m *WorkshiftMutation) {
	if v := i.ApprovedAt; v != nil {
		m.SetApprovedAt(*v)
	}
	if v := i.ClockIn; v != nil {
		m.SetClockIn(*v)
	}
	if v := i.ClockOut; v != nil {
		m.SetClockOut(*v)
	}
	m.SetClockInLocation(i.ClockInLocation)
	if v := i.ClockOutLocation; v != nil {
		m.SetClockOutLocation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Note; v != nil {
		m.SetNote(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
	if v := i.ApprovedByID; v != nil {
		m.SetApprovedByID(*v)
	}
	if v := i.TaskID; v != nil {
		m.SetTaskID(*v)
	}
	if v := i.EditRequestID; v != nil {
		m.SetEditRequestID(*v)
	}
	if v := i.WorkShiftID; v != nil {
		m.SetWorkShiftID(*v)
	}
}

// SetInput applies the change-set in the CreateWorkshiftInput on the WorkshiftCreate builder.
func (c *WorkshiftCreate) SetInput(i CreateWorkshiftInput) *WorkshiftCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateWorkshiftInput represents a mutation input for updating workshifts.
type UpdateWorkshiftInput struct {
	ClearApprovedAt       bool
	ApprovedAt            *time.Time
	ClockIn               *time.Time
	ClearClockOut         bool
	ClockOut              *time.Time
	ClockInLocation       *string
	ClearClockOutLocation bool
	ClockOutLocation      *string
	ClearDescription      bool
	Description           *string
	ClearNote             bool
	Note                  *string
	Status                *workshift.Status
	ClearCompany          bool
	CompanyID             *int
	ClearUser             bool
	UserID                *int
	ClearApprovedBy       bool
	ApprovedByID          *int
	ClearTask             bool
	TaskID                *int
	ClearEditRequest      bool
	EditRequestID         *int
	ClearWorkShift        bool
	WorkShiftID           *int
}

// Mutate applies the UpdateWorkshiftInput on the WorkshiftMutation builder.
func (i *UpdateWorkshiftInput) Mutate(m *WorkshiftMutation) {
	if i.ClearApprovedAt {
		m.ClearApprovedAt()
	}
	if v := i.ApprovedAt; v != nil {
		m.SetApprovedAt(*v)
	}
	if v := i.ClockIn; v != nil {
		m.SetClockIn(*v)
	}
	if i.ClearClockOut {
		m.ClearClockOut()
	}
	if v := i.ClockOut; v != nil {
		m.SetClockOut(*v)
	}
	if v := i.ClockInLocation; v != nil {
		m.SetClockInLocation(*v)
	}
	if i.ClearClockOutLocation {
		m.ClearClockOutLocation()
	}
	if v := i.ClockOutLocation; v != nil {
		m.SetClockOutLocation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearNote {
		m.ClearNote()
	}
	if v := i.Note; v != nil {
		m.SetNote(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if i.ClearUser {
		m.ClearUser()
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
	if i.ClearApprovedBy {
		m.ClearApprovedBy()
	}
	if v := i.ApprovedByID; v != nil {
		m.SetApprovedByID(*v)
	}
	if i.ClearTask {
		m.ClearTask()
	}
	if v := i.TaskID; v != nil {
		m.SetTaskID(*v)
	}
	if i.ClearEditRequest {
		m.ClearEditRequest()
	}
	if v := i.EditRequestID; v != nil {
		m.SetEditRequestID(*v)
	}
	if i.ClearWorkShift {
		m.ClearWorkShift()
	}
	if v := i.WorkShiftID; v != nil {
		m.SetWorkShiftID(*v)
	}
}

// SetInput applies the change-set in the UpdateWorkshiftInput on the WorkshiftUpdate builder.
func (c *WorkshiftUpdate) SetInput(i UpdateWorkshiftInput) *WorkshiftUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateWorkshiftInput on the WorkshiftUpdateOne builder.
func (c *WorkshiftUpdateOne) SetInput(i UpdateWorkshiftInput) *WorkshiftUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
