// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mazza/ent/company"
	"mazza/ent/predicate"
	"mazza/ent/worktag"
	"mazza/ent/worktask"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorktagUpdate is the builder for updating Worktag entities.
type WorktagUpdate struct {
	config
	hooks    []Hook
	mutation *WorktagMutation
}

// Where appends a list predicates to the WorktagUpdate builder.
func (wu *WorktagUpdate) Where(ps ...predicate.Worktag) *WorktagUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetUpdatedAt sets the "updatedAt" field.
func (wu *WorktagUpdate) SetUpdatedAt(t time.Time) *WorktagUpdate {
	wu.mutation.SetUpdatedAt(t)
	return wu
}

// SetDeletedAt sets the "deletedAt" field.
func (wu *WorktagUpdate) SetDeletedAt(t time.Time) *WorktagUpdate {
	wu.mutation.SetDeletedAt(t)
	return wu
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (wu *WorktagUpdate) SetNillableDeletedAt(t *time.Time) *WorktagUpdate {
	if t != nil {
		wu.SetDeletedAt(*t)
	}
	return wu
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (wu *WorktagUpdate) ClearDeletedAt() *WorktagUpdate {
	wu.mutation.ClearDeletedAt()
	return wu
}

// SetName sets the "name" field.
func (wu *WorktagUpdate) SetName(s string) *WorktagUpdate {
	wu.mutation.SetName(s)
	return wu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wu *WorktagUpdate) SetNillableName(s *string) *WorktagUpdate {
	if s != nil {
		wu.SetName(*s)
	}
	return wu
}

// SetColor sets the "color" field.
func (wu *WorktagUpdate) SetColor(s string) *WorktagUpdate {
	wu.mutation.SetColor(s)
	return wu
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (wu *WorktagUpdate) SetNillableColor(s *string) *WorktagUpdate {
	if s != nil {
		wu.SetColor(*s)
	}
	return wu
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (wu *WorktagUpdate) SetCompanyID(id int) *WorktagUpdate {
	wu.mutation.SetCompanyID(id)
	return wu
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (wu *WorktagUpdate) SetNillableCompanyID(id *int) *WorktagUpdate {
	if id != nil {
		wu = wu.SetCompanyID(*id)
	}
	return wu
}

// SetCompany sets the "company" edge to the Company entity.
func (wu *WorktagUpdate) SetCompany(c *Company) *WorktagUpdate {
	return wu.SetCompanyID(c.ID)
}

// AddWorkTaskIDs adds the "workTasks" edge to the Worktask entity by IDs.
func (wu *WorktagUpdate) AddWorkTaskIDs(ids ...int) *WorktagUpdate {
	wu.mutation.AddWorkTaskIDs(ids...)
	return wu
}

// AddWorkTasks adds the "workTasks" edges to the Worktask entity.
func (wu *WorktagUpdate) AddWorkTasks(w ...*Worktask) *WorktagUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.AddWorkTaskIDs(ids...)
}

// Mutation returns the WorktagMutation object of the builder.
func (wu *WorktagUpdate) Mutation() *WorktagMutation {
	return wu.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (wu *WorktagUpdate) ClearCompany() *WorktagUpdate {
	wu.mutation.ClearCompany()
	return wu
}

// ClearWorkTasks clears all "workTasks" edges to the Worktask entity.
func (wu *WorktagUpdate) ClearWorkTasks() *WorktagUpdate {
	wu.mutation.ClearWorkTasks()
	return wu
}

// RemoveWorkTaskIDs removes the "workTasks" edge to Worktask entities by IDs.
func (wu *WorktagUpdate) RemoveWorkTaskIDs(ids ...int) *WorktagUpdate {
	wu.mutation.RemoveWorkTaskIDs(ids...)
	return wu
}

// RemoveWorkTasks removes "workTasks" edges to Worktask entities.
func (wu *WorktagUpdate) RemoveWorkTasks(w ...*Worktask) *WorktagUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.RemoveWorkTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WorktagUpdate) Save(ctx context.Context) (int, error) {
	wu.defaults()
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WorktagUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WorktagUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WorktagUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wu *WorktagUpdate) defaults() {
	if _, ok := wu.mutation.UpdatedAt(); !ok {
		v := worktag.UpdateDefaultUpdatedAt()
		wu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wu *WorktagUpdate) check() error {
	if v, ok := wu.mutation.Name(); ok {
		if err := worktag.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Worktag.name": %w`, err)}
		}
	}
	return nil
}

func (wu *WorktagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(worktag.Table, worktag.Columns, sqlgraph.NewFieldSpec(worktag.FieldID, field.TypeInt))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.UpdatedAt(); ok {
		_spec.SetField(worktag.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wu.mutation.DeletedAt(); ok {
		_spec.SetField(worktag.FieldDeletedAt, field.TypeTime, value)
	}
	if wu.mutation.DeletedAtCleared() {
		_spec.ClearField(worktag.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := wu.mutation.Name(); ok {
		_spec.SetField(worktag.FieldName, field.TypeString, value)
	}
	if value, ok := wu.mutation.Color(); ok {
		_spec.SetField(worktag.FieldColor, field.TypeString, value)
	}
	if wu.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   worktag.CompanyTable,
			Columns: []string{worktag.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   worktag.CompanyTable,
			Columns: []string{worktag.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.WorkTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   worktag.WorkTasksTable,
			Columns: worktag.WorkTasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worktask.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedWorkTasksIDs(); len(nodes) > 0 && !wu.mutation.WorkTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   worktag.WorkTasksTable,
			Columns: worktag.WorkTasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worktask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.WorkTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   worktag.WorkTasksTable,
			Columns: worktag.WorkTasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worktask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{worktag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WorktagUpdateOne is the builder for updating a single Worktag entity.
type WorktagUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorktagMutation
}

// SetUpdatedAt sets the "updatedAt" field.
func (wuo *WorktagUpdateOne) SetUpdatedAt(t time.Time) *WorktagUpdateOne {
	wuo.mutation.SetUpdatedAt(t)
	return wuo
}

// SetDeletedAt sets the "deletedAt" field.
func (wuo *WorktagUpdateOne) SetDeletedAt(t time.Time) *WorktagUpdateOne {
	wuo.mutation.SetDeletedAt(t)
	return wuo
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (wuo *WorktagUpdateOne) SetNillableDeletedAt(t *time.Time) *WorktagUpdateOne {
	if t != nil {
		wuo.SetDeletedAt(*t)
	}
	return wuo
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (wuo *WorktagUpdateOne) ClearDeletedAt() *WorktagUpdateOne {
	wuo.mutation.ClearDeletedAt()
	return wuo
}

// SetName sets the "name" field.
func (wuo *WorktagUpdateOne) SetName(s string) *WorktagUpdateOne {
	wuo.mutation.SetName(s)
	return wuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wuo *WorktagUpdateOne) SetNillableName(s *string) *WorktagUpdateOne {
	if s != nil {
		wuo.SetName(*s)
	}
	return wuo
}

// SetColor sets the "color" field.
func (wuo *WorktagUpdateOne) SetColor(s string) *WorktagUpdateOne {
	wuo.mutation.SetColor(s)
	return wuo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (wuo *WorktagUpdateOne) SetNillableColor(s *string) *WorktagUpdateOne {
	if s != nil {
		wuo.SetColor(*s)
	}
	return wuo
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (wuo *WorktagUpdateOne) SetCompanyID(id int) *WorktagUpdateOne {
	wuo.mutation.SetCompanyID(id)
	return wuo
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (wuo *WorktagUpdateOne) SetNillableCompanyID(id *int) *WorktagUpdateOne {
	if id != nil {
		wuo = wuo.SetCompanyID(*id)
	}
	return wuo
}

// SetCompany sets the "company" edge to the Company entity.
func (wuo *WorktagUpdateOne) SetCompany(c *Company) *WorktagUpdateOne {
	return wuo.SetCompanyID(c.ID)
}

// AddWorkTaskIDs adds the "workTasks" edge to the Worktask entity by IDs.
func (wuo *WorktagUpdateOne) AddWorkTaskIDs(ids ...int) *WorktagUpdateOne {
	wuo.mutation.AddWorkTaskIDs(ids...)
	return wuo
}

// AddWorkTasks adds the "workTasks" edges to the Worktask entity.
func (wuo *WorktagUpdateOne) AddWorkTasks(w ...*Worktask) *WorktagUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.AddWorkTaskIDs(ids...)
}

// Mutation returns the WorktagMutation object of the builder.
func (wuo *WorktagUpdateOne) Mutation() *WorktagMutation {
	return wuo.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (wuo *WorktagUpdateOne) ClearCompany() *WorktagUpdateOne {
	wuo.mutation.ClearCompany()
	return wuo
}

// ClearWorkTasks clears all "workTasks" edges to the Worktask entity.
func (wuo *WorktagUpdateOne) ClearWorkTasks() *WorktagUpdateOne {
	wuo.mutation.ClearWorkTasks()
	return wuo
}

// RemoveWorkTaskIDs removes the "workTasks" edge to Worktask entities by IDs.
func (wuo *WorktagUpdateOne) RemoveWorkTaskIDs(ids ...int) *WorktagUpdateOne {
	wuo.mutation.RemoveWorkTaskIDs(ids...)
	return wuo
}

// RemoveWorkTasks removes "workTasks" edges to Worktask entities.
func (wuo *WorktagUpdateOne) RemoveWorkTasks(w ...*Worktask) *WorktagUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.RemoveWorkTaskIDs(ids...)
}

// Where appends a list predicates to the WorktagUpdate builder.
func (wuo *WorktagUpdateOne) Where(ps ...predicate.Worktag) *WorktagUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WorktagUpdateOne) Select(field string, fields ...string) *WorktagUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Worktag entity.
func (wuo *WorktagUpdateOne) Save(ctx context.Context) (*Worktag, error) {
	wuo.defaults()
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WorktagUpdateOne) SaveX(ctx context.Context) *Worktag {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WorktagUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WorktagUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wuo *WorktagUpdateOne) defaults() {
	if _, ok := wuo.mutation.UpdatedAt(); !ok {
		v := worktag.UpdateDefaultUpdatedAt()
		wuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wuo *WorktagUpdateOne) check() error {
	if v, ok := wuo.mutation.Name(); ok {
		if err := worktag.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Worktag.name": %w`, err)}
		}
	}
	return nil
}

func (wuo *WorktagUpdateOne) sqlSave(ctx context.Context) (_node *Worktag, err error) {
	if err := wuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(worktag.Table, worktag.Columns, sqlgraph.NewFieldSpec(worktag.FieldID, field.TypeInt))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Worktag.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, worktag.FieldID)
		for _, f := range fields {
			if !worktag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != worktag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.UpdatedAt(); ok {
		_spec.SetField(worktag.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wuo.mutation.DeletedAt(); ok {
		_spec.SetField(worktag.FieldDeletedAt, field.TypeTime, value)
	}
	if wuo.mutation.DeletedAtCleared() {
		_spec.ClearField(worktag.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := wuo.mutation.Name(); ok {
		_spec.SetField(worktag.FieldName, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Color(); ok {
		_spec.SetField(worktag.FieldColor, field.TypeString, value)
	}
	if wuo.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   worktag.CompanyTable,
			Columns: []string{worktag.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   worktag.CompanyTable,
			Columns: []string{worktag.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.WorkTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   worktag.WorkTasksTable,
			Columns: worktag.WorkTasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worktask.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedWorkTasksIDs(); len(nodes) > 0 && !wuo.mutation.WorkTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   worktag.WorkTasksTable,
			Columns: worktag.WorkTasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worktask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.WorkTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   worktag.WorkTasksTable,
			Columns: worktag.WorkTasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worktask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Worktag{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{worktag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
