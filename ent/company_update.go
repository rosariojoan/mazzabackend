// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mazza/ent/accountingentry"
	"mazza/ent/company"
	"mazza/ent/customer"
	"mazza/ent/employee"
	"mazza/ent/file"
	"mazza/ent/predicate"
	"mazza/ent/product"
	"mazza/ent/supplier"
	"mazza/ent/token"
	"mazza/ent/treasury"
	"mazza/ent/user"
	"mazza/ent/userrole"
	"mazza/ent/workshift"
	"mazza/ent/worktag"
	"mazza/ent/worktask"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CompanyUpdate is the builder for updating Company entities.
type CompanyUpdate struct {
	config
	hooks    []Hook
	mutation *CompanyMutation
}

// Where appends a list predicates to the CompanyUpdate builder.
func (cu *CompanyUpdate) Where(ps ...predicate.Company) *CompanyUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updatedAt" field.
func (cu *CompanyUpdate) SetUpdatedAt(t time.Time) *CompanyUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetDeletedAt sets the "deletedAt" field.
func (cu *CompanyUpdate) SetDeletedAt(t time.Time) *CompanyUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableDeletedAt(t *time.Time) *CompanyUpdate {
	if t != nil {
		cu.SetDeletedAt(*t)
	}
	return cu
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (cu *CompanyUpdate) ClearDeletedAt() *CompanyUpdate {
	cu.mutation.ClearDeletedAt()
	return cu
}

// SetAddress sets the "address" field.
func (cu *CompanyUpdate) SetAddress(s string) *CompanyUpdate {
	cu.mutation.SetAddress(s)
	return cu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableAddress(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetAddress(*s)
	}
	return cu
}

// ClearAddress clears the value of the "address" field.
func (cu *CompanyUpdate) ClearAddress() *CompanyUpdate {
	cu.mutation.ClearAddress()
	return cu
}

// SetBaseCurrency sets the "baseCurrency" field.
func (cu *CompanyUpdate) SetBaseCurrency(s string) *CompanyUpdate {
	cu.mutation.SetBaseCurrency(s)
	return cu
}

// SetNillableBaseCurrency sets the "baseCurrency" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableBaseCurrency(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetBaseCurrency(*s)
	}
	return cu
}

// SetCeoName sets the "ceoName" field.
func (cu *CompanyUpdate) SetCeoName(s string) *CompanyUpdate {
	cu.mutation.SetCeoName(s)
	return cu
}

// SetNillableCeoName sets the "ceoName" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableCeoName(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetCeoName(*s)
	}
	return cu
}

// ClearCeoName clears the value of the "ceoName" field.
func (cu *CompanyUpdate) ClearCeoName() *CompanyUpdate {
	cu.mutation.ClearCeoName()
	return cu
}

// SetCity sets the "city" field.
func (cu *CompanyUpdate) SetCity(s string) *CompanyUpdate {
	cu.mutation.SetCity(s)
	return cu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableCity(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetCity(*s)
	}
	return cu
}

// SetCountry sets the "country" field.
func (cu *CompanyUpdate) SetCountry(s string) *CompanyUpdate {
	cu.mutation.SetCountry(s)
	return cu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableCountry(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetCountry(*s)
	}
	return cu
}

// SetEstablishedAt sets the "establishedAt" field.
func (cu *CompanyUpdate) SetEstablishedAt(t time.Time) *CompanyUpdate {
	cu.mutation.SetEstablishedAt(t)
	return cu
}

// SetNillableEstablishedAt sets the "establishedAt" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableEstablishedAt(t *time.Time) *CompanyUpdate {
	if t != nil {
		cu.SetEstablishedAt(*t)
	}
	return cu
}

// SetDescription sets the "description" field.
func (cu *CompanyUpdate) SetDescription(s string) *CompanyUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableDescription(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// ClearDescription clears the value of the "description" field.
func (cu *CompanyUpdate) ClearDescription() *CompanyUpdate {
	cu.mutation.ClearDescription()
	return cu
}

// SetEmail sets the "email" field.
func (cu *CompanyUpdate) SetEmail(s string) *CompanyUpdate {
	cu.mutation.SetEmail(s)
	return cu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableEmail(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetEmail(*s)
	}
	return cu
}

// ClearEmail clears the value of the "email" field.
func (cu *CompanyUpdate) ClearEmail() *CompanyUpdate {
	cu.mutation.ClearEmail()
	return cu
}

// SetLastEntryDate sets the "lastEntryDate" field.
func (cu *CompanyUpdate) SetLastEntryDate(t time.Time) *CompanyUpdate {
	cu.mutation.SetLastEntryDate(t)
	return cu
}

// SetNillableLastEntryDate sets the "lastEntryDate" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableLastEntryDate(t *time.Time) *CompanyUpdate {
	if t != nil {
		cu.SetLastEntryDate(*t)
	}
	return cu
}

// SetLastInvoiceNumber sets the "lastInvoiceNumber" field.
func (cu *CompanyUpdate) SetLastInvoiceNumber(i int32) *CompanyUpdate {
	cu.mutation.ResetLastInvoiceNumber()
	cu.mutation.SetLastInvoiceNumber(i)
	return cu
}

// SetNillableLastInvoiceNumber sets the "lastInvoiceNumber" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableLastInvoiceNumber(i *int32) *CompanyUpdate {
	if i != nil {
		cu.SetLastInvoiceNumber(*i)
	}
	return cu
}

// AddLastInvoiceNumber adds i to the "lastInvoiceNumber" field.
func (cu *CompanyUpdate) AddLastInvoiceNumber(i int32) *CompanyUpdate {
	cu.mutation.AddLastInvoiceNumber(i)
	return cu
}

// ClearLastInvoiceNumber clears the value of the "lastInvoiceNumber" field.
func (cu *CompanyUpdate) ClearLastInvoiceNumber() *CompanyUpdate {
	cu.mutation.ClearLastInvoiceNumber()
	return cu
}

// SetLogo sets the "logo" field.
func (cu *CompanyUpdate) SetLogo(s string) *CompanyUpdate {
	cu.mutation.SetLogo(s)
	return cu
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableLogo(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetLogo(*s)
	}
	return cu
}

// ClearLogo clears the value of the "logo" field.
func (cu *CompanyUpdate) ClearLogo() *CompanyUpdate {
	cu.mutation.ClearLogo()
	return cu
}

// SetName sets the "name" field.
func (cu *CompanyUpdate) SetName(s string) *CompanyUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableName(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetNumberOfEmployees sets the "numberOfEmployees" field.
func (cu *CompanyUpdate) SetNumberOfEmployees(i int32) *CompanyUpdate {
	cu.mutation.ResetNumberOfEmployees()
	cu.mutation.SetNumberOfEmployees(i)
	return cu
}

// SetNillableNumberOfEmployees sets the "numberOfEmployees" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableNumberOfEmployees(i *int32) *CompanyUpdate {
	if i != nil {
		cu.SetNumberOfEmployees(*i)
	}
	return cu
}

// AddNumberOfEmployees adds i to the "numberOfEmployees" field.
func (cu *CompanyUpdate) AddNumberOfEmployees(i int32) *CompanyUpdate {
	cu.mutation.AddNumberOfEmployees(i)
	return cu
}

// SetPhone sets the "phone" field.
func (cu *CompanyUpdate) SetPhone(s string) *CompanyUpdate {
	cu.mutation.SetPhone(s)
	return cu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillablePhone(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetPhone(*s)
	}
	return cu
}

// ClearPhone clears the value of the "phone" field.
func (cu *CompanyUpdate) ClearPhone() *CompanyUpdate {
	cu.mutation.ClearPhone()
	return cu
}

// SetSector sets the "sector" field.
func (cu *CompanyUpdate) SetSector(s string) *CompanyUpdate {
	cu.mutation.SetSector(s)
	return cu
}

// SetNillableSector sets the "sector" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableSector(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetSector(*s)
	}
	return cu
}

// ClearSector clears the value of the "sector" field.
func (cu *CompanyUpdate) ClearSector() *CompanyUpdate {
	cu.mutation.ClearSector()
	return cu
}

// SetTaxId sets the "taxId" field.
func (cu *CompanyUpdate) SetTaxId(s string) *CompanyUpdate {
	cu.mutation.SetTaxId(s)
	return cu
}

// SetNillableTaxId sets the "taxId" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableTaxId(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetTaxId(*s)
	}
	return cu
}

// SetVatRate sets the "vatRate" field.
func (cu *CompanyUpdate) SetVatRate(f float64) *CompanyUpdate {
	cu.mutation.ResetVatRate()
	cu.mutation.SetVatRate(f)
	return cu
}

// SetNillableVatRate sets the "vatRate" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableVatRate(f *float64) *CompanyUpdate {
	if f != nil {
		cu.SetVatRate(*f)
	}
	return cu
}

// AddVatRate adds f to the "vatRate" field.
func (cu *CompanyUpdate) AddVatRate(f float64) *CompanyUpdate {
	cu.mutation.AddVatRate(f)
	return cu
}

// SetWebsite sets the "website" field.
func (cu *CompanyUpdate) SetWebsite(s string) *CompanyUpdate {
	cu.mutation.SetWebsite(s)
	return cu
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableWebsite(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetWebsite(*s)
	}
	return cu
}

// ClearWebsite clears the value of the "website" field.
func (cu *CompanyUpdate) ClearWebsite() *CompanyUpdate {
	cu.mutation.ClearWebsite()
	return cu
}

// AddAvailableRoleIDs adds the "availableRoles" edge to the UserRole entity by IDs.
func (cu *CompanyUpdate) AddAvailableRoleIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddAvailableRoleIDs(ids...)
	return cu
}

// AddAvailableRoles adds the "availableRoles" edges to the UserRole entity.
func (cu *CompanyUpdate) AddAvailableRoles(u ...*UserRole) *CompanyUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.AddAvailableRoleIDs(ids...)
}

// AddAccountingEntryIDs adds the "accountingEntries" edge to the AccountingEntry entity by IDs.
func (cu *CompanyUpdate) AddAccountingEntryIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddAccountingEntryIDs(ids...)
	return cu
}

// AddAccountingEntries adds the "accountingEntries" edges to the AccountingEntry entity.
func (cu *CompanyUpdate) AddAccountingEntries(a ...*AccountingEntry) *CompanyUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.AddAccountingEntryIDs(ids...)
}

// AddCustomerIDs adds the "customers" edge to the Customer entity by IDs.
func (cu *CompanyUpdate) AddCustomerIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddCustomerIDs(ids...)
	return cu
}

// AddCustomers adds the "customers" edges to the Customer entity.
func (cu *CompanyUpdate) AddCustomers(c ...*Customer) *CompanyUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCustomerIDs(ids...)
}

// AddEmployeeIDs adds the "employees" edge to the Employee entity by IDs.
func (cu *CompanyUpdate) AddEmployeeIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddEmployeeIDs(ids...)
	return cu
}

// AddEmployees adds the "employees" edges to the Employee entity.
func (cu *CompanyUpdate) AddEmployees(e ...*Employee) *CompanyUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.AddEmployeeIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (cu *CompanyUpdate) AddFileIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddFileIDs(ids...)
	return cu
}

// AddFiles adds the "files" edges to the File entity.
func (cu *CompanyUpdate) AddFiles(f ...*File) *CompanyUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cu.AddFileIDs(ids...)
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (cu *CompanyUpdate) AddProductIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddProductIDs(ids...)
	return cu
}

// AddProducts adds the "products" edges to the Product entity.
func (cu *CompanyUpdate) AddProducts(p ...*Product) *CompanyUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddProductIDs(ids...)
}

// AddSupplierIDs adds the "suppliers" edge to the Supplier entity by IDs.
func (cu *CompanyUpdate) AddSupplierIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddSupplierIDs(ids...)
	return cu
}

// AddSuppliers adds the "suppliers" edges to the Supplier entity.
func (cu *CompanyUpdate) AddSuppliers(s ...*Supplier) *CompanyUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.AddSupplierIDs(ids...)
}

// AddTokenIDs adds the "tokens" edge to the Token entity by IDs.
func (cu *CompanyUpdate) AddTokenIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddTokenIDs(ids...)
	return cu
}

// AddTokens adds the "tokens" edges to the Token entity.
func (cu *CompanyUpdate) AddTokens(t ...*Token) *CompanyUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.AddTokenIDs(ids...)
}

// AddTreasuryIDs adds the "treasuries" edge to the Treasury entity by IDs.
func (cu *CompanyUpdate) AddTreasuryIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddTreasuryIDs(ids...)
	return cu
}

// AddTreasuries adds the "treasuries" edges to the Treasury entity.
func (cu *CompanyUpdate) AddTreasuries(t ...*Treasury) *CompanyUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.AddTreasuryIDs(ids...)
}

// AddWorkShiftIDs adds the "workShifts" edge to the Workshift entity by IDs.
func (cu *CompanyUpdate) AddWorkShiftIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddWorkShiftIDs(ids...)
	return cu
}

// AddWorkShifts adds the "workShifts" edges to the Workshift entity.
func (cu *CompanyUpdate) AddWorkShifts(w ...*Workshift) *CompanyUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cu.AddWorkShiftIDs(ids...)
}

// AddWorkTaskIDs adds the "workTasks" edge to the Worktask entity by IDs.
func (cu *CompanyUpdate) AddWorkTaskIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddWorkTaskIDs(ids...)
	return cu
}

// AddWorkTasks adds the "workTasks" edges to the Worktask entity.
func (cu *CompanyUpdate) AddWorkTasks(w ...*Worktask) *CompanyUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cu.AddWorkTaskIDs(ids...)
}

// AddWorkTagIDs adds the "workTags" edge to the Worktag entity by IDs.
func (cu *CompanyUpdate) AddWorkTagIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddWorkTagIDs(ids...)
	return cu
}

// AddWorkTags adds the "workTags" edges to the Worktag entity.
func (cu *CompanyUpdate) AddWorkTags(w ...*Worktag) *CompanyUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cu.AddWorkTagIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (cu *CompanyUpdate) AddUserIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddUserIDs(ids...)
	return cu
}

// AddUsers adds the "users" edges to the User entity.
func (cu *CompanyUpdate) AddUsers(u ...*User) *CompanyUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.AddUserIDs(ids...)
}

// AddDaughterCompanyIDs adds the "daughterCompanies" edge to the Company entity by IDs.
func (cu *CompanyUpdate) AddDaughterCompanyIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddDaughterCompanyIDs(ids...)
	return cu
}

// AddDaughterCompanies adds the "daughterCompanies" edges to the Company entity.
func (cu *CompanyUpdate) AddDaughterCompanies(c ...*Company) *CompanyUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddDaughterCompanyIDs(ids...)
}

// SetParentCompanyID sets the "parentCompany" edge to the Company entity by ID.
func (cu *CompanyUpdate) SetParentCompanyID(id int) *CompanyUpdate {
	cu.mutation.SetParentCompanyID(id)
	return cu
}

// SetNillableParentCompanyID sets the "parentCompany" edge to the Company entity by ID if the given value is not nil.
func (cu *CompanyUpdate) SetNillableParentCompanyID(id *int) *CompanyUpdate {
	if id != nil {
		cu = cu.SetParentCompanyID(*id)
	}
	return cu
}

// SetParentCompany sets the "parentCompany" edge to the Company entity.
func (cu *CompanyUpdate) SetParentCompany(c *Company) *CompanyUpdate {
	return cu.SetParentCompanyID(c.ID)
}

// Mutation returns the CompanyMutation object of the builder.
func (cu *CompanyUpdate) Mutation() *CompanyMutation {
	return cu.mutation
}

// ClearAvailableRoles clears all "availableRoles" edges to the UserRole entity.
func (cu *CompanyUpdate) ClearAvailableRoles() *CompanyUpdate {
	cu.mutation.ClearAvailableRoles()
	return cu
}

// RemoveAvailableRoleIDs removes the "availableRoles" edge to UserRole entities by IDs.
func (cu *CompanyUpdate) RemoveAvailableRoleIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveAvailableRoleIDs(ids...)
	return cu
}

// RemoveAvailableRoles removes "availableRoles" edges to UserRole entities.
func (cu *CompanyUpdate) RemoveAvailableRoles(u ...*UserRole) *CompanyUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.RemoveAvailableRoleIDs(ids...)
}

// ClearAccountingEntries clears all "accountingEntries" edges to the AccountingEntry entity.
func (cu *CompanyUpdate) ClearAccountingEntries() *CompanyUpdate {
	cu.mutation.ClearAccountingEntries()
	return cu
}

// RemoveAccountingEntryIDs removes the "accountingEntries" edge to AccountingEntry entities by IDs.
func (cu *CompanyUpdate) RemoveAccountingEntryIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveAccountingEntryIDs(ids...)
	return cu
}

// RemoveAccountingEntries removes "accountingEntries" edges to AccountingEntry entities.
func (cu *CompanyUpdate) RemoveAccountingEntries(a ...*AccountingEntry) *CompanyUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.RemoveAccountingEntryIDs(ids...)
}

// ClearCustomers clears all "customers" edges to the Customer entity.
func (cu *CompanyUpdate) ClearCustomers() *CompanyUpdate {
	cu.mutation.ClearCustomers()
	return cu
}

// RemoveCustomerIDs removes the "customers" edge to Customer entities by IDs.
func (cu *CompanyUpdate) RemoveCustomerIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveCustomerIDs(ids...)
	return cu
}

// RemoveCustomers removes "customers" edges to Customer entities.
func (cu *CompanyUpdate) RemoveCustomers(c ...*Customer) *CompanyUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCustomerIDs(ids...)
}

// ClearEmployees clears all "employees" edges to the Employee entity.
func (cu *CompanyUpdate) ClearEmployees() *CompanyUpdate {
	cu.mutation.ClearEmployees()
	return cu
}

// RemoveEmployeeIDs removes the "employees" edge to Employee entities by IDs.
func (cu *CompanyUpdate) RemoveEmployeeIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveEmployeeIDs(ids...)
	return cu
}

// RemoveEmployees removes "employees" edges to Employee entities.
func (cu *CompanyUpdate) RemoveEmployees(e ...*Employee) *CompanyUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.RemoveEmployeeIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (cu *CompanyUpdate) ClearFiles() *CompanyUpdate {
	cu.mutation.ClearFiles()
	return cu
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (cu *CompanyUpdate) RemoveFileIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveFileIDs(ids...)
	return cu
}

// RemoveFiles removes "files" edges to File entities.
func (cu *CompanyUpdate) RemoveFiles(f ...*File) *CompanyUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cu.RemoveFileIDs(ids...)
}

// ClearProducts clears all "products" edges to the Product entity.
func (cu *CompanyUpdate) ClearProducts() *CompanyUpdate {
	cu.mutation.ClearProducts()
	return cu
}

// RemoveProductIDs removes the "products" edge to Product entities by IDs.
func (cu *CompanyUpdate) RemoveProductIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveProductIDs(ids...)
	return cu
}

// RemoveProducts removes "products" edges to Product entities.
func (cu *CompanyUpdate) RemoveProducts(p ...*Product) *CompanyUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemoveProductIDs(ids...)
}

// ClearSuppliers clears all "suppliers" edges to the Supplier entity.
func (cu *CompanyUpdate) ClearSuppliers() *CompanyUpdate {
	cu.mutation.ClearSuppliers()
	return cu
}

// RemoveSupplierIDs removes the "suppliers" edge to Supplier entities by IDs.
func (cu *CompanyUpdate) RemoveSupplierIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveSupplierIDs(ids...)
	return cu
}

// RemoveSuppliers removes "suppliers" edges to Supplier entities.
func (cu *CompanyUpdate) RemoveSuppliers(s ...*Supplier) *CompanyUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.RemoveSupplierIDs(ids...)
}

// ClearTokens clears all "tokens" edges to the Token entity.
func (cu *CompanyUpdate) ClearTokens() *CompanyUpdate {
	cu.mutation.ClearTokens()
	return cu
}

// RemoveTokenIDs removes the "tokens" edge to Token entities by IDs.
func (cu *CompanyUpdate) RemoveTokenIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveTokenIDs(ids...)
	return cu
}

// RemoveTokens removes "tokens" edges to Token entities.
func (cu *CompanyUpdate) RemoveTokens(t ...*Token) *CompanyUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.RemoveTokenIDs(ids...)
}

// ClearTreasuries clears all "treasuries" edges to the Treasury entity.
func (cu *CompanyUpdate) ClearTreasuries() *CompanyUpdate {
	cu.mutation.ClearTreasuries()
	return cu
}

// RemoveTreasuryIDs removes the "treasuries" edge to Treasury entities by IDs.
func (cu *CompanyUpdate) RemoveTreasuryIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveTreasuryIDs(ids...)
	return cu
}

// RemoveTreasuries removes "treasuries" edges to Treasury entities.
func (cu *CompanyUpdate) RemoveTreasuries(t ...*Treasury) *CompanyUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.RemoveTreasuryIDs(ids...)
}

// ClearWorkShifts clears all "workShifts" edges to the Workshift entity.
func (cu *CompanyUpdate) ClearWorkShifts() *CompanyUpdate {
	cu.mutation.ClearWorkShifts()
	return cu
}

// RemoveWorkShiftIDs removes the "workShifts" edge to Workshift entities by IDs.
func (cu *CompanyUpdate) RemoveWorkShiftIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveWorkShiftIDs(ids...)
	return cu
}

// RemoveWorkShifts removes "workShifts" edges to Workshift entities.
func (cu *CompanyUpdate) RemoveWorkShifts(w ...*Workshift) *CompanyUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cu.RemoveWorkShiftIDs(ids...)
}

// ClearWorkTasks clears all "workTasks" edges to the Worktask entity.
func (cu *CompanyUpdate) ClearWorkTasks() *CompanyUpdate {
	cu.mutation.ClearWorkTasks()
	return cu
}

// RemoveWorkTaskIDs removes the "workTasks" edge to Worktask entities by IDs.
func (cu *CompanyUpdate) RemoveWorkTaskIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveWorkTaskIDs(ids...)
	return cu
}

// RemoveWorkTasks removes "workTasks" edges to Worktask entities.
func (cu *CompanyUpdate) RemoveWorkTasks(w ...*Worktask) *CompanyUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cu.RemoveWorkTaskIDs(ids...)
}

// ClearWorkTags clears all "workTags" edges to the Worktag entity.
func (cu *CompanyUpdate) ClearWorkTags() *CompanyUpdate {
	cu.mutation.ClearWorkTags()
	return cu
}

// RemoveWorkTagIDs removes the "workTags" edge to Worktag entities by IDs.
func (cu *CompanyUpdate) RemoveWorkTagIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveWorkTagIDs(ids...)
	return cu
}

// RemoveWorkTags removes "workTags" edges to Worktag entities.
func (cu *CompanyUpdate) RemoveWorkTags(w ...*Worktag) *CompanyUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cu.RemoveWorkTagIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (cu *CompanyUpdate) ClearUsers() *CompanyUpdate {
	cu.mutation.ClearUsers()
	return cu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (cu *CompanyUpdate) RemoveUserIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveUserIDs(ids...)
	return cu
}

// RemoveUsers removes "users" edges to User entities.
func (cu *CompanyUpdate) RemoveUsers(u ...*User) *CompanyUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.RemoveUserIDs(ids...)
}

// ClearDaughterCompanies clears all "daughterCompanies" edges to the Company entity.
func (cu *CompanyUpdate) ClearDaughterCompanies() *CompanyUpdate {
	cu.mutation.ClearDaughterCompanies()
	return cu
}

// RemoveDaughterCompanyIDs removes the "daughterCompanies" edge to Company entities by IDs.
func (cu *CompanyUpdate) RemoveDaughterCompanyIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveDaughterCompanyIDs(ids...)
	return cu
}

// RemoveDaughterCompanies removes "daughterCompanies" edges to Company entities.
func (cu *CompanyUpdate) RemoveDaughterCompanies(c ...*Company) *CompanyUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveDaughterCompanyIDs(ids...)
}

// ClearParentCompany clears the "parentCompany" edge to the Company entity.
func (cu *CompanyUpdate) ClearParentCompany() *CompanyUpdate {
	cu.mutation.ClearParentCompany()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CompanyUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CompanyUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CompanyUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CompanyUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CompanyUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := company.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CompanyUpdate) check() error {
	if v, ok := cu.mutation.LastInvoiceNumber(); ok {
		if err := company.LastInvoiceNumberValidator(v); err != nil {
			return &ValidationError{Name: "lastInvoiceNumber", err: fmt.Errorf(`ent: validator failed for field "Company.lastInvoiceNumber": %w`, err)}
		}
	}
	if v, ok := cu.mutation.NumberOfEmployees(); ok {
		if err := company.NumberOfEmployeesValidator(v); err != nil {
			return &ValidationError{Name: "numberOfEmployees", err: fmt.Errorf(`ent: validator failed for field "Company.numberOfEmployees": %w`, err)}
		}
	}
	return nil
}

func (cu *CompanyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(company.Table, company.Columns, sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(company.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.SetField(company.FieldDeletedAt, field.TypeTime, value)
	}
	if cu.mutation.DeletedAtCleared() {
		_spec.ClearField(company.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.Address(); ok {
		_spec.SetField(company.FieldAddress, field.TypeString, value)
	}
	if cu.mutation.AddressCleared() {
		_spec.ClearField(company.FieldAddress, field.TypeString)
	}
	if value, ok := cu.mutation.BaseCurrency(); ok {
		_spec.SetField(company.FieldBaseCurrency, field.TypeString, value)
	}
	if value, ok := cu.mutation.CeoName(); ok {
		_spec.SetField(company.FieldCeoName, field.TypeString, value)
	}
	if cu.mutation.CeoNameCleared() {
		_spec.ClearField(company.FieldCeoName, field.TypeString)
	}
	if value, ok := cu.mutation.City(); ok {
		_spec.SetField(company.FieldCity, field.TypeString, value)
	}
	if value, ok := cu.mutation.Country(); ok {
		_spec.SetField(company.FieldCountry, field.TypeString, value)
	}
	if value, ok := cu.mutation.EstablishedAt(); ok {
		_spec.SetField(company.FieldEstablishedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(company.FieldDescription, field.TypeString, value)
	}
	if cu.mutation.DescriptionCleared() {
		_spec.ClearField(company.FieldDescription, field.TypeString)
	}
	if value, ok := cu.mutation.Email(); ok {
		_spec.SetField(company.FieldEmail, field.TypeString, value)
	}
	if cu.mutation.EmailCleared() {
		_spec.ClearField(company.FieldEmail, field.TypeString)
	}
	if value, ok := cu.mutation.LastEntryDate(); ok {
		_spec.SetField(company.FieldLastEntryDate, field.TypeTime, value)
	}
	if value, ok := cu.mutation.LastInvoiceNumber(); ok {
		_spec.SetField(company.FieldLastInvoiceNumber, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.AddedLastInvoiceNumber(); ok {
		_spec.AddField(company.FieldLastInvoiceNumber, field.TypeInt32, value)
	}
	if cu.mutation.LastInvoiceNumberCleared() {
		_spec.ClearField(company.FieldLastInvoiceNumber, field.TypeInt32)
	}
	if value, ok := cu.mutation.Logo(); ok {
		_spec.SetField(company.FieldLogo, field.TypeString, value)
	}
	if cu.mutation.LogoCleared() {
		_spec.ClearField(company.FieldLogo, field.TypeString)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(company.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.NumberOfEmployees(); ok {
		_spec.SetField(company.FieldNumberOfEmployees, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.AddedNumberOfEmployees(); ok {
		_spec.AddField(company.FieldNumberOfEmployees, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.Phone(); ok {
		_spec.SetField(company.FieldPhone, field.TypeString, value)
	}
	if cu.mutation.PhoneCleared() {
		_spec.ClearField(company.FieldPhone, field.TypeString)
	}
	if value, ok := cu.mutation.Sector(); ok {
		_spec.SetField(company.FieldSector, field.TypeString, value)
	}
	if cu.mutation.SectorCleared() {
		_spec.ClearField(company.FieldSector, field.TypeString)
	}
	if value, ok := cu.mutation.TaxId(); ok {
		_spec.SetField(company.FieldTaxId, field.TypeString, value)
	}
	if value, ok := cu.mutation.VatRate(); ok {
		_spec.SetField(company.FieldVatRate, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.AddedVatRate(); ok {
		_spec.AddField(company.FieldVatRate, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.Website(); ok {
		_spec.SetField(company.FieldWebsite, field.TypeString, value)
	}
	if cu.mutation.WebsiteCleared() {
		_spec.ClearField(company.FieldWebsite, field.TypeString)
	}
	if cu.mutation.AvailableRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.AvailableRolesTable,
			Columns: []string{company.AvailableRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedAvailableRolesIDs(); len(nodes) > 0 && !cu.mutation.AvailableRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.AvailableRolesTable,
			Columns: []string{company.AvailableRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AvailableRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.AvailableRolesTable,
			Columns: []string{company.AvailableRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.AccountingEntriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.AccountingEntriesTable,
			Columns: []string{company.AccountingEntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountingentry.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedAccountingEntriesIDs(); len(nodes) > 0 && !cu.mutation.AccountingEntriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.AccountingEntriesTable,
			Columns: []string{company.AccountingEntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountingentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AccountingEntriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.AccountingEntriesTable,
			Columns: []string{company.AccountingEntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountingentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.CustomersTable,
			Columns: []string{company.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCustomersIDs(); len(nodes) > 0 && !cu.mutation.CustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.CustomersTable,
			Columns: []string{company.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CustomersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.CustomersTable,
			Columns: []string{company.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.EmployeesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.EmployeesTable,
			Columns: []string{company.EmployeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedEmployeesIDs(); len(nodes) > 0 && !cu.mutation.EmployeesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.EmployeesTable,
			Columns: []string{company.EmployeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.EmployeesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.EmployeesTable,
			Columns: []string{company.EmployeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.FilesTable,
			Columns: []string{company.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedFilesIDs(); len(nodes) > 0 && !cu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.FilesTable,
			Columns: []string{company.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.FilesTable,
			Columns: []string{company.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.ProductsTable,
			Columns: []string{company.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedProductsIDs(); len(nodes) > 0 && !cu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.ProductsTable,
			Columns: []string{company.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.ProductsTable,
			Columns: []string{company.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.SuppliersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.SuppliersTable,
			Columns: []string{company.SuppliersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(supplier.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedSuppliersIDs(); len(nodes) > 0 && !cu.mutation.SuppliersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.SuppliersTable,
			Columns: []string{company.SuppliersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(supplier.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.SuppliersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.SuppliersTable,
			Columns: []string{company.SuppliersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(supplier.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TokensTable,
			Columns: []string{company.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedTokensIDs(); len(nodes) > 0 && !cu.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TokensTable,
			Columns: []string{company.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TokensTable,
			Columns: []string{company.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.TreasuriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TreasuriesTable,
			Columns: []string{company.TreasuriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(treasury.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedTreasuriesIDs(); len(nodes) > 0 && !cu.mutation.TreasuriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TreasuriesTable,
			Columns: []string{company.TreasuriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(treasury.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TreasuriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TreasuriesTable,
			Columns: []string{company.TreasuriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(treasury.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.WorkShiftsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.WorkShiftsTable,
			Columns: []string{company.WorkShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedWorkShiftsIDs(); len(nodes) > 0 && !cu.mutation.WorkShiftsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.WorkShiftsTable,
			Columns: []string{company.WorkShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.WorkShiftsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.WorkShiftsTable,
			Columns: []string{company.WorkShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.WorkTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.WorkTasksTable,
			Columns: []string{company.WorkTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worktask.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedWorkTasksIDs(); len(nodes) > 0 && !cu.mutation.WorkTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.WorkTasksTable,
			Columns: []string{company.WorkTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worktask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.WorkTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.WorkTasksTable,
			Columns: []string{company.WorkTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worktask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.WorkTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.WorkTagsTable,
			Columns: []string{company.WorkTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worktag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedWorkTagsIDs(); len(nodes) > 0 && !cu.mutation.WorkTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.WorkTagsTable,
			Columns: []string{company.WorkTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worktag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.WorkTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.WorkTagsTable,
			Columns: []string{company.WorkTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worktag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   company.UsersTable,
			Columns: company.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !cu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   company.UsersTable,
			Columns: company.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   company.UsersTable,
			Columns: company.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.DaughterCompaniesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.DaughterCompaniesTable,
			Columns: []string{company.DaughterCompaniesColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedDaughterCompaniesIDs(); len(nodes) > 0 && !cu.mutation.DaughterCompaniesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.DaughterCompaniesTable,
			Columns: []string{company.DaughterCompaniesColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DaughterCompaniesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.DaughterCompaniesTable,
			Columns: []string{company.DaughterCompaniesColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ParentCompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   company.ParentCompanyTable,
			Columns: []string{company.ParentCompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ParentCompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   company.ParentCompanyTable,
			Columns: []string{company.ParentCompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{company.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CompanyUpdateOne is the builder for updating a single Company entity.
type CompanyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CompanyMutation
}

// SetUpdatedAt sets the "updatedAt" field.
func (cuo *CompanyUpdateOne) SetUpdatedAt(t time.Time) *CompanyUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetDeletedAt sets the "deletedAt" field.
func (cuo *CompanyUpdateOne) SetDeletedAt(t time.Time) *CompanyUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableDeletedAt(t *time.Time) *CompanyUpdateOne {
	if t != nil {
		cuo.SetDeletedAt(*t)
	}
	return cuo
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (cuo *CompanyUpdateOne) ClearDeletedAt() *CompanyUpdateOne {
	cuo.mutation.ClearDeletedAt()
	return cuo
}

// SetAddress sets the "address" field.
func (cuo *CompanyUpdateOne) SetAddress(s string) *CompanyUpdateOne {
	cuo.mutation.SetAddress(s)
	return cuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableAddress(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetAddress(*s)
	}
	return cuo
}

// ClearAddress clears the value of the "address" field.
func (cuo *CompanyUpdateOne) ClearAddress() *CompanyUpdateOne {
	cuo.mutation.ClearAddress()
	return cuo
}

// SetBaseCurrency sets the "baseCurrency" field.
func (cuo *CompanyUpdateOne) SetBaseCurrency(s string) *CompanyUpdateOne {
	cuo.mutation.SetBaseCurrency(s)
	return cuo
}

// SetNillableBaseCurrency sets the "baseCurrency" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableBaseCurrency(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetBaseCurrency(*s)
	}
	return cuo
}

// SetCeoName sets the "ceoName" field.
func (cuo *CompanyUpdateOne) SetCeoName(s string) *CompanyUpdateOne {
	cuo.mutation.SetCeoName(s)
	return cuo
}

// SetNillableCeoName sets the "ceoName" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableCeoName(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetCeoName(*s)
	}
	return cuo
}

// ClearCeoName clears the value of the "ceoName" field.
func (cuo *CompanyUpdateOne) ClearCeoName() *CompanyUpdateOne {
	cuo.mutation.ClearCeoName()
	return cuo
}

// SetCity sets the "city" field.
func (cuo *CompanyUpdateOne) SetCity(s string) *CompanyUpdateOne {
	cuo.mutation.SetCity(s)
	return cuo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableCity(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetCity(*s)
	}
	return cuo
}

// SetCountry sets the "country" field.
func (cuo *CompanyUpdateOne) SetCountry(s string) *CompanyUpdateOne {
	cuo.mutation.SetCountry(s)
	return cuo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableCountry(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetCountry(*s)
	}
	return cuo
}

// SetEstablishedAt sets the "establishedAt" field.
func (cuo *CompanyUpdateOne) SetEstablishedAt(t time.Time) *CompanyUpdateOne {
	cuo.mutation.SetEstablishedAt(t)
	return cuo
}

// SetNillableEstablishedAt sets the "establishedAt" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableEstablishedAt(t *time.Time) *CompanyUpdateOne {
	if t != nil {
		cuo.SetEstablishedAt(*t)
	}
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *CompanyUpdateOne) SetDescription(s string) *CompanyUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableDescription(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// ClearDescription clears the value of the "description" field.
func (cuo *CompanyUpdateOne) ClearDescription() *CompanyUpdateOne {
	cuo.mutation.ClearDescription()
	return cuo
}

// SetEmail sets the "email" field.
func (cuo *CompanyUpdateOne) SetEmail(s string) *CompanyUpdateOne {
	cuo.mutation.SetEmail(s)
	return cuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableEmail(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetEmail(*s)
	}
	return cuo
}

// ClearEmail clears the value of the "email" field.
func (cuo *CompanyUpdateOne) ClearEmail() *CompanyUpdateOne {
	cuo.mutation.ClearEmail()
	return cuo
}

// SetLastEntryDate sets the "lastEntryDate" field.
func (cuo *CompanyUpdateOne) SetLastEntryDate(t time.Time) *CompanyUpdateOne {
	cuo.mutation.SetLastEntryDate(t)
	return cuo
}

// SetNillableLastEntryDate sets the "lastEntryDate" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableLastEntryDate(t *time.Time) *CompanyUpdateOne {
	if t != nil {
		cuo.SetLastEntryDate(*t)
	}
	return cuo
}

// SetLastInvoiceNumber sets the "lastInvoiceNumber" field.
func (cuo *CompanyUpdateOne) SetLastInvoiceNumber(i int32) *CompanyUpdateOne {
	cuo.mutation.ResetLastInvoiceNumber()
	cuo.mutation.SetLastInvoiceNumber(i)
	return cuo
}

// SetNillableLastInvoiceNumber sets the "lastInvoiceNumber" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableLastInvoiceNumber(i *int32) *CompanyUpdateOne {
	if i != nil {
		cuo.SetLastInvoiceNumber(*i)
	}
	return cuo
}

// AddLastInvoiceNumber adds i to the "lastInvoiceNumber" field.
func (cuo *CompanyUpdateOne) AddLastInvoiceNumber(i int32) *CompanyUpdateOne {
	cuo.mutation.AddLastInvoiceNumber(i)
	return cuo
}

// ClearLastInvoiceNumber clears the value of the "lastInvoiceNumber" field.
func (cuo *CompanyUpdateOne) ClearLastInvoiceNumber() *CompanyUpdateOne {
	cuo.mutation.ClearLastInvoiceNumber()
	return cuo
}

// SetLogo sets the "logo" field.
func (cuo *CompanyUpdateOne) SetLogo(s string) *CompanyUpdateOne {
	cuo.mutation.SetLogo(s)
	return cuo
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableLogo(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetLogo(*s)
	}
	return cuo
}

// ClearLogo clears the value of the "logo" field.
func (cuo *CompanyUpdateOne) ClearLogo() *CompanyUpdateOne {
	cuo.mutation.ClearLogo()
	return cuo
}

// SetName sets the "name" field.
func (cuo *CompanyUpdateOne) SetName(s string) *CompanyUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableName(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetNumberOfEmployees sets the "numberOfEmployees" field.
func (cuo *CompanyUpdateOne) SetNumberOfEmployees(i int32) *CompanyUpdateOne {
	cuo.mutation.ResetNumberOfEmployees()
	cuo.mutation.SetNumberOfEmployees(i)
	return cuo
}

// SetNillableNumberOfEmployees sets the "numberOfEmployees" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableNumberOfEmployees(i *int32) *CompanyUpdateOne {
	if i != nil {
		cuo.SetNumberOfEmployees(*i)
	}
	return cuo
}

// AddNumberOfEmployees adds i to the "numberOfEmployees" field.
func (cuo *CompanyUpdateOne) AddNumberOfEmployees(i int32) *CompanyUpdateOne {
	cuo.mutation.AddNumberOfEmployees(i)
	return cuo
}

// SetPhone sets the "phone" field.
func (cuo *CompanyUpdateOne) SetPhone(s string) *CompanyUpdateOne {
	cuo.mutation.SetPhone(s)
	return cuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillablePhone(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetPhone(*s)
	}
	return cuo
}

// ClearPhone clears the value of the "phone" field.
func (cuo *CompanyUpdateOne) ClearPhone() *CompanyUpdateOne {
	cuo.mutation.ClearPhone()
	return cuo
}

// SetSector sets the "sector" field.
func (cuo *CompanyUpdateOne) SetSector(s string) *CompanyUpdateOne {
	cuo.mutation.SetSector(s)
	return cuo
}

// SetNillableSector sets the "sector" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableSector(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetSector(*s)
	}
	return cuo
}

// ClearSector clears the value of the "sector" field.
func (cuo *CompanyUpdateOne) ClearSector() *CompanyUpdateOne {
	cuo.mutation.ClearSector()
	return cuo
}

// SetTaxId sets the "taxId" field.
func (cuo *CompanyUpdateOne) SetTaxId(s string) *CompanyUpdateOne {
	cuo.mutation.SetTaxId(s)
	return cuo
}

// SetNillableTaxId sets the "taxId" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableTaxId(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetTaxId(*s)
	}
	return cuo
}

// SetVatRate sets the "vatRate" field.
func (cuo *CompanyUpdateOne) SetVatRate(f float64) *CompanyUpdateOne {
	cuo.mutation.ResetVatRate()
	cuo.mutation.SetVatRate(f)
	return cuo
}

// SetNillableVatRate sets the "vatRate" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableVatRate(f *float64) *CompanyUpdateOne {
	if f != nil {
		cuo.SetVatRate(*f)
	}
	return cuo
}

// AddVatRate adds f to the "vatRate" field.
func (cuo *CompanyUpdateOne) AddVatRate(f float64) *CompanyUpdateOne {
	cuo.mutation.AddVatRate(f)
	return cuo
}

// SetWebsite sets the "website" field.
func (cuo *CompanyUpdateOne) SetWebsite(s string) *CompanyUpdateOne {
	cuo.mutation.SetWebsite(s)
	return cuo
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableWebsite(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetWebsite(*s)
	}
	return cuo
}

// ClearWebsite clears the value of the "website" field.
func (cuo *CompanyUpdateOne) ClearWebsite() *CompanyUpdateOne {
	cuo.mutation.ClearWebsite()
	return cuo
}

// AddAvailableRoleIDs adds the "availableRoles" edge to the UserRole entity by IDs.
func (cuo *CompanyUpdateOne) AddAvailableRoleIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddAvailableRoleIDs(ids...)
	return cuo
}

// AddAvailableRoles adds the "availableRoles" edges to the UserRole entity.
func (cuo *CompanyUpdateOne) AddAvailableRoles(u ...*UserRole) *CompanyUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.AddAvailableRoleIDs(ids...)
}

// AddAccountingEntryIDs adds the "accountingEntries" edge to the AccountingEntry entity by IDs.
func (cuo *CompanyUpdateOne) AddAccountingEntryIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddAccountingEntryIDs(ids...)
	return cuo
}

// AddAccountingEntries adds the "accountingEntries" edges to the AccountingEntry entity.
func (cuo *CompanyUpdateOne) AddAccountingEntries(a ...*AccountingEntry) *CompanyUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.AddAccountingEntryIDs(ids...)
}

// AddCustomerIDs adds the "customers" edge to the Customer entity by IDs.
func (cuo *CompanyUpdateOne) AddCustomerIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddCustomerIDs(ids...)
	return cuo
}

// AddCustomers adds the "customers" edges to the Customer entity.
func (cuo *CompanyUpdateOne) AddCustomers(c ...*Customer) *CompanyUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCustomerIDs(ids...)
}

// AddEmployeeIDs adds the "employees" edge to the Employee entity by IDs.
func (cuo *CompanyUpdateOne) AddEmployeeIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddEmployeeIDs(ids...)
	return cuo
}

// AddEmployees adds the "employees" edges to the Employee entity.
func (cuo *CompanyUpdateOne) AddEmployees(e ...*Employee) *CompanyUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.AddEmployeeIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (cuo *CompanyUpdateOne) AddFileIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddFileIDs(ids...)
	return cuo
}

// AddFiles adds the "files" edges to the File entity.
func (cuo *CompanyUpdateOne) AddFiles(f ...*File) *CompanyUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cuo.AddFileIDs(ids...)
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (cuo *CompanyUpdateOne) AddProductIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddProductIDs(ids...)
	return cuo
}

// AddProducts adds the "products" edges to the Product entity.
func (cuo *CompanyUpdateOne) AddProducts(p ...*Product) *CompanyUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddProductIDs(ids...)
}

// AddSupplierIDs adds the "suppliers" edge to the Supplier entity by IDs.
func (cuo *CompanyUpdateOne) AddSupplierIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddSupplierIDs(ids...)
	return cuo
}

// AddSuppliers adds the "suppliers" edges to the Supplier entity.
func (cuo *CompanyUpdateOne) AddSuppliers(s ...*Supplier) *CompanyUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.AddSupplierIDs(ids...)
}

// AddTokenIDs adds the "tokens" edge to the Token entity by IDs.
func (cuo *CompanyUpdateOne) AddTokenIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddTokenIDs(ids...)
	return cuo
}

// AddTokens adds the "tokens" edges to the Token entity.
func (cuo *CompanyUpdateOne) AddTokens(t ...*Token) *CompanyUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.AddTokenIDs(ids...)
}

// AddTreasuryIDs adds the "treasuries" edge to the Treasury entity by IDs.
func (cuo *CompanyUpdateOne) AddTreasuryIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddTreasuryIDs(ids...)
	return cuo
}

// AddTreasuries adds the "treasuries" edges to the Treasury entity.
func (cuo *CompanyUpdateOne) AddTreasuries(t ...*Treasury) *CompanyUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.AddTreasuryIDs(ids...)
}

// AddWorkShiftIDs adds the "workShifts" edge to the Workshift entity by IDs.
func (cuo *CompanyUpdateOne) AddWorkShiftIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddWorkShiftIDs(ids...)
	return cuo
}

// AddWorkShifts adds the "workShifts" edges to the Workshift entity.
func (cuo *CompanyUpdateOne) AddWorkShifts(w ...*Workshift) *CompanyUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cuo.AddWorkShiftIDs(ids...)
}

// AddWorkTaskIDs adds the "workTasks" edge to the Worktask entity by IDs.
func (cuo *CompanyUpdateOne) AddWorkTaskIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddWorkTaskIDs(ids...)
	return cuo
}

// AddWorkTasks adds the "workTasks" edges to the Worktask entity.
func (cuo *CompanyUpdateOne) AddWorkTasks(w ...*Worktask) *CompanyUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cuo.AddWorkTaskIDs(ids...)
}

// AddWorkTagIDs adds the "workTags" edge to the Worktag entity by IDs.
func (cuo *CompanyUpdateOne) AddWorkTagIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddWorkTagIDs(ids...)
	return cuo
}

// AddWorkTags adds the "workTags" edges to the Worktag entity.
func (cuo *CompanyUpdateOne) AddWorkTags(w ...*Worktag) *CompanyUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cuo.AddWorkTagIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (cuo *CompanyUpdateOne) AddUserIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddUserIDs(ids...)
	return cuo
}

// AddUsers adds the "users" edges to the User entity.
func (cuo *CompanyUpdateOne) AddUsers(u ...*User) *CompanyUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.AddUserIDs(ids...)
}

// AddDaughterCompanyIDs adds the "daughterCompanies" edge to the Company entity by IDs.
func (cuo *CompanyUpdateOne) AddDaughterCompanyIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddDaughterCompanyIDs(ids...)
	return cuo
}

// AddDaughterCompanies adds the "daughterCompanies" edges to the Company entity.
func (cuo *CompanyUpdateOne) AddDaughterCompanies(c ...*Company) *CompanyUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddDaughterCompanyIDs(ids...)
}

// SetParentCompanyID sets the "parentCompany" edge to the Company entity by ID.
func (cuo *CompanyUpdateOne) SetParentCompanyID(id int) *CompanyUpdateOne {
	cuo.mutation.SetParentCompanyID(id)
	return cuo
}

// SetNillableParentCompanyID sets the "parentCompany" edge to the Company entity by ID if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableParentCompanyID(id *int) *CompanyUpdateOne {
	if id != nil {
		cuo = cuo.SetParentCompanyID(*id)
	}
	return cuo
}

// SetParentCompany sets the "parentCompany" edge to the Company entity.
func (cuo *CompanyUpdateOne) SetParentCompany(c *Company) *CompanyUpdateOne {
	return cuo.SetParentCompanyID(c.ID)
}

// Mutation returns the CompanyMutation object of the builder.
func (cuo *CompanyUpdateOne) Mutation() *CompanyMutation {
	return cuo.mutation
}

// ClearAvailableRoles clears all "availableRoles" edges to the UserRole entity.
func (cuo *CompanyUpdateOne) ClearAvailableRoles() *CompanyUpdateOne {
	cuo.mutation.ClearAvailableRoles()
	return cuo
}

// RemoveAvailableRoleIDs removes the "availableRoles" edge to UserRole entities by IDs.
func (cuo *CompanyUpdateOne) RemoveAvailableRoleIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveAvailableRoleIDs(ids...)
	return cuo
}

// RemoveAvailableRoles removes "availableRoles" edges to UserRole entities.
func (cuo *CompanyUpdateOne) RemoveAvailableRoles(u ...*UserRole) *CompanyUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.RemoveAvailableRoleIDs(ids...)
}

// ClearAccountingEntries clears all "accountingEntries" edges to the AccountingEntry entity.
func (cuo *CompanyUpdateOne) ClearAccountingEntries() *CompanyUpdateOne {
	cuo.mutation.ClearAccountingEntries()
	return cuo
}

// RemoveAccountingEntryIDs removes the "accountingEntries" edge to AccountingEntry entities by IDs.
func (cuo *CompanyUpdateOne) RemoveAccountingEntryIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveAccountingEntryIDs(ids...)
	return cuo
}

// RemoveAccountingEntries removes "accountingEntries" edges to AccountingEntry entities.
func (cuo *CompanyUpdateOne) RemoveAccountingEntries(a ...*AccountingEntry) *CompanyUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.RemoveAccountingEntryIDs(ids...)
}

// ClearCustomers clears all "customers" edges to the Customer entity.
func (cuo *CompanyUpdateOne) ClearCustomers() *CompanyUpdateOne {
	cuo.mutation.ClearCustomers()
	return cuo
}

// RemoveCustomerIDs removes the "customers" edge to Customer entities by IDs.
func (cuo *CompanyUpdateOne) RemoveCustomerIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveCustomerIDs(ids...)
	return cuo
}

// RemoveCustomers removes "customers" edges to Customer entities.
func (cuo *CompanyUpdateOne) RemoveCustomers(c ...*Customer) *CompanyUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCustomerIDs(ids...)
}

// ClearEmployees clears all "employees" edges to the Employee entity.
func (cuo *CompanyUpdateOne) ClearEmployees() *CompanyUpdateOne {
	cuo.mutation.ClearEmployees()
	return cuo
}

// RemoveEmployeeIDs removes the "employees" edge to Employee entities by IDs.
func (cuo *CompanyUpdateOne) RemoveEmployeeIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveEmployeeIDs(ids...)
	return cuo
}

// RemoveEmployees removes "employees" edges to Employee entities.
func (cuo *CompanyUpdateOne) RemoveEmployees(e ...*Employee) *CompanyUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.RemoveEmployeeIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (cuo *CompanyUpdateOne) ClearFiles() *CompanyUpdateOne {
	cuo.mutation.ClearFiles()
	return cuo
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (cuo *CompanyUpdateOne) RemoveFileIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveFileIDs(ids...)
	return cuo
}

// RemoveFiles removes "files" edges to File entities.
func (cuo *CompanyUpdateOne) RemoveFiles(f ...*File) *CompanyUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cuo.RemoveFileIDs(ids...)
}

// ClearProducts clears all "products" edges to the Product entity.
func (cuo *CompanyUpdateOne) ClearProducts() *CompanyUpdateOne {
	cuo.mutation.ClearProducts()
	return cuo
}

// RemoveProductIDs removes the "products" edge to Product entities by IDs.
func (cuo *CompanyUpdateOne) RemoveProductIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveProductIDs(ids...)
	return cuo
}

// RemoveProducts removes "products" edges to Product entities.
func (cuo *CompanyUpdateOne) RemoveProducts(p ...*Product) *CompanyUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemoveProductIDs(ids...)
}

// ClearSuppliers clears all "suppliers" edges to the Supplier entity.
func (cuo *CompanyUpdateOne) ClearSuppliers() *CompanyUpdateOne {
	cuo.mutation.ClearSuppliers()
	return cuo
}

// RemoveSupplierIDs removes the "suppliers" edge to Supplier entities by IDs.
func (cuo *CompanyUpdateOne) RemoveSupplierIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveSupplierIDs(ids...)
	return cuo
}

// RemoveSuppliers removes "suppliers" edges to Supplier entities.
func (cuo *CompanyUpdateOne) RemoveSuppliers(s ...*Supplier) *CompanyUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.RemoveSupplierIDs(ids...)
}

// ClearTokens clears all "tokens" edges to the Token entity.
func (cuo *CompanyUpdateOne) ClearTokens() *CompanyUpdateOne {
	cuo.mutation.ClearTokens()
	return cuo
}

// RemoveTokenIDs removes the "tokens" edge to Token entities by IDs.
func (cuo *CompanyUpdateOne) RemoveTokenIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveTokenIDs(ids...)
	return cuo
}

// RemoveTokens removes "tokens" edges to Token entities.
func (cuo *CompanyUpdateOne) RemoveTokens(t ...*Token) *CompanyUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.RemoveTokenIDs(ids...)
}

// ClearTreasuries clears all "treasuries" edges to the Treasury entity.
func (cuo *CompanyUpdateOne) ClearTreasuries() *CompanyUpdateOne {
	cuo.mutation.ClearTreasuries()
	return cuo
}

// RemoveTreasuryIDs removes the "treasuries" edge to Treasury entities by IDs.
func (cuo *CompanyUpdateOne) RemoveTreasuryIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveTreasuryIDs(ids...)
	return cuo
}

// RemoveTreasuries removes "treasuries" edges to Treasury entities.
func (cuo *CompanyUpdateOne) RemoveTreasuries(t ...*Treasury) *CompanyUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.RemoveTreasuryIDs(ids...)
}

// ClearWorkShifts clears all "workShifts" edges to the Workshift entity.
func (cuo *CompanyUpdateOne) ClearWorkShifts() *CompanyUpdateOne {
	cuo.mutation.ClearWorkShifts()
	return cuo
}

// RemoveWorkShiftIDs removes the "workShifts" edge to Workshift entities by IDs.
func (cuo *CompanyUpdateOne) RemoveWorkShiftIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveWorkShiftIDs(ids...)
	return cuo
}

// RemoveWorkShifts removes "workShifts" edges to Workshift entities.
func (cuo *CompanyUpdateOne) RemoveWorkShifts(w ...*Workshift) *CompanyUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cuo.RemoveWorkShiftIDs(ids...)
}

// ClearWorkTasks clears all "workTasks" edges to the Worktask entity.
func (cuo *CompanyUpdateOne) ClearWorkTasks() *CompanyUpdateOne {
	cuo.mutation.ClearWorkTasks()
	return cuo
}

// RemoveWorkTaskIDs removes the "workTasks" edge to Worktask entities by IDs.
func (cuo *CompanyUpdateOne) RemoveWorkTaskIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveWorkTaskIDs(ids...)
	return cuo
}

// RemoveWorkTasks removes "workTasks" edges to Worktask entities.
func (cuo *CompanyUpdateOne) RemoveWorkTasks(w ...*Worktask) *CompanyUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cuo.RemoveWorkTaskIDs(ids...)
}

// ClearWorkTags clears all "workTags" edges to the Worktag entity.
func (cuo *CompanyUpdateOne) ClearWorkTags() *CompanyUpdateOne {
	cuo.mutation.ClearWorkTags()
	return cuo
}

// RemoveWorkTagIDs removes the "workTags" edge to Worktag entities by IDs.
func (cuo *CompanyUpdateOne) RemoveWorkTagIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveWorkTagIDs(ids...)
	return cuo
}

// RemoveWorkTags removes "workTags" edges to Worktag entities.
func (cuo *CompanyUpdateOne) RemoveWorkTags(w ...*Worktag) *CompanyUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cuo.RemoveWorkTagIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (cuo *CompanyUpdateOne) ClearUsers() *CompanyUpdateOne {
	cuo.mutation.ClearUsers()
	return cuo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (cuo *CompanyUpdateOne) RemoveUserIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveUserIDs(ids...)
	return cuo
}

// RemoveUsers removes "users" edges to User entities.
func (cuo *CompanyUpdateOne) RemoveUsers(u ...*User) *CompanyUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.RemoveUserIDs(ids...)
}

// ClearDaughterCompanies clears all "daughterCompanies" edges to the Company entity.
func (cuo *CompanyUpdateOne) ClearDaughterCompanies() *CompanyUpdateOne {
	cuo.mutation.ClearDaughterCompanies()
	return cuo
}

// RemoveDaughterCompanyIDs removes the "daughterCompanies" edge to Company entities by IDs.
func (cuo *CompanyUpdateOne) RemoveDaughterCompanyIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveDaughterCompanyIDs(ids...)
	return cuo
}

// RemoveDaughterCompanies removes "daughterCompanies" edges to Company entities.
func (cuo *CompanyUpdateOne) RemoveDaughterCompanies(c ...*Company) *CompanyUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveDaughterCompanyIDs(ids...)
}

// ClearParentCompany clears the "parentCompany" edge to the Company entity.
func (cuo *CompanyUpdateOne) ClearParentCompany() *CompanyUpdateOne {
	cuo.mutation.ClearParentCompany()
	return cuo
}

// Where appends a list predicates to the CompanyUpdate builder.
func (cuo *CompanyUpdateOne) Where(ps ...predicate.Company) *CompanyUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CompanyUpdateOne) Select(field string, fields ...string) *CompanyUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Company entity.
func (cuo *CompanyUpdateOne) Save(ctx context.Context) (*Company, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CompanyUpdateOne) SaveX(ctx context.Context) *Company {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CompanyUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CompanyUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CompanyUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := company.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CompanyUpdateOne) check() error {
	if v, ok := cuo.mutation.LastInvoiceNumber(); ok {
		if err := company.LastInvoiceNumberValidator(v); err != nil {
			return &ValidationError{Name: "lastInvoiceNumber", err: fmt.Errorf(`ent: validator failed for field "Company.lastInvoiceNumber": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.NumberOfEmployees(); ok {
		if err := company.NumberOfEmployeesValidator(v); err != nil {
			return &ValidationError{Name: "numberOfEmployees", err: fmt.Errorf(`ent: validator failed for field "Company.numberOfEmployees": %w`, err)}
		}
	}
	return nil
}

func (cuo *CompanyUpdateOne) sqlSave(ctx context.Context) (_node *Company, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(company.Table, company.Columns, sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Company.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, company.FieldID)
		for _, f := range fields {
			if !company.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != company.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(company.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.SetField(company.FieldDeletedAt, field.TypeTime, value)
	}
	if cuo.mutation.DeletedAtCleared() {
		_spec.ClearField(company.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.Address(); ok {
		_spec.SetField(company.FieldAddress, field.TypeString, value)
	}
	if cuo.mutation.AddressCleared() {
		_spec.ClearField(company.FieldAddress, field.TypeString)
	}
	if value, ok := cuo.mutation.BaseCurrency(); ok {
		_spec.SetField(company.FieldBaseCurrency, field.TypeString, value)
	}
	if value, ok := cuo.mutation.CeoName(); ok {
		_spec.SetField(company.FieldCeoName, field.TypeString, value)
	}
	if cuo.mutation.CeoNameCleared() {
		_spec.ClearField(company.FieldCeoName, field.TypeString)
	}
	if value, ok := cuo.mutation.City(); ok {
		_spec.SetField(company.FieldCity, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Country(); ok {
		_spec.SetField(company.FieldCountry, field.TypeString, value)
	}
	if value, ok := cuo.mutation.EstablishedAt(); ok {
		_spec.SetField(company.FieldEstablishedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(company.FieldDescription, field.TypeString, value)
	}
	if cuo.mutation.DescriptionCleared() {
		_spec.ClearField(company.FieldDescription, field.TypeString)
	}
	if value, ok := cuo.mutation.Email(); ok {
		_spec.SetField(company.FieldEmail, field.TypeString, value)
	}
	if cuo.mutation.EmailCleared() {
		_spec.ClearField(company.FieldEmail, field.TypeString)
	}
	if value, ok := cuo.mutation.LastEntryDate(); ok {
		_spec.SetField(company.FieldLastEntryDate, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.LastInvoiceNumber(); ok {
		_spec.SetField(company.FieldLastInvoiceNumber, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.AddedLastInvoiceNumber(); ok {
		_spec.AddField(company.FieldLastInvoiceNumber, field.TypeInt32, value)
	}
	if cuo.mutation.LastInvoiceNumberCleared() {
		_spec.ClearField(company.FieldLastInvoiceNumber, field.TypeInt32)
	}
	if value, ok := cuo.mutation.Logo(); ok {
		_spec.SetField(company.FieldLogo, field.TypeString, value)
	}
	if cuo.mutation.LogoCleared() {
		_spec.ClearField(company.FieldLogo, field.TypeString)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(company.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.NumberOfEmployees(); ok {
		_spec.SetField(company.FieldNumberOfEmployees, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.AddedNumberOfEmployees(); ok {
		_spec.AddField(company.FieldNumberOfEmployees, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.Phone(); ok {
		_spec.SetField(company.FieldPhone, field.TypeString, value)
	}
	if cuo.mutation.PhoneCleared() {
		_spec.ClearField(company.FieldPhone, field.TypeString)
	}
	if value, ok := cuo.mutation.Sector(); ok {
		_spec.SetField(company.FieldSector, field.TypeString, value)
	}
	if cuo.mutation.SectorCleared() {
		_spec.ClearField(company.FieldSector, field.TypeString)
	}
	if value, ok := cuo.mutation.TaxId(); ok {
		_spec.SetField(company.FieldTaxId, field.TypeString, value)
	}
	if value, ok := cuo.mutation.VatRate(); ok {
		_spec.SetField(company.FieldVatRate, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.AddedVatRate(); ok {
		_spec.AddField(company.FieldVatRate, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.Website(); ok {
		_spec.SetField(company.FieldWebsite, field.TypeString, value)
	}
	if cuo.mutation.WebsiteCleared() {
		_spec.ClearField(company.FieldWebsite, field.TypeString)
	}
	if cuo.mutation.AvailableRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.AvailableRolesTable,
			Columns: []string{company.AvailableRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedAvailableRolesIDs(); len(nodes) > 0 && !cuo.mutation.AvailableRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.AvailableRolesTable,
			Columns: []string{company.AvailableRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AvailableRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.AvailableRolesTable,
			Columns: []string{company.AvailableRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.AccountingEntriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.AccountingEntriesTable,
			Columns: []string{company.AccountingEntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountingentry.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedAccountingEntriesIDs(); len(nodes) > 0 && !cuo.mutation.AccountingEntriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.AccountingEntriesTable,
			Columns: []string{company.AccountingEntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountingentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AccountingEntriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.AccountingEntriesTable,
			Columns: []string{company.AccountingEntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountingentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.CustomersTable,
			Columns: []string{company.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCustomersIDs(); len(nodes) > 0 && !cuo.mutation.CustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.CustomersTable,
			Columns: []string{company.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CustomersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.CustomersTable,
			Columns: []string{company.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.EmployeesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.EmployeesTable,
			Columns: []string{company.EmployeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedEmployeesIDs(); len(nodes) > 0 && !cuo.mutation.EmployeesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.EmployeesTable,
			Columns: []string{company.EmployeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.EmployeesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.EmployeesTable,
			Columns: []string{company.EmployeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.FilesTable,
			Columns: []string{company.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedFilesIDs(); len(nodes) > 0 && !cuo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.FilesTable,
			Columns: []string{company.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.FilesTable,
			Columns: []string{company.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.ProductsTable,
			Columns: []string{company.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedProductsIDs(); len(nodes) > 0 && !cuo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.ProductsTable,
			Columns: []string{company.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.ProductsTable,
			Columns: []string{company.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.SuppliersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.SuppliersTable,
			Columns: []string{company.SuppliersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(supplier.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedSuppliersIDs(); len(nodes) > 0 && !cuo.mutation.SuppliersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.SuppliersTable,
			Columns: []string{company.SuppliersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(supplier.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.SuppliersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.SuppliersTable,
			Columns: []string{company.SuppliersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(supplier.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TokensTable,
			Columns: []string{company.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedTokensIDs(); len(nodes) > 0 && !cuo.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TokensTable,
			Columns: []string{company.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TokensTable,
			Columns: []string{company.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.TreasuriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TreasuriesTable,
			Columns: []string{company.TreasuriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(treasury.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedTreasuriesIDs(); len(nodes) > 0 && !cuo.mutation.TreasuriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TreasuriesTable,
			Columns: []string{company.TreasuriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(treasury.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TreasuriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TreasuriesTable,
			Columns: []string{company.TreasuriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(treasury.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.WorkShiftsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.WorkShiftsTable,
			Columns: []string{company.WorkShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedWorkShiftsIDs(); len(nodes) > 0 && !cuo.mutation.WorkShiftsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.WorkShiftsTable,
			Columns: []string{company.WorkShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.WorkShiftsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.WorkShiftsTable,
			Columns: []string{company.WorkShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workshift.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.WorkTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.WorkTasksTable,
			Columns: []string{company.WorkTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worktask.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedWorkTasksIDs(); len(nodes) > 0 && !cuo.mutation.WorkTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.WorkTasksTable,
			Columns: []string{company.WorkTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worktask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.WorkTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.WorkTasksTable,
			Columns: []string{company.WorkTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worktask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.WorkTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.WorkTagsTable,
			Columns: []string{company.WorkTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worktag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedWorkTagsIDs(); len(nodes) > 0 && !cuo.mutation.WorkTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.WorkTagsTable,
			Columns: []string{company.WorkTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worktag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.WorkTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.WorkTagsTable,
			Columns: []string{company.WorkTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worktag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   company.UsersTable,
			Columns: company.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !cuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   company.UsersTable,
			Columns: company.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   company.UsersTable,
			Columns: company.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.DaughterCompaniesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.DaughterCompaniesTable,
			Columns: []string{company.DaughterCompaniesColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedDaughterCompaniesIDs(); len(nodes) > 0 && !cuo.mutation.DaughterCompaniesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.DaughterCompaniesTable,
			Columns: []string{company.DaughterCompaniesColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DaughterCompaniesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.DaughterCompaniesTable,
			Columns: []string{company.DaughterCompaniesColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ParentCompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   company.ParentCompanyTable,
			Columns: []string{company.ParentCompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ParentCompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   company.ParentCompanyTable,
			Columns: []string{company.ParentCompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Company{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{company.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
