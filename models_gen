// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package mazza

import (
	"fmt"
	"io"
	"mazza/ent/generated"
	"strconv"
	"time"
)

type EntryItem struct {
	Account     string  `json:"account"`
	AccountType string  `json:"accountType"`
	Amount      float64 `json:"amount"`
	IsDebit     bool    `json:"isDebit"`
	Label       string  `json:"label"`
}

type EntryProductInput struct {
	ID       int     `json:"id"`
	Amount   float64 `json:"amount"`
	Quantity int     `json:"quantity"`
}

type EntrySupplierInput struct {
	ID      int     `json:"id"`
	Amount  float64 `json:"amount"`
	DaysDue int     `json:"daysDue"`
}

type EntryTreasuryInput struct {
	ID     int     `json:"id"`
	Amount float64 `json:"amount"`
}

type Invoice struct {
	Date            string           `json:"date"`
	Filename        string           `json:"filename"`
	Keywords        string           `json:"keywords"`
	Number          string           `json:"number"`
	PaymentDetails  *PaymentDetails  `json:"paymentDetails"`
	Title           string           `json:"title"`
	IssuerDetails   *InvoiceIssuer   `json:"issuerDetails"`
	CustomerDetails *InvoiceCustomer `json:"customerDetails"`
	Body            [][]string       `json:"body"`
	Totals          *InvoiceTotals   `json:"totals"`
}

type InvoiceCustomer struct {
	Name    string  `json:"name"`
	TaxID   *string `json:"taxID,omitempty"`
	Address *string `json:"address,omitempty"`
	City    *string `json:"city,omitempty"`
	Country *string `json:"country,omitempty"`
	Phone   *string `json:"phone,omitempty"`
	Email   *string `json:"email,omitempty"`
}

type InvoiceIssuer struct {
	Name    string  `json:"name"`
	TaxID   string  `json:"taxID"`
	Address string  `json:"address"`
	City    *string `json:"city,omitempty"`
	Country *string `json:"country,omitempty"`
	Phone   *string `json:"phone,omitempty"`
	Email   *string `json:"email,omitempty"`
}

type InvoiceTotals struct {
	Subtotal string `json:"subtotal"`
	VatRate  string `json:"vatRate"`
	Vat      string `json:"vat"`
	Total    string `json:"total"`
}

type LoginInput struct {
	Username string `json:"username"`
	Password string `json:"password"`
	FcmToken string `json:"fcmToken"`
}

type LoginOutput struct {
	User         *generated.User      `json:"user"`
	CompanyID    int                  `json:"companyId"`
	Companies    []*generated.Company `json:"companies"`
	AccessToken  string               `json:"accessToken"`
	RefreshToken string               `json:"refreshToken"`
	TTL          int                  `json:"ttl"`
}

type PaymentDetails struct {
	BankName      *string `json:"bankName,omitempty"`
	AccountNumber *string `json:"accountNumber,omitempty"`
	Iban          *string `json:"iban,omitempty"`
	DueDate       *string `json:"dueDate,omitempty"`
}

type PurchaseRegistrationInput struct {
	Main                  []*EntryItem          `json:"main"`
	Counterpart           []*EntryItem          `json:"counterpart"`
	Cash                  []*EntryTreasuryInput `json:"cash,omitempty"`
	Supplier              *EntrySupplierInput   `json:"supplier"`
	Date                  time.Time             `json:"date"`
	Description           *string               `json:"description,omitempty"`
	OperationType         PurchaseOperationType `json:"operationType"`
	Products              []*EntryProductInput  `json:"products"`
	TotalTransactionValue float64               `json:"totalTransactionValue"`
}

type ResetPasswordInput struct {
	Token    string `json:"token"`
	Password string `json:"password"`
}

type SignupInput struct {
	CompanyInput *generated.CreateCompanyInput `json:"companyInput"`
	UserInput    *generated.CreateUserInput    `json:"userInput"`
}

type WorkShiftAggregationPayload struct {
	Date              string `json:"date"`
	Count             int    `json:"count"`
	DurationInMinutes *int   `json:"durationInMinutes,omitempty"`
	PendingCount      *int   `json:"pendingCount,omitempty"`
}

type InvitedUserSignupInput struct {
	UserInput       *generated.CreateUserInput `json:"userInput"`
	InvitationToken string                     `json:"invitationToken"`
}

type PurchaseOperationType string

const (
	PurchaseOperationTypePurchase       PurchaseOperationType = "PURCHASE"
	PurchaseOperationTypePurchaseReturn PurchaseOperationType = "PURCHASE_RETURN"
)

var AllPurchaseOperationType = []PurchaseOperationType{
	PurchaseOperationTypePurchase,
	PurchaseOperationTypePurchaseReturn,
}

func (e PurchaseOperationType) IsValid() bool {
	switch e {
	case PurchaseOperationTypePurchase, PurchaseOperationTypePurchaseReturn:
		return true
	}
	return false
}

func (e PurchaseOperationType) String() string {
	return string(e)
}

func (e *PurchaseOperationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PurchaseOperationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PurchaseOperationType", str)
	}
	return nil
}

func (e PurchaseOperationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ShiftGroupBy string

const (
	ShiftGroupByApprovedAt ShiftGroupBy = "APPROVED_AT"
	ShiftGroupByClockIn    ShiftGroupBy = "CLOCK_IN"
	ShiftGroupByClockOut   ShiftGroupBy = "CLOCK_OUT"
	ShiftGroupByStatus     ShiftGroupBy = "STATUS"
)

var AllShiftGroupBy = []ShiftGroupBy{
	ShiftGroupByApprovedAt,
	ShiftGroupByClockIn,
	ShiftGroupByClockOut,
	ShiftGroupByStatus,
}

func (e ShiftGroupBy) IsValid() bool {
	switch e {
	case ShiftGroupByApprovedAt, ShiftGroupByClockIn, ShiftGroupByClockOut, ShiftGroupByStatus:
		return true
	}
	return false
}

func (e ShiftGroupBy) String() string {
	return string(e)
}

func (e *ShiftGroupBy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShiftGroupBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShiftGroupBy", str)
	}
	return nil
}

func (e ShiftGroupBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
