package mazza

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.52

import (
	"context"
	"fmt"
	accountingentry "mazza/app/accountingEntry"
	"mazza/ent/generated"
	"mazza/ent/generated/company"
	"mazza/ent/generated/companydocument"
	"mazza/ent/generated/user"
	"mazza/ent/generated/userrole"
	"mazza/ent/utils"
	"mazza/mazza/generated/model"
)

// InitialSetup is the resolver for the initialSetup field.
func (r *mutationResolver) InitialSetup(ctx context.Context, input model.InitialSetupInput) (*string, error) {
	if input.AccountingEntry != nil {
		_, err := accountingentry.RegisterAccountingOperations(ctx, r.client, *input.AccountingEntry)
		if err != nil {
			fmt.Println("InitialSetup RegisterAccountingOperations err:", err)
			return nil, fmt.Errorf("an error occurred")
		}
	}

	user, company, _ := utils.GetSession(&ctx)
	_ = user
	// Make sure that the user is an admin of this company
	// userIsAdmin := ...
	// if !userIsAdmin {
	// return nil, fmt.Error("you do not have privileges for this operation")
	// }
	// input.CompanyInfo.Industry
	_, err := r.client.Company.UpdateOneID(company.ID).
		SetVatRate(input.CompanyInfo.VatRate).
		SetIndustry(input.CompanyInfo.Industry).
		SetIncompleteSetup(true).
		Save(ctx)
	if err != nil {
		fmt.Println("InitialSetup company info update err:", err)
		return nil, fmt.Errorf("an error occurred")
	}

	result := "company info was updated"
	return &result, nil
}

// UploadDocument is the resolver for the uploadDocument field.
func (r *mutationResolver) UploadDocument(ctx context.Context, input generated.CreateCompanyDocumentInput) (*generated.CompanyDocument, error) {
	currentUser, currentCompany, _ := utils.GetSession(&ctx)
	// roles, err := user.AssignedRoles(ctx)

	userIsAdmin, _ := r.client.UserRole.Query().Where(
		userrole.HasUserWith(user.ID(currentUser.ID)),
		userrole.HasCompanyWith(company.ID(currentCompany.ID)),
		userrole.RoleEQ(userrole.RoleAdmin),
	).Exist(ctx)

	builder := r.client.CompanyDocument.Create().
		SetInput(input).SetCompanyID(currentCompany.ID).SetUploadedByID(currentUser.ID)
	if userIsAdmin {
		builder = builder.SetStatus(companydocument.StatusAPPROVED).SetApprovedByID(currentUser.ID)
	} else {
		builder = builder.SetStatus(companydocument.StatusPENDING)
	}

	document, err := builder.Save(ctx)
	if err != nil {
		fmt.Println("UploadDocument err:", err)
		return nil, fmt.Errorf("an error occurred while creating the file")
	}

	return document, nil
}

// UpdateDocument is the resolver for the updateDocument field.
func (r *mutationResolver) UpdateDocument(ctx context.Context, id int, input generated.UpdateCompanyDocumentInput) (*generated.CompanyDocument, error) {
	_, currentCompany, _ := utils.GetSession(&ctx)
	companyFilter := companydocument.HasCompanyWith(company.ID(currentCompany.ID))
	document, err := r.client.CompanyDocument.UpdateOneID(id).Where(companyFilter).
		SetInput(input).
		Save(ctx)
	if err != nil {
		fmt.Println("UpdateDocument err:", err)
		return nil, fmt.Errorf("an error occurred while updating the document")
	}
	return document, nil
}

// DeleteDocuments is the resolver for the deleteDocuments field.
func (r *mutationResolver) DeleteDocuments(ctx context.Context, ids []int) (*string, error) {
	_, currentCompany, _ := utils.GetSession(&ctx)
	companyFilter := companydocument.HasCompanyWith(company.ID(currentCompany.ID))
	n, err := r.client.CompanyDocument.Delete().
		Where(companyFilter, companydocument.IDIn(ids...)).
		Exec(ctx)
	if err != nil {
		fmt.Println("DeleteDocuments err:", err)
		return nil, err
	}

	result := fmt.Sprintf("%d documents were deleted", n)
	return &result, nil
}

// CountDocuments is the resolver for the countDocuments field.
func (r *queryResolver) CountDocuments(ctx context.Context) ([]*model.DocumentCount, error) {
	_, currentCompany, _ := utils.GetSession(&ctx)
	var output []*model.DocumentCount
	companyFilter := companydocument.HasCompanyWith(company.ID(currentCompany.ID))

	err := r.client.CompanyDocument.Query().Where(companyFilter).
		GroupBy(companydocument.FieldCategory).
		Aggregate(generated.Count()).
		Scan(ctx, &output)
	if err != nil {
		fmt.Println("CountDocuments err:", err)
		return nil, err
	}

	return output, nil
}
