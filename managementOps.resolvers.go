package mazza

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.52

import (
	"context"
	"mazza/app/manager/clients"
	"mazza/app/manager/finance"
	"mazza/app/manager/suppliers"
	"mazza/ent/generated"
	"mazza/ent/generated/loan"
	"mazza/ent/utils"
	"mazza/mazza/generated/model"
)

// CreateLoan is the resolver for the createLoan field.
func (r *mutationResolver) CreateLoan(ctx context.Context, input model.CreateLoanInputData) (*generated.Loan, error) {
	return finance.CreateLoan(ctx, r.client, input)
}

// UpdateLoan is the resolver for the updateLoan field.
func (r *mutationResolver) UpdateLoan(ctx context.Context, input model.UpdateLoanInputData) (*generated.Loan, error) {
	return finance.UpdateLoan(ctx, r.client, input)
}

// ClientList is the resolver for the clientList field.
func (r *queryResolver) ClientList(ctx context.Context, top *int) ([]*model.ClientList, error) {
	return clients.GetClientList(ctx, r.client, top)
}

// SupplierList is the resolver for the supplierList field.
func (r *queryResolver) SupplierList(ctx context.Context, top *int) ([]*model.SupplierList, error) {
	return suppliers.GetSupplierList(ctx, r.client, top)
}

// LoanProviderList is the resolver for the loanProviderList field.
func (r *queryResolver) LoanProviderList(ctx context.Context, top *int) ([]*model.LoanProviderList, error) {
	return finance.LoanProviderList(ctx, r.client, top)
}

// GetLoan is the resolver for the getLoan field.
func (r *queryResolver) GetLoan(ctx context.Context, id int) (*generated.Loan, error) {
	_, activeCompany := utils.GetSession(&ctx)
	return activeCompany.QueryLoans().
		Where(loan.ID(id)).
		First(ctx)
}

// AggregateReceivables is the resolver for the aggregateReceivables field.
func (r *queryResolver) AggregateReceivables(ctx context.Context, where *generated.ReceivableWhereInput, groupBy []model.ReceivablesGroupBy) ([]*model.ReceivableAggregationOutput, error) {
	return clients.AggregateReceivables(ctx, r.client, where, groupBy)
}

// AggregatePayables is the resolver for the aggregatePayables field.
func (r *queryResolver) AggregatePayables(ctx context.Context, where *generated.PayableWhereInput, groupBy []model.PayablesGroupBy) ([]*model.PayableAggregationOutput, error) {
	return suppliers.AggregatePayables(ctx, r.client, where, groupBy)
}

// AggregateLoans is the resolver for the aggregateLoans field.
func (r *queryResolver) AggregateLoans(ctx context.Context, where *generated.LoanWhereInput, groupBy []model.LoansGroupBy) ([]*model.LoanAggregationOutput, error) {
	return finance.AggregateLoans(ctx, r.client, where, groupBy)
}

// AccountsReceivableAging is the resolver for the accountsReceivableAging field.
func (r *queryResolver) AccountsReceivableAging(ctx context.Context, name *string) ([]*model.AgingBucket, error) {
	return clients.AccountsReceivableAging(ctx, r.client, name)
}

// AccountsPayableAging is the resolver for the accountsPayableAging field.
func (r *queryResolver) AccountsPayableAging(ctx context.Context, name *string) ([]*model.AgingBucket, error) {
	return suppliers.AccountsPayableAging(ctx, r.client, name)
}

// LoansAging is the resolver for the loansAging field.
func (r *queryResolver) LoansAging(ctx context.Context, name *string) ([]*model.AgingBucket, error) {
	return finance.LoansAging(ctx, r.client, name)
}
